/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateDbaasServicePgRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pgbouncer-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaPgbouncer> pgbouncerSettings;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup-schedule")
    private Optional<? extends CreateDbaasServicePgBackupSchedule> backupSchedule;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variant")
    private Optional<? extends com.exoscale.api.models.components.EnumPgVariant> variant;

    /**
     * Service integrations to be enabled when creating the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrations")
    private Optional<? extends java.util.List<CreateDbaasServicePgIntegrations>> integrations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timescaledb-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaTimescaledb> timescaledbSettings;

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip-filter")
    private Optional<? extends java.util.List<String>> ipFilter;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fork-from-service")
    private Optional<? extends String> forkFromService;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("synchronous-replication")
    private Optional<? extends com.exoscale.api.models.components.EnumPgSynchronousReplication> synchronousReplication;

    /**
     * ISO time of a backup to recover from for services that support arbitrary times
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recovery-backup-time")
    private Optional<? extends String> recoveryBackupTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pglookout-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaPglookout> pglookoutSettings;

    /**
     * Automatic maintenance settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenance")
    private Optional<? extends CreateDbaasServicePgMaintenance> maintenance;

    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admin-username")
    private Optional<? extends String> adminUsername;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends com.exoscale.api.models.components.DbaasPgTargetVersions> version;

    /**
     * Subscription plan
     */
    @JsonProperty("plan")
    private String plan;

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work-mem")
    private Optional<? extends Long> workMem;

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shared-buffers-percentage")
    private Optional<? extends Long> sharedBuffersPercentage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pg-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaPg> pgSettings;

    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admin-password")
    private Optional<? extends String> adminPassword;

    /**
     * Migrate data from existing server
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("migration")
    private Optional<? extends CreateDbaasServicePgMigration> migration;

    public CreateDbaasServicePgRequestBody(
            @JsonProperty("pgbouncer-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaPgbouncer> pgbouncerSettings,
            @JsonProperty("backup-schedule") Optional<? extends CreateDbaasServicePgBackupSchedule> backupSchedule,
            @JsonProperty("variant") Optional<? extends com.exoscale.api.models.components.EnumPgVariant> variant,
            @JsonProperty("integrations") Optional<? extends java.util.List<CreateDbaasServicePgIntegrations>> integrations,
            @JsonProperty("timescaledb-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaTimescaledb> timescaledbSettings,
            @JsonProperty("ip-filter") Optional<? extends java.util.List<String>> ipFilter,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("fork-from-service") Optional<? extends String> forkFromService,
            @JsonProperty("synchronous-replication") Optional<? extends com.exoscale.api.models.components.EnumPgSynchronousReplication> synchronousReplication,
            @JsonProperty("recovery-backup-time") Optional<? extends String> recoveryBackupTime,
            @JsonProperty("pglookout-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaPglookout> pglookoutSettings,
            @JsonProperty("maintenance") Optional<? extends CreateDbaasServicePgMaintenance> maintenance,
            @JsonProperty("admin-username") Optional<? extends String> adminUsername,
            @JsonProperty("version") Optional<? extends com.exoscale.api.models.components.DbaasPgTargetVersions> version,
            @JsonProperty("plan") String plan,
            @JsonProperty("work-mem") Optional<? extends Long> workMem,
            @JsonProperty("shared-buffers-percentage") Optional<? extends Long> sharedBuffersPercentage,
            @JsonProperty("pg-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaPg> pgSettings,
            @JsonProperty("admin-password") Optional<? extends String> adminPassword,
            @JsonProperty("migration") Optional<? extends CreateDbaasServicePgMigration> migration) {
        Utils.checkNotNull(pgbouncerSettings, "pgbouncerSettings");
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        Utils.checkNotNull(variant, "variant");
        Utils.checkNotNull(integrations, "integrations");
        Utils.checkNotNull(timescaledbSettings, "timescaledbSettings");
        Utils.checkNotNull(ipFilter, "ipFilter");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(forkFromService, "forkFromService");
        Utils.checkNotNull(synchronousReplication, "synchronousReplication");
        Utils.checkNotNull(recoveryBackupTime, "recoveryBackupTime");
        Utils.checkNotNull(pglookoutSettings, "pglookoutSettings");
        Utils.checkNotNull(maintenance, "maintenance");
        Utils.checkNotNull(adminUsername, "adminUsername");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(plan, "plan");
        Utils.checkNotNull(workMem, "workMem");
        Utils.checkNotNull(sharedBuffersPercentage, "sharedBuffersPercentage");
        Utils.checkNotNull(pgSettings, "pgSettings");
        Utils.checkNotNull(adminPassword, "adminPassword");
        Utils.checkNotNull(migration, "migration");
        this.pgbouncerSettings = pgbouncerSettings;
        this.backupSchedule = backupSchedule;
        this.variant = variant;
        this.integrations = integrations;
        this.timescaledbSettings = timescaledbSettings;
        this.ipFilter = ipFilter;
        this.terminationProtection = terminationProtection;
        this.forkFromService = forkFromService;
        this.synchronousReplication = synchronousReplication;
        this.recoveryBackupTime = recoveryBackupTime;
        this.pglookoutSettings = pglookoutSettings;
        this.maintenance = maintenance;
        this.adminUsername = adminUsername;
        this.version = version;
        this.plan = plan;
        this.workMem = workMem;
        this.sharedBuffersPercentage = sharedBuffersPercentage;
        this.pgSettings = pgSettings;
        this.adminPassword = adminPassword;
        this.migration = migration;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaPgbouncer> pgbouncerSettings() {
        return pgbouncerSettings;
    }

    public Optional<? extends CreateDbaasServicePgBackupSchedule> backupSchedule() {
        return backupSchedule;
    }

    public Optional<? extends com.exoscale.api.models.components.EnumPgVariant> variant() {
        return variant;
    }

    /**
     * Service integrations to be enabled when creating the service.
     */
    public Optional<? extends java.util.List<CreateDbaasServicePgIntegrations>> integrations() {
        return integrations;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaTimescaledb> timescaledbSettings() {
        return timescaledbSettings;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public Optional<? extends java.util.List<String>> ipFilter() {
        return ipFilter;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    public Optional<? extends String> forkFromService() {
        return forkFromService;
    }

    public Optional<? extends com.exoscale.api.models.components.EnumPgSynchronousReplication> synchronousReplication() {
        return synchronousReplication;
    }

    /**
     * ISO time of a backup to recover from for services that support arbitrary times
     */
    public Optional<? extends String> recoveryBackupTime() {
        return recoveryBackupTime;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaPglookout> pglookoutSettings() {
        return pglookoutSettings;
    }

    /**
     * Automatic maintenance settings
     */
    public Optional<? extends CreateDbaasServicePgMaintenance> maintenance() {
        return maintenance;
    }

    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     */
    public Optional<? extends String> adminUsername() {
        return adminUsername;
    }

    public Optional<? extends com.exoscale.api.models.components.DbaasPgTargetVersions> version() {
        return version;
    }

    /**
     * Subscription plan
     */
    public String plan() {
        return plan;
    }

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    public Optional<? extends Long> workMem() {
        return workMem;
    }

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     */
    public Optional<? extends Long> sharedBuffersPercentage() {
        return sharedBuffersPercentage;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaPg> pgSettings() {
        return pgSettings;
    }

    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     */
    public Optional<? extends String> adminPassword() {
        return adminPassword;
    }

    /**
     * Migrate data from existing server
     */
    public Optional<? extends CreateDbaasServicePgMigration> migration() {
        return migration;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateDbaasServicePgRequestBody withPgbouncerSettings(com.exoscale.api.models.components.JsonSchemaPgbouncer pgbouncerSettings) {
        Utils.checkNotNull(pgbouncerSettings, "pgbouncerSettings");
        this.pgbouncerSettings = Optional.ofNullable(pgbouncerSettings);
        return this;
    }

    public CreateDbaasServicePgRequestBody withPgbouncerSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaPgbouncer> pgbouncerSettings) {
        Utils.checkNotNull(pgbouncerSettings, "pgbouncerSettings");
        this.pgbouncerSettings = pgbouncerSettings;
        return this;
    }

    public CreateDbaasServicePgRequestBody withBackupSchedule(CreateDbaasServicePgBackupSchedule backupSchedule) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.backupSchedule = Optional.ofNullable(backupSchedule);
        return this;
    }

    public CreateDbaasServicePgRequestBody withBackupSchedule(Optional<? extends CreateDbaasServicePgBackupSchedule> backupSchedule) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.backupSchedule = backupSchedule;
        return this;
    }

    public CreateDbaasServicePgRequestBody withVariant(com.exoscale.api.models.components.EnumPgVariant variant) {
        Utils.checkNotNull(variant, "variant");
        this.variant = Optional.ofNullable(variant);
        return this;
    }

    public CreateDbaasServicePgRequestBody withVariant(Optional<? extends com.exoscale.api.models.components.EnumPgVariant> variant) {
        Utils.checkNotNull(variant, "variant");
        this.variant = variant;
        return this;
    }

    /**
     * Service integrations to be enabled when creating the service.
     */
    public CreateDbaasServicePgRequestBody withIntegrations(java.util.List<CreateDbaasServicePgIntegrations> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = Optional.ofNullable(integrations);
        return this;
    }

    /**
     * Service integrations to be enabled when creating the service.
     */
    public CreateDbaasServicePgRequestBody withIntegrations(Optional<? extends java.util.List<CreateDbaasServicePgIntegrations>> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = integrations;
        return this;
    }

    public CreateDbaasServicePgRequestBody withTimescaledbSettings(com.exoscale.api.models.components.JsonSchemaTimescaledb timescaledbSettings) {
        Utils.checkNotNull(timescaledbSettings, "timescaledbSettings");
        this.timescaledbSettings = Optional.ofNullable(timescaledbSettings);
        return this;
    }

    public CreateDbaasServicePgRequestBody withTimescaledbSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaTimescaledb> timescaledbSettings) {
        Utils.checkNotNull(timescaledbSettings, "timescaledbSettings");
        this.timescaledbSettings = timescaledbSettings;
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public CreateDbaasServicePgRequestBody withIpFilter(java.util.List<String> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = Optional.ofNullable(ipFilter);
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public CreateDbaasServicePgRequestBody withIpFilter(Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = ipFilter;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public CreateDbaasServicePgRequestBody withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public CreateDbaasServicePgRequestBody withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    public CreateDbaasServicePgRequestBody withForkFromService(String forkFromService) {
        Utils.checkNotNull(forkFromService, "forkFromService");
        this.forkFromService = Optional.ofNullable(forkFromService);
        return this;
    }

    public CreateDbaasServicePgRequestBody withForkFromService(Optional<? extends String> forkFromService) {
        Utils.checkNotNull(forkFromService, "forkFromService");
        this.forkFromService = forkFromService;
        return this;
    }

    public CreateDbaasServicePgRequestBody withSynchronousReplication(com.exoscale.api.models.components.EnumPgSynchronousReplication synchronousReplication) {
        Utils.checkNotNull(synchronousReplication, "synchronousReplication");
        this.synchronousReplication = Optional.ofNullable(synchronousReplication);
        return this;
    }

    public CreateDbaasServicePgRequestBody withSynchronousReplication(Optional<? extends com.exoscale.api.models.components.EnumPgSynchronousReplication> synchronousReplication) {
        Utils.checkNotNull(synchronousReplication, "synchronousReplication");
        this.synchronousReplication = synchronousReplication;
        return this;
    }

    /**
     * ISO time of a backup to recover from for services that support arbitrary times
     */
    public CreateDbaasServicePgRequestBody withRecoveryBackupTime(String recoveryBackupTime) {
        Utils.checkNotNull(recoveryBackupTime, "recoveryBackupTime");
        this.recoveryBackupTime = Optional.ofNullable(recoveryBackupTime);
        return this;
    }

    /**
     * ISO time of a backup to recover from for services that support arbitrary times
     */
    public CreateDbaasServicePgRequestBody withRecoveryBackupTime(Optional<? extends String> recoveryBackupTime) {
        Utils.checkNotNull(recoveryBackupTime, "recoveryBackupTime");
        this.recoveryBackupTime = recoveryBackupTime;
        return this;
    }

    public CreateDbaasServicePgRequestBody withPglookoutSettings(com.exoscale.api.models.components.JsonSchemaPglookout pglookoutSettings) {
        Utils.checkNotNull(pglookoutSettings, "pglookoutSettings");
        this.pglookoutSettings = Optional.ofNullable(pglookoutSettings);
        return this;
    }

    public CreateDbaasServicePgRequestBody withPglookoutSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaPglookout> pglookoutSettings) {
        Utils.checkNotNull(pglookoutSettings, "pglookoutSettings");
        this.pglookoutSettings = pglookoutSettings;
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public CreateDbaasServicePgRequestBody withMaintenance(CreateDbaasServicePgMaintenance maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = Optional.ofNullable(maintenance);
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public CreateDbaasServicePgRequestBody withMaintenance(Optional<? extends CreateDbaasServicePgMaintenance> maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = maintenance;
        return this;
    }

    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     */
    public CreateDbaasServicePgRequestBody withAdminUsername(String adminUsername) {
        Utils.checkNotNull(adminUsername, "adminUsername");
        this.adminUsername = Optional.ofNullable(adminUsername);
        return this;
    }

    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     */
    public CreateDbaasServicePgRequestBody withAdminUsername(Optional<? extends String> adminUsername) {
        Utils.checkNotNull(adminUsername, "adminUsername");
        this.adminUsername = adminUsername;
        return this;
    }

    public CreateDbaasServicePgRequestBody withVersion(com.exoscale.api.models.components.DbaasPgTargetVersions version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    public CreateDbaasServicePgRequestBody withVersion(Optional<? extends com.exoscale.api.models.components.DbaasPgTargetVersions> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Subscription plan
     */
    public CreateDbaasServicePgRequestBody withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    public CreateDbaasServicePgRequestBody withWorkMem(long workMem) {
        Utils.checkNotNull(workMem, "workMem");
        this.workMem = Optional.ofNullable(workMem);
        return this;
    }

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    public CreateDbaasServicePgRequestBody withWorkMem(Optional<? extends Long> workMem) {
        Utils.checkNotNull(workMem, "workMem");
        this.workMem = workMem;
        return this;
    }

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     */
    public CreateDbaasServicePgRequestBody withSharedBuffersPercentage(long sharedBuffersPercentage) {
        Utils.checkNotNull(sharedBuffersPercentage, "sharedBuffersPercentage");
        this.sharedBuffersPercentage = Optional.ofNullable(sharedBuffersPercentage);
        return this;
    }

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     */
    public CreateDbaasServicePgRequestBody withSharedBuffersPercentage(Optional<? extends Long> sharedBuffersPercentage) {
        Utils.checkNotNull(sharedBuffersPercentage, "sharedBuffersPercentage");
        this.sharedBuffersPercentage = sharedBuffersPercentage;
        return this;
    }

    public CreateDbaasServicePgRequestBody withPgSettings(com.exoscale.api.models.components.JsonSchemaPg pgSettings) {
        Utils.checkNotNull(pgSettings, "pgSettings");
        this.pgSettings = Optional.ofNullable(pgSettings);
        return this;
    }

    public CreateDbaasServicePgRequestBody withPgSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaPg> pgSettings) {
        Utils.checkNotNull(pgSettings, "pgSettings");
        this.pgSettings = pgSettings;
        return this;
    }

    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     */
    public CreateDbaasServicePgRequestBody withAdminPassword(String adminPassword) {
        Utils.checkNotNull(adminPassword, "adminPassword");
        this.adminPassword = Optional.ofNullable(adminPassword);
        return this;
    }

    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     */
    public CreateDbaasServicePgRequestBody withAdminPassword(Optional<? extends String> adminPassword) {
        Utils.checkNotNull(adminPassword, "adminPassword");
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Migrate data from existing server
     */
    public CreateDbaasServicePgRequestBody withMigration(CreateDbaasServicePgMigration migration) {
        Utils.checkNotNull(migration, "migration");
        this.migration = Optional.ofNullable(migration);
        return this;
    }

    /**
     * Migrate data from existing server
     */
    public CreateDbaasServicePgRequestBody withMigration(Optional<? extends CreateDbaasServicePgMigration> migration) {
        Utils.checkNotNull(migration, "migration");
        this.migration = migration;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDbaasServicePgRequestBody other = (CreateDbaasServicePgRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.pgbouncerSettings, other.pgbouncerSettings) &&
            java.util.Objects.deepEquals(this.backupSchedule, other.backupSchedule) &&
            java.util.Objects.deepEquals(this.variant, other.variant) &&
            java.util.Objects.deepEquals(this.integrations, other.integrations) &&
            java.util.Objects.deepEquals(this.timescaledbSettings, other.timescaledbSettings) &&
            java.util.Objects.deepEquals(this.ipFilter, other.ipFilter) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.forkFromService, other.forkFromService) &&
            java.util.Objects.deepEquals(this.synchronousReplication, other.synchronousReplication) &&
            java.util.Objects.deepEquals(this.recoveryBackupTime, other.recoveryBackupTime) &&
            java.util.Objects.deepEquals(this.pglookoutSettings, other.pglookoutSettings) &&
            java.util.Objects.deepEquals(this.maintenance, other.maintenance) &&
            java.util.Objects.deepEquals(this.adminUsername, other.adminUsername) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.plan, other.plan) &&
            java.util.Objects.deepEquals(this.workMem, other.workMem) &&
            java.util.Objects.deepEquals(this.sharedBuffersPercentage, other.sharedBuffersPercentage) &&
            java.util.Objects.deepEquals(this.pgSettings, other.pgSettings) &&
            java.util.Objects.deepEquals(this.adminPassword, other.adminPassword) &&
            java.util.Objects.deepEquals(this.migration, other.migration);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            pgbouncerSettings,
            backupSchedule,
            variant,
            integrations,
            timescaledbSettings,
            ipFilter,
            terminationProtection,
            forkFromService,
            synchronousReplication,
            recoveryBackupTime,
            pglookoutSettings,
            maintenance,
            adminUsername,
            version,
            plan,
            workMem,
            sharedBuffersPercentage,
            pgSettings,
            adminPassword,
            migration);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDbaasServicePgRequestBody.class,
                "pgbouncerSettings", pgbouncerSettings,
                "backupSchedule", backupSchedule,
                "variant", variant,
                "integrations", integrations,
                "timescaledbSettings", timescaledbSettings,
                "ipFilter", ipFilter,
                "terminationProtection", terminationProtection,
                "forkFromService", forkFromService,
                "synchronousReplication", synchronousReplication,
                "recoveryBackupTime", recoveryBackupTime,
                "pglookoutSettings", pglookoutSettings,
                "maintenance", maintenance,
                "adminUsername", adminUsername,
                "version", version,
                "plan", plan,
                "workMem", workMem,
                "sharedBuffersPercentage", sharedBuffersPercentage,
                "pgSettings", pgSettings,
                "adminPassword", adminPassword,
                "migration", migration);
    }
    
    public final static class Builder {
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaPgbouncer> pgbouncerSettings = Optional.empty();
 
        private Optional<? extends CreateDbaasServicePgBackupSchedule> backupSchedule = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.EnumPgVariant> variant = Optional.empty();
 
        private Optional<? extends java.util.List<CreateDbaasServicePgIntegrations>> integrations = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaTimescaledb> timescaledbSettings = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ipFilter = Optional.empty();
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends String> forkFromService = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.EnumPgSynchronousReplication> synchronousReplication = Optional.empty();
 
        private Optional<? extends String> recoveryBackupTime = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaPglookout> pglookoutSettings = Optional.empty();
 
        private Optional<? extends CreateDbaasServicePgMaintenance> maintenance = Optional.empty();
 
        private Optional<? extends String> adminUsername = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.DbaasPgTargetVersions> version = Optional.empty();
 
        private String plan;
 
        private Optional<? extends Long> workMem = Optional.empty();
 
        private Optional<? extends Long> sharedBuffersPercentage = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaPg> pgSettings = Optional.empty();
 
        private Optional<? extends String> adminPassword = Optional.empty();
 
        private Optional<? extends CreateDbaasServicePgMigration> migration = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder pgbouncerSettings(com.exoscale.api.models.components.JsonSchemaPgbouncer pgbouncerSettings) {
            Utils.checkNotNull(pgbouncerSettings, "pgbouncerSettings");
            this.pgbouncerSettings = Optional.ofNullable(pgbouncerSettings);
            return this;
        }

        public Builder pgbouncerSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaPgbouncer> pgbouncerSettings) {
            Utils.checkNotNull(pgbouncerSettings, "pgbouncerSettings");
            this.pgbouncerSettings = pgbouncerSettings;
            return this;
        }

        public Builder backupSchedule(CreateDbaasServicePgBackupSchedule backupSchedule) {
            Utils.checkNotNull(backupSchedule, "backupSchedule");
            this.backupSchedule = Optional.ofNullable(backupSchedule);
            return this;
        }

        public Builder backupSchedule(Optional<? extends CreateDbaasServicePgBackupSchedule> backupSchedule) {
            Utils.checkNotNull(backupSchedule, "backupSchedule");
            this.backupSchedule = backupSchedule;
            return this;
        }

        public Builder variant(com.exoscale.api.models.components.EnumPgVariant variant) {
            Utils.checkNotNull(variant, "variant");
            this.variant = Optional.ofNullable(variant);
            return this;
        }

        public Builder variant(Optional<? extends com.exoscale.api.models.components.EnumPgVariant> variant) {
            Utils.checkNotNull(variant, "variant");
            this.variant = variant;
            return this;
        }

        /**
         * Service integrations to be enabled when creating the service.
         */
        public Builder integrations(java.util.List<CreateDbaasServicePgIntegrations> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = Optional.ofNullable(integrations);
            return this;
        }

        /**
         * Service integrations to be enabled when creating the service.
         */
        public Builder integrations(Optional<? extends java.util.List<CreateDbaasServicePgIntegrations>> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = integrations;
            return this;
        }

        public Builder timescaledbSettings(com.exoscale.api.models.components.JsonSchemaTimescaledb timescaledbSettings) {
            Utils.checkNotNull(timescaledbSettings, "timescaledbSettings");
            this.timescaledbSettings = Optional.ofNullable(timescaledbSettings);
            return this;
        }

        public Builder timescaledbSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaTimescaledb> timescaledbSettings) {
            Utils.checkNotNull(timescaledbSettings, "timescaledbSettings");
            this.timescaledbSettings = timescaledbSettings;
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(java.util.List<String> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = Optional.ofNullable(ipFilter);
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(Optional<? extends java.util.List<String>> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        public Builder forkFromService(String forkFromService) {
            Utils.checkNotNull(forkFromService, "forkFromService");
            this.forkFromService = Optional.ofNullable(forkFromService);
            return this;
        }

        public Builder forkFromService(Optional<? extends String> forkFromService) {
            Utils.checkNotNull(forkFromService, "forkFromService");
            this.forkFromService = forkFromService;
            return this;
        }

        public Builder synchronousReplication(com.exoscale.api.models.components.EnumPgSynchronousReplication synchronousReplication) {
            Utils.checkNotNull(synchronousReplication, "synchronousReplication");
            this.synchronousReplication = Optional.ofNullable(synchronousReplication);
            return this;
        }

        public Builder synchronousReplication(Optional<? extends com.exoscale.api.models.components.EnumPgSynchronousReplication> synchronousReplication) {
            Utils.checkNotNull(synchronousReplication, "synchronousReplication");
            this.synchronousReplication = synchronousReplication;
            return this;
        }

        /**
         * ISO time of a backup to recover from for services that support arbitrary times
         */
        public Builder recoveryBackupTime(String recoveryBackupTime) {
            Utils.checkNotNull(recoveryBackupTime, "recoveryBackupTime");
            this.recoveryBackupTime = Optional.ofNullable(recoveryBackupTime);
            return this;
        }

        /**
         * ISO time of a backup to recover from for services that support arbitrary times
         */
        public Builder recoveryBackupTime(Optional<? extends String> recoveryBackupTime) {
            Utils.checkNotNull(recoveryBackupTime, "recoveryBackupTime");
            this.recoveryBackupTime = recoveryBackupTime;
            return this;
        }

        public Builder pglookoutSettings(com.exoscale.api.models.components.JsonSchemaPglookout pglookoutSettings) {
            Utils.checkNotNull(pglookoutSettings, "pglookoutSettings");
            this.pglookoutSettings = Optional.ofNullable(pglookoutSettings);
            return this;
        }

        public Builder pglookoutSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaPglookout> pglookoutSettings) {
            Utils.checkNotNull(pglookoutSettings, "pglookoutSettings");
            this.pglookoutSettings = pglookoutSettings;
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(CreateDbaasServicePgMaintenance maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = Optional.ofNullable(maintenance);
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Optional<? extends CreateDbaasServicePgMaintenance> maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Custom username for admin user. This must be set only when a new service is being created.
         */
        public Builder adminUsername(String adminUsername) {
            Utils.checkNotNull(adminUsername, "adminUsername");
            this.adminUsername = Optional.ofNullable(adminUsername);
            return this;
        }

        /**
         * Custom username for admin user. This must be set only when a new service is being created.
         */
        public Builder adminUsername(Optional<? extends String> adminUsername) {
            Utils.checkNotNull(adminUsername, "adminUsername");
            this.adminUsername = adminUsername;
            return this;
        }

        public Builder version(com.exoscale.api.models.components.DbaasPgTargetVersions version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        public Builder version(Optional<? extends com.exoscale.api.models.components.DbaasPgTargetVersions> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }

        /**
         * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
         */
        public Builder workMem(long workMem) {
            Utils.checkNotNull(workMem, "workMem");
            this.workMem = Optional.ofNullable(workMem);
            return this;
        }

        /**
         * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
         */
        public Builder workMem(Optional<? extends Long> workMem) {
            Utils.checkNotNull(workMem, "workMem");
            this.workMem = workMem;
            return this;
        }

        /**
         * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
         */
        public Builder sharedBuffersPercentage(long sharedBuffersPercentage) {
            Utils.checkNotNull(sharedBuffersPercentage, "sharedBuffersPercentage");
            this.sharedBuffersPercentage = Optional.ofNullable(sharedBuffersPercentage);
            return this;
        }

        /**
         * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
         */
        public Builder sharedBuffersPercentage(Optional<? extends Long> sharedBuffersPercentage) {
            Utils.checkNotNull(sharedBuffersPercentage, "sharedBuffersPercentage");
            this.sharedBuffersPercentage = sharedBuffersPercentage;
            return this;
        }

        public Builder pgSettings(com.exoscale.api.models.components.JsonSchemaPg pgSettings) {
            Utils.checkNotNull(pgSettings, "pgSettings");
            this.pgSettings = Optional.ofNullable(pgSettings);
            return this;
        }

        public Builder pgSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaPg> pgSettings) {
            Utils.checkNotNull(pgSettings, "pgSettings");
            this.pgSettings = pgSettings;
            return this;
        }

        /**
         * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
         */
        public Builder adminPassword(String adminPassword) {
            Utils.checkNotNull(adminPassword, "adminPassword");
            this.adminPassword = Optional.ofNullable(adminPassword);
            return this;
        }

        /**
         * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
         */
        public Builder adminPassword(Optional<? extends String> adminPassword) {
            Utils.checkNotNull(adminPassword, "adminPassword");
            this.adminPassword = adminPassword;
            return this;
        }

        /**
         * Migrate data from existing server
         */
        public Builder migration(CreateDbaasServicePgMigration migration) {
            Utils.checkNotNull(migration, "migration");
            this.migration = Optional.ofNullable(migration);
            return this;
        }

        /**
         * Migrate data from existing server
         */
        public Builder migration(Optional<? extends CreateDbaasServicePgMigration> migration) {
            Utils.checkNotNull(migration, "migration");
            this.migration = migration;
            return this;
        }
        
        public CreateDbaasServicePgRequestBody build() {
            return new CreateDbaasServicePgRequestBody(
                pgbouncerSettings,
                backupSchedule,
                variant,
                integrations,
                timescaledbSettings,
                ipFilter,
                terminationProtection,
                forkFromService,
                synchronousReplication,
                recoveryBackupTime,
                pglookoutSettings,
                maintenance,
                adminUsername,
                version,
                plan,
                workMem,
                sharedBuffersPercentage,
                pgSettings,
                adminPassword,
                migration);
        }
    }
}

