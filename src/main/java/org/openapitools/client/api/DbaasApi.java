/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Pair;

import org.openapitools.client.model.CreateDbaasIntegrationRequest;
import org.openapitools.client.model.CreateDbaasKafkaUserRequest;
import org.openapitools.client.model.CreateDbaasMysqlDatabaseRequest;
import org.openapitools.client.model.CreateDbaasMysqlUserRequest;
import org.openapitools.client.model.CreateDbaasPgConnectionPoolRequest;
import org.openapitools.client.model.CreateDbaasPgDatabaseRequest;
import org.openapitools.client.model.CreateDbaasPgUpgradeCheckRequest;
import org.openapitools.client.model.CreateDbaasPostgresUserRequest;
import org.openapitools.client.model.CreateDbaasServiceGrafanaRequest;
import org.openapitools.client.model.CreateDbaasServiceKafkaRequest;
import org.openapitools.client.model.CreateDbaasServiceMysqlRequest;
import org.openapitools.client.model.CreateDbaasServiceOpensearchRequest;
import org.openapitools.client.model.CreateDbaasServicePgRequest;
import org.openapitools.client.model.CreateDbaasServiceRedisRequest;
import org.openapitools.client.model.CreateDbaasTaskMigrationCheckRequest;
import org.openapitools.client.model.DbaasIntegration;
import org.openapitools.client.model.DbaasKafkaAcls;
import org.openapitools.client.model.DbaasKafkaSchemaRegistryAclEntry;
import org.openapitools.client.model.DbaasKafkaTopicAclEntry;
import org.openapitools.client.model.DbaasMigrationStatus;
import org.openapitools.client.model.DbaasOpensearchAclConfig;
import org.openapitools.client.model.DbaasPostgresUsers;
import org.openapitools.client.model.DbaasServiceGrafana;
import org.openapitools.client.model.DbaasServiceKafka;
import org.openapitools.client.model.DbaasServiceLogs;
import org.openapitools.client.model.DbaasServiceMysql;
import org.openapitools.client.model.DbaasServiceOpensearch;
import org.openapitools.client.model.DbaasServicePg;
import org.openapitools.client.model.DbaasServiceRedis;
import org.openapitools.client.model.DbaasServiceType;
import org.openapitools.client.model.DbaasTask;
import org.openapitools.client.model.DbaasUserKafkaSecrets;
import org.openapitools.client.model.DbaasUserMysqlSecrets;
import org.openapitools.client.model.DbaasUserOpensearchSecrets;
import org.openapitools.client.model.DbaasUserPostgresSecrets;
import org.openapitools.client.model.DbaasUserRedisSecrets;
import org.openapitools.client.model.GetDbaasCaCertificate200Response;
import org.openapitools.client.model.GetDbaasServiceLogsRequest;
import org.openapitools.client.model.GetDbaasServiceMetrics200Response;
import org.openapitools.client.model.GetDbaasServiceMetricsRequest;
import org.openapitools.client.model.GetDbaasSettingsGrafana200Response;
import org.openapitools.client.model.GetDbaasSettingsKafka200Response;
import org.openapitools.client.model.GetDbaasSettingsMysql200Response;
import org.openapitools.client.model.GetDbaasSettingsOpensearch200Response;
import org.openapitools.client.model.GetDbaasSettingsPg200Response;
import org.openapitools.client.model.GetDbaasSettingsRedis200Response;
import org.openapitools.client.model.ListDbaasIntegrationSettings200Response;
import org.openapitools.client.model.ListDbaasIntegrationTypes200Response;
import org.openapitools.client.model.ListDbaasServiceTypes200Response;
import org.openapitools.client.model.ListDbaasServices200Response;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.ResetDbaasMysqlUserPasswordRequest;
import org.openapitools.client.model.ResetDbaasOpensearchUserPasswordRequest;
import java.util.UUID;
import org.openapitools.client.model.UpdateDbaasIntegrationRequest;
import org.openapitools.client.model.UpdateDbaasPgConnectionPoolRequest;
import org.openapitools.client.model.UpdateDbaasPostgresAllowReplicationRequest;
import org.openapitools.client.model.UpdateDbaasServiceGrafanaRequest;
import org.openapitools.client.model.UpdateDbaasServiceKafkaRequest;
import org.openapitools.client.model.UpdateDbaasServiceMysqlRequest;
import org.openapitools.client.model.UpdateDbaasServiceOpensearchRequest;
import org.openapitools.client.model.UpdateDbaasServicePgRequest;
import org.openapitools.client.model.UpdateDbaasServiceRedisRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-02T12:56:21.011484+02:00[Europe/Vienna]", comments = "Generator version: 7.4.0")
public class DbaasApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DbaasApi() {
    this(new ApiClient());
  }

  public DbaasApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a new DBaaS integration between two services
   * Create a new DBaaS integration between two services
   * @param createDbaasIntegrationRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasIntegration(CreateDbaasIntegrationRequest createDbaasIntegrationRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasIntegrationWithHttpInfo(createDbaasIntegrationRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a new DBaaS integration between two services
   * Create a new DBaaS integration between two services
   * @param createDbaasIntegrationRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasIntegrationWithHttpInfo(CreateDbaasIntegrationRequest createDbaasIntegrationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasIntegrationRequestBuilder(createDbaasIntegrationRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasIntegration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasIntegrationRequestBuilder(CreateDbaasIntegrationRequest createDbaasIntegrationRequest) throws ApiException {
    // verify the required parameter 'createDbaasIntegrationRequest' is set
    if (createDbaasIntegrationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasIntegrationRequest' when calling createDbaasIntegration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasIntegrationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add a Kafka Schema Registry ACL entry
   * 
   * @param name  (required)
   * @param dbaasKafkaSchemaRegistryAclEntry  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasKafkaSchemaRegistryAclConfig(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(name, dbaasKafkaSchemaRegistryAclEntry);
    return localVarResponse.getData();
  }

  /**
   * Add a Kafka Schema Registry ACL entry
   * 
   * @param name  (required)
   * @param dbaasKafkaSchemaRegistryAclEntry  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasKafkaSchemaRegistryAclConfigRequestBuilder(name, dbaasKafkaSchemaRegistryAclEntry);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasKafkaSchemaRegistryAclConfig", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasKafkaSchemaRegistryAclConfigRequestBuilder(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasKafkaSchemaRegistryAclConfig");
    }
    // verify the required parameter 'dbaasKafkaSchemaRegistryAclEntry' is set
    if (dbaasKafkaSchemaRegistryAclEntry == null) {
      throw new ApiException(400, "Missing the required parameter 'dbaasKafkaSchemaRegistryAclEntry' when calling createDbaasKafkaSchemaRegistryAclConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/schema-registry/acl-config"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(dbaasKafkaSchemaRegistryAclEntry);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add a Kafka topic ACL entry
   * 
   * @param name  (required)
   * @param dbaasKafkaTopicAclEntry  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasKafkaTopicAclConfig(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasKafkaTopicAclConfigWithHttpInfo(name, dbaasKafkaTopicAclEntry);
    return localVarResponse.getData();
  }

  /**
   * Add a Kafka topic ACL entry
   * 
   * @param name  (required)
   * @param dbaasKafkaTopicAclEntry  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasKafkaTopicAclConfigWithHttpInfo(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasKafkaTopicAclConfigRequestBuilder(name, dbaasKafkaTopicAclEntry);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasKafkaTopicAclConfig", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasKafkaTopicAclConfigRequestBuilder(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasKafkaTopicAclConfig");
    }
    // verify the required parameter 'dbaasKafkaTopicAclEntry' is set
    if (dbaasKafkaTopicAclEntry == null) {
      throw new ApiException(400, "Missing the required parameter 'dbaasKafkaTopicAclEntry' when calling createDbaasKafkaTopicAclConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/topic/acl-config"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(dbaasKafkaTopicAclEntry);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Kafka user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasKafkaUser(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasKafkaUserWithHttpInfo(serviceName, createDbaasKafkaUserRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Kafka user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasKafkaUserWithHttpInfo(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasKafkaUserRequestBuilder(serviceName, createDbaasKafkaUserRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasKafkaUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasKafkaUserRequestBuilder(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasKafkaUser");
    }
    // verify the required parameter 'createDbaasKafkaUserRequest' is set
    if (createDbaasKafkaUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasKafkaUserRequest' when calling createDbaasKafkaUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{service-name}/user"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasKafkaUserRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS MySQL database
   * 
   * @param serviceName  (required)
   * @param createDbaasMysqlDatabaseRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasMysqlDatabase(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasMysqlDatabaseWithHttpInfo(serviceName, createDbaasMysqlDatabaseRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS MySQL database
   * 
   * @param serviceName  (required)
   * @param createDbaasMysqlDatabaseRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasMysqlDatabaseWithHttpInfo(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasMysqlDatabaseRequestBuilder(serviceName, createDbaasMysqlDatabaseRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasMysqlDatabase", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasMysqlDatabaseRequestBuilder(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasMysqlDatabase");
    }
    // verify the required parameter 'createDbaasMysqlDatabaseRequest' is set
    if (createDbaasMysqlDatabaseRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasMysqlDatabaseRequest' when calling createDbaasMysqlDatabase");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/database"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasMysqlDatabaseRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param createDbaasMysqlUserRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasMysqlUser(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasMysqlUserWithHttpInfo(serviceName, createDbaasMysqlUserRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param createDbaasMysqlUserRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasMysqlUserWithHttpInfo(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasMysqlUserRequestBuilder(serviceName, createDbaasMysqlUserRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasMysqlUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasMysqlUserRequestBuilder(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasMysqlUser");
    }
    // verify the required parameter 'createDbaasMysqlUserRequest' is set
    if (createDbaasMysqlUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasMysqlUserRequest' when calling createDbaasMysqlUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/user"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasMysqlUserRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasOpensearchUser(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasOpensearchUserWithHttpInfo(serviceName, createDbaasKafkaUserRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasOpensearchUserWithHttpInfo(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasOpensearchUserRequestBuilder(serviceName, createDbaasKafkaUserRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasOpensearchUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasOpensearchUserRequestBuilder(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasOpensearchUser");
    }
    // verify the required parameter 'createDbaasKafkaUserRequest' is set
    if (createDbaasKafkaUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasKafkaUserRequest' when calling createDbaasOpensearchUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{service-name}/user"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasKafkaUserRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param createDbaasPgConnectionPoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasPgConnectionPool(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasPgConnectionPoolWithHttpInfo(serviceName, createDbaasPgConnectionPoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param createDbaasPgConnectionPoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasPgConnectionPoolWithHttpInfo(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasPgConnectionPoolRequestBuilder(serviceName, createDbaasPgConnectionPoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasPgConnectionPool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasPgConnectionPoolRequestBuilder(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasPgConnectionPool");
    }
    // verify the required parameter 'createDbaasPgConnectionPoolRequest' is set
    if (createDbaasPgConnectionPoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasPgConnectionPoolRequest' when calling createDbaasPgConnectionPool");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/connection-pool"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasPgConnectionPoolRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Postgres database
   * 
   * @param serviceName  (required)
   * @param createDbaasPgDatabaseRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasPgDatabase(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasPgDatabaseWithHttpInfo(serviceName, createDbaasPgDatabaseRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Postgres database
   * 
   * @param serviceName  (required)
   * @param createDbaasPgDatabaseRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasPgDatabaseWithHttpInfo(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasPgDatabaseRequestBuilder(serviceName, createDbaasPgDatabaseRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasPgDatabase", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasPgDatabaseRequestBuilder(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasPgDatabase");
    }
    // verify the required parameter 'createDbaasPgDatabaseRequest' is set
    if (createDbaasPgDatabaseRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasPgDatabaseRequest' when calling createDbaasPgDatabase");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/database"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasPgDatabaseRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Check whether you can upgrade Postgres service to a newer version
   * @param service  (required)
   * @param createDbaasPgUpgradeCheckRequest  (required)
   * @return DbaasTask
   * @throws ApiException if fails to make API call
   */
  public DbaasTask createDbaasPgUpgradeCheck(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest) throws ApiException {
    ApiResponse<DbaasTask> localVarResponse = createDbaasPgUpgradeCheckWithHttpInfo(service, createDbaasPgUpgradeCheckRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Check whether you can upgrade Postgres service to a newer version
   * @param service  (required)
   * @param createDbaasPgUpgradeCheckRequest  (required)
   * @return ApiResponse&lt;DbaasTask&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasTask> createDbaasPgUpgradeCheckWithHttpInfo(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasPgUpgradeCheckRequestBuilder(service, createDbaasPgUpgradeCheckRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasPgUpgradeCheck", localVarResponse);
        }
        return new ApiResponse<DbaasTask>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasTask>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasPgUpgradeCheckRequestBuilder(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest) throws ApiException {
    // verify the required parameter 'service' is set
    if (service == null) {
      throw new ApiException(400, "Missing the required parameter 'service' when calling createDbaasPgUpgradeCheck");
    }
    // verify the required parameter 'createDbaasPgUpgradeCheckRequest' is set
    if (createDbaasPgUpgradeCheckRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasPgUpgradeCheckRequest' when calling createDbaasPgUpgradeCheck");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service}/upgrade-check"
        .replace("{service}", ApiClient.urlEncode(service.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasPgUpgradeCheckRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param createDbaasPostgresUserRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasPostgresUser(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasPostgresUserWithHttpInfo(serviceName, createDbaasPostgresUserRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param createDbaasPostgresUserRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasPostgresUserWithHttpInfo(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasPostgresUserRequestBuilder(serviceName, createDbaasPostgresUserRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasPostgresUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasPostgresUserRequestBuilder(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasPostgresUser");
    }
    // verify the required parameter 'createDbaasPostgresUserRequest' is set
    if (createDbaasPostgresUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasPostgresUserRequest' when calling createDbaasPostgresUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/user"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasPostgresUserRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasRedisUser(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasRedisUserWithHttpInfo(serviceName, createDbaasKafkaUserRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasRedisUserWithHttpInfo(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasRedisUserRequestBuilder(serviceName, createDbaasKafkaUserRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasRedisUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasRedisUserRequestBuilder(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasRedisUser");
    }
    // verify the required parameter 'createDbaasKafkaUserRequest' is set
    if (createDbaasKafkaUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasKafkaUserRequest' when calling createDbaasRedisUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{service-name}/user"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasKafkaUserRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a DBaaS Grafana service
   * @param name  (required)
   * @param createDbaasServiceGrafanaRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServiceGrafana(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServiceGrafanaWithHttpInfo(name, createDbaasServiceGrafanaRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create a DBaaS Grafana service
   * @param name  (required)
   * @param createDbaasServiceGrafanaRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServiceGrafanaWithHttpInfo(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServiceGrafanaRequestBuilder(name, createDbaasServiceGrafanaRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServiceGrafana", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServiceGrafanaRequestBuilder(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServiceGrafana");
    }
    // verify the required parameter 'createDbaasServiceGrafanaRequest' is set
    if (createDbaasServiceGrafanaRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServiceGrafanaRequest' when calling createDbaasServiceGrafana");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-grafana/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasServiceGrafanaRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Kafka service
   * Create a DBaaS Kafka service
   * @param name  (required)
   * @param createDbaasServiceKafkaRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServiceKafka(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServiceKafkaWithHttpInfo(name, createDbaasServiceKafkaRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Kafka service
   * Create a DBaaS Kafka service
   * @param name  (required)
   * @param createDbaasServiceKafkaRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServiceKafkaWithHttpInfo(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServiceKafkaRequestBuilder(name, createDbaasServiceKafkaRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServiceKafka", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServiceKafkaRequestBuilder(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServiceKafka");
    }
    // verify the required parameter 'createDbaasServiceKafkaRequest' is set
    if (createDbaasServiceKafkaRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServiceKafkaRequest' when calling createDbaasServiceKafka");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasServiceKafkaRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS MySQL service
   * Create a DBaaS MySQL service
   * @param name  (required)
   * @param createDbaasServiceMysqlRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServiceMysql(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServiceMysqlWithHttpInfo(name, createDbaasServiceMysqlRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS MySQL service
   * Create a DBaaS MySQL service
   * @param name  (required)
   * @param createDbaasServiceMysqlRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServiceMysqlWithHttpInfo(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServiceMysqlRequestBuilder(name, createDbaasServiceMysqlRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServiceMysql", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServiceMysqlRequestBuilder(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServiceMysql");
    }
    // verify the required parameter 'createDbaasServiceMysqlRequest' is set
    if (createDbaasServiceMysqlRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServiceMysqlRequest' when calling createDbaasServiceMysql");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasServiceMysqlRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS OpenSearch service
   * Create a DBaaS OpenSearch service
   * @param name  (required)
   * @param createDbaasServiceOpensearchRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServiceOpensearch(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServiceOpensearchWithHttpInfo(name, createDbaasServiceOpensearchRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS OpenSearch service
   * Create a DBaaS OpenSearch service
   * @param name  (required)
   * @param createDbaasServiceOpensearchRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServiceOpensearchWithHttpInfo(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServiceOpensearchRequestBuilder(name, createDbaasServiceOpensearchRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServiceOpensearch", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServiceOpensearchRequestBuilder(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServiceOpensearch");
    }
    // verify the required parameter 'createDbaasServiceOpensearchRequest' is set
    if (createDbaasServiceOpensearchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServiceOpensearchRequest' when calling createDbaasServiceOpensearch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasServiceOpensearchRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS PostgreSQL service
   * 
   * @param name  (required)
   * @param createDbaasServicePgRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServicePg(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServicePgWithHttpInfo(name, createDbaasServicePgRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS PostgreSQL service
   * 
   * @param name  (required)
   * @param createDbaasServicePgRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServicePgWithHttpInfo(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServicePgRequestBuilder(name, createDbaasServicePgRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServicePg", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServicePgRequestBuilder(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServicePg");
    }
    // verify the required parameter 'createDbaasServicePgRequest' is set
    if (createDbaasServicePgRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServicePgRequest' when calling createDbaasServicePg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasServicePgRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Redis service
   * Create a DBaaS Redis service
   * @param name  (required)
   * @param createDbaasServiceRedisRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServiceRedis(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServiceRedisWithHttpInfo(name, createDbaasServiceRedisRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Redis service
   * Create a DBaaS Redis service
   * @param name  (required)
   * @param createDbaasServiceRedisRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServiceRedisWithHttpInfo(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServiceRedisRequestBuilder(name, createDbaasServiceRedisRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServiceRedis", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServiceRedisRequestBuilder(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServiceRedis");
    }
    // verify the required parameter 'createDbaasServiceRedisRequest' is set
    if (createDbaasServiceRedisRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServiceRedisRequest' when calling createDbaasServiceRedis");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasServiceRedisRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a DBaaS task to check migration
   * @param service  (required)
   * @param createDbaasTaskMigrationCheckRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasTaskMigrationCheck(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasTaskMigrationCheckWithHttpInfo(service, createDbaasTaskMigrationCheckRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create a DBaaS task to check migration
   * @param service  (required)
   * @param createDbaasTaskMigrationCheckRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasTaskMigrationCheckWithHttpInfo(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasTaskMigrationCheckRequestBuilder(service, createDbaasTaskMigrationCheckRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasTaskMigrationCheck", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasTaskMigrationCheckRequestBuilder(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest) throws ApiException {
    // verify the required parameter 'service' is set
    if (service == null) {
      throw new ApiException(400, "Missing the required parameter 'service' when calling createDbaasTaskMigrationCheck");
    }
    // verify the required parameter 'createDbaasTaskMigrationCheckRequest' is set
    if (createDbaasTaskMigrationCheckRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasTaskMigrationCheckRequest' when calling createDbaasTaskMigrationCheck");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-task-migration-check/{service}"
        .replace("{service}", ApiClient.urlEncode(service.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDbaasTaskMigrationCheckRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS Integration
   * Delete a DBaaS Integration
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasIntegration(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasIntegrationWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS Integration
   * Delete a DBaaS Integration
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasIntegrationWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasIntegrationRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasIntegration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasIntegrationRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteDbaasIntegration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Kafka ACL entry
   * 
   * @param name  (required)
   * @param aclId  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasKafkaSchemaRegistryAclConfig(String name, String aclId) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(name, aclId);
    return localVarResponse.getData();
  }

  /**
   * Delete a Kafka ACL entry
   * 
   * @param name  (required)
   * @param aclId  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(String name, String aclId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasKafkaSchemaRegistryAclConfigRequestBuilder(name, aclId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasKafkaSchemaRegistryAclConfig", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasKafkaSchemaRegistryAclConfigRequestBuilder(String name, String aclId) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasKafkaSchemaRegistryAclConfig");
    }
    // verify the required parameter 'aclId' is set
    if (aclId == null) {
      throw new ApiException(400, "Missing the required parameter 'aclId' when calling deleteDbaasKafkaSchemaRegistryAclConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/schema-registry/acl-config/{acl-id}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{acl-id}", ApiClient.urlEncode(aclId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Kafka ACL entry
   * 
   * @param name  (required)
   * @param aclId  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasKafkaTopicAclConfig(String name, String aclId) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasKafkaTopicAclConfigWithHttpInfo(name, aclId);
    return localVarResponse.getData();
  }

  /**
   * Delete a Kafka ACL entry
   * 
   * @param name  (required)
   * @param aclId  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasKafkaTopicAclConfigWithHttpInfo(String name, String aclId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasKafkaTopicAclConfigRequestBuilder(name, aclId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasKafkaTopicAclConfig", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasKafkaTopicAclConfigRequestBuilder(String name, String aclId) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasKafkaTopicAclConfig");
    }
    // verify the required parameter 'aclId' is set
    if (aclId == null) {
      throw new ApiException(400, "Missing the required parameter 'aclId' when calling deleteDbaasKafkaTopicAclConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/topic/acl-config/{acl-id}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{acl-id}", ApiClient.urlEncode(aclId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS kafka user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasKafkaUser(String serviceName, String username) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasKafkaUserWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS kafka user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasKafkaUserWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasKafkaUserRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasKafkaUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasKafkaUserRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasKafkaUser");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteDbaasKafkaUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{service-name}/user/{username}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS MySQL database
   * 
   * @param serviceName  (required)
   * @param databaseName  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasMysqlDatabase(String serviceName, String databaseName) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasMysqlDatabaseWithHttpInfo(serviceName, databaseName);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS MySQL database
   * 
   * @param serviceName  (required)
   * @param databaseName  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasMysqlDatabaseWithHttpInfo(String serviceName, String databaseName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasMysqlDatabaseRequestBuilder(serviceName, databaseName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasMysqlDatabase", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasMysqlDatabaseRequestBuilder(String serviceName, String databaseName) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasMysqlDatabase");
    }
    // verify the required parameter 'databaseName' is set
    if (databaseName == null) {
      throw new ApiException(400, "Missing the required parameter 'databaseName' when calling deleteDbaasMysqlDatabase");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/database/{database-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{database-name}", ApiClient.urlEncode(databaseName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasMysqlUser(String serviceName, String username) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasMysqlUserWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasMysqlUserWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasMysqlUserRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasMysqlUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasMysqlUserRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasMysqlUser");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteDbaasMysqlUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/user/{username}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasOpensearchUser(String serviceName, String username) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasOpensearchUserWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasOpensearchUserWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasOpensearchUserRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasOpensearchUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasOpensearchUserRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasOpensearchUser");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteDbaasOpensearchUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{service-name}/user/{username}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param connectionPoolName  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasPgConnectionPool(String serviceName, String connectionPoolName) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasPgConnectionPoolWithHttpInfo(serviceName, connectionPoolName);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param connectionPoolName  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasPgConnectionPoolWithHttpInfo(String serviceName, String connectionPoolName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasPgConnectionPoolRequestBuilder(serviceName, connectionPoolName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasPgConnectionPool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasPgConnectionPoolRequestBuilder(String serviceName, String connectionPoolName) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasPgConnectionPool");
    }
    // verify the required parameter 'connectionPoolName' is set
    if (connectionPoolName == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionPoolName' when calling deleteDbaasPgConnectionPool");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/connection-pool/{connection-pool-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{connection-pool-name}", ApiClient.urlEncode(connectionPoolName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS Postgres database
   * 
   * @param serviceName  (required)
   * @param databaseName  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasPgDatabase(String serviceName, String databaseName) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasPgDatabaseWithHttpInfo(serviceName, databaseName);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS Postgres database
   * 
   * @param serviceName  (required)
   * @param databaseName  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasPgDatabaseWithHttpInfo(String serviceName, String databaseName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasPgDatabaseRequestBuilder(serviceName, databaseName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasPgDatabase", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasPgDatabaseRequestBuilder(String serviceName, String databaseName) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasPgDatabase");
    }
    // verify the required parameter 'databaseName' is set
    if (databaseName == null) {
      throw new ApiException(400, "Missing the required parameter 'databaseName' when calling deleteDbaasPgDatabase");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/database/{database-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{database-name}", ApiClient.urlEncode(databaseName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasPostgresUser(String serviceName, String username) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasPostgresUserWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasPostgresUserWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasPostgresUserRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasPostgresUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasPostgresUserRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasPostgresUser");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteDbaasPostgresUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/user/{username}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasRedisUser(String serviceName, String username) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasRedisUserWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasRedisUserWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasRedisUserRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasRedisUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasRedisUserRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasRedisUser");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteDbaasRedisUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{service-name}/user/{username}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS service
   * Delete a DBaaS service
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasService(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS service
   * Delete a DBaaS service
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasService", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasService");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Grafana service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServiceGrafana(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceGrafanaWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a Grafana service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceGrafanaWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceGrafanaRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServiceGrafana", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceGrafanaRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServiceGrafana");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-grafana/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Kafka service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServiceKafka(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceKafkaWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a Kafka service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceKafkaWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceKafkaRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServiceKafka", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceKafkaRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServiceKafka");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a MySQL service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServiceMysql(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceMysqlWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a MySQL service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceMysqlWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceMysqlRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServiceMysql", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceMysqlRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServiceMysql");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a OpenSearch service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServiceOpensearch(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceOpensearchWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a OpenSearch service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceOpensearchWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceOpensearchRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServiceOpensearch", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceOpensearchRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServiceOpensearch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Postgres service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServicePg(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServicePgWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a Postgres service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServicePgWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServicePgRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServicePg", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServicePgRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServicePg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Redis service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServiceRedis(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceRedisWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a Redis service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceRedisWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceRedisRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServiceRedis", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceRedisRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServiceRedis");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS CA Certificate
   * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
   * @return GetDbaasCaCertificate200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasCaCertificate200Response getDbaasCaCertificate() throws ApiException {
    ApiResponse<GetDbaasCaCertificate200Response> localVarResponse = getDbaasCaCertificateWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS CA Certificate
   * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
   * @return ApiResponse&lt;GetDbaasCaCertificate200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasCaCertificate200Response> getDbaasCaCertificateWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasCaCertificateRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasCaCertificate", localVarResponse);
        }
        return new ApiResponse<GetDbaasCaCertificate200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasCaCertificate200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasCaCertificateRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-ca-certificate";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS Integration
   * Get a DBaaS Integration
   * @param id  (required)
   * @return DbaasIntegration
   * @throws ApiException if fails to make API call
   */
  public DbaasIntegration getDbaasIntegration(UUID id) throws ApiException {
    ApiResponse<DbaasIntegration> localVarResponse = getDbaasIntegrationWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS Integration
   * Get a DBaaS Integration
   * @param id  (required)
   * @return ApiResponse&lt;DbaasIntegration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasIntegration> getDbaasIntegrationWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasIntegrationRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasIntegration", localVarResponse);
        }
        return new ApiResponse<DbaasIntegration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasIntegration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasIntegrationRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getDbaasIntegration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS kafka ACL configuration
   * 
   * @param name  (required)
   * @return DbaasKafkaAcls
   * @throws ApiException if fails to make API call
   */
  public DbaasKafkaAcls getDbaasKafkaAclConfig(String name) throws ApiException {
    ApiResponse<DbaasKafkaAcls> localVarResponse = getDbaasKafkaAclConfigWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS kafka ACL configuration
   * 
   * @param name  (required)
   * @return ApiResponse&lt;DbaasKafkaAcls&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasKafkaAcls> getDbaasKafkaAclConfigWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasKafkaAclConfigRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasKafkaAclConfig", localVarResponse);
        }
        return new ApiResponse<DbaasKafkaAcls>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasKafkaAcls>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasKafkaAclConfigRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasKafkaAclConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/acl-config"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS migration status
   * Get a DBaaS migration status
   * @param name  (required)
   * @return DbaasMigrationStatus
   * @throws ApiException if fails to make API call
   */
  public DbaasMigrationStatus getDbaasMigrationStatus(String name) throws ApiException {
    ApiResponse<DbaasMigrationStatus> localVarResponse = getDbaasMigrationStatusWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS migration status
   * Get a DBaaS migration status
   * @param name  (required)
   * @return ApiResponse&lt;DbaasMigrationStatus&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasMigrationStatus> getDbaasMigrationStatusWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasMigrationStatusRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasMigrationStatus", localVarResponse);
        }
        return new ApiResponse<DbaasMigrationStatus>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasMigrationStatus>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasMigrationStatusRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasMigrationStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-migration-status/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS OpenSearch ACL configuration
   * 
   * @param name  (required)
   * @return DbaasOpensearchAclConfig
   * @throws ApiException if fails to make API call
   */
  public DbaasOpensearchAclConfig getDbaasOpensearchAclConfig(String name) throws ApiException {
    ApiResponse<DbaasOpensearchAclConfig> localVarResponse = getDbaasOpensearchAclConfigWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS OpenSearch ACL configuration
   * 
   * @param name  (required)
   * @return ApiResponse&lt;DbaasOpensearchAclConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasOpensearchAclConfig> getDbaasOpensearchAclConfigWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasOpensearchAclConfigRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasOpensearchAclConfig", localVarResponse);
        }
        return new ApiResponse<DbaasOpensearchAclConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasOpensearchAclConfig>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasOpensearchAclConfigRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasOpensearchAclConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}/acl-config"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS Grafana service
   * 
   * @param name  (required)
   * @return DbaasServiceGrafana
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceGrafana getDbaasServiceGrafana(String name) throws ApiException {
    ApiResponse<DbaasServiceGrafana> localVarResponse = getDbaasServiceGrafanaWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS Grafana service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServiceGrafana&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceGrafana> getDbaasServiceGrafanaWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceGrafanaRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceGrafana", localVarResponse);
        }
        return new ApiResponse<DbaasServiceGrafana>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceGrafana>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceGrafanaRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServiceGrafana");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-grafana/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS Kafka service
   * 
   * @param name  (required)
   * @return DbaasServiceKafka
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceKafka getDbaasServiceKafka(String name) throws ApiException {
    ApiResponse<DbaasServiceKafka> localVarResponse = getDbaasServiceKafkaWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS Kafka service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServiceKafka&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceKafka> getDbaasServiceKafkaWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceKafkaRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceKafka", localVarResponse);
        }
        return new ApiResponse<DbaasServiceKafka>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceKafka>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceKafkaRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServiceKafka");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get logs of DBaaS service
   * Get logs of DBaaS service
   * @param serviceName  (required)
   * @param getDbaasServiceLogsRequest  (required)
   * @return DbaasServiceLogs
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceLogs getDbaasServiceLogs(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest) throws ApiException {
    ApiResponse<DbaasServiceLogs> localVarResponse = getDbaasServiceLogsWithHttpInfo(serviceName, getDbaasServiceLogsRequest);
    return localVarResponse.getData();
  }

  /**
   * Get logs of DBaaS service
   * Get logs of DBaaS service
   * @param serviceName  (required)
   * @param getDbaasServiceLogsRequest  (required)
   * @return ApiResponse&lt;DbaasServiceLogs&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceLogs> getDbaasServiceLogsWithHttpInfo(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceLogsRequestBuilder(serviceName, getDbaasServiceLogsRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceLogs", localVarResponse);
        }
        return new ApiResponse<DbaasServiceLogs>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceLogs>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceLogsRequestBuilder(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling getDbaasServiceLogs");
    }
    // verify the required parameter 'getDbaasServiceLogsRequest' is set
    if (getDbaasServiceLogsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'getDbaasServiceLogsRequest' when calling getDbaasServiceLogs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service-logs/{service-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getDbaasServiceLogsRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get metrics of DBaaS service
   * Get metrics of DBaaS service
   * @param serviceName  (required)
   * @param getDbaasServiceMetricsRequest  (required)
   * @return GetDbaasServiceMetrics200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasServiceMetrics200Response getDbaasServiceMetrics(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest) throws ApiException {
    ApiResponse<GetDbaasServiceMetrics200Response> localVarResponse = getDbaasServiceMetricsWithHttpInfo(serviceName, getDbaasServiceMetricsRequest);
    return localVarResponse.getData();
  }

  /**
   * Get metrics of DBaaS service
   * Get metrics of DBaaS service
   * @param serviceName  (required)
   * @param getDbaasServiceMetricsRequest  (required)
   * @return ApiResponse&lt;GetDbaasServiceMetrics200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasServiceMetrics200Response> getDbaasServiceMetricsWithHttpInfo(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceMetricsRequestBuilder(serviceName, getDbaasServiceMetricsRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceMetrics", localVarResponse);
        }
        return new ApiResponse<GetDbaasServiceMetrics200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasServiceMetrics200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceMetricsRequestBuilder(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling getDbaasServiceMetrics");
    }
    // verify the required parameter 'getDbaasServiceMetricsRequest' is set
    if (getDbaasServiceMetricsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'getDbaasServiceMetricsRequest' when calling getDbaasServiceMetrics");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service-metrics/{service-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getDbaasServiceMetricsRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS MySQL service
   * Get a DBaaS MySQL service
   * @param name  (required)
   * @return DbaasServiceMysql
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceMysql getDbaasServiceMysql(String name) throws ApiException {
    ApiResponse<DbaasServiceMysql> localVarResponse = getDbaasServiceMysqlWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS MySQL service
   * Get a DBaaS MySQL service
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServiceMysql&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceMysql> getDbaasServiceMysqlWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceMysqlRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceMysql", localVarResponse);
        }
        return new ApiResponse<DbaasServiceMysql>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceMysql>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceMysqlRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServiceMysql");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS OpenSearch service
   * Get a DBaaS OpenSearch service
   * @param name  (required)
   * @return DbaasServiceOpensearch
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceOpensearch getDbaasServiceOpensearch(String name) throws ApiException {
    ApiResponse<DbaasServiceOpensearch> localVarResponse = getDbaasServiceOpensearchWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS OpenSearch service
   * Get a DBaaS OpenSearch service
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServiceOpensearch&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceOpensearch> getDbaasServiceOpensearchWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceOpensearchRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceOpensearch", localVarResponse);
        }
        return new ApiResponse<DbaasServiceOpensearch>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceOpensearch>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceOpensearchRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServiceOpensearch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS PostgreSQL service
   * Get a DBaaS PostgreSQL service
   * @param name  (required)
   * @return DbaasServicePg
   * @throws ApiException if fails to make API call
   */
  public DbaasServicePg getDbaasServicePg(String name) throws ApiException {
    ApiResponse<DbaasServicePg> localVarResponse = getDbaasServicePgWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS PostgreSQL service
   * Get a DBaaS PostgreSQL service
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServicePg&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServicePg> getDbaasServicePgWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServicePgRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServicePg", localVarResponse);
        }
        return new ApiResponse<DbaasServicePg>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServicePg>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServicePgRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServicePg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS Redis service
   * Get a DBaaS Redis service
   * @param name  (required)
   * @return DbaasServiceRedis
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceRedis getDbaasServiceRedis(String name) throws ApiException {
    ApiResponse<DbaasServiceRedis> localVarResponse = getDbaasServiceRedisWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS Redis service
   * Get a DBaaS Redis service
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServiceRedis&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceRedis> getDbaasServiceRedisWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceRedisRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceRedis", localVarResponse);
        }
        return new ApiResponse<DbaasServiceRedis>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceRedis>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceRedisRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServiceRedis");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS service type
   * Get a DBaaS service type
   * @param serviceTypeName  (required)
   * @return DbaasServiceType
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceType getDbaasServiceType(String serviceTypeName) throws ApiException {
    ApiResponse<DbaasServiceType> localVarResponse = getDbaasServiceTypeWithHttpInfo(serviceTypeName);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS service type
   * Get a DBaaS service type
   * @param serviceTypeName  (required)
   * @return ApiResponse&lt;DbaasServiceType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceType> getDbaasServiceTypeWithHttpInfo(String serviceTypeName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceTypeRequestBuilder(serviceTypeName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceType", localVarResponse);
        }
        return new ApiResponse<DbaasServiceType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceType>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceTypeRequestBuilder(String serviceTypeName) throws ApiException {
    // verify the required parameter 'serviceTypeName' is set
    if (serviceTypeName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceTypeName' when calling getDbaasServiceType");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service-type/{service-type-name}"
        .replace("{service-type-name}", ApiClient.urlEncode(serviceTypeName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS Grafana settings
   * Get DBaaS Grafana settings
   * @return GetDbaasSettingsGrafana200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsGrafana200Response getDbaasSettingsGrafana() throws ApiException {
    ApiResponse<GetDbaasSettingsGrafana200Response> localVarResponse = getDbaasSettingsGrafanaWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS Grafana settings
   * Get DBaaS Grafana settings
   * @return ApiResponse&lt;GetDbaasSettingsGrafana200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsGrafana200Response> getDbaasSettingsGrafanaWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsGrafanaRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsGrafana", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsGrafana200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsGrafana200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsGrafanaRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-grafana";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS Kafka settings
   * Get DBaaS Kafka settings
   * @return GetDbaasSettingsKafka200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsKafka200Response getDbaasSettingsKafka() throws ApiException {
    ApiResponse<GetDbaasSettingsKafka200Response> localVarResponse = getDbaasSettingsKafkaWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS Kafka settings
   * Get DBaaS Kafka settings
   * @return ApiResponse&lt;GetDbaasSettingsKafka200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsKafka200Response> getDbaasSettingsKafkaWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsKafkaRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsKafka", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsKafka200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsKafka200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsKafkaRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-kafka";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS MySQL settings
   * Get DBaaS MySQL settings
   * @return GetDbaasSettingsMysql200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsMysql200Response getDbaasSettingsMysql() throws ApiException {
    ApiResponse<GetDbaasSettingsMysql200Response> localVarResponse = getDbaasSettingsMysqlWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS MySQL settings
   * Get DBaaS MySQL settings
   * @return ApiResponse&lt;GetDbaasSettingsMysql200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsMysql200Response> getDbaasSettingsMysqlWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsMysqlRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsMysql", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsMysql200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsMysql200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsMysqlRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-mysql";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS OpenSearch settings
   * Get DBaaS OpenSearch settings
   * @return GetDbaasSettingsOpensearch200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsOpensearch200Response getDbaasSettingsOpensearch() throws ApiException {
    ApiResponse<GetDbaasSettingsOpensearch200Response> localVarResponse = getDbaasSettingsOpensearchWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS OpenSearch settings
   * Get DBaaS OpenSearch settings
   * @return ApiResponse&lt;GetDbaasSettingsOpensearch200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsOpensearch200Response> getDbaasSettingsOpensearchWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsOpensearchRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsOpensearch", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsOpensearch200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsOpensearch200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsOpensearchRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-opensearch";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS PostgreSQL settings
   * Get DBaaS PostgreSQL settings
   * @return GetDbaasSettingsPg200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsPg200Response getDbaasSettingsPg() throws ApiException {
    ApiResponse<GetDbaasSettingsPg200Response> localVarResponse = getDbaasSettingsPgWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS PostgreSQL settings
   * Get DBaaS PostgreSQL settings
   * @return ApiResponse&lt;GetDbaasSettingsPg200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsPg200Response> getDbaasSettingsPgWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsPgRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsPg", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsPg200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsPg200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsPgRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-pg";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS Redis settings
   * Returns the default settings for Redis.
   * @return GetDbaasSettingsRedis200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsRedis200Response getDbaasSettingsRedis() throws ApiException {
    ApiResponse<GetDbaasSettingsRedis200Response> localVarResponse = getDbaasSettingsRedisWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS Redis settings
   * Returns the default settings for Redis.
   * @return ApiResponse&lt;GetDbaasSettingsRedis200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsRedis200Response> getDbaasSettingsRedisWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsRedisRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsRedis", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsRedis200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsRedis200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsRedisRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-redis";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS task
   * Get a DBaaS task
   * @param service  (required)
   * @param id  (required)
   * @return DbaasTask
   * @throws ApiException if fails to make API call
   */
  public DbaasTask getDbaasTask(String service, UUID id) throws ApiException {
    ApiResponse<DbaasTask> localVarResponse = getDbaasTaskWithHttpInfo(service, id);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS task
   * Get a DBaaS task
   * @param service  (required)
   * @param id  (required)
   * @return ApiResponse&lt;DbaasTask&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasTask> getDbaasTaskWithHttpInfo(String service, UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasTaskRequestBuilder(service, id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasTask", localVarResponse);
        }
        return new ApiResponse<DbaasTask>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasTask>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasTaskRequestBuilder(String service, UUID id) throws ApiException {
    // verify the required parameter 'service' is set
    if (service == null) {
      throw new ApiException(400, "Missing the required parameter 'service' when calling getDbaasTask");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getDbaasTask");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-task/{service}/{id}"
        .replace("{service}", ApiClient.urlEncode(service.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS integration settings
   * Get DBaaS integration settings
   * @param integrationType  (required)
   * @param sourceType  (required)
   * @param destType  (required)
   * @return ListDbaasIntegrationSettings200Response
   * @throws ApiException if fails to make API call
   */
  public ListDbaasIntegrationSettings200Response listDbaasIntegrationSettings(String integrationType, String sourceType, String destType) throws ApiException {
    ApiResponse<ListDbaasIntegrationSettings200Response> localVarResponse = listDbaasIntegrationSettingsWithHttpInfo(integrationType, sourceType, destType);
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS integration settings
   * Get DBaaS integration settings
   * @param integrationType  (required)
   * @param sourceType  (required)
   * @param destType  (required)
   * @return ApiResponse&lt;ListDbaasIntegrationSettings200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDbaasIntegrationSettings200Response> listDbaasIntegrationSettingsWithHttpInfo(String integrationType, String sourceType, String destType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDbaasIntegrationSettingsRequestBuilder(integrationType, sourceType, destType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDbaasIntegrationSettings", localVarResponse);
        }
        return new ApiResponse<ListDbaasIntegrationSettings200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDbaasIntegrationSettings200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDbaasIntegrationSettingsRequestBuilder(String integrationType, String sourceType, String destType) throws ApiException {
    // verify the required parameter 'integrationType' is set
    if (integrationType == null) {
      throw new ApiException(400, "Missing the required parameter 'integrationType' when calling listDbaasIntegrationSettings");
    }
    // verify the required parameter 'sourceType' is set
    if (sourceType == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceType' when calling listDbaasIntegrationSettings");
    }
    // verify the required parameter 'destType' is set
    if (destType == null) {
      throw new ApiException(400, "Missing the required parameter 'destType' when calling listDbaasIntegrationSettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration-settings/{integration-type}/{source-type}/{dest-type}"
        .replace("{integration-type}", ApiClient.urlEncode(integrationType.toString()))
        .replace("{source-type}", ApiClient.urlEncode(sourceType.toString()))
        .replace("{dest-type}", ApiClient.urlEncode(destType.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS integration types
   * Get DBaaS integration types
   * @return ListDbaasIntegrationTypes200Response
   * @throws ApiException if fails to make API call
   */
  public ListDbaasIntegrationTypes200Response listDbaasIntegrationTypes() throws ApiException {
    ApiResponse<ListDbaasIntegrationTypes200Response> localVarResponse = listDbaasIntegrationTypesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS integration types
   * Get DBaaS integration types
   * @return ApiResponse&lt;ListDbaasIntegrationTypes200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDbaasIntegrationTypes200Response> listDbaasIntegrationTypesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDbaasIntegrationTypesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDbaasIntegrationTypes", localVarResponse);
        }
        return new ApiResponse<ListDbaasIntegrationTypes200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDbaasIntegrationTypes200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDbaasIntegrationTypesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration-types";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * DBaaS Service Types
   * List available service types for DBaaS
   * @return ListDbaasServiceTypes200Response
   * @throws ApiException if fails to make API call
   */
  public ListDbaasServiceTypes200Response listDbaasServiceTypes() throws ApiException {
    ApiResponse<ListDbaasServiceTypes200Response> localVarResponse = listDbaasServiceTypesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * DBaaS Service Types
   * List available service types for DBaaS
   * @return ApiResponse&lt;ListDbaasServiceTypes200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDbaasServiceTypes200Response> listDbaasServiceTypesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDbaasServiceTypesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDbaasServiceTypes", localVarResponse);
        }
        return new ApiResponse<ListDbaasServiceTypes200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDbaasServiceTypes200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDbaasServiceTypesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service-type";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List DBaaS services
   * List DBaaS services
   * @return ListDbaasServices200Response
   * @throws ApiException if fails to make API call
   */
  public ListDbaasServices200Response listDbaasServices() throws ApiException {
    ApiResponse<ListDbaasServices200Response> localVarResponse = listDbaasServicesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List DBaaS services
   * List DBaaS services
   * @return ApiResponse&lt;ListDbaasServices200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDbaasServices200Response> listDbaasServicesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDbaasServicesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDbaasServices", localVarResponse);
        }
        return new ApiResponse<ListDbaasServices200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDbaasServices200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDbaasServicesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the credentials of a DBaaS Kafka user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetDbaasKafkaUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetDbaasKafkaUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset the credentials of a DBaaS Kafka user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetDbaasKafkaUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetDbaasKafkaUserPasswordRequestBuilder(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetDbaasKafkaUserPassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetDbaasKafkaUserPasswordRequestBuilder(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling resetDbaasKafkaUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling resetDbaasKafkaUserPassword");
    }
    // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
    if (resetDbaasOpensearchUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasKafkaUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{service-name}/user/{username}/password/reset"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(resetDbaasOpensearchUserPasswordRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the credentials of a DBaaS mysql user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasMysqlUserPasswordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetDbaasMysqlUserPassword(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetDbaasMysqlUserPasswordWithHttpInfo(serviceName, username, resetDbaasMysqlUserPasswordRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset the credentials of a DBaaS mysql user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasMysqlUserPasswordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetDbaasMysqlUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetDbaasMysqlUserPasswordRequestBuilder(serviceName, username, resetDbaasMysqlUserPasswordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetDbaasMysqlUserPassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetDbaasMysqlUserPasswordRequestBuilder(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling resetDbaasMysqlUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling resetDbaasMysqlUserPassword");
    }
    // verify the required parameter 'resetDbaasMysqlUserPasswordRequest' is set
    if (resetDbaasMysqlUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetDbaasMysqlUserPasswordRequest' when calling resetDbaasMysqlUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/user/{username}/password/reset"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(resetDbaasMysqlUserPasswordRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the credentials of a DBaaS OpenSearch user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetDbaasOpensearchUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetDbaasOpensearchUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset the credentials of a DBaaS OpenSearch user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetDbaasOpensearchUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetDbaasOpensearchUserPasswordRequestBuilder(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetDbaasOpensearchUserPassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetDbaasOpensearchUserPasswordRequestBuilder(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling resetDbaasOpensearchUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling resetDbaasOpensearchUserPassword");
    }
    // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
    if (resetDbaasOpensearchUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasOpensearchUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{service-name}/user/{username}/password/reset"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(resetDbaasOpensearchUserPasswordRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the credentials of a DBaaS Postgres user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetDbaasPostgresUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetDbaasPostgresUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset the credentials of a DBaaS Postgres user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetDbaasPostgresUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetDbaasPostgresUserPasswordRequestBuilder(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetDbaasPostgresUserPassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetDbaasPostgresUserPasswordRequestBuilder(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling resetDbaasPostgresUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling resetDbaasPostgresUserPassword");
    }
    // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
    if (resetDbaasOpensearchUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasPostgresUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/user/{username}/password/reset"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(resetDbaasOpensearchUserPasswordRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the credentials of a DBaaS Redis user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetDbaasRedisUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetDbaasRedisUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset the credentials of a DBaaS Redis user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetDbaasRedisUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetDbaasRedisUserPasswordRequestBuilder(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetDbaasRedisUserPassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetDbaasRedisUserPasswordRequestBuilder(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling resetDbaasRedisUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling resetDbaasRedisUserPassword");
    }
    // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
    if (resetDbaasOpensearchUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasRedisUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{service-name}/user/{username}/password/reset"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(resetDbaasOpensearchUserPasswordRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the secrets of a DBaaS Kafka user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return DbaasUserKafkaSecrets
   * @throws ApiException if fails to make API call
   */
  public DbaasUserKafkaSecrets revealDbaasKafkaUserPassword(String serviceName, String username) throws ApiException {
    ApiResponse<DbaasUserKafkaSecrets> localVarResponse = revealDbaasKafkaUserPasswordWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Reveal the secrets of a DBaaS Kafka user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;DbaasUserKafkaSecrets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasUserKafkaSecrets> revealDbaasKafkaUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealDbaasKafkaUserPasswordRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealDbaasKafkaUserPassword", localVarResponse);
        }
        return new ApiResponse<DbaasUserKafkaSecrets>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasUserKafkaSecrets>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealDbaasKafkaUserPasswordRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling revealDbaasKafkaUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling revealDbaasKafkaUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{service-name}/user/{username}/password/reveal"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the secrets of a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return DbaasUserMysqlSecrets
   * @throws ApiException if fails to make API call
   */
  public DbaasUserMysqlSecrets revealDbaasMysqlUserPassword(String serviceName, String username) throws ApiException {
    ApiResponse<DbaasUserMysqlSecrets> localVarResponse = revealDbaasMysqlUserPasswordWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Reveal the secrets of a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;DbaasUserMysqlSecrets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasUserMysqlSecrets> revealDbaasMysqlUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealDbaasMysqlUserPasswordRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealDbaasMysqlUserPassword", localVarResponse);
        }
        return new ApiResponse<DbaasUserMysqlSecrets>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasUserMysqlSecrets>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealDbaasMysqlUserPasswordRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling revealDbaasMysqlUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling revealDbaasMysqlUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/user/{username}/password/reveal"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the secrets of a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return DbaasUserOpensearchSecrets
   * @throws ApiException if fails to make API call
   */
  public DbaasUserOpensearchSecrets revealDbaasOpensearchUserPassword(String serviceName, String username) throws ApiException {
    ApiResponse<DbaasUserOpensearchSecrets> localVarResponse = revealDbaasOpensearchUserPasswordWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Reveal the secrets of a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;DbaasUserOpensearchSecrets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasUserOpensearchSecrets> revealDbaasOpensearchUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealDbaasOpensearchUserPasswordRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealDbaasOpensearchUserPassword", localVarResponse);
        }
        return new ApiResponse<DbaasUserOpensearchSecrets>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasUserOpensearchSecrets>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealDbaasOpensearchUserPasswordRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling revealDbaasOpensearchUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling revealDbaasOpensearchUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{service-name}/user/{username}/password/reveal"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the secrets of a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return DbaasUserPostgresSecrets
   * @throws ApiException if fails to make API call
   */
  public DbaasUserPostgresSecrets revealDbaasPostgresUserPassword(String serviceName, String username) throws ApiException {
    ApiResponse<DbaasUserPostgresSecrets> localVarResponse = revealDbaasPostgresUserPasswordWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Reveal the secrets of a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;DbaasUserPostgresSecrets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasUserPostgresSecrets> revealDbaasPostgresUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealDbaasPostgresUserPasswordRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealDbaasPostgresUserPassword", localVarResponse);
        }
        return new ApiResponse<DbaasUserPostgresSecrets>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasUserPostgresSecrets>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealDbaasPostgresUserPasswordRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling revealDbaasPostgresUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling revealDbaasPostgresUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/user/{username}/password/reveal"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the secrets of a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return DbaasUserRedisSecrets
   * @throws ApiException if fails to make API call
   */
  public DbaasUserRedisSecrets revealDbaasRedisUserPassword(String serviceName, String username) throws ApiException {
    ApiResponse<DbaasUserRedisSecrets> localVarResponse = revealDbaasRedisUserPasswordWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Reveal the secrets of a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;DbaasUserRedisSecrets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasUserRedisSecrets> revealDbaasRedisUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealDbaasRedisUserPasswordRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealDbaasRedisUserPassword", localVarResponse);
        }
        return new ApiResponse<DbaasUserRedisSecrets>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasUserRedisSecrets>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealDbaasRedisUserPasswordRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling revealDbaasRedisUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling revealDbaasRedisUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{service-name}/user/{username}/password/reveal"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate Grafana maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasGrafanaMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasGrafanaMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate Grafana maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasGrafanaMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasGrafanaMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasGrafanaMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasGrafanaMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasGrafanaMaintenance");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-grafana/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate Kafka maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasKafkaMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasKafkaMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate Kafka maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasKafkaMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasKafkaMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasKafkaMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasKafkaMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasKafkaMaintenance");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate MySQL maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasMysqlMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasMysqlMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate MySQL maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasMysqlMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasMysqlMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasMysqlMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasMysqlMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasMysqlMaintenance");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate OpenSearch maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasOpensearchMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasOpensearchMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate OpenSearch maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasOpensearchMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasOpensearchMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasOpensearchMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasOpensearchMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasOpensearchMaintenance");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate PostgreSQL maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasPgMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasPgMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate PostgreSQL maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasPgMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasPgMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasPgMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasPgMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasPgMaintenance");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate Redis maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasRedisMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasRedisMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate Redis maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasRedisMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasRedisMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasRedisMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasRedisMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasRedisMaintenance");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Stop a DBaaS MySQL migration
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation stopDbaasMysqlMigration(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = stopDbaasMysqlMigrationWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Stop a DBaaS MySQL migration
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> stopDbaasMysqlMigrationWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = stopDbaasMysqlMigrationRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("stopDbaasMysqlMigration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder stopDbaasMysqlMigrationRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling stopDbaasMysqlMigration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}/migration/stop"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Stop a DBaaS PostgreSQL migration
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation stopDbaasPgMigration(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = stopDbaasPgMigrationWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Stop a DBaaS PostgreSQL migration
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> stopDbaasPgMigrationWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = stopDbaasPgMigrationRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("stopDbaasPgMigration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder stopDbaasPgMigrationRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling stopDbaasPgMigration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}/migration/stop"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Stop a DBaaS Redis migration
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation stopDbaasRedisMigration(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = stopDbaasRedisMigrationWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Stop a DBaaS Redis migration
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> stopDbaasRedisMigrationWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = stopDbaasRedisMigrationRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("stopDbaasRedisMigration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder stopDbaasRedisMigrationRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling stopDbaasRedisMigration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}/migration/stop"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a existing DBaaS integration
   * Update a existing DBaaS integration
   * @param id  (required)
   * @param updateDbaasIntegrationRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasIntegration(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasIntegrationWithHttpInfo(id, updateDbaasIntegrationRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a existing DBaaS integration
   * Update a existing DBaaS integration
   * @param id  (required)
   * @param updateDbaasIntegrationRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasIntegrationWithHttpInfo(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasIntegrationRequestBuilder(id, updateDbaasIntegrationRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasIntegration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasIntegrationRequestBuilder(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateDbaasIntegration");
    }
    // verify the required parameter 'updateDbaasIntegrationRequest' is set
    if (updateDbaasIntegrationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasIntegrationRequest' when calling updateDbaasIntegration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDbaasIntegrationRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS OpenSearch ACL configuration
   * 
   * @param name  (required)
   * @param dbaasOpensearchAclConfig  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasOpensearchAclConfig(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasOpensearchAclConfigWithHttpInfo(name, dbaasOpensearchAclConfig);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS OpenSearch ACL configuration
   * 
   * @param name  (required)
   * @param dbaasOpensearchAclConfig  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasOpensearchAclConfigWithHttpInfo(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasOpensearchAclConfigRequestBuilder(name, dbaasOpensearchAclConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasOpensearchAclConfig", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasOpensearchAclConfigRequestBuilder(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasOpensearchAclConfig");
    }
    // verify the required parameter 'dbaasOpensearchAclConfig' is set
    if (dbaasOpensearchAclConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'dbaasOpensearchAclConfig' when calling updateDbaasOpensearchAclConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}/acl-config"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(dbaasOpensearchAclConfig);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param connectionPoolName  (required)
   * @param updateDbaasPgConnectionPoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasPgConnectionPool(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasPgConnectionPoolWithHttpInfo(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param connectionPoolName  (required)
   * @param updateDbaasPgConnectionPoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasPgConnectionPoolWithHttpInfo(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasPgConnectionPoolRequestBuilder(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasPgConnectionPool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasPgConnectionPoolRequestBuilder(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling updateDbaasPgConnectionPool");
    }
    // verify the required parameter 'connectionPoolName' is set
    if (connectionPoolName == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionPoolName' when calling updateDbaasPgConnectionPool");
    }
    // verify the required parameter 'updateDbaasPgConnectionPoolRequest' is set
    if (updateDbaasPgConnectionPoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasPgConnectionPoolRequest' when calling updateDbaasPgConnectionPool");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/connection-pool/{connection-pool-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{connection-pool-name}", ApiClient.urlEncode(connectionPoolName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDbaasPgConnectionPoolRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update access control for one service user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @param updateDbaasPostgresAllowReplicationRequest  (required)
   * @return DbaasPostgresUsers
   * @throws ApiException if fails to make API call
   */
  public DbaasPostgresUsers updateDbaasPostgresAllowReplication(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest) throws ApiException {
    ApiResponse<DbaasPostgresUsers> localVarResponse = updateDbaasPostgresAllowReplicationWithHttpInfo(serviceName, username, updateDbaasPostgresAllowReplicationRequest);
    return localVarResponse.getData();
  }

  /**
   * Update access control for one service user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @param updateDbaasPostgresAllowReplicationRequest  (required)
   * @return ApiResponse&lt;DbaasPostgresUsers&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasPostgresUsers> updateDbaasPostgresAllowReplicationWithHttpInfo(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasPostgresAllowReplicationRequestBuilder(serviceName, username, updateDbaasPostgresAllowReplicationRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasPostgresAllowReplication", localVarResponse);
        }
        return new ApiResponse<DbaasPostgresUsers>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasPostgresUsers>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasPostgresAllowReplicationRequestBuilder(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling updateDbaasPostgresAllowReplication");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling updateDbaasPostgresAllowReplication");
    }
    // verify the required parameter 'updateDbaasPostgresAllowReplicationRequest' is set
    if (updateDbaasPostgresAllowReplicationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasPostgresAllowReplicationRequest' when calling updateDbaasPostgresAllowReplication");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/user/{username}/allow-replication"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDbaasPostgresAllowReplicationRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS Grafana service
   * 
   * @param name  (required)
   * @param updateDbaasServiceGrafanaRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServiceGrafana(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServiceGrafanaWithHttpInfo(name, updateDbaasServiceGrafanaRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS Grafana service
   * 
   * @param name  (required)
   * @param updateDbaasServiceGrafanaRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServiceGrafanaWithHttpInfo(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServiceGrafanaRequestBuilder(name, updateDbaasServiceGrafanaRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServiceGrafana", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServiceGrafanaRequestBuilder(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServiceGrafana");
    }
    // verify the required parameter 'updateDbaasServiceGrafanaRequest' is set
    if (updateDbaasServiceGrafanaRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServiceGrafanaRequest' when calling updateDbaasServiceGrafana");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-grafana/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDbaasServiceGrafanaRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS Kafka service
   * Update a DBaaS Kafka service
   * @param name  (required)
   * @param updateDbaasServiceKafkaRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServiceKafka(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServiceKafkaWithHttpInfo(name, updateDbaasServiceKafkaRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS Kafka service
   * Update a DBaaS Kafka service
   * @param name  (required)
   * @param updateDbaasServiceKafkaRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServiceKafkaWithHttpInfo(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServiceKafkaRequestBuilder(name, updateDbaasServiceKafkaRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServiceKafka", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServiceKafkaRequestBuilder(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServiceKafka");
    }
    // verify the required parameter 'updateDbaasServiceKafkaRequest' is set
    if (updateDbaasServiceKafkaRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServiceKafkaRequest' when calling updateDbaasServiceKafka");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDbaasServiceKafkaRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS MySQL service
   * Update a DBaaS MySQL service
   * @param name  (required)
   * @param updateDbaasServiceMysqlRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServiceMysql(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServiceMysqlWithHttpInfo(name, updateDbaasServiceMysqlRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS MySQL service
   * Update a DBaaS MySQL service
   * @param name  (required)
   * @param updateDbaasServiceMysqlRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServiceMysqlWithHttpInfo(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServiceMysqlRequestBuilder(name, updateDbaasServiceMysqlRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServiceMysql", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServiceMysqlRequestBuilder(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServiceMysql");
    }
    // verify the required parameter 'updateDbaasServiceMysqlRequest' is set
    if (updateDbaasServiceMysqlRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServiceMysqlRequest' when calling updateDbaasServiceMysql");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDbaasServiceMysqlRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS OpenSearch service
   * Update a DBaaS OpenSearch service
   * @param name  (required)
   * @param updateDbaasServiceOpensearchRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServiceOpensearch(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServiceOpensearchWithHttpInfo(name, updateDbaasServiceOpensearchRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS OpenSearch service
   * Update a DBaaS OpenSearch service
   * @param name  (required)
   * @param updateDbaasServiceOpensearchRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServiceOpensearchWithHttpInfo(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServiceOpensearchRequestBuilder(name, updateDbaasServiceOpensearchRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServiceOpensearch", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServiceOpensearchRequestBuilder(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServiceOpensearch");
    }
    // verify the required parameter 'updateDbaasServiceOpensearchRequest' is set
    if (updateDbaasServiceOpensearchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServiceOpensearchRequest' when calling updateDbaasServiceOpensearch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDbaasServiceOpensearchRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS PostgreSQL service
   * Update a DBaaS PostgreSQL service
   * @param name  (required)
   * @param updateDbaasServicePgRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServicePg(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServicePgWithHttpInfo(name, updateDbaasServicePgRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS PostgreSQL service
   * Update a DBaaS PostgreSQL service
   * @param name  (required)
   * @param updateDbaasServicePgRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServicePgWithHttpInfo(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServicePgRequestBuilder(name, updateDbaasServicePgRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServicePg", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServicePgRequestBuilder(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServicePg");
    }
    // verify the required parameter 'updateDbaasServicePgRequest' is set
    if (updateDbaasServicePgRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServicePgRequest' when calling updateDbaasServicePg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDbaasServicePgRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS Redis service
   * Update a DBaaS Redis service
   * @param name  (required)
   * @param updateDbaasServiceRedisRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServiceRedis(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServiceRedisWithHttpInfo(name, updateDbaasServiceRedisRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS Redis service
   * Update a DBaaS Redis service
   * @param name  (required)
   * @param updateDbaasServiceRedisRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServiceRedisWithHttpInfo(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServiceRedisRequestBuilder(name, updateDbaasServiceRedisRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServiceRedis", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServiceRedisRequestBuilder(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServiceRedis");
    }
    // verify the required parameter 'updateDbaasServiceRedisRequest' is set
    if (updateDbaasServiceRedisRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServiceRedisRequest' when calling updateDbaasServiceRedis");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDbaasServiceRedisRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
