/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * BackgroundBGWriterSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class BackgroundBGWriterSettings {
  @JsonProperty("bgwriter_delay")
  private Integer bgwriterDelay = null;

  @JsonProperty("bgwriter_flush_after")
  private Integer bgwriterFlushAfter = null;

  @JsonProperty("bgwriter_lru_multiplier")
  private BigDecimal bgwriterLruMultiplier = null;

  @JsonProperty("bgwriter_lru_maxpages")
  private Integer bgwriterLruMaxpages = null;

  public BackgroundBGWriterSettings bgwriterDelay(Integer bgwriterDelay) {
    this.bgwriterDelay = bgwriterDelay;
    return this;
  }

   /**
   * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
   * minimum: 10
   * maximum: 10000
   * @return bgwriterDelay
  **/
  @Schema(example = "200", description = "Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.")
  public Integer getBgwriterDelay() {
    return bgwriterDelay;
  }

  public void setBgwriterDelay(Integer bgwriterDelay) {
    this.bgwriterDelay = bgwriterDelay;
  }

  public BackgroundBGWriterSettings bgwriterFlushAfter(Integer bgwriterFlushAfter) {
    this.bgwriterFlushAfter = bgwriterFlushAfter;
    return this;
  }

   /**
   * Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
   * minimum: 0
   * maximum: 2048
   * @return bgwriterFlushAfter
  **/
  @Schema(example = "512", description = "Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.")
  public Integer getBgwriterFlushAfter() {
    return bgwriterFlushAfter;
  }

  public void setBgwriterFlushAfter(Integer bgwriterFlushAfter) {
    this.bgwriterFlushAfter = bgwriterFlushAfter;
  }

  public BackgroundBGWriterSettings bgwriterLruMultiplier(BigDecimal bgwriterLruMultiplier) {
    this.bgwriterLruMultiplier = bgwriterLruMultiplier;
    return this;
  }

   /**
   * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
   * minimum: 0
   * maximum: 10
   * @return bgwriterLruMultiplier
  **/
  @Schema(example = "2.0", description = "The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.")
  public BigDecimal getBgwriterLruMultiplier() {
    return bgwriterLruMultiplier;
  }

  public void setBgwriterLruMultiplier(BigDecimal bgwriterLruMultiplier) {
    this.bgwriterLruMultiplier = bgwriterLruMultiplier;
  }

  public BackgroundBGWriterSettings bgwriterLruMaxpages(Integer bgwriterLruMaxpages) {
    this.bgwriterLruMaxpages = bgwriterLruMaxpages;
    return this;
  }

   /**
   * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
   * minimum: 0
   * maximum: 1073741823
   * @return bgwriterLruMaxpages
  **/
  @Schema(example = "100", description = "In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.")
  public Integer getBgwriterLruMaxpages() {
    return bgwriterLruMaxpages;
  }

  public void setBgwriterLruMaxpages(Integer bgwriterLruMaxpages) {
    this.bgwriterLruMaxpages = bgwriterLruMaxpages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackgroundBGWriterSettings backgroundBGWriterSettings = (BackgroundBGWriterSettings) o;
    return Objects.equals(this.bgwriterDelay, backgroundBGWriterSettings.bgwriterDelay) &&
        Objects.equals(this.bgwriterFlushAfter, backgroundBGWriterSettings.bgwriterFlushAfter) &&
        Objects.equals(this.bgwriterLruMultiplier, backgroundBGWriterSettings.bgwriterLruMultiplier) &&
        Objects.equals(this.bgwriterLruMaxpages, backgroundBGWriterSettings.bgwriterLruMaxpages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bgwriterDelay, bgwriterFlushAfter, bgwriterLruMultiplier, bgwriterLruMaxpages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackgroundBGWriterSettings {\n");
    
    sb.append("    bgwriterDelay: ").append(toIndentedString(bgwriterDelay)).append("\n");
    sb.append("    bgwriterFlushAfter: ").append(toIndentedString(bgwriterFlushAfter)).append("\n");
    sb.append("    bgwriterLruMultiplier: ").append(toIndentedString(bgwriterLruMultiplier)).append("\n");
    sb.append("    bgwriterLruMaxpages: ").append(toIndentedString(bgwriterLruMaxpages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
