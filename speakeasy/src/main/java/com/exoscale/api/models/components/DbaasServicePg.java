/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class DbaasServicePg {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pgbouncer-settings")
    private Optional<? extends JsonSchemaPgbouncer> pgbouncerSettings;

    /**
     * Service last update timestamp (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated-at")
    private Optional<? extends OffsetDateTime> updatedAt;

    /**
     * Number of service nodes in the active plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-count")
    private Optional<? extends Long> nodeCount;

    /**
     * PG connection information properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection-info")
    private Optional<? extends DbaasServicePgConnectionInfo> connectionInfo;

    /**
     * Backup schedule
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup-schedule")
    private Optional<? extends DbaasServicePgBackupSchedule> backupSchedule;

    /**
     * Number of CPUs for each node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-cpu-count")
    private Optional<? extends Long> nodeCpuCount;

    /**
     * Service integrations
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrations")
    private Optional<? extends java.util.List<DbaasIntegration>> integrations;

    /**
     * The zone where the service is running
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    private Optional<? extends String> zone;

    /**
     * State of individual service nodes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-states")
    private Optional<? extends java.util.List<DbaasNodeState>> nodeStates;

    @JsonProperty("name")
    private String name;

    /**
     * PostgreSQL PGBouncer connection pools
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection-pools")
    private Optional<? extends java.util.List<ConnectionPools>> connectionPools;

    @JsonProperty("type")
    private String type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends EnumServiceState> state;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timescaledb-settings")
    private Optional<? extends JsonSchemaTimescaledb> timescaledbSettings;

    /**
     * List of PostgreSQL databases
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databases")
    private Optional<? extends java.util.List<String>> databases;

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip-filter")
    private Optional<? extends java.util.List<String>> ipFilter;

    /**
     * List of backups for the service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backups")
    private Optional<? extends java.util.List<DbaasServiceBackup>> backups;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    /**
     * Service notifications
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifications")
    private Optional<? extends java.util.List<DbaasServiceNotification>> notifications;

    /**
     * Service component information objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("components")
    private Optional<? extends java.util.List<DbaasServicePgComponents>> components;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("synchronous-replication")
    private Optional<? extends EnumPgSynchronousReplication> synchronousReplication;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pglookout-settings")
    private Optional<? extends JsonSchemaPglookout> pglookoutSettings;

    /**
     * Automatic maintenance settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenance")
    private Optional<? extends DbaasServiceMaintenance> maintenance;

    /**
     * TODO UNIT disk space for data storage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disk-size")
    private Optional<? extends Long> diskSize;

    /**
     * TODO UNIT of memory for each node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-memory")
    private Optional<? extends Long> nodeMemory;

    /**
     * URI for connecting to the service (may be absent)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    private Optional<? extends String> uri;

    /**
     * service_uri parameterized into key-value pairs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri-params")
    private Optional<? extends DbaasServicePgUriParams> uriParams;

    /**
     * PostgreSQL version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    /**
     * Service creation timestamp (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * Subscription plan
     */
    @JsonProperty("plan")
    private String plan;

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work-mem")
    private Optional<? extends Long> workMem;

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shared-buffers-percentage")
    private Optional<? extends Long> sharedBuffersPercentage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pg-settings")
    private Optional<? extends JsonSchemaPg> pgSettings;

    /**
     * Maximum number of connections allowed to an instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max-connections")
    private Optional<? extends Long> maxConnections;

    /**
     * List of service users
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    private Optional<? extends java.util.List<DbaasServicePgUsers>> users;

    public DbaasServicePg(
            @JsonProperty("pgbouncer-settings") Optional<? extends JsonSchemaPgbouncer> pgbouncerSettings,
            @JsonProperty("updated-at") Optional<? extends OffsetDateTime> updatedAt,
            @JsonProperty("node-count") Optional<? extends Long> nodeCount,
            @JsonProperty("connection-info") Optional<? extends DbaasServicePgConnectionInfo> connectionInfo,
            @JsonProperty("backup-schedule") Optional<? extends DbaasServicePgBackupSchedule> backupSchedule,
            @JsonProperty("node-cpu-count") Optional<? extends Long> nodeCpuCount,
            @JsonProperty("integrations") Optional<? extends java.util.List<DbaasIntegration>> integrations,
            @JsonProperty("zone") Optional<? extends String> zone,
            @JsonProperty("node-states") Optional<? extends java.util.List<DbaasNodeState>> nodeStates,
            @JsonProperty("name") String name,
            @JsonProperty("connection-pools") Optional<? extends java.util.List<ConnectionPools>> connectionPools,
            @JsonProperty("type") String type,
            @JsonProperty("state") Optional<? extends EnumServiceState> state,
            @JsonProperty("timescaledb-settings") Optional<? extends JsonSchemaTimescaledb> timescaledbSettings,
            @JsonProperty("databases") Optional<? extends java.util.List<String>> databases,
            @JsonProperty("ip-filter") Optional<? extends java.util.List<String>> ipFilter,
            @JsonProperty("backups") Optional<? extends java.util.List<DbaasServiceBackup>> backups,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("notifications") Optional<? extends java.util.List<DbaasServiceNotification>> notifications,
            @JsonProperty("components") Optional<? extends java.util.List<DbaasServicePgComponents>> components,
            @JsonProperty("synchronous-replication") Optional<? extends EnumPgSynchronousReplication> synchronousReplication,
            @JsonProperty("pglookout-settings") Optional<? extends JsonSchemaPglookout> pglookoutSettings,
            @JsonProperty("maintenance") Optional<? extends DbaasServiceMaintenance> maintenance,
            @JsonProperty("disk-size") Optional<? extends Long> diskSize,
            @JsonProperty("node-memory") Optional<? extends Long> nodeMemory,
            @JsonProperty("uri") Optional<? extends String> uri,
            @JsonProperty("uri-params") Optional<? extends DbaasServicePgUriParams> uriParams,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("plan") String plan,
            @JsonProperty("work-mem") Optional<? extends Long> workMem,
            @JsonProperty("shared-buffers-percentage") Optional<? extends Long> sharedBuffersPercentage,
            @JsonProperty("pg-settings") Optional<? extends JsonSchemaPg> pgSettings,
            @JsonProperty("max-connections") Optional<? extends Long> maxConnections,
            @JsonProperty("users") Optional<? extends java.util.List<DbaasServicePgUsers>> users) {
        Utils.checkNotNull(pgbouncerSettings, "pgbouncerSettings");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(nodeCount, "nodeCount");
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        Utils.checkNotNull(integrations, "integrations");
        Utils.checkNotNull(zone, "zone");
        Utils.checkNotNull(nodeStates, "nodeStates");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(connectionPools, "connectionPools");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(timescaledbSettings, "timescaledbSettings");
        Utils.checkNotNull(databases, "databases");
        Utils.checkNotNull(ipFilter, "ipFilter");
        Utils.checkNotNull(backups, "backups");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(notifications, "notifications");
        Utils.checkNotNull(components, "components");
        Utils.checkNotNull(synchronousReplication, "synchronousReplication");
        Utils.checkNotNull(pglookoutSettings, "pglookoutSettings");
        Utils.checkNotNull(maintenance, "maintenance");
        Utils.checkNotNull(diskSize, "diskSize");
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        Utils.checkNotNull(uri, "uri");
        Utils.checkNotNull(uriParams, "uriParams");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(plan, "plan");
        Utils.checkNotNull(workMem, "workMem");
        Utils.checkNotNull(sharedBuffersPercentage, "sharedBuffersPercentage");
        Utils.checkNotNull(pgSettings, "pgSettings");
        Utils.checkNotNull(maxConnections, "maxConnections");
        Utils.checkNotNull(users, "users");
        this.pgbouncerSettings = pgbouncerSettings;
        this.updatedAt = updatedAt;
        this.nodeCount = nodeCount;
        this.connectionInfo = connectionInfo;
        this.backupSchedule = backupSchedule;
        this.nodeCpuCount = nodeCpuCount;
        this.integrations = integrations;
        this.zone = zone;
        this.nodeStates = nodeStates;
        this.name = name;
        this.connectionPools = connectionPools;
        this.type = type;
        this.state = state;
        this.timescaledbSettings = timescaledbSettings;
        this.databases = databases;
        this.ipFilter = ipFilter;
        this.backups = backups;
        this.terminationProtection = terminationProtection;
        this.notifications = notifications;
        this.components = components;
        this.synchronousReplication = synchronousReplication;
        this.pglookoutSettings = pglookoutSettings;
        this.maintenance = maintenance;
        this.diskSize = diskSize;
        this.nodeMemory = nodeMemory;
        this.uri = uri;
        this.uriParams = uriParams;
        this.version = version;
        this.createdAt = createdAt;
        this.plan = plan;
        this.workMem = workMem;
        this.sharedBuffersPercentage = sharedBuffersPercentage;
        this.pgSettings = pgSettings;
        this.maxConnections = maxConnections;
        this.users = users;
    }

    public Optional<? extends JsonSchemaPgbouncer> pgbouncerSettings() {
        return pgbouncerSettings;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public Optional<? extends OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * Number of service nodes in the active plan
     */
    public Optional<? extends Long> nodeCount() {
        return nodeCount;
    }

    /**
     * PG connection information properties
     */
    public Optional<? extends DbaasServicePgConnectionInfo> connectionInfo() {
        return connectionInfo;
    }

    /**
     * Backup schedule
     */
    public Optional<? extends DbaasServicePgBackupSchedule> backupSchedule() {
        return backupSchedule;
    }

    /**
     * Number of CPUs for each node
     */
    public Optional<? extends Long> nodeCpuCount() {
        return nodeCpuCount;
    }

    /**
     * Service integrations
     */
    public Optional<? extends java.util.List<DbaasIntegration>> integrations() {
        return integrations;
    }

    /**
     * The zone where the service is running
     */
    public Optional<? extends String> zone() {
        return zone;
    }

    /**
     * State of individual service nodes
     */
    public Optional<? extends java.util.List<DbaasNodeState>> nodeStates() {
        return nodeStates;
    }

    public String name() {
        return name;
    }

    /**
     * PostgreSQL PGBouncer connection pools
     */
    public Optional<? extends java.util.List<ConnectionPools>> connectionPools() {
        return connectionPools;
    }

    public String type() {
        return type;
    }

    public Optional<? extends EnumServiceState> state() {
        return state;
    }

    public Optional<? extends JsonSchemaTimescaledb> timescaledbSettings() {
        return timescaledbSettings;
    }

    /**
     * List of PostgreSQL databases
     */
    public Optional<? extends java.util.List<String>> databases() {
        return databases;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public Optional<? extends java.util.List<String>> ipFilter() {
        return ipFilter;
    }

    /**
     * List of backups for the service
     */
    public Optional<? extends java.util.List<DbaasServiceBackup>> backups() {
        return backups;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    /**
     * Service notifications
     */
    public Optional<? extends java.util.List<DbaasServiceNotification>> notifications() {
        return notifications;
    }

    /**
     * Service component information objects
     */
    public Optional<? extends java.util.List<DbaasServicePgComponents>> components() {
        return components;
    }

    public Optional<? extends EnumPgSynchronousReplication> synchronousReplication() {
        return synchronousReplication;
    }

    public Optional<? extends JsonSchemaPglookout> pglookoutSettings() {
        return pglookoutSettings;
    }

    /**
     * Automatic maintenance settings
     */
    public Optional<? extends DbaasServiceMaintenance> maintenance() {
        return maintenance;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public Optional<? extends Long> diskSize() {
        return diskSize;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public Optional<? extends Long> nodeMemory() {
        return nodeMemory;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public Optional<? extends String> uri() {
        return uri;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public Optional<? extends DbaasServicePgUriParams> uriParams() {
        return uriParams;
    }

    /**
     * PostgreSQL version
     */
    public Optional<? extends String> version() {
        return version;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Subscription plan
     */
    public String plan() {
        return plan;
    }

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    public Optional<? extends Long> workMem() {
        return workMem;
    }

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     */
    public Optional<? extends Long> sharedBuffersPercentage() {
        return sharedBuffersPercentage;
    }

    public Optional<? extends JsonSchemaPg> pgSettings() {
        return pgSettings;
    }

    /**
     * Maximum number of connections allowed to an instance
     */
    public Optional<? extends Long> maxConnections() {
        return maxConnections;
    }

    /**
     * List of service users
     */
    public Optional<? extends java.util.List<DbaasServicePgUsers>> users() {
        return users;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DbaasServicePg withPgbouncerSettings(JsonSchemaPgbouncer pgbouncerSettings) {
        Utils.checkNotNull(pgbouncerSettings, "pgbouncerSettings");
        this.pgbouncerSettings = Optional.ofNullable(pgbouncerSettings);
        return this;
    }

    public DbaasServicePg withPgbouncerSettings(Optional<? extends JsonSchemaPgbouncer> pgbouncerSettings) {
        Utils.checkNotNull(pgbouncerSettings, "pgbouncerSettings");
        this.pgbouncerSettings = pgbouncerSettings;
        return this;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public DbaasServicePg withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public DbaasServicePg withUpdatedAt(Optional<? extends OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Number of service nodes in the active plan
     */
    public DbaasServicePg withNodeCount(long nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = Optional.ofNullable(nodeCount);
        return this;
    }

    /**
     * Number of service nodes in the active plan
     */
    public DbaasServicePg withNodeCount(Optional<? extends Long> nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * PG connection information properties
     */
    public DbaasServicePg withConnectionInfo(DbaasServicePgConnectionInfo connectionInfo) {
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        this.connectionInfo = Optional.ofNullable(connectionInfo);
        return this;
    }

    /**
     * PG connection information properties
     */
    public DbaasServicePg withConnectionInfo(Optional<? extends DbaasServicePgConnectionInfo> connectionInfo) {
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        this.connectionInfo = connectionInfo;
        return this;
    }

    /**
     * Backup schedule
     */
    public DbaasServicePg withBackupSchedule(DbaasServicePgBackupSchedule backupSchedule) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.backupSchedule = Optional.ofNullable(backupSchedule);
        return this;
    }

    /**
     * Backup schedule
     */
    public DbaasServicePg withBackupSchedule(Optional<? extends DbaasServicePgBackupSchedule> backupSchedule) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.backupSchedule = backupSchedule;
        return this;
    }

    /**
     * Number of CPUs for each node
     */
    public DbaasServicePg withNodeCpuCount(long nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
        return this;
    }

    /**
     * Number of CPUs for each node
     */
    public DbaasServicePg withNodeCpuCount(Optional<? extends Long> nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = nodeCpuCount;
        return this;
    }

    /**
     * Service integrations
     */
    public DbaasServicePg withIntegrations(java.util.List<DbaasIntegration> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = Optional.ofNullable(integrations);
        return this;
    }

    /**
     * Service integrations
     */
    public DbaasServicePg withIntegrations(Optional<? extends java.util.List<DbaasIntegration>> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = integrations;
        return this;
    }

    /**
     * The zone where the service is running
     */
    public DbaasServicePg withZone(String zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = Optional.ofNullable(zone);
        return this;
    }

    /**
     * The zone where the service is running
     */
    public DbaasServicePg withZone(Optional<? extends String> zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = zone;
        return this;
    }

    /**
     * State of individual service nodes
     */
    public DbaasServicePg withNodeStates(java.util.List<DbaasNodeState> nodeStates) {
        Utils.checkNotNull(nodeStates, "nodeStates");
        this.nodeStates = Optional.ofNullable(nodeStates);
        return this;
    }

    /**
     * State of individual service nodes
     */
    public DbaasServicePg withNodeStates(Optional<? extends java.util.List<DbaasNodeState>> nodeStates) {
        Utils.checkNotNull(nodeStates, "nodeStates");
        this.nodeStates = nodeStates;
        return this;
    }

    public DbaasServicePg withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * PostgreSQL PGBouncer connection pools
     */
    public DbaasServicePg withConnectionPools(java.util.List<ConnectionPools> connectionPools) {
        Utils.checkNotNull(connectionPools, "connectionPools");
        this.connectionPools = Optional.ofNullable(connectionPools);
        return this;
    }

    /**
     * PostgreSQL PGBouncer connection pools
     */
    public DbaasServicePg withConnectionPools(Optional<? extends java.util.List<ConnectionPools>> connectionPools) {
        Utils.checkNotNull(connectionPools, "connectionPools");
        this.connectionPools = connectionPools;
        return this;
    }

    public DbaasServicePg withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public DbaasServicePg withState(EnumServiceState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public DbaasServicePg withState(Optional<? extends EnumServiceState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public DbaasServicePg withTimescaledbSettings(JsonSchemaTimescaledb timescaledbSettings) {
        Utils.checkNotNull(timescaledbSettings, "timescaledbSettings");
        this.timescaledbSettings = Optional.ofNullable(timescaledbSettings);
        return this;
    }

    public DbaasServicePg withTimescaledbSettings(Optional<? extends JsonSchemaTimescaledb> timescaledbSettings) {
        Utils.checkNotNull(timescaledbSettings, "timescaledbSettings");
        this.timescaledbSettings = timescaledbSettings;
        return this;
    }

    /**
     * List of PostgreSQL databases
     */
    public DbaasServicePg withDatabases(java.util.List<String> databases) {
        Utils.checkNotNull(databases, "databases");
        this.databases = Optional.ofNullable(databases);
        return this;
    }

    /**
     * List of PostgreSQL databases
     */
    public DbaasServicePg withDatabases(Optional<? extends java.util.List<String>> databases) {
        Utils.checkNotNull(databases, "databases");
        this.databases = databases;
        return this;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public DbaasServicePg withIpFilter(java.util.List<String> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = Optional.ofNullable(ipFilter);
        return this;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public DbaasServicePg withIpFilter(Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = ipFilter;
        return this;
    }

    /**
     * List of backups for the service
     */
    public DbaasServicePg withBackups(java.util.List<DbaasServiceBackup> backups) {
        Utils.checkNotNull(backups, "backups");
        this.backups = Optional.ofNullable(backups);
        return this;
    }

    /**
     * List of backups for the service
     */
    public DbaasServicePg withBackups(Optional<? extends java.util.List<DbaasServiceBackup>> backups) {
        Utils.checkNotNull(backups, "backups");
        this.backups = backups;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public DbaasServicePg withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public DbaasServicePg withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    /**
     * Service notifications
     */
    public DbaasServicePg withNotifications(java.util.List<DbaasServiceNotification> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = Optional.ofNullable(notifications);
        return this;
    }

    /**
     * Service notifications
     */
    public DbaasServicePg withNotifications(Optional<? extends java.util.List<DbaasServiceNotification>> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = notifications;
        return this;
    }

    /**
     * Service component information objects
     */
    public DbaasServicePg withComponents(java.util.List<DbaasServicePgComponents> components) {
        Utils.checkNotNull(components, "components");
        this.components = Optional.ofNullable(components);
        return this;
    }

    /**
     * Service component information objects
     */
    public DbaasServicePg withComponents(Optional<? extends java.util.List<DbaasServicePgComponents>> components) {
        Utils.checkNotNull(components, "components");
        this.components = components;
        return this;
    }

    public DbaasServicePg withSynchronousReplication(EnumPgSynchronousReplication synchronousReplication) {
        Utils.checkNotNull(synchronousReplication, "synchronousReplication");
        this.synchronousReplication = Optional.ofNullable(synchronousReplication);
        return this;
    }

    public DbaasServicePg withSynchronousReplication(Optional<? extends EnumPgSynchronousReplication> synchronousReplication) {
        Utils.checkNotNull(synchronousReplication, "synchronousReplication");
        this.synchronousReplication = synchronousReplication;
        return this;
    }

    public DbaasServicePg withPglookoutSettings(JsonSchemaPglookout pglookoutSettings) {
        Utils.checkNotNull(pglookoutSettings, "pglookoutSettings");
        this.pglookoutSettings = Optional.ofNullable(pglookoutSettings);
        return this;
    }

    public DbaasServicePg withPglookoutSettings(Optional<? extends JsonSchemaPglookout> pglookoutSettings) {
        Utils.checkNotNull(pglookoutSettings, "pglookoutSettings");
        this.pglookoutSettings = pglookoutSettings;
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public DbaasServicePg withMaintenance(DbaasServiceMaintenance maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = Optional.ofNullable(maintenance);
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public DbaasServicePg withMaintenance(Optional<? extends DbaasServiceMaintenance> maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = maintenance;
        return this;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public DbaasServicePg withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = Optional.ofNullable(diskSize);
        return this;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public DbaasServicePg withDiskSize(Optional<? extends Long> diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public DbaasServicePg withNodeMemory(long nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = Optional.ofNullable(nodeMemory);
        return this;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public DbaasServicePg withNodeMemory(Optional<? extends Long> nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = nodeMemory;
        return this;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public DbaasServicePg withUri(String uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = Optional.ofNullable(uri);
        return this;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public DbaasServicePg withUri(Optional<? extends String> uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = uri;
        return this;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public DbaasServicePg withUriParams(DbaasServicePgUriParams uriParams) {
        Utils.checkNotNull(uriParams, "uriParams");
        this.uriParams = Optional.ofNullable(uriParams);
        return this;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public DbaasServicePg withUriParams(Optional<? extends DbaasServicePgUriParams> uriParams) {
        Utils.checkNotNull(uriParams, "uriParams");
        this.uriParams = uriParams;
        return this;
    }

    /**
     * PostgreSQL version
     */
    public DbaasServicePg withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * PostgreSQL version
     */
    public DbaasServicePg withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public DbaasServicePg withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public DbaasServicePg withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Subscription plan
     */
    public DbaasServicePg withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    public DbaasServicePg withWorkMem(long workMem) {
        Utils.checkNotNull(workMem, "workMem");
        this.workMem = Optional.ofNullable(workMem);
        return this;
    }

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    public DbaasServicePg withWorkMem(Optional<? extends Long> workMem) {
        Utils.checkNotNull(workMem, "workMem");
        this.workMem = workMem;
        return this;
    }

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     */
    public DbaasServicePg withSharedBuffersPercentage(long sharedBuffersPercentage) {
        Utils.checkNotNull(sharedBuffersPercentage, "sharedBuffersPercentage");
        this.sharedBuffersPercentage = Optional.ofNullable(sharedBuffersPercentage);
        return this;
    }

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     */
    public DbaasServicePg withSharedBuffersPercentage(Optional<? extends Long> sharedBuffersPercentage) {
        Utils.checkNotNull(sharedBuffersPercentage, "sharedBuffersPercentage");
        this.sharedBuffersPercentage = sharedBuffersPercentage;
        return this;
    }

    public DbaasServicePg withPgSettings(JsonSchemaPg pgSettings) {
        Utils.checkNotNull(pgSettings, "pgSettings");
        this.pgSettings = Optional.ofNullable(pgSettings);
        return this;
    }

    public DbaasServicePg withPgSettings(Optional<? extends JsonSchemaPg> pgSettings) {
        Utils.checkNotNull(pgSettings, "pgSettings");
        this.pgSettings = pgSettings;
        return this;
    }

    /**
     * Maximum number of connections allowed to an instance
     */
    public DbaasServicePg withMaxConnections(long maxConnections) {
        Utils.checkNotNull(maxConnections, "maxConnections");
        this.maxConnections = Optional.ofNullable(maxConnections);
        return this;
    }

    /**
     * Maximum number of connections allowed to an instance
     */
    public DbaasServicePg withMaxConnections(Optional<? extends Long> maxConnections) {
        Utils.checkNotNull(maxConnections, "maxConnections");
        this.maxConnections = maxConnections;
        return this;
    }

    /**
     * List of service users
     */
    public DbaasServicePg withUsers(java.util.List<DbaasServicePgUsers> users) {
        Utils.checkNotNull(users, "users");
        this.users = Optional.ofNullable(users);
        return this;
    }

    /**
     * List of service users
     */
    public DbaasServicePg withUsers(Optional<? extends java.util.List<DbaasServicePgUsers>> users) {
        Utils.checkNotNull(users, "users");
        this.users = users;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServicePg other = (DbaasServicePg) o;
        return 
            java.util.Objects.deepEquals(this.pgbouncerSettings, other.pgbouncerSettings) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.nodeCount, other.nodeCount) &&
            java.util.Objects.deepEquals(this.connectionInfo, other.connectionInfo) &&
            java.util.Objects.deepEquals(this.backupSchedule, other.backupSchedule) &&
            java.util.Objects.deepEquals(this.nodeCpuCount, other.nodeCpuCount) &&
            java.util.Objects.deepEquals(this.integrations, other.integrations) &&
            java.util.Objects.deepEquals(this.zone, other.zone) &&
            java.util.Objects.deepEquals(this.nodeStates, other.nodeStates) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.connectionPools, other.connectionPools) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.timescaledbSettings, other.timescaledbSettings) &&
            java.util.Objects.deepEquals(this.databases, other.databases) &&
            java.util.Objects.deepEquals(this.ipFilter, other.ipFilter) &&
            java.util.Objects.deepEquals(this.backups, other.backups) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.notifications, other.notifications) &&
            java.util.Objects.deepEquals(this.components, other.components) &&
            java.util.Objects.deepEquals(this.synchronousReplication, other.synchronousReplication) &&
            java.util.Objects.deepEquals(this.pglookoutSettings, other.pglookoutSettings) &&
            java.util.Objects.deepEquals(this.maintenance, other.maintenance) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize) &&
            java.util.Objects.deepEquals(this.nodeMemory, other.nodeMemory) &&
            java.util.Objects.deepEquals(this.uri, other.uri) &&
            java.util.Objects.deepEquals(this.uriParams, other.uriParams) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.plan, other.plan) &&
            java.util.Objects.deepEquals(this.workMem, other.workMem) &&
            java.util.Objects.deepEquals(this.sharedBuffersPercentage, other.sharedBuffersPercentage) &&
            java.util.Objects.deepEquals(this.pgSettings, other.pgSettings) &&
            java.util.Objects.deepEquals(this.maxConnections, other.maxConnections) &&
            java.util.Objects.deepEquals(this.users, other.users);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            pgbouncerSettings,
            updatedAt,
            nodeCount,
            connectionInfo,
            backupSchedule,
            nodeCpuCount,
            integrations,
            zone,
            nodeStates,
            name,
            connectionPools,
            type,
            state,
            timescaledbSettings,
            databases,
            ipFilter,
            backups,
            terminationProtection,
            notifications,
            components,
            synchronousReplication,
            pglookoutSettings,
            maintenance,
            diskSize,
            nodeMemory,
            uri,
            uriParams,
            version,
            createdAt,
            plan,
            workMem,
            sharedBuffersPercentage,
            pgSettings,
            maxConnections,
            users);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServicePg.class,
                "pgbouncerSettings", pgbouncerSettings,
                "updatedAt", updatedAt,
                "nodeCount", nodeCount,
                "connectionInfo", connectionInfo,
                "backupSchedule", backupSchedule,
                "nodeCpuCount", nodeCpuCount,
                "integrations", integrations,
                "zone", zone,
                "nodeStates", nodeStates,
                "name", name,
                "connectionPools", connectionPools,
                "type", type,
                "state", state,
                "timescaledbSettings", timescaledbSettings,
                "databases", databases,
                "ipFilter", ipFilter,
                "backups", backups,
                "terminationProtection", terminationProtection,
                "notifications", notifications,
                "components", components,
                "synchronousReplication", synchronousReplication,
                "pglookoutSettings", pglookoutSettings,
                "maintenance", maintenance,
                "diskSize", diskSize,
                "nodeMemory", nodeMemory,
                "uri", uri,
                "uriParams", uriParams,
                "version", version,
                "createdAt", createdAt,
                "plan", plan,
                "workMem", workMem,
                "sharedBuffersPercentage", sharedBuffersPercentage,
                "pgSettings", pgSettings,
                "maxConnections", maxConnections,
                "users", users);
    }
    
    public final static class Builder {
 
        private Optional<? extends JsonSchemaPgbouncer> pgbouncerSettings = Optional.empty();
 
        private Optional<? extends OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<? extends Long> nodeCount = Optional.empty();
 
        private Optional<? extends DbaasServicePgConnectionInfo> connectionInfo = Optional.empty();
 
        private Optional<? extends DbaasServicePgBackupSchedule> backupSchedule = Optional.empty();
 
        private Optional<? extends Long> nodeCpuCount = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasIntegration>> integrations = Optional.empty();
 
        private Optional<? extends String> zone = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasNodeState>> nodeStates = Optional.empty();
 
        private String name;
 
        private Optional<? extends java.util.List<ConnectionPools>> connectionPools = Optional.empty();
 
        private String type;
 
        private Optional<? extends EnumServiceState> state = Optional.empty();
 
        private Optional<? extends JsonSchemaTimescaledb> timescaledbSettings = Optional.empty();
 
        private Optional<? extends java.util.List<String>> databases = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ipFilter = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceBackup>> backups = Optional.empty();
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceNotification>> notifications = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServicePgComponents>> components = Optional.empty();
 
        private Optional<? extends EnumPgSynchronousReplication> synchronousReplication = Optional.empty();
 
        private Optional<? extends JsonSchemaPglookout> pglookoutSettings = Optional.empty();
 
        private Optional<? extends DbaasServiceMaintenance> maintenance = Optional.empty();
 
        private Optional<? extends Long> diskSize = Optional.empty();
 
        private Optional<? extends Long> nodeMemory = Optional.empty();
 
        private Optional<? extends String> uri = Optional.empty();
 
        private Optional<? extends DbaasServicePgUriParams> uriParams = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private String plan;
 
        private Optional<? extends Long> workMem = Optional.empty();
 
        private Optional<? extends Long> sharedBuffersPercentage = Optional.empty();
 
        private Optional<? extends JsonSchemaPg> pgSettings = Optional.empty();
 
        private Optional<? extends Long> maxConnections = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServicePgUsers>> users = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder pgbouncerSettings(JsonSchemaPgbouncer pgbouncerSettings) {
            Utils.checkNotNull(pgbouncerSettings, "pgbouncerSettings");
            this.pgbouncerSettings = Optional.ofNullable(pgbouncerSettings);
            return this;
        }

        public Builder pgbouncerSettings(Optional<? extends JsonSchemaPgbouncer> pgbouncerSettings) {
            Utils.checkNotNull(pgbouncerSettings, "pgbouncerSettings");
            this.pgbouncerSettings = pgbouncerSettings;
            return this;
        }

        /**
         * Service last update timestamp (ISO 8601)
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Service last update timestamp (ISO 8601)
         */
        public Builder updatedAt(Optional<? extends OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Number of service nodes in the active plan
         */
        public Builder nodeCount(long nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = Optional.ofNullable(nodeCount);
            return this;
        }

        /**
         * Number of service nodes in the active plan
         */
        public Builder nodeCount(Optional<? extends Long> nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = nodeCount;
            return this;
        }

        /**
         * PG connection information properties
         */
        public Builder connectionInfo(DbaasServicePgConnectionInfo connectionInfo) {
            Utils.checkNotNull(connectionInfo, "connectionInfo");
            this.connectionInfo = Optional.ofNullable(connectionInfo);
            return this;
        }

        /**
         * PG connection information properties
         */
        public Builder connectionInfo(Optional<? extends DbaasServicePgConnectionInfo> connectionInfo) {
            Utils.checkNotNull(connectionInfo, "connectionInfo");
            this.connectionInfo = connectionInfo;
            return this;
        }

        /**
         * Backup schedule
         */
        public Builder backupSchedule(DbaasServicePgBackupSchedule backupSchedule) {
            Utils.checkNotNull(backupSchedule, "backupSchedule");
            this.backupSchedule = Optional.ofNullable(backupSchedule);
            return this;
        }

        /**
         * Backup schedule
         */
        public Builder backupSchedule(Optional<? extends DbaasServicePgBackupSchedule> backupSchedule) {
            Utils.checkNotNull(backupSchedule, "backupSchedule");
            this.backupSchedule = backupSchedule;
            return this;
        }

        /**
         * Number of CPUs for each node
         */
        public Builder nodeCpuCount(long nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
            return this;
        }

        /**
         * Number of CPUs for each node
         */
        public Builder nodeCpuCount(Optional<? extends Long> nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = nodeCpuCount;
            return this;
        }

        /**
         * Service integrations
         */
        public Builder integrations(java.util.List<DbaasIntegration> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = Optional.ofNullable(integrations);
            return this;
        }

        /**
         * Service integrations
         */
        public Builder integrations(Optional<? extends java.util.List<DbaasIntegration>> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = integrations;
            return this;
        }

        /**
         * The zone where the service is running
         */
        public Builder zone(String zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = Optional.ofNullable(zone);
            return this;
        }

        /**
         * The zone where the service is running
         */
        public Builder zone(Optional<? extends String> zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = zone;
            return this;
        }

        /**
         * State of individual service nodes
         */
        public Builder nodeStates(java.util.List<DbaasNodeState> nodeStates) {
            Utils.checkNotNull(nodeStates, "nodeStates");
            this.nodeStates = Optional.ofNullable(nodeStates);
            return this;
        }

        /**
         * State of individual service nodes
         */
        public Builder nodeStates(Optional<? extends java.util.List<DbaasNodeState>> nodeStates) {
            Utils.checkNotNull(nodeStates, "nodeStates");
            this.nodeStates = nodeStates;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * PostgreSQL PGBouncer connection pools
         */
        public Builder connectionPools(java.util.List<ConnectionPools> connectionPools) {
            Utils.checkNotNull(connectionPools, "connectionPools");
            this.connectionPools = Optional.ofNullable(connectionPools);
            return this;
        }

        /**
         * PostgreSQL PGBouncer connection pools
         */
        public Builder connectionPools(Optional<? extends java.util.List<ConnectionPools>> connectionPools) {
            Utils.checkNotNull(connectionPools, "connectionPools");
            this.connectionPools = connectionPools;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder state(EnumServiceState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends EnumServiceState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder timescaledbSettings(JsonSchemaTimescaledb timescaledbSettings) {
            Utils.checkNotNull(timescaledbSettings, "timescaledbSettings");
            this.timescaledbSettings = Optional.ofNullable(timescaledbSettings);
            return this;
        }

        public Builder timescaledbSettings(Optional<? extends JsonSchemaTimescaledb> timescaledbSettings) {
            Utils.checkNotNull(timescaledbSettings, "timescaledbSettings");
            this.timescaledbSettings = timescaledbSettings;
            return this;
        }

        /**
         * List of PostgreSQL databases
         */
        public Builder databases(java.util.List<String> databases) {
            Utils.checkNotNull(databases, "databases");
            this.databases = Optional.ofNullable(databases);
            return this;
        }

        /**
         * List of PostgreSQL databases
         */
        public Builder databases(Optional<? extends java.util.List<String>> databases) {
            Utils.checkNotNull(databases, "databases");
            this.databases = databases;
            return this;
        }

        /**
         * Allowed CIDR address blocks for incoming connections
         */
        public Builder ipFilter(java.util.List<String> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = Optional.ofNullable(ipFilter);
            return this;
        }

        /**
         * Allowed CIDR address blocks for incoming connections
         */
        public Builder ipFilter(Optional<? extends java.util.List<String>> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * List of backups for the service
         */
        public Builder backups(java.util.List<DbaasServiceBackup> backups) {
            Utils.checkNotNull(backups, "backups");
            this.backups = Optional.ofNullable(backups);
            return this;
        }

        /**
         * List of backups for the service
         */
        public Builder backups(Optional<? extends java.util.List<DbaasServiceBackup>> backups) {
            Utils.checkNotNull(backups, "backups");
            this.backups = backups;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Service notifications
         */
        public Builder notifications(java.util.List<DbaasServiceNotification> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = Optional.ofNullable(notifications);
            return this;
        }

        /**
         * Service notifications
         */
        public Builder notifications(Optional<? extends java.util.List<DbaasServiceNotification>> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = notifications;
            return this;
        }

        /**
         * Service component information objects
         */
        public Builder components(java.util.List<DbaasServicePgComponents> components) {
            Utils.checkNotNull(components, "components");
            this.components = Optional.ofNullable(components);
            return this;
        }

        /**
         * Service component information objects
         */
        public Builder components(Optional<? extends java.util.List<DbaasServicePgComponents>> components) {
            Utils.checkNotNull(components, "components");
            this.components = components;
            return this;
        }

        public Builder synchronousReplication(EnumPgSynchronousReplication synchronousReplication) {
            Utils.checkNotNull(synchronousReplication, "synchronousReplication");
            this.synchronousReplication = Optional.ofNullable(synchronousReplication);
            return this;
        }

        public Builder synchronousReplication(Optional<? extends EnumPgSynchronousReplication> synchronousReplication) {
            Utils.checkNotNull(synchronousReplication, "synchronousReplication");
            this.synchronousReplication = synchronousReplication;
            return this;
        }

        public Builder pglookoutSettings(JsonSchemaPglookout pglookoutSettings) {
            Utils.checkNotNull(pglookoutSettings, "pglookoutSettings");
            this.pglookoutSettings = Optional.ofNullable(pglookoutSettings);
            return this;
        }

        public Builder pglookoutSettings(Optional<? extends JsonSchemaPglookout> pglookoutSettings) {
            Utils.checkNotNull(pglookoutSettings, "pglookoutSettings");
            this.pglookoutSettings = pglookoutSettings;
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(DbaasServiceMaintenance maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = Optional.ofNullable(maintenance);
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Optional<? extends DbaasServiceMaintenance> maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = maintenance;
            return this;
        }

        /**
         * TODO UNIT disk space for data storage
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = Optional.ofNullable(diskSize);
            return this;
        }

        /**
         * TODO UNIT disk space for data storage
         */
        public Builder diskSize(Optional<? extends Long> diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }

        /**
         * TODO UNIT of memory for each node
         */
        public Builder nodeMemory(long nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = Optional.ofNullable(nodeMemory);
            return this;
        }

        /**
         * TODO UNIT of memory for each node
         */
        public Builder nodeMemory(Optional<? extends Long> nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = nodeMemory;
            return this;
        }

        /**
         * URI for connecting to the service (may be absent)
         */
        public Builder uri(String uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = Optional.ofNullable(uri);
            return this;
        }

        /**
         * URI for connecting to the service (may be absent)
         */
        public Builder uri(Optional<? extends String> uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = uri;
            return this;
        }

        /**
         * service_uri parameterized into key-value pairs
         */
        public Builder uriParams(DbaasServicePgUriParams uriParams) {
            Utils.checkNotNull(uriParams, "uriParams");
            this.uriParams = Optional.ofNullable(uriParams);
            return this;
        }

        /**
         * service_uri parameterized into key-value pairs
         */
        public Builder uriParams(Optional<? extends DbaasServicePgUriParams> uriParams) {
            Utils.checkNotNull(uriParams, "uriParams");
            this.uriParams = uriParams;
            return this;
        }

        /**
         * PostgreSQL version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * PostgreSQL version
         */
        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Service creation timestamp (ISO 8601)
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Service creation timestamp (ISO 8601)
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }

        /**
         * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
         */
        public Builder workMem(long workMem) {
            Utils.checkNotNull(workMem, "workMem");
            this.workMem = Optional.ofNullable(workMem);
            return this;
        }

        /**
         * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
         */
        public Builder workMem(Optional<? extends Long> workMem) {
            Utils.checkNotNull(workMem, "workMem");
            this.workMem = workMem;
            return this;
        }

        /**
         * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
         */
        public Builder sharedBuffersPercentage(long sharedBuffersPercentage) {
            Utils.checkNotNull(sharedBuffersPercentage, "sharedBuffersPercentage");
            this.sharedBuffersPercentage = Optional.ofNullable(sharedBuffersPercentage);
            return this;
        }

        /**
         * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
         */
        public Builder sharedBuffersPercentage(Optional<? extends Long> sharedBuffersPercentage) {
            Utils.checkNotNull(sharedBuffersPercentage, "sharedBuffersPercentage");
            this.sharedBuffersPercentage = sharedBuffersPercentage;
            return this;
        }

        public Builder pgSettings(JsonSchemaPg pgSettings) {
            Utils.checkNotNull(pgSettings, "pgSettings");
            this.pgSettings = Optional.ofNullable(pgSettings);
            return this;
        }

        public Builder pgSettings(Optional<? extends JsonSchemaPg> pgSettings) {
            Utils.checkNotNull(pgSettings, "pgSettings");
            this.pgSettings = pgSettings;
            return this;
        }

        /**
         * Maximum number of connections allowed to an instance
         */
        public Builder maxConnections(long maxConnections) {
            Utils.checkNotNull(maxConnections, "maxConnections");
            this.maxConnections = Optional.ofNullable(maxConnections);
            return this;
        }

        /**
         * Maximum number of connections allowed to an instance
         */
        public Builder maxConnections(Optional<? extends Long> maxConnections) {
            Utils.checkNotNull(maxConnections, "maxConnections");
            this.maxConnections = maxConnections;
            return this;
        }

        /**
         * List of service users
         */
        public Builder users(java.util.List<DbaasServicePgUsers> users) {
            Utils.checkNotNull(users, "users");
            this.users = Optional.ofNullable(users);
            return this;
        }

        /**
         * List of service users
         */
        public Builder users(Optional<? extends java.util.List<DbaasServicePgUsers>> users) {
            Utils.checkNotNull(users, "users");
            this.users = users;
            return this;
        }
        
        public DbaasServicePg build() {
            return new DbaasServicePg(
                pgbouncerSettings,
                updatedAt,
                nodeCount,
                connectionInfo,
                backupSchedule,
                nodeCpuCount,
                integrations,
                zone,
                nodeStates,
                name,
                connectionPools,
                type,
                state,
                timescaledbSettings,
                databases,
                ipFilter,
                backups,
                terminationProtection,
                notifications,
                components,
                synchronousReplication,
                pglookoutSettings,
                maintenance,
                diskSize,
                nodeMemory,
                uri,
                uriParams,
                version,
                createdAt,
                plan,
                workMem,
                sharedBuffersPercentage,
                pgSettings,
                maxConnections,
                users);
        }
    }
}

