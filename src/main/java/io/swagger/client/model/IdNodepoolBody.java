/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.AntiAffinityGroup;
import io.swagger.client.model.DeployTarget;
import io.swagger.client.model.InstanceType;
import io.swagger.client.model.KubeletImageGc;
import io.swagger.client.model.Labels;
import io.swagger.client.model.PrivateNetwork;
import io.swagger.client.model.SecurityGroup;
import io.swagger.client.model.SksNodepoolTaints;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * IdNodepoolBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class IdNodepoolBody {
  @JsonProperty("anti-affinity-groups")
  private List<AntiAffinityGroup> antiAffinityGroups = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("labels")
  private Labels labels = null;

  @JsonProperty("taints")
  private SksNodepoolTaints taints = null;

  @JsonProperty("security-groups")
  private List<SecurityGroup> securityGroups = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("instance-type")
  private InstanceType instanceType = null;

  @JsonProperty("private-networks")
  private List<PrivateNetwork> privateNetworks = null;

  @JsonProperty("size")
  private Long size = null;

  @JsonProperty("kubelet-image-gc")
  private KubeletImageGc kubeletImageGc = null;

  @JsonProperty("instance-prefix")
  private String instancePrefix = null;

  @JsonProperty("deploy-target")
  private DeployTarget deployTarget = null;

  /**
   * Gets or Sets addons
   */
  public enum AddonsEnum {
    STORAGE_LVM("storage-lvm");

    private String value;

    AddonsEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AddonsEnum fromValue(String input) {
      for (AddonsEnum b : AddonsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("addons")
  private List<AddonsEnum> addons = null;

  @JsonProperty("disk-size")
  private Long diskSize = null;

  public IdNodepoolBody antiAffinityGroups(List<AntiAffinityGroup> antiAffinityGroups) {
    this.antiAffinityGroups = antiAffinityGroups;
    return this;
  }

  public IdNodepoolBody addAntiAffinityGroupsItem(AntiAffinityGroup antiAffinityGroupsItem) {
    if (this.antiAffinityGroups == null) {
      this.antiAffinityGroups = new ArrayList<>();
    }
    this.antiAffinityGroups.add(antiAffinityGroupsItem);
    return this;
  }

   /**
   * Nodepool Anti-affinity Groups
   * @return antiAffinityGroups
  **/
  @Schema(description = "Nodepool Anti-affinity Groups")
  public List<AntiAffinityGroup> getAntiAffinityGroups() {
    return antiAffinityGroups;
  }

  public void setAntiAffinityGroups(List<AntiAffinityGroup> antiAffinityGroups) {
    this.antiAffinityGroups = antiAffinityGroups;
  }

  public IdNodepoolBody description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Nodepool description
   * @return description
  **/
  @Schema(description = "Nodepool description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public IdNodepoolBody labels(Labels labels) {
    this.labels = labels;
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @Schema(description = "")
  public Labels getLabels() {
    return labels;
  }

  public void setLabels(Labels labels) {
    this.labels = labels;
  }

  public IdNodepoolBody taints(SksNodepoolTaints taints) {
    this.taints = taints;
    return this;
  }

   /**
   * Get taints
   * @return taints
  **/
  @Schema(description = "")
  public SksNodepoolTaints getTaints() {
    return taints;
  }

  public void setTaints(SksNodepoolTaints taints) {
    this.taints = taints;
  }

  public IdNodepoolBody securityGroups(List<SecurityGroup> securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

  public IdNodepoolBody addSecurityGroupsItem(SecurityGroup securityGroupsItem) {
    if (this.securityGroups == null) {
      this.securityGroups = new ArrayList<>();
    }
    this.securityGroups.add(securityGroupsItem);
    return this;
  }

   /**
   * Nodepool Security Groups
   * @return securityGroups
  **/
  @Schema(description = "Nodepool Security Groups")
  public List<SecurityGroup> getSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(List<SecurityGroup> securityGroups) {
    this.securityGroups = securityGroups;
  }

  public IdNodepoolBody name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Nodepool name
   * @return name
  **/
  @Schema(required = true, description = "Nodepool name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public IdNodepoolBody instanceType(InstanceType instanceType) {
    this.instanceType = instanceType;
    return this;
  }

   /**
   * Get instanceType
   * @return instanceType
  **/
  @Schema(required = true, description = "")
  public InstanceType getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(InstanceType instanceType) {
    this.instanceType = instanceType;
  }

  public IdNodepoolBody privateNetworks(List<PrivateNetwork> privateNetworks) {
    this.privateNetworks = privateNetworks;
    return this;
  }

  public IdNodepoolBody addPrivateNetworksItem(PrivateNetwork privateNetworksItem) {
    if (this.privateNetworks == null) {
      this.privateNetworks = new ArrayList<>();
    }
    this.privateNetworks.add(privateNetworksItem);
    return this;
  }

   /**
   * Nodepool Private Networks
   * @return privateNetworks
  **/
  @Schema(description = "Nodepool Private Networks")
  public List<PrivateNetwork> getPrivateNetworks() {
    return privateNetworks;
  }

  public void setPrivateNetworks(List<PrivateNetwork> privateNetworks) {
    this.privateNetworks = privateNetworks;
  }

  public IdNodepoolBody size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Number of instances
   * minimum: 0
   * @return size
  **/
  @Schema(required = true, description = "Number of instances")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public IdNodepoolBody kubeletImageGc(KubeletImageGc kubeletImageGc) {
    this.kubeletImageGc = kubeletImageGc;
    return this;
  }

   /**
   * Get kubeletImageGc
   * @return kubeletImageGc
  **/
  @Schema(description = "")
  public KubeletImageGc getKubeletImageGc() {
    return kubeletImageGc;
  }

  public void setKubeletImageGc(KubeletImageGc kubeletImageGc) {
    this.kubeletImageGc = kubeletImageGc;
  }

  public IdNodepoolBody instancePrefix(String instancePrefix) {
    this.instancePrefix = instancePrefix;
    return this;
  }

   /**
   * Prefix to apply to instances names (default: pool)
   * @return instancePrefix
  **/
  @Schema(description = "Prefix to apply to instances names (default: pool)")
  public String getInstancePrefix() {
    return instancePrefix;
  }

  public void setInstancePrefix(String instancePrefix) {
    this.instancePrefix = instancePrefix;
  }

  public IdNodepoolBody deployTarget(DeployTarget deployTarget) {
    this.deployTarget = deployTarget;
    return this;
  }

   /**
   * Get deployTarget
   * @return deployTarget
  **/
  @Schema(description = "")
  public DeployTarget getDeployTarget() {
    return deployTarget;
  }

  public void setDeployTarget(DeployTarget deployTarget) {
    this.deployTarget = deployTarget;
  }

  public IdNodepoolBody addons(List<AddonsEnum> addons) {
    this.addons = addons;
    return this;
  }

  public IdNodepoolBody addAddonsItem(AddonsEnum addonsItem) {
    if (this.addons == null) {
      this.addons = new ArrayList<>();
    }
    this.addons.add(addonsItem);
    return this;
  }

   /**
   * Nodepool addons
   * @return addons
  **/
  @Schema(description = "Nodepool addons")
  public List<AddonsEnum> getAddons() {
    return addons;
  }

  public void setAddons(List<AddonsEnum> addons) {
    this.addons = addons;
  }

  public IdNodepoolBody diskSize(Long diskSize) {
    this.diskSize = diskSize;
    return this;
  }

   /**
   * Nodepool instances disk size in GB
   * minimum: 20
   * maximum: 50000
   * @return diskSize
  **/
  @Schema(required = true, description = "Nodepool instances disk size in GB")
  public Long getDiskSize() {
    return diskSize;
  }

  public void setDiskSize(Long diskSize) {
    this.diskSize = diskSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdNodepoolBody idNodepoolBody = (IdNodepoolBody) o;
    return Objects.equals(this.antiAffinityGroups, idNodepoolBody.antiAffinityGroups) &&
        Objects.equals(this.description, idNodepoolBody.description) &&
        Objects.equals(this.labels, idNodepoolBody.labels) &&
        Objects.equals(this.taints, idNodepoolBody.taints) &&
        Objects.equals(this.securityGroups, idNodepoolBody.securityGroups) &&
        Objects.equals(this.name, idNodepoolBody.name) &&
        Objects.equals(this.instanceType, idNodepoolBody.instanceType) &&
        Objects.equals(this.privateNetworks, idNodepoolBody.privateNetworks) &&
        Objects.equals(this.size, idNodepoolBody.size) &&
        Objects.equals(this.kubeletImageGc, idNodepoolBody.kubeletImageGc) &&
        Objects.equals(this.instancePrefix, idNodepoolBody.instancePrefix) &&
        Objects.equals(this.deployTarget, idNodepoolBody.deployTarget) &&
        Objects.equals(this.addons, idNodepoolBody.addons) &&
        Objects.equals(this.diskSize, idNodepoolBody.diskSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antiAffinityGroups, description, labels, taints, securityGroups, name, instanceType, privateNetworks, size, kubeletImageGc, instancePrefix, deployTarget, addons, diskSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdNodepoolBody {\n");
    
    sb.append("    antiAffinityGroups: ").append(toIndentedString(antiAffinityGroups)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    taints: ").append(toIndentedString(taints)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    privateNetworks: ").append(toIndentedString(privateNetworks)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    kubeletImageGc: ").append(toIndentedString(kubeletImageGc)).append("\n");
    sb.append("    instancePrefix: ").append(toIndentedString(instancePrefix)).append("\n");
    sb.append("    deployTarget: ").append(toIndentedString(deployTarget)).append("\n");
    sb.append("    addons: ").append(toIndentedString(addons)).append("\n");
    sb.append("    diskSize: ").append(toIndentedString(diskSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
