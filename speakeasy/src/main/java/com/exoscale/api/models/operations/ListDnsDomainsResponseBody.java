/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * ListDnsDomainsResponseBody - 200
 */

public class ListDnsDomainsResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dns-domains")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.DnsDomain>> dnsDomains;

    public ListDnsDomainsResponseBody(
            @JsonProperty("dns-domains") Optional<? extends java.util.List<com.exoscale.api.models.components.DnsDomain>> dnsDomains) {
        Utils.checkNotNull(dnsDomains, "dnsDomains");
        this.dnsDomains = dnsDomains;
    }

    public Optional<? extends java.util.List<com.exoscale.api.models.components.DnsDomain>> dnsDomains() {
        return dnsDomains;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListDnsDomainsResponseBody withDnsDomains(java.util.List<com.exoscale.api.models.components.DnsDomain> dnsDomains) {
        Utils.checkNotNull(dnsDomains, "dnsDomains");
        this.dnsDomains = Optional.ofNullable(dnsDomains);
        return this;
    }

    public ListDnsDomainsResponseBody withDnsDomains(Optional<? extends java.util.List<com.exoscale.api.models.components.DnsDomain>> dnsDomains) {
        Utils.checkNotNull(dnsDomains, "dnsDomains");
        this.dnsDomains = dnsDomains;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListDnsDomainsResponseBody other = (ListDnsDomainsResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.dnsDomains, other.dnsDomains);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            dnsDomains);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListDnsDomainsResponseBody.class,
                "dnsDomains", dnsDomains);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.DnsDomain>> dnsDomains = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dnsDomains(java.util.List<com.exoscale.api.models.components.DnsDomain> dnsDomains) {
            Utils.checkNotNull(dnsDomains, "dnsDomains");
            this.dnsDomains = Optional.ofNullable(dnsDomains);
            return this;
        }

        public Builder dnsDomains(Optional<? extends java.util.List<com.exoscale.api.models.components.DnsDomain>> dnsDomains) {
            Utils.checkNotNull(dnsDomains, "dnsDomains");
            this.dnsDomains = dnsDomains;
            return this;
        }
        
        public ListDnsDomainsResponseBody build() {
            return new ListDnsDomainsResponseBody(
                dnsDomains);
        }
    }
}

