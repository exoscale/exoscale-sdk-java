/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class UpdateDbaasServiceOpensearchIndexPatterns {

    /**
     * Maximum number of indexes to keep
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max-index-count")
    private Optional<? extends Long> maxIndexCount;

    /**
     * Deletion sorting algorithm
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sorting-algorithm")
    private Optional<? extends UpdateDbaasServiceOpensearchSortingAlgorithm> sortingAlgorithm;

    /**
     * fnmatch pattern
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pattern")
    private Optional<? extends String> pattern;

    public UpdateDbaasServiceOpensearchIndexPatterns(
            @JsonProperty("max-index-count") Optional<? extends Long> maxIndexCount,
            @JsonProperty("sorting-algorithm") Optional<? extends UpdateDbaasServiceOpensearchSortingAlgorithm> sortingAlgorithm,
            @JsonProperty("pattern") Optional<? extends String> pattern) {
        Utils.checkNotNull(maxIndexCount, "maxIndexCount");
        Utils.checkNotNull(sortingAlgorithm, "sortingAlgorithm");
        Utils.checkNotNull(pattern, "pattern");
        this.maxIndexCount = maxIndexCount;
        this.sortingAlgorithm = sortingAlgorithm;
        this.pattern = pattern;
    }

    /**
     * Maximum number of indexes to keep
     */
    public Optional<? extends Long> maxIndexCount() {
        return maxIndexCount;
    }

    /**
     * Deletion sorting algorithm
     */
    public Optional<? extends UpdateDbaasServiceOpensearchSortingAlgorithm> sortingAlgorithm() {
        return sortingAlgorithm;
    }

    /**
     * fnmatch pattern
     */
    public Optional<? extends String> pattern() {
        return pattern;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Maximum number of indexes to keep
     */
    public UpdateDbaasServiceOpensearchIndexPatterns withMaxIndexCount(long maxIndexCount) {
        Utils.checkNotNull(maxIndexCount, "maxIndexCount");
        this.maxIndexCount = Optional.ofNullable(maxIndexCount);
        return this;
    }

    /**
     * Maximum number of indexes to keep
     */
    public UpdateDbaasServiceOpensearchIndexPatterns withMaxIndexCount(Optional<? extends Long> maxIndexCount) {
        Utils.checkNotNull(maxIndexCount, "maxIndexCount");
        this.maxIndexCount = maxIndexCount;
        return this;
    }

    /**
     * Deletion sorting algorithm
     */
    public UpdateDbaasServiceOpensearchIndexPatterns withSortingAlgorithm(UpdateDbaasServiceOpensearchSortingAlgorithm sortingAlgorithm) {
        Utils.checkNotNull(sortingAlgorithm, "sortingAlgorithm");
        this.sortingAlgorithm = Optional.ofNullable(sortingAlgorithm);
        return this;
    }

    /**
     * Deletion sorting algorithm
     */
    public UpdateDbaasServiceOpensearchIndexPatterns withSortingAlgorithm(Optional<? extends UpdateDbaasServiceOpensearchSortingAlgorithm> sortingAlgorithm) {
        Utils.checkNotNull(sortingAlgorithm, "sortingAlgorithm");
        this.sortingAlgorithm = sortingAlgorithm;
        return this;
    }

    /**
     * fnmatch pattern
     */
    public UpdateDbaasServiceOpensearchIndexPatterns withPattern(String pattern) {
        Utils.checkNotNull(pattern, "pattern");
        this.pattern = Optional.ofNullable(pattern);
        return this;
    }

    /**
     * fnmatch pattern
     */
    public UpdateDbaasServiceOpensearchIndexPatterns withPattern(Optional<? extends String> pattern) {
        Utils.checkNotNull(pattern, "pattern");
        this.pattern = pattern;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDbaasServiceOpensearchIndexPatterns other = (UpdateDbaasServiceOpensearchIndexPatterns) o;
        return 
            java.util.Objects.deepEquals(this.maxIndexCount, other.maxIndexCount) &&
            java.util.Objects.deepEquals(this.sortingAlgorithm, other.sortingAlgorithm) &&
            java.util.Objects.deepEquals(this.pattern, other.pattern);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            maxIndexCount,
            sortingAlgorithm,
            pattern);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateDbaasServiceOpensearchIndexPatterns.class,
                "maxIndexCount", maxIndexCount,
                "sortingAlgorithm", sortingAlgorithm,
                "pattern", pattern);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> maxIndexCount = Optional.empty();
 
        private Optional<? extends UpdateDbaasServiceOpensearchSortingAlgorithm> sortingAlgorithm = Optional.empty();
 
        private Optional<? extends String> pattern = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Maximum number of indexes to keep
         */
        public Builder maxIndexCount(long maxIndexCount) {
            Utils.checkNotNull(maxIndexCount, "maxIndexCount");
            this.maxIndexCount = Optional.ofNullable(maxIndexCount);
            return this;
        }

        /**
         * Maximum number of indexes to keep
         */
        public Builder maxIndexCount(Optional<? extends Long> maxIndexCount) {
            Utils.checkNotNull(maxIndexCount, "maxIndexCount");
            this.maxIndexCount = maxIndexCount;
            return this;
        }

        /**
         * Deletion sorting algorithm
         */
        public Builder sortingAlgorithm(UpdateDbaasServiceOpensearchSortingAlgorithm sortingAlgorithm) {
            Utils.checkNotNull(sortingAlgorithm, "sortingAlgorithm");
            this.sortingAlgorithm = Optional.ofNullable(sortingAlgorithm);
            return this;
        }

        /**
         * Deletion sorting algorithm
         */
        public Builder sortingAlgorithm(Optional<? extends UpdateDbaasServiceOpensearchSortingAlgorithm> sortingAlgorithm) {
            Utils.checkNotNull(sortingAlgorithm, "sortingAlgorithm");
            this.sortingAlgorithm = sortingAlgorithm;
            return this;
        }

        /**
         * fnmatch pattern
         */
        public Builder pattern(String pattern) {
            Utils.checkNotNull(pattern, "pattern");
            this.pattern = Optional.ofNullable(pattern);
            return this;
        }

        /**
         * fnmatch pattern
         */
        public Builder pattern(Optional<? extends String> pattern) {
            Utils.checkNotNull(pattern, "pattern");
            this.pattern = pattern;
            return this;
        }
        
        public UpdateDbaasServiceOpensearchIndexPatterns build() {
            return new UpdateDbaasServiceOpensearchIndexPatterns(
                maxIndexCount,
                sortingAlgorithm,
                pattern);
        }
    }
}

