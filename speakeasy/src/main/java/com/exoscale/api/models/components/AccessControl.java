/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class AccessControl {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private Optional<? extends java.util.List<String>> categories;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channels")
    private Optional<? extends java.util.List<String>> channels;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commands")
    private Optional<? extends java.util.List<String>> commands;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keys")
    private Optional<? extends java.util.List<String>> keys;

    public AccessControl(
            @JsonProperty("categories") Optional<? extends java.util.List<String>> categories,
            @JsonProperty("channels") Optional<? extends java.util.List<String>> channels,
            @JsonProperty("commands") Optional<? extends java.util.List<String>> commands,
            @JsonProperty("keys") Optional<? extends java.util.List<String>> keys) {
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(channels, "channels");
        Utils.checkNotNull(commands, "commands");
        Utils.checkNotNull(keys, "keys");
        this.categories = categories;
        this.channels = channels;
        this.commands = commands;
        this.keys = keys;
    }

    public Optional<? extends java.util.List<String>> categories() {
        return categories;
    }

    public Optional<? extends java.util.List<String>> channels() {
        return channels;
    }

    public Optional<? extends java.util.List<String>> commands() {
        return commands;
    }

    public Optional<? extends java.util.List<String>> keys() {
        return keys;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AccessControl withCategories(java.util.List<String> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = Optional.ofNullable(categories);
        return this;
    }

    public AccessControl withCategories(Optional<? extends java.util.List<String>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    public AccessControl withChannels(java.util.List<String> channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = Optional.ofNullable(channels);
        return this;
    }

    public AccessControl withChannels(Optional<? extends java.util.List<String>> channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = channels;
        return this;
    }

    public AccessControl withCommands(java.util.List<String> commands) {
        Utils.checkNotNull(commands, "commands");
        this.commands = Optional.ofNullable(commands);
        return this;
    }

    public AccessControl withCommands(Optional<? extends java.util.List<String>> commands) {
        Utils.checkNotNull(commands, "commands");
        this.commands = commands;
        return this;
    }

    public AccessControl withKeys(java.util.List<String> keys) {
        Utils.checkNotNull(keys, "keys");
        this.keys = Optional.ofNullable(keys);
        return this;
    }

    public AccessControl withKeys(Optional<? extends java.util.List<String>> keys) {
        Utils.checkNotNull(keys, "keys");
        this.keys = keys;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccessControl other = (AccessControl) o;
        return 
            java.util.Objects.deepEquals(this.categories, other.categories) &&
            java.util.Objects.deepEquals(this.channels, other.channels) &&
            java.util.Objects.deepEquals(this.commands, other.commands) &&
            java.util.Objects.deepEquals(this.keys, other.keys);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            categories,
            channels,
            commands,
            keys);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccessControl.class,
                "categories", categories,
                "channels", channels,
                "commands", commands,
                "keys", keys);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> categories = Optional.empty();
 
        private Optional<? extends java.util.List<String>> channels = Optional.empty();
 
        private Optional<? extends java.util.List<String>> commands = Optional.empty();
 
        private Optional<? extends java.util.List<String>> keys = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder categories(java.util.List<String> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        public Builder categories(Optional<? extends java.util.List<String>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        public Builder channels(java.util.List<String> channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = Optional.ofNullable(channels);
            return this;
        }

        public Builder channels(Optional<? extends java.util.List<String>> channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = channels;
            return this;
        }

        public Builder commands(java.util.List<String> commands) {
            Utils.checkNotNull(commands, "commands");
            this.commands = Optional.ofNullable(commands);
            return this;
        }

        public Builder commands(Optional<? extends java.util.List<String>> commands) {
            Utils.checkNotNull(commands, "commands");
            this.commands = commands;
            return this;
        }

        public Builder keys(java.util.List<String> keys) {
            Utils.checkNotNull(keys, "keys");
            this.keys = Optional.ofNullable(keys);
            return this;
        }

        public Builder keys(Optional<? extends java.util.List<String>> keys) {
            Utils.checkNotNull(keys, "keys");
            this.keys = keys;
            return this;
        }
        
        public AccessControl build() {
            return new AccessControl(
                categories,
                channels,
                commands,
                keys);
        }
    }
}

