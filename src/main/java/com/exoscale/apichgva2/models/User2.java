/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for User2 type.
 */
public class User2 {
    private String type;
    private String username;
    private String password;
    private Boolean allowReplication;

    /**
     * Default constructor.
     */
    public User2() {
    }

    /**
     * Initialization constructor.
     * @param  type  String value for type.
     * @param  username  String value for username.
     * @param  password  String value for password.
     * @param  allowReplication  Boolean value for allowReplication.
     */
    public User2(
            String type,
            String username,
            String password,
            Boolean allowReplication) {
        this.type = type;
        this.username = username;
        this.password = password;
        this.allowReplication = allowReplication;
    }

    /**
     * Getter for Type.
     * Account type
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * Account type
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Username.
     * Account username
     * @return Returns the String
     */
    @JsonGetter("username")
    public String getUsername() {
        return username;
    }

    /**
     * Setter for Username.
     * Account username
     * @param username Value for String
     */
    @JsonSetter("username")
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Getter for Password.
     * Account password. A missing field indicates a user overridden password.
     * @return Returns the String
     */
    @JsonGetter("password")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPassword() {
        return password;
    }

    /**
     * Setter for Password.
     * Account password. A missing field indicates a user overridden password.
     * @param password Value for String
     */
    @JsonSetter("password")
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Getter for AllowReplication.
     * @return Returns the Boolean
     */
    @JsonGetter("allow-replication")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowReplication() {
        return allowReplication;
    }

    /**
     * Setter for AllowReplication.
     * @param allowReplication Value for Boolean
     */
    @JsonSetter("allow-replication")
    public void setAllowReplication(Boolean allowReplication) {
        this.allowReplication = allowReplication;
    }

    /**
     * Converts this User2 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "User2 [" + "type=" + type + ", username=" + username + ", password=" + password
                + ", allowReplication=" + allowReplication + "]";
    }

    /**
     * Builds a new {@link User2.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link User2.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(type, username)
                .password(getPassword())
                .allowReplication(getAllowReplication());
        return builder;
    }

    /**
     * Class to build instances of {@link User2}.
     */
    public static class Builder {
        private String type;
        private String username;
        private String password;
        private Boolean allowReplication;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  type  String value for type.
         * @param  username  String value for username.
         */
        public Builder(String type, String username) {
            this.type = type;
            this.username = username;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for username.
         * @param  username  String value for username.
         * @return Builder
         */
        public Builder username(String username) {
            this.username = username;
            return this;
        }

        /**
         * Setter for password.
         * @param  password  String value for password.
         * @return Builder
         */
        public Builder password(String password) {
            this.password = password;
            return this;
        }

        /**
         * Setter for allowReplication.
         * @param  allowReplication  Boolean value for allowReplication.
         * @return Builder
         */
        public Builder allowReplication(Boolean allowReplication) {
            this.allowReplication = allowReplication;
            return this;
        }

        /**
         * Builds a new {@link User2} object using the set fields.
         * @return {@link User2}
         */
        public User2 build() {
            return new User2(type, username, password, allowReplication);
        }
    }
}
