/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GenericOAuthIntegration {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private Optional<? extends java.util.List<String>> scopes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_domains")
    private Optional<? extends java.util.List<String>> allowedDomains;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_organizations")
    private Optional<? extends java.util.List<String>> allowedOrganizations;

    @JsonProperty("token_url")
    private String tokenUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    @JsonProperty("auth_url")
    private String authUrl;

    @JsonProperty("api_url")
    private String apiUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_login")
    private Optional<? extends Boolean> autoLogin;

    @JsonProperty("client_id")
    private String clientId;

    @JsonProperty("client_secret")
    private String clientSecret;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_sign_up")
    private Optional<? extends Boolean> allowSignUp;

    public GenericOAuthIntegration(
            @JsonProperty("scopes") Optional<? extends java.util.List<String>> scopes,
            @JsonProperty("allowed_domains") Optional<? extends java.util.List<String>> allowedDomains,
            @JsonProperty("allowed_organizations") Optional<? extends java.util.List<String>> allowedOrganizations,
            @JsonProperty("token_url") String tokenUrl,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("auth_url") String authUrl,
            @JsonProperty("api_url") String apiUrl,
            @JsonProperty("auto_login") Optional<? extends Boolean> autoLogin,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("allow_sign_up") Optional<? extends Boolean> allowSignUp) {
        Utils.checkNotNull(scopes, "scopes");
        Utils.checkNotNull(allowedDomains, "allowedDomains");
        Utils.checkNotNull(allowedOrganizations, "allowedOrganizations");
        Utils.checkNotNull(tokenUrl, "tokenUrl");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(authUrl, "authUrl");
        Utils.checkNotNull(apiUrl, "apiUrl");
        Utils.checkNotNull(autoLogin, "autoLogin");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(allowSignUp, "allowSignUp");
        this.scopes = scopes;
        this.allowedDomains = allowedDomains;
        this.allowedOrganizations = allowedOrganizations;
        this.tokenUrl = tokenUrl;
        this.name = name;
        this.authUrl = authUrl;
        this.apiUrl = apiUrl;
        this.autoLogin = autoLogin;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.allowSignUp = allowSignUp;
    }

    public Optional<? extends java.util.List<String>> scopes() {
        return scopes;
    }

    public Optional<? extends java.util.List<String>> allowedDomains() {
        return allowedDomains;
    }

    public Optional<? extends java.util.List<String>> allowedOrganizations() {
        return allowedOrganizations;
    }

    public String tokenUrl() {
        return tokenUrl;
    }

    public Optional<? extends String> name() {
        return name;
    }

    public String authUrl() {
        return authUrl;
    }

    public String apiUrl() {
        return apiUrl;
    }

    public Optional<? extends Boolean> autoLogin() {
        return autoLogin;
    }

    public String clientId() {
        return clientId;
    }

    public String clientSecret() {
        return clientSecret;
    }

    public Optional<? extends Boolean> allowSignUp() {
        return allowSignUp;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GenericOAuthIntegration withScopes(java.util.List<String> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = Optional.ofNullable(scopes);
        return this;
    }

    public GenericOAuthIntegration withScopes(Optional<? extends java.util.List<String>> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }

    public GenericOAuthIntegration withAllowedDomains(java.util.List<String> allowedDomains) {
        Utils.checkNotNull(allowedDomains, "allowedDomains");
        this.allowedDomains = Optional.ofNullable(allowedDomains);
        return this;
    }

    public GenericOAuthIntegration withAllowedDomains(Optional<? extends java.util.List<String>> allowedDomains) {
        Utils.checkNotNull(allowedDomains, "allowedDomains");
        this.allowedDomains = allowedDomains;
        return this;
    }

    public GenericOAuthIntegration withAllowedOrganizations(java.util.List<String> allowedOrganizations) {
        Utils.checkNotNull(allowedOrganizations, "allowedOrganizations");
        this.allowedOrganizations = Optional.ofNullable(allowedOrganizations);
        return this;
    }

    public GenericOAuthIntegration withAllowedOrganizations(Optional<? extends java.util.List<String>> allowedOrganizations) {
        Utils.checkNotNull(allowedOrganizations, "allowedOrganizations");
        this.allowedOrganizations = allowedOrganizations;
        return this;
    }

    public GenericOAuthIntegration withTokenUrl(String tokenUrl) {
        Utils.checkNotNull(tokenUrl, "tokenUrl");
        this.tokenUrl = tokenUrl;
        return this;
    }

    public GenericOAuthIntegration withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public GenericOAuthIntegration withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public GenericOAuthIntegration withAuthUrl(String authUrl) {
        Utils.checkNotNull(authUrl, "authUrl");
        this.authUrl = authUrl;
        return this;
    }

    public GenericOAuthIntegration withApiUrl(String apiUrl) {
        Utils.checkNotNull(apiUrl, "apiUrl");
        this.apiUrl = apiUrl;
        return this;
    }

    public GenericOAuthIntegration withAutoLogin(boolean autoLogin) {
        Utils.checkNotNull(autoLogin, "autoLogin");
        this.autoLogin = Optional.ofNullable(autoLogin);
        return this;
    }

    public GenericOAuthIntegration withAutoLogin(Optional<? extends Boolean> autoLogin) {
        Utils.checkNotNull(autoLogin, "autoLogin");
        this.autoLogin = autoLogin;
        return this;
    }

    public GenericOAuthIntegration withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public GenericOAuthIntegration withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    public GenericOAuthIntegration withAllowSignUp(boolean allowSignUp) {
        Utils.checkNotNull(allowSignUp, "allowSignUp");
        this.allowSignUp = Optional.ofNullable(allowSignUp);
        return this;
    }

    public GenericOAuthIntegration withAllowSignUp(Optional<? extends Boolean> allowSignUp) {
        Utils.checkNotNull(allowSignUp, "allowSignUp");
        this.allowSignUp = allowSignUp;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenericOAuthIntegration other = (GenericOAuthIntegration) o;
        return 
            java.util.Objects.deepEquals(this.scopes, other.scopes) &&
            java.util.Objects.deepEquals(this.allowedDomains, other.allowedDomains) &&
            java.util.Objects.deepEquals(this.allowedOrganizations, other.allowedOrganizations) &&
            java.util.Objects.deepEquals(this.tokenUrl, other.tokenUrl) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.authUrl, other.authUrl) &&
            java.util.Objects.deepEquals(this.apiUrl, other.apiUrl) &&
            java.util.Objects.deepEquals(this.autoLogin, other.autoLogin) &&
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.allowSignUp, other.allowSignUp);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            scopes,
            allowedDomains,
            allowedOrganizations,
            tokenUrl,
            name,
            authUrl,
            apiUrl,
            autoLogin,
            clientId,
            clientSecret,
            allowSignUp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GenericOAuthIntegration.class,
                "scopes", scopes,
                "allowedDomains", allowedDomains,
                "allowedOrganizations", allowedOrganizations,
                "tokenUrl", tokenUrl,
                "name", name,
                "authUrl", authUrl,
                "apiUrl", apiUrl,
                "autoLogin", autoLogin,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "allowSignUp", allowSignUp);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> scopes = Optional.empty();
 
        private Optional<? extends java.util.List<String>> allowedDomains = Optional.empty();
 
        private Optional<? extends java.util.List<String>> allowedOrganizations = Optional.empty();
 
        private String tokenUrl;
 
        private Optional<? extends String> name = Optional.empty();
 
        private String authUrl;
 
        private String apiUrl;
 
        private Optional<? extends Boolean> autoLogin = Optional.empty();
 
        private String clientId;
 
        private String clientSecret;
 
        private Optional<? extends Boolean> allowSignUp = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder scopes(java.util.List<String> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = Optional.ofNullable(scopes);
            return this;
        }

        public Builder scopes(Optional<? extends java.util.List<String>> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }

        public Builder allowedDomains(java.util.List<String> allowedDomains) {
            Utils.checkNotNull(allowedDomains, "allowedDomains");
            this.allowedDomains = Optional.ofNullable(allowedDomains);
            return this;
        }

        public Builder allowedDomains(Optional<? extends java.util.List<String>> allowedDomains) {
            Utils.checkNotNull(allowedDomains, "allowedDomains");
            this.allowedDomains = allowedDomains;
            return this;
        }

        public Builder allowedOrganizations(java.util.List<String> allowedOrganizations) {
            Utils.checkNotNull(allowedOrganizations, "allowedOrganizations");
            this.allowedOrganizations = Optional.ofNullable(allowedOrganizations);
            return this;
        }

        public Builder allowedOrganizations(Optional<? extends java.util.List<String>> allowedOrganizations) {
            Utils.checkNotNull(allowedOrganizations, "allowedOrganizations");
            this.allowedOrganizations = allowedOrganizations;
            return this;
        }

        public Builder tokenUrl(String tokenUrl) {
            Utils.checkNotNull(tokenUrl, "tokenUrl");
            this.tokenUrl = tokenUrl;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder authUrl(String authUrl) {
            Utils.checkNotNull(authUrl, "authUrl");
            this.authUrl = authUrl;
            return this;
        }

        public Builder apiUrl(String apiUrl) {
            Utils.checkNotNull(apiUrl, "apiUrl");
            this.apiUrl = apiUrl;
            return this;
        }

        public Builder autoLogin(boolean autoLogin) {
            Utils.checkNotNull(autoLogin, "autoLogin");
            this.autoLogin = Optional.ofNullable(autoLogin);
            return this;
        }

        public Builder autoLogin(Optional<? extends Boolean> autoLogin) {
            Utils.checkNotNull(autoLogin, "autoLogin");
            this.autoLogin = autoLogin;
            return this;
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        public Builder allowSignUp(boolean allowSignUp) {
            Utils.checkNotNull(allowSignUp, "allowSignUp");
            this.allowSignUp = Optional.ofNullable(allowSignUp);
            return this;
        }

        public Builder allowSignUp(Optional<? extends Boolean> allowSignUp) {
            Utils.checkNotNull(allowSignUp, "allowSignUp");
            this.allowSignUp = allowSignUp;
            return this;
        }
        
        public GenericOAuthIntegration build() {
            return new GenericOAuthIntegration(
                scopes,
                allowedDomains,
                allowedOrganizations,
                tokenUrl,
                name,
                authUrl,
                apiUrl,
                autoLogin,
                clientId,
                clientSecret,
                allowSignUp);
        }
    }
}

