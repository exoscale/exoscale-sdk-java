/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DbaasKafkaAcls {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic-acl")
    private Optional<? extends java.util.List<DbaasKafkaTopicAclEntry>> topicAcl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema-registry-acl")
    private Optional<? extends java.util.List<DbaasKafkaSchemaRegistryAclEntry>> schemaRegistryAcl;

    public DbaasKafkaAcls(
            @JsonProperty("topic-acl") Optional<? extends java.util.List<DbaasKafkaTopicAclEntry>> topicAcl,
            @JsonProperty("schema-registry-acl") Optional<? extends java.util.List<DbaasKafkaSchemaRegistryAclEntry>> schemaRegistryAcl) {
        Utils.checkNotNull(topicAcl, "topicAcl");
        Utils.checkNotNull(schemaRegistryAcl, "schemaRegistryAcl");
        this.topicAcl = topicAcl;
        this.schemaRegistryAcl = schemaRegistryAcl;
    }

    public Optional<? extends java.util.List<DbaasKafkaTopicAclEntry>> topicAcl() {
        return topicAcl;
    }

    public Optional<? extends java.util.List<DbaasKafkaSchemaRegistryAclEntry>> schemaRegistryAcl() {
        return schemaRegistryAcl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DbaasKafkaAcls withTopicAcl(java.util.List<DbaasKafkaTopicAclEntry> topicAcl) {
        Utils.checkNotNull(topicAcl, "topicAcl");
        this.topicAcl = Optional.ofNullable(topicAcl);
        return this;
    }

    public DbaasKafkaAcls withTopicAcl(Optional<? extends java.util.List<DbaasKafkaTopicAclEntry>> topicAcl) {
        Utils.checkNotNull(topicAcl, "topicAcl");
        this.topicAcl = topicAcl;
        return this;
    }

    public DbaasKafkaAcls withSchemaRegistryAcl(java.util.List<DbaasKafkaSchemaRegistryAclEntry> schemaRegistryAcl) {
        Utils.checkNotNull(schemaRegistryAcl, "schemaRegistryAcl");
        this.schemaRegistryAcl = Optional.ofNullable(schemaRegistryAcl);
        return this;
    }

    public DbaasKafkaAcls withSchemaRegistryAcl(Optional<? extends java.util.List<DbaasKafkaSchemaRegistryAclEntry>> schemaRegistryAcl) {
        Utils.checkNotNull(schemaRegistryAcl, "schemaRegistryAcl");
        this.schemaRegistryAcl = schemaRegistryAcl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasKafkaAcls other = (DbaasKafkaAcls) o;
        return 
            java.util.Objects.deepEquals(this.topicAcl, other.topicAcl) &&
            java.util.Objects.deepEquals(this.schemaRegistryAcl, other.schemaRegistryAcl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            topicAcl,
            schemaRegistryAcl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasKafkaAcls.class,
                "topicAcl", topicAcl,
                "schemaRegistryAcl", schemaRegistryAcl);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<DbaasKafkaTopicAclEntry>> topicAcl = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasKafkaSchemaRegistryAclEntry>> schemaRegistryAcl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder topicAcl(java.util.List<DbaasKafkaTopicAclEntry> topicAcl) {
            Utils.checkNotNull(topicAcl, "topicAcl");
            this.topicAcl = Optional.ofNullable(topicAcl);
            return this;
        }

        public Builder topicAcl(Optional<? extends java.util.List<DbaasKafkaTopicAclEntry>> topicAcl) {
            Utils.checkNotNull(topicAcl, "topicAcl");
            this.topicAcl = topicAcl;
            return this;
        }

        public Builder schemaRegistryAcl(java.util.List<DbaasKafkaSchemaRegistryAclEntry> schemaRegistryAcl) {
            Utils.checkNotNull(schemaRegistryAcl, "schemaRegistryAcl");
            this.schemaRegistryAcl = Optional.ofNullable(schemaRegistryAcl);
            return this;
        }

        public Builder schemaRegistryAcl(Optional<? extends java.util.List<DbaasKafkaSchemaRegistryAclEntry>> schemaRegistryAcl) {
            Utils.checkNotNull(schemaRegistryAcl, "schemaRegistryAcl");
            this.schemaRegistryAcl = schemaRegistryAcl;
            return this;
        }
        
        public DbaasKafkaAcls build() {
            return new DbaasKafkaAcls(
                topicAcl,
                schemaRegistryAcl);
        }
    }
}

