# {{artifactId}}

Java SDK for interacting with Exoscale Cloud Services.


{{appName}}

- API version: {{version}}

- Build date: {{generatedDate}}


- Generator version: {{generatorVersion}}


Infrastructure automation API, allowing programmatic access to all Exoscale products and services.

The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:

* [JSON format](https://openapi-v2.exoscale.com/source.json)
* [YAML format](https://openapi-v2.exoscale.com/source.yaml)


*Automatically generated by the [OpenAPI Generator](https://openapi-generator.tech)*

## Requirements

Building the API client library requires:

1. Java 11+
2. Maven

## Installation

### Maven Users:
Maven users can simply add the below dependency to their `pom.xml` :

```xml
<dependency>
    <groupId>com.exoscale</groupId>
    <artifactId>exoscale4j</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <scope>compile</scope>
</dependency>
```

### Gradle Users:
Gradle users can add the Maven repository where the SDK is published to their `build.gradle` file, and then specify the dependency as below:

```groovy
repositories {
maven {
url "url_to_your_maven_repository"
}
}

dependencies {
implementation 'com.exoscale:exoscale4j:1.0.0-SNAPSHOT'
}
```

### Gradle Users:
At first generate the JAR by executing:

```shell
mvn clean package
```

Then manually install the following JARs:

- target/exoscale4j-1.0.0-SNAPSHOT.jar
- target/lib/*.jar

## Getting Started

Please follow the [installation](#installation) instruction and execute the following Java code:

```java
{{#apiInfo}}{{#apis}}{{#-first}}{{#operations}}{{#operation}}{{#-first}}
import {{{invokerPackage}}}.*;
import {{{modelPackage}}}.*;
import java.util.UUID;
{{#asyncNative}}
import java.util.concurrent.CompletableFuture;
{{/asyncNative}}

public class NewInstanceExample {
    public static void main(String[] args) throws ApiException, InterruptedException {
        Client client = new Client(new Credentials("PUT YOUR PUBLIC KEY","PUT YOUR SECRET KEY"));
        InstanceType instanceType = client.getInstanceType(UUID.fromString("b6e9d1e8-89fc-4db3-aaa4-9b4c5b1d0844"));
        Template template = client.getTemplate(UUID.fromString("cbd89eb1-c66c-4637-9483-904d7e36c318"));
        CreateInstanceRequest request = new CreateInstanceRequest().instanceType(instanceType).template(template).diskSize(10L);
        Operation operation = client.createInstance(request);
        client.wait(operation);
    }
}

{{/-first}}{{/operation}}{{/operations}}{{/-first}}{{/apis}}{{/apiInfo}}
```

## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{summary}}
*{{classname}}* | [**{{operationId}}WithHttpInfo**]({{apiDocPath}}{{classname}}.md#{{operationId}}WithHttpInfo) | **{{httpMethod}}** {{path}} | {{summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation for Models

{{#models}}{{#model}} - [{{classname}}]({{modelDocPath}}{{classname}}.md)
{{/model}}{{/models}}


## Recommendation

It's recommended to create an instance of `ApiClient` per thread in a multithreaded environment to avoid any potential issues.
However, the instances of the api clients created from the `ApiClient` are thread-safe and can be re-used.

## Author

giza@exoscale.ch
