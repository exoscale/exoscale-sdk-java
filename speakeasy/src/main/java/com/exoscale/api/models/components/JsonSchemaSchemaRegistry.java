/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class JsonSchemaSchemaRegistry {

    /**
     * The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It's only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to `_schemas`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic_name")
    private Optional<? extends String> topicName;

    /**
     * If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leader_eligibility")
    private Optional<? extends Boolean> leaderEligibility;

    public JsonSchemaSchemaRegistry(
            @JsonProperty("topic_name") Optional<? extends String> topicName,
            @JsonProperty("leader_eligibility") Optional<? extends Boolean> leaderEligibility) {
        Utils.checkNotNull(topicName, "topicName");
        Utils.checkNotNull(leaderEligibility, "leaderEligibility");
        this.topicName = topicName;
        this.leaderEligibility = leaderEligibility;
    }

    /**
     * The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It's only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to `_schemas`.
     */
    public Optional<? extends String> topicName() {
        return topicName;
    }

    /**
     * If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to `true`.
     */
    public Optional<? extends Boolean> leaderEligibility() {
        return leaderEligibility;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It's only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to `_schemas`.
     */
    public JsonSchemaSchemaRegistry withTopicName(String topicName) {
        Utils.checkNotNull(topicName, "topicName");
        this.topicName = Optional.ofNullable(topicName);
        return this;
    }

    /**
     * The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It's only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to `_schemas`.
     */
    public JsonSchemaSchemaRegistry withTopicName(Optional<? extends String> topicName) {
        Utils.checkNotNull(topicName, "topicName");
        this.topicName = topicName;
        return this;
    }

    /**
     * If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to `true`.
     */
    public JsonSchemaSchemaRegistry withLeaderEligibility(boolean leaderEligibility) {
        Utils.checkNotNull(leaderEligibility, "leaderEligibility");
        this.leaderEligibility = Optional.ofNullable(leaderEligibility);
        return this;
    }

    /**
     * If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to `true`.
     */
    public JsonSchemaSchemaRegistry withLeaderEligibility(Optional<? extends Boolean> leaderEligibility) {
        Utils.checkNotNull(leaderEligibility, "leaderEligibility");
        this.leaderEligibility = leaderEligibility;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JsonSchemaSchemaRegistry other = (JsonSchemaSchemaRegistry) o;
        return 
            java.util.Objects.deepEquals(this.topicName, other.topicName) &&
            java.util.Objects.deepEquals(this.leaderEligibility, other.leaderEligibility);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            topicName,
            leaderEligibility);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JsonSchemaSchemaRegistry.class,
                "topicName", topicName,
                "leaderEligibility", leaderEligibility);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> topicName = Optional.empty();
 
        private Optional<? extends Boolean> leaderEligibility = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It's only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to `_schemas`.
         */
        public Builder topicName(String topicName) {
            Utils.checkNotNull(topicName, "topicName");
            this.topicName = Optional.ofNullable(topicName);
            return this;
        }

        /**
         * The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It's only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to `_schemas`.
         */
        public Builder topicName(Optional<? extends String> topicName) {
            Utils.checkNotNull(topicName, "topicName");
            this.topicName = topicName;
            return this;
        }

        /**
         * If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to `true`.
         */
        public Builder leaderEligibility(boolean leaderEligibility) {
            Utils.checkNotNull(leaderEligibility, "leaderEligibility");
            this.leaderEligibility = Optional.ofNullable(leaderEligibility);
            return this;
        }

        /**
         * If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to `true`.
         */
        public Builder leaderEligibility(Optional<? extends Boolean> leaderEligibility) {
            Utils.checkNotNull(leaderEligibility, "leaderEligibility");
            this.leaderEligibility = leaderEligibility;
            return this;
        }
        
        public JsonSchemaSchemaRegistry build() {
            return new JsonSchemaSchemaRegistry(
                topicName,
                leaderEligibility);
        }
    }
}

