/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateDbaasServiceGrafanaRequestBody {

    /**
     * Automatic maintenance settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenance")
    private Optional<? extends CreateDbaasServiceGrafanaMaintenance> maintenance;

    /**
     * Subscription plan
     */
    @JsonProperty("plan")
    private String plan;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fork-from-service")
    private Optional<? extends String> forkFromService;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grafana-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaGrafana> grafanaSettings;

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip-filter")
    private Optional<? extends java.util.List<String>> ipFilter;

    public CreateDbaasServiceGrafanaRequestBody(
            @JsonProperty("maintenance") Optional<? extends CreateDbaasServiceGrafanaMaintenance> maintenance,
            @JsonProperty("plan") String plan,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("fork-from-service") Optional<? extends String> forkFromService,
            @JsonProperty("grafana-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaGrafana> grafanaSettings,
            @JsonProperty("ip-filter") Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(maintenance, "maintenance");
        Utils.checkNotNull(plan, "plan");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(forkFromService, "forkFromService");
        Utils.checkNotNull(grafanaSettings, "grafanaSettings");
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.maintenance = maintenance;
        this.plan = plan;
        this.terminationProtection = terminationProtection;
        this.forkFromService = forkFromService;
        this.grafanaSettings = grafanaSettings;
        this.ipFilter = ipFilter;
    }

    /**
     * Automatic maintenance settings
     */
    public Optional<? extends CreateDbaasServiceGrafanaMaintenance> maintenance() {
        return maintenance;
    }

    /**
     * Subscription plan
     */
    public String plan() {
        return plan;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    public Optional<? extends String> forkFromService() {
        return forkFromService;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaGrafana> grafanaSettings() {
        return grafanaSettings;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public Optional<? extends java.util.List<String>> ipFilter() {
        return ipFilter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Automatic maintenance settings
     */
    public CreateDbaasServiceGrafanaRequestBody withMaintenance(CreateDbaasServiceGrafanaMaintenance maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = Optional.ofNullable(maintenance);
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public CreateDbaasServiceGrafanaRequestBody withMaintenance(Optional<? extends CreateDbaasServiceGrafanaMaintenance> maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = maintenance;
        return this;
    }

    /**
     * Subscription plan
     */
    public CreateDbaasServiceGrafanaRequestBody withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public CreateDbaasServiceGrafanaRequestBody withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public CreateDbaasServiceGrafanaRequestBody withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    public CreateDbaasServiceGrafanaRequestBody withForkFromService(String forkFromService) {
        Utils.checkNotNull(forkFromService, "forkFromService");
        this.forkFromService = Optional.ofNullable(forkFromService);
        return this;
    }

    public CreateDbaasServiceGrafanaRequestBody withForkFromService(Optional<? extends String> forkFromService) {
        Utils.checkNotNull(forkFromService, "forkFromService");
        this.forkFromService = forkFromService;
        return this;
    }

    public CreateDbaasServiceGrafanaRequestBody withGrafanaSettings(com.exoscale.api.models.components.JsonSchemaGrafana grafanaSettings) {
        Utils.checkNotNull(grafanaSettings, "grafanaSettings");
        this.grafanaSettings = Optional.ofNullable(grafanaSettings);
        return this;
    }

    public CreateDbaasServiceGrafanaRequestBody withGrafanaSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaGrafana> grafanaSettings) {
        Utils.checkNotNull(grafanaSettings, "grafanaSettings");
        this.grafanaSettings = grafanaSettings;
        return this;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public CreateDbaasServiceGrafanaRequestBody withIpFilter(java.util.List<String> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = Optional.ofNullable(ipFilter);
        return this;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public CreateDbaasServiceGrafanaRequestBody withIpFilter(Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = ipFilter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDbaasServiceGrafanaRequestBody other = (CreateDbaasServiceGrafanaRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.maintenance, other.maintenance) &&
            java.util.Objects.deepEquals(this.plan, other.plan) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.forkFromService, other.forkFromService) &&
            java.util.Objects.deepEquals(this.grafanaSettings, other.grafanaSettings) &&
            java.util.Objects.deepEquals(this.ipFilter, other.ipFilter);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            maintenance,
            plan,
            terminationProtection,
            forkFromService,
            grafanaSettings,
            ipFilter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDbaasServiceGrafanaRequestBody.class,
                "maintenance", maintenance,
                "plan", plan,
                "terminationProtection", terminationProtection,
                "forkFromService", forkFromService,
                "grafanaSettings", grafanaSettings,
                "ipFilter", ipFilter);
    }
    
    public final static class Builder {
 
        private Optional<? extends CreateDbaasServiceGrafanaMaintenance> maintenance = Optional.empty();
 
        private String plan;
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends String> forkFromService = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaGrafana> grafanaSettings = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ipFilter = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(CreateDbaasServiceGrafanaMaintenance maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = Optional.ofNullable(maintenance);
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Optional<? extends CreateDbaasServiceGrafanaMaintenance> maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        public Builder forkFromService(String forkFromService) {
            Utils.checkNotNull(forkFromService, "forkFromService");
            this.forkFromService = Optional.ofNullable(forkFromService);
            return this;
        }

        public Builder forkFromService(Optional<? extends String> forkFromService) {
            Utils.checkNotNull(forkFromService, "forkFromService");
            this.forkFromService = forkFromService;
            return this;
        }

        public Builder grafanaSettings(com.exoscale.api.models.components.JsonSchemaGrafana grafanaSettings) {
            Utils.checkNotNull(grafanaSettings, "grafanaSettings");
            this.grafanaSettings = Optional.ofNullable(grafanaSettings);
            return this;
        }

        public Builder grafanaSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaGrafana> grafanaSettings) {
            Utils.checkNotNull(grafanaSettings, "grafanaSettings");
            this.grafanaSettings = grafanaSettings;
            return this;
        }

        /**
         * Allowed CIDR address blocks for incoming connections
         */
        public Builder ipFilter(java.util.List<String> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = Optional.ofNullable(ipFilter);
            return this;
        }

        /**
         * Allowed CIDR address blocks for incoming connections
         */
        public Builder ipFilter(Optional<? extends java.util.List<String>> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = ipFilter;
            return this;
        }
        
        public CreateDbaasServiceGrafanaRequestBody build() {
            return new CreateDbaasServiceGrafanaRequestBody(
                maintenance,
                plan,
                terminationProtection,
                forkFromService,
                grafanaSettings,
                ipFilter);
        }
    }
}

