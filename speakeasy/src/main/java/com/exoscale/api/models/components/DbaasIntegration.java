/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DbaasIntegration {

    /**
     * Description of the integration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Integration settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    private Optional<? extends Settings> settings;

    /**
     * Integration type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    /**
     * Whether the integration is enabled or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is-enabled")
    private Optional<? extends Boolean> isEnabled;

    /**
     * Source service name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends String> source;

    /**
     * Whether the integration is active or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is-active")
    private Optional<? extends Boolean> isActive;

    /**
     * Integration status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends String> status;

    /**
     * Integration id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Destination service name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dest")
    private Optional<? extends String> dest;

    public DbaasIntegration(
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("settings") Optional<? extends Settings> settings,
            @JsonProperty("type") Optional<? extends String> type,
            @JsonProperty("is-enabled") Optional<? extends Boolean> isEnabled,
            @JsonProperty("source") Optional<? extends String> source,
            @JsonProperty("is-active") Optional<? extends Boolean> isActive,
            @JsonProperty("status") Optional<? extends String> status,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("dest") Optional<? extends String> dest) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(settings, "settings");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(isEnabled, "isEnabled");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(isActive, "isActive");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(dest, "dest");
        this.description = description;
        this.settings = settings;
        this.type = type;
        this.isEnabled = isEnabled;
        this.source = source;
        this.isActive = isActive;
        this.status = status;
        this.id = id;
        this.dest = dest;
    }

    /**
     * Description of the integration
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Integration settings
     */
    public Optional<? extends Settings> settings() {
        return settings;
    }

    /**
     * Integration type
     */
    public Optional<? extends String> type() {
        return type;
    }

    /**
     * Whether the integration is enabled or not
     */
    public Optional<? extends Boolean> isEnabled() {
        return isEnabled;
    }

    /**
     * Source service name
     */
    public Optional<? extends String> source() {
        return source;
    }

    /**
     * Whether the integration is active or not
     */
    public Optional<? extends Boolean> isActive() {
        return isActive;
    }

    /**
     * Integration status
     */
    public Optional<? extends String> status() {
        return status;
    }

    /**
     * Integration id
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Destination service name
     */
    public Optional<? extends String> dest() {
        return dest;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Description of the integration
     */
    public DbaasIntegration withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Description of the integration
     */
    public DbaasIntegration withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Integration settings
     */
    public DbaasIntegration withSettings(Settings settings) {
        Utils.checkNotNull(settings, "settings");
        this.settings = Optional.ofNullable(settings);
        return this;
    }

    /**
     * Integration settings
     */
    public DbaasIntegration withSettings(Optional<? extends Settings> settings) {
        Utils.checkNotNull(settings, "settings");
        this.settings = settings;
        return this;
    }

    /**
     * Integration type
     */
    public DbaasIntegration withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Integration type
     */
    public DbaasIntegration withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Whether the integration is enabled or not
     */
    public DbaasIntegration withIsEnabled(boolean isEnabled) {
        Utils.checkNotNull(isEnabled, "isEnabled");
        this.isEnabled = Optional.ofNullable(isEnabled);
        return this;
    }

    /**
     * Whether the integration is enabled or not
     */
    public DbaasIntegration withIsEnabled(Optional<? extends Boolean> isEnabled) {
        Utils.checkNotNull(isEnabled, "isEnabled");
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Source service name
     */
    public DbaasIntegration withSource(String source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    /**
     * Source service name
     */
    public DbaasIntegration withSource(Optional<? extends String> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * Whether the integration is active or not
     */
    public DbaasIntegration withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = Optional.ofNullable(isActive);
        return this;
    }

    /**
     * Whether the integration is active or not
     */
    public DbaasIntegration withIsActive(Optional<? extends Boolean> isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    /**
     * Integration status
     */
    public DbaasIntegration withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Integration status
     */
    public DbaasIntegration withStatus(Optional<? extends String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Integration id
     */
    public DbaasIntegration withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Integration id
     */
    public DbaasIntegration withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Destination service name
     */
    public DbaasIntegration withDest(String dest) {
        Utils.checkNotNull(dest, "dest");
        this.dest = Optional.ofNullable(dest);
        return this;
    }

    /**
     * Destination service name
     */
    public DbaasIntegration withDest(Optional<? extends String> dest) {
        Utils.checkNotNull(dest, "dest");
        this.dest = dest;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasIntegration other = (DbaasIntegration) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.settings, other.settings) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.isEnabled, other.isEnabled) &&
            java.util.Objects.deepEquals(this.source, other.source) &&
            java.util.Objects.deepEquals(this.isActive, other.isActive) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.dest, other.dest);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            settings,
            type,
            isEnabled,
            source,
            isActive,
            status,
            id,
            dest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasIntegration.class,
                "description", description,
                "settings", settings,
                "type", type,
                "isEnabled", isEnabled,
                "source", source,
                "isActive", isActive,
                "status", status,
                "id", id,
                "dest", dest);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends Settings> settings = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();
 
        private Optional<? extends Boolean> isEnabled = Optional.empty();
 
        private Optional<? extends String> source = Optional.empty();
 
        private Optional<? extends Boolean> isActive = Optional.empty();
 
        private Optional<? extends String> status = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> dest = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Description of the integration
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Description of the integration
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Integration settings
         */
        public Builder settings(Settings settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = Optional.ofNullable(settings);
            return this;
        }

        /**
         * Integration settings
         */
        public Builder settings(Optional<? extends Settings> settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = settings;
            return this;
        }

        /**
         * Integration type
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Integration type
         */
        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Whether the integration is enabled or not
         */
        public Builder isEnabled(boolean isEnabled) {
            Utils.checkNotNull(isEnabled, "isEnabled");
            this.isEnabled = Optional.ofNullable(isEnabled);
            return this;
        }

        /**
         * Whether the integration is enabled or not
         */
        public Builder isEnabled(Optional<? extends Boolean> isEnabled) {
            Utils.checkNotNull(isEnabled, "isEnabled");
            this.isEnabled = isEnabled;
            return this;
        }

        /**
         * Source service name
         */
        public Builder source(String source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * Source service name
         */
        public Builder source(Optional<? extends String> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        /**
         * Whether the integration is active or not
         */
        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        /**
         * Whether the integration is active or not
         */
        public Builder isActive(Optional<? extends Boolean> isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }

        /**
         * Integration status
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Integration status
         */
        public Builder status(Optional<? extends String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Integration id
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Integration id
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Destination service name
         */
        public Builder dest(String dest) {
            Utils.checkNotNull(dest, "dest");
            this.dest = Optional.ofNullable(dest);
            return this;
        }

        /**
         * Destination service name
         */
        public Builder dest(Optional<? extends String> dest) {
            Utils.checkNotNull(dest, "dest");
            this.dest = dest;
            return this;
        }
        
        public DbaasIntegration build() {
            return new DbaasIntegration(
                description,
                settings,
                type,
                isEnabled,
                source,
                isActive,
                status,
                id,
                dest);
        }
    }
}

