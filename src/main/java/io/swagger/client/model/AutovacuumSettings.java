/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * AutovacuumSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class AutovacuumSettings {
  @JsonProperty("log_autovacuum_min_duration")
  private Integer logAutovacuumMinDuration = null;

  @JsonProperty("autovacuum_vacuum_cost_limit")
  private Integer autovacuumVacuumCostLimit = null;

  @JsonProperty("autovacuum_max_workers")
  private Integer autovacuumMaxWorkers = null;

  @JsonProperty("autovacuum_vacuum_threshold")
  private Integer autovacuumVacuumThreshold = null;

  @JsonProperty("autovacuum_naptime")
  private Integer autovacuumNaptime = null;

  @JsonProperty("autovacuum_vacuum_scale_factor")
  private BigDecimal autovacuumVacuumScaleFactor = null;

  @JsonProperty("autovacuum_vacuum_cost_delay")
  private Integer autovacuumVacuumCostDelay = null;

  @JsonProperty("autovacuum_analyze_scale_factor")
  private BigDecimal autovacuumAnalyzeScaleFactor = null;

  @JsonProperty("autovacuum_analyze_threshold")
  private Integer autovacuumAnalyzeThreshold = null;

  @JsonProperty("autovacuum_freeze_max_age")
  private Integer autovacuumFreezeMaxAge = null;

  public AutovacuumSettings logAutovacuumMinDuration(Integer logAutovacuumMinDuration) {
    this.logAutovacuumMinDuration = logAutovacuumMinDuration;
    return this;
  }

   /**
   * Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
   * minimum: -1
   * maximum: 2147483647
   * @return logAutovacuumMinDuration
  **/
  @Schema(description = "Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.")
  public Integer getLogAutovacuumMinDuration() {
    return logAutovacuumMinDuration;
  }

  public void setLogAutovacuumMinDuration(Integer logAutovacuumMinDuration) {
    this.logAutovacuumMinDuration = logAutovacuumMinDuration;
  }

  public AutovacuumSettings autovacuumVacuumCostLimit(Integer autovacuumVacuumCostLimit) {
    this.autovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
    return this;
  }

   /**
   * Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
   * minimum: -1
   * maximum: 10000
   * @return autovacuumVacuumCostLimit
  **/
  @Schema(description = "Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.")
  public Integer getAutovacuumVacuumCostLimit() {
    return autovacuumVacuumCostLimit;
  }

  public void setAutovacuumVacuumCostLimit(Integer autovacuumVacuumCostLimit) {
    this.autovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
  }

  public AutovacuumSettings autovacuumMaxWorkers(Integer autovacuumMaxWorkers) {
    this.autovacuumMaxWorkers = autovacuumMaxWorkers;
    return this;
  }

   /**
   * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
   * minimum: 1
   * maximum: 20
   * @return autovacuumMaxWorkers
  **/
  @Schema(description = "Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.")
  public Integer getAutovacuumMaxWorkers() {
    return autovacuumMaxWorkers;
  }

  public void setAutovacuumMaxWorkers(Integer autovacuumMaxWorkers) {
    this.autovacuumMaxWorkers = autovacuumMaxWorkers;
  }

  public AutovacuumSettings autovacuumVacuumThreshold(Integer autovacuumVacuumThreshold) {
    this.autovacuumVacuumThreshold = autovacuumVacuumThreshold;
    return this;
  }

   /**
   * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples
   * minimum: 0
   * maximum: 2147483647
   * @return autovacuumVacuumThreshold
  **/
  @Schema(description = "Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples")
  public Integer getAutovacuumVacuumThreshold() {
    return autovacuumVacuumThreshold;
  }

  public void setAutovacuumVacuumThreshold(Integer autovacuumVacuumThreshold) {
    this.autovacuumVacuumThreshold = autovacuumVacuumThreshold;
  }

  public AutovacuumSettings autovacuumNaptime(Integer autovacuumNaptime) {
    this.autovacuumNaptime = autovacuumNaptime;
    return this;
  }

   /**
   * Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
   * minimum: 1
   * maximum: 86400
   * @return autovacuumNaptime
  **/
  @Schema(description = "Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute")
  public Integer getAutovacuumNaptime() {
    return autovacuumNaptime;
  }

  public void setAutovacuumNaptime(Integer autovacuumNaptime) {
    this.autovacuumNaptime = autovacuumNaptime;
  }

  public AutovacuumSettings autovacuumVacuumScaleFactor(BigDecimal autovacuumVacuumScaleFactor) {
    this.autovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
    return this;
  }

   /**
   * Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
   * minimum: 0
   * maximum: 1
   * @return autovacuumVacuumScaleFactor
  **/
  @Schema(description = "Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)")
  public BigDecimal getAutovacuumVacuumScaleFactor() {
    return autovacuumVacuumScaleFactor;
  }

  public void setAutovacuumVacuumScaleFactor(BigDecimal autovacuumVacuumScaleFactor) {
    this.autovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
  }

  public AutovacuumSettings autovacuumVacuumCostDelay(Integer autovacuumVacuumCostDelay) {
    this.autovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
    return this;
  }

   /**
   * Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds
   * minimum: -1
   * maximum: 100
   * @return autovacuumVacuumCostDelay
  **/
  @Schema(description = "Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds")
  public Integer getAutovacuumVacuumCostDelay() {
    return autovacuumVacuumCostDelay;
  }

  public void setAutovacuumVacuumCostDelay(Integer autovacuumVacuumCostDelay) {
    this.autovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
  }

  public AutovacuumSettings autovacuumAnalyzeScaleFactor(BigDecimal autovacuumAnalyzeScaleFactor) {
    this.autovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
    return this;
  }

   /**
   * Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
   * minimum: 0
   * maximum: 1
   * @return autovacuumAnalyzeScaleFactor
  **/
  @Schema(description = "Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)")
  public BigDecimal getAutovacuumAnalyzeScaleFactor() {
    return autovacuumAnalyzeScaleFactor;
  }

  public void setAutovacuumAnalyzeScaleFactor(BigDecimal autovacuumAnalyzeScaleFactor) {
    this.autovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
  }

  public AutovacuumSettings autovacuumAnalyzeThreshold(Integer autovacuumAnalyzeThreshold) {
    this.autovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
    return this;
  }

   /**
   * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an  ANALYZE in any one table. The default is 50 tuples.
   * minimum: 0
   * maximum: 2147483647
   * @return autovacuumAnalyzeThreshold
  **/
  @Schema(description = "Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an  ANALYZE in any one table. The default is 50 tuples.")
  public Integer getAutovacuumAnalyzeThreshold() {
    return autovacuumAnalyzeThreshold;
  }

  public void setAutovacuumAnalyzeThreshold(Integer autovacuumAnalyzeThreshold) {
    this.autovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
  }

  public AutovacuumSettings autovacuumFreezeMaxAge(Integer autovacuumFreezeMaxAge) {
    this.autovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
    return this;
  }

   /**
   * Specifies the maximum age (in transactions) that a table&#x27;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
   * minimum: 200000000
   * maximum: 1500000000
   * @return autovacuumFreezeMaxAge
  **/
  @Schema(example = "200000000", description = "Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.")
  public Integer getAutovacuumFreezeMaxAge() {
    return autovacuumFreezeMaxAge;
  }

  public void setAutovacuumFreezeMaxAge(Integer autovacuumFreezeMaxAge) {
    this.autovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutovacuumSettings autovacuumSettings = (AutovacuumSettings) o;
    return Objects.equals(this.logAutovacuumMinDuration, autovacuumSettings.logAutovacuumMinDuration) &&
        Objects.equals(this.autovacuumVacuumCostLimit, autovacuumSettings.autovacuumVacuumCostLimit) &&
        Objects.equals(this.autovacuumMaxWorkers, autovacuumSettings.autovacuumMaxWorkers) &&
        Objects.equals(this.autovacuumVacuumThreshold, autovacuumSettings.autovacuumVacuumThreshold) &&
        Objects.equals(this.autovacuumNaptime, autovacuumSettings.autovacuumNaptime) &&
        Objects.equals(this.autovacuumVacuumScaleFactor, autovacuumSettings.autovacuumVacuumScaleFactor) &&
        Objects.equals(this.autovacuumVacuumCostDelay, autovacuumSettings.autovacuumVacuumCostDelay) &&
        Objects.equals(this.autovacuumAnalyzeScaleFactor, autovacuumSettings.autovacuumAnalyzeScaleFactor) &&
        Objects.equals(this.autovacuumAnalyzeThreshold, autovacuumSettings.autovacuumAnalyzeThreshold) &&
        Objects.equals(this.autovacuumFreezeMaxAge, autovacuumSettings.autovacuumFreezeMaxAge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logAutovacuumMinDuration, autovacuumVacuumCostLimit, autovacuumMaxWorkers, autovacuumVacuumThreshold, autovacuumNaptime, autovacuumVacuumScaleFactor, autovacuumVacuumCostDelay, autovacuumAnalyzeScaleFactor, autovacuumAnalyzeThreshold, autovacuumFreezeMaxAge);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutovacuumSettings {\n");
    
    sb.append("    logAutovacuumMinDuration: ").append(toIndentedString(logAutovacuumMinDuration)).append("\n");
    sb.append("    autovacuumVacuumCostLimit: ").append(toIndentedString(autovacuumVacuumCostLimit)).append("\n");
    sb.append("    autovacuumMaxWorkers: ").append(toIndentedString(autovacuumMaxWorkers)).append("\n");
    sb.append("    autovacuumVacuumThreshold: ").append(toIndentedString(autovacuumVacuumThreshold)).append("\n");
    sb.append("    autovacuumNaptime: ").append(toIndentedString(autovacuumNaptime)).append("\n");
    sb.append("    autovacuumVacuumScaleFactor: ").append(toIndentedString(autovacuumVacuumScaleFactor)).append("\n");
    sb.append("    autovacuumVacuumCostDelay: ").append(toIndentedString(autovacuumVacuumCostDelay)).append("\n");
    sb.append("    autovacuumAnalyzeScaleFactor: ").append(toIndentedString(autovacuumAnalyzeScaleFactor)).append("\n");
    sb.append("    autovacuumAnalyzeThreshold: ").append(toIndentedString(autovacuumAnalyzeThreshold)).append("\n");
    sb.append("    autovacuumFreezeMaxAge: ").append(toIndentedString(autovacuumFreezeMaxAge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
