/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class RegisterTemplateRequestBody {

    /**
     * Template maintainer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintainer")
    private Optional<? extends String> maintainer;

    /**
     * Template description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Enable SSH key-based login
     */
    @JsonProperty("ssh-key-enabled")
    private boolean sshKeyEnabled;

    /**
     * Template name
     */
    @JsonProperty("name")
    private String name;

    /**
     * Template default user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default-user")
    private Optional<? extends String> defaultUser;

    /**
     * Template size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Long> size;

    /**
     * Enable password-based login
     */
    @JsonProperty("password-enabled")
    private boolean passwordEnabled;

    /**
     * Template build
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("build")
    private Optional<? extends String> build;

    /**
     * Template MD5 checksum
     */
    @JsonProperty("checksum")
    private String checksum;

    /**
     * Boot mode (default: legacy)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boot-mode")
    private Optional<? extends BootMode> bootMode;

    /**
     * Template source URL
     */
    @JsonProperty("url")
    private String url;

    /**
     * Template version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    public RegisterTemplateRequestBody(
            @JsonProperty("maintainer") Optional<? extends String> maintainer,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("ssh-key-enabled") boolean sshKeyEnabled,
            @JsonProperty("name") String name,
            @JsonProperty("default-user") Optional<? extends String> defaultUser,
            @JsonProperty("size") Optional<? extends Long> size,
            @JsonProperty("password-enabled") boolean passwordEnabled,
            @JsonProperty("build") Optional<? extends String> build,
            @JsonProperty("checksum") String checksum,
            @JsonProperty("boot-mode") Optional<? extends BootMode> bootMode,
            @JsonProperty("url") String url,
            @JsonProperty("version") Optional<? extends String> version) {
        Utils.checkNotNull(maintainer, "maintainer");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(defaultUser, "defaultUser");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        Utils.checkNotNull(build, "build");
        Utils.checkNotNull(checksum, "checksum");
        Utils.checkNotNull(bootMode, "bootMode");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(version, "version");
        this.maintainer = maintainer;
        this.description = description;
        this.sshKeyEnabled = sshKeyEnabled;
        this.name = name;
        this.defaultUser = defaultUser;
        this.size = size;
        this.passwordEnabled = passwordEnabled;
        this.build = build;
        this.checksum = checksum;
        this.bootMode = bootMode;
        this.url = url;
        this.version = version;
    }

    /**
     * Template maintainer
     */
    public Optional<? extends String> maintainer() {
        return maintainer;
    }

    /**
     * Template description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Enable SSH key-based login
     */
    public boolean sshKeyEnabled() {
        return sshKeyEnabled;
    }

    /**
     * Template name
     */
    public String name() {
        return name;
    }

    /**
     * Template default user
     */
    public Optional<? extends String> defaultUser() {
        return defaultUser;
    }

    /**
     * Template size
     */
    public Optional<? extends Long> size() {
        return size;
    }

    /**
     * Enable password-based login
     */
    public boolean passwordEnabled() {
        return passwordEnabled;
    }

    /**
     * Template build
     */
    public Optional<? extends String> build() {
        return build;
    }

    /**
     * Template MD5 checksum
     */
    public String checksum() {
        return checksum;
    }

    /**
     * Boot mode (default: legacy)
     */
    public Optional<? extends BootMode> bootMode() {
        return bootMode;
    }

    /**
     * Template source URL
     */
    public String url() {
        return url;
    }

    /**
     * Template version
     */
    public Optional<? extends String> version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Template maintainer
     */
    public RegisterTemplateRequestBody withMaintainer(String maintainer) {
        Utils.checkNotNull(maintainer, "maintainer");
        this.maintainer = Optional.ofNullable(maintainer);
        return this;
    }

    /**
     * Template maintainer
     */
    public RegisterTemplateRequestBody withMaintainer(Optional<? extends String> maintainer) {
        Utils.checkNotNull(maintainer, "maintainer");
        this.maintainer = maintainer;
        return this;
    }

    /**
     * Template description
     */
    public RegisterTemplateRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Template description
     */
    public RegisterTemplateRequestBody withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Enable SSH key-based login
     */
    public RegisterTemplateRequestBody withSshKeyEnabled(boolean sshKeyEnabled) {
        Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
        this.sshKeyEnabled = sshKeyEnabled;
        return this;
    }

    /**
     * Template name
     */
    public RegisterTemplateRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Template default user
     */
    public RegisterTemplateRequestBody withDefaultUser(String defaultUser) {
        Utils.checkNotNull(defaultUser, "defaultUser");
        this.defaultUser = Optional.ofNullable(defaultUser);
        return this;
    }

    /**
     * Template default user
     */
    public RegisterTemplateRequestBody withDefaultUser(Optional<? extends String> defaultUser) {
        Utils.checkNotNull(defaultUser, "defaultUser");
        this.defaultUser = defaultUser;
        return this;
    }

    /**
     * Template size
     */
    public RegisterTemplateRequestBody withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Template size
     */
    public RegisterTemplateRequestBody withSize(Optional<? extends Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Enable password-based login
     */
    public RegisterTemplateRequestBody withPasswordEnabled(boolean passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = passwordEnabled;
        return this;
    }

    /**
     * Template build
     */
    public RegisterTemplateRequestBody withBuild(String build) {
        Utils.checkNotNull(build, "build");
        this.build = Optional.ofNullable(build);
        return this;
    }

    /**
     * Template build
     */
    public RegisterTemplateRequestBody withBuild(Optional<? extends String> build) {
        Utils.checkNotNull(build, "build");
        this.build = build;
        return this;
    }

    /**
     * Template MD5 checksum
     */
    public RegisterTemplateRequestBody withChecksum(String checksum) {
        Utils.checkNotNull(checksum, "checksum");
        this.checksum = checksum;
        return this;
    }

    /**
     * Boot mode (default: legacy)
     */
    public RegisterTemplateRequestBody withBootMode(BootMode bootMode) {
        Utils.checkNotNull(bootMode, "bootMode");
        this.bootMode = Optional.ofNullable(bootMode);
        return this;
    }

    /**
     * Boot mode (default: legacy)
     */
    public RegisterTemplateRequestBody withBootMode(Optional<? extends BootMode> bootMode) {
        Utils.checkNotNull(bootMode, "bootMode");
        this.bootMode = bootMode;
        return this;
    }

    /**
     * Template source URL
     */
    public RegisterTemplateRequestBody withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Template version
     */
    public RegisterTemplateRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * Template version
     */
    public RegisterTemplateRequestBody withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RegisterTemplateRequestBody other = (RegisterTemplateRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.maintainer, other.maintainer) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.sshKeyEnabled, other.sshKeyEnabled) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.defaultUser, other.defaultUser) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.passwordEnabled, other.passwordEnabled) &&
            java.util.Objects.deepEquals(this.build, other.build) &&
            java.util.Objects.deepEquals(this.checksum, other.checksum) &&
            java.util.Objects.deepEquals(this.bootMode, other.bootMode) &&
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            maintainer,
            description,
            sshKeyEnabled,
            name,
            defaultUser,
            size,
            passwordEnabled,
            build,
            checksum,
            bootMode,
            url,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RegisterTemplateRequestBody.class,
                "maintainer", maintainer,
                "description", description,
                "sshKeyEnabled", sshKeyEnabled,
                "name", name,
                "defaultUser", defaultUser,
                "size", size,
                "passwordEnabled", passwordEnabled,
                "build", build,
                "checksum", checksum,
                "bootMode", bootMode,
                "url", url,
                "version", version);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> maintainer = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Boolean sshKeyEnabled;
 
        private String name;
 
        private Optional<? extends String> defaultUser = Optional.empty();
 
        private Optional<? extends Long> size = Optional.empty();
 
        private Boolean passwordEnabled;
 
        private Optional<? extends String> build = Optional.empty();
 
        private String checksum;
 
        private Optional<? extends BootMode> bootMode = Optional.empty();
 
        private String url;
 
        private Optional<? extends String> version = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Template maintainer
         */
        public Builder maintainer(String maintainer) {
            Utils.checkNotNull(maintainer, "maintainer");
            this.maintainer = Optional.ofNullable(maintainer);
            return this;
        }

        /**
         * Template maintainer
         */
        public Builder maintainer(Optional<? extends String> maintainer) {
            Utils.checkNotNull(maintainer, "maintainer");
            this.maintainer = maintainer;
            return this;
        }

        /**
         * Template description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Template description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Enable SSH key-based login
         */
        public Builder sshKeyEnabled(boolean sshKeyEnabled) {
            Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
            this.sshKeyEnabled = sshKeyEnabled;
            return this;
        }

        /**
         * Template name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Template default user
         */
        public Builder defaultUser(String defaultUser) {
            Utils.checkNotNull(defaultUser, "defaultUser");
            this.defaultUser = Optional.ofNullable(defaultUser);
            return this;
        }

        /**
         * Template default user
         */
        public Builder defaultUser(Optional<? extends String> defaultUser) {
            Utils.checkNotNull(defaultUser, "defaultUser");
            this.defaultUser = defaultUser;
            return this;
        }

        /**
         * Template size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Template size
         */
        public Builder size(Optional<? extends Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * Enable password-based login
         */
        public Builder passwordEnabled(boolean passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = passwordEnabled;
            return this;
        }

        /**
         * Template build
         */
        public Builder build(String build) {
            Utils.checkNotNull(build, "build");
            this.build = Optional.ofNullable(build);
            return this;
        }

        /**
         * Template build
         */
        public Builder build(Optional<? extends String> build) {
            Utils.checkNotNull(build, "build");
            this.build = build;
            return this;
        }

        /**
         * Template MD5 checksum
         */
        public Builder checksum(String checksum) {
            Utils.checkNotNull(checksum, "checksum");
            this.checksum = checksum;
            return this;
        }

        /**
         * Boot mode (default: legacy)
         */
        public Builder bootMode(BootMode bootMode) {
            Utils.checkNotNull(bootMode, "bootMode");
            this.bootMode = Optional.ofNullable(bootMode);
            return this;
        }

        /**
         * Boot mode (default: legacy)
         */
        public Builder bootMode(Optional<? extends BootMode> bootMode) {
            Utils.checkNotNull(bootMode, "bootMode");
            this.bootMode = bootMode;
            return this;
        }

        /**
         * Template source URL
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Template version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * Template version
         */
        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public RegisterTemplateRequestBody build() {
            return new RegisterTemplateRequestBody(
                maintainer,
                description,
                sshKeyEnabled,
                name,
                defaultUser,
                size,
                passwordEnabled,
                build,
                checksum,
                bootMode,
                url,
                version);
        }
    }
}

