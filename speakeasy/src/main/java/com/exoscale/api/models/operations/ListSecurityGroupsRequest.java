/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.SpeakeasyMetadata;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ListSecurityGroupsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=visibility")
    private Optional<? extends Visibility> visibility;

    public ListSecurityGroupsRequest(
            Optional<? extends Visibility> visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = visibility;
    }

    public Optional<? extends Visibility> visibility() {
        return visibility;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListSecurityGroupsRequest withVisibility(Visibility visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = Optional.ofNullable(visibility);
        return this;
    }

    public ListSecurityGroupsRequest withVisibility(Optional<? extends Visibility> visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = visibility;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSecurityGroupsRequest other = (ListSecurityGroupsRequest) o;
        return 
            java.util.Objects.deepEquals(this.visibility, other.visibility);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            visibility);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSecurityGroupsRequest.class,
                "visibility", visibility);
    }
    
    public final static class Builder {
 
        private Optional<? extends Visibility> visibility = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder visibility(Visibility visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = Optional.ofNullable(visibility);
            return this;
        }

        public Builder visibility(Optional<? extends Visibility> visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = visibility;
            return this;
        }
        
        public ListSecurityGroupsRequest build() {
            return new ListSecurityGroupsRequest(
                visibility);
        }
    }
}

