/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.SpeakeasyMetadata;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ListInstancesRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=manager-id")
    private Optional<? extends String> managerId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=manager-type")
    private Optional<? extends ManagerType> managerType;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ip-address")
    private Optional<? extends String> ipAddress;

    public ListInstancesRequest(
            Optional<? extends String> managerId,
            Optional<? extends ManagerType> managerType,
            Optional<? extends String> ipAddress) {
        Utils.checkNotNull(managerId, "managerId");
        Utils.checkNotNull(managerType, "managerType");
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.managerId = managerId;
        this.managerType = managerType;
        this.ipAddress = ipAddress;
    }

    public Optional<? extends String> managerId() {
        return managerId;
    }

    public Optional<? extends ManagerType> managerType() {
        return managerType;
    }

    public Optional<? extends String> ipAddress() {
        return ipAddress;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListInstancesRequest withManagerId(String managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = Optional.ofNullable(managerId);
        return this;
    }

    public ListInstancesRequest withManagerId(Optional<? extends String> managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = managerId;
        return this;
    }

    public ListInstancesRequest withManagerType(ManagerType managerType) {
        Utils.checkNotNull(managerType, "managerType");
        this.managerType = Optional.ofNullable(managerType);
        return this;
    }

    public ListInstancesRequest withManagerType(Optional<? extends ManagerType> managerType) {
        Utils.checkNotNull(managerType, "managerType");
        this.managerType = managerType;
        return this;
    }

    public ListInstancesRequest withIpAddress(String ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = Optional.ofNullable(ipAddress);
        return this;
    }

    public ListInstancesRequest withIpAddress(Optional<? extends String> ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListInstancesRequest other = (ListInstancesRequest) o;
        return 
            java.util.Objects.deepEquals(this.managerId, other.managerId) &&
            java.util.Objects.deepEquals(this.managerType, other.managerType) &&
            java.util.Objects.deepEquals(this.ipAddress, other.ipAddress);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            managerId,
            managerType,
            ipAddress);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListInstancesRequest.class,
                "managerId", managerId,
                "managerType", managerType,
                "ipAddress", ipAddress);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> managerId = Optional.empty();
 
        private Optional<? extends ManagerType> managerType = Optional.empty();
 
        private Optional<? extends String> ipAddress = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder managerId(String managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = Optional.ofNullable(managerId);
            return this;
        }

        public Builder managerId(Optional<? extends String> managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = managerId;
            return this;
        }

        public Builder managerType(ManagerType managerType) {
            Utils.checkNotNull(managerType, "managerType");
            this.managerType = Optional.ofNullable(managerType);
            return this;
        }

        public Builder managerType(Optional<? extends ManagerType> managerType) {
            Utils.checkNotNull(managerType, "managerType");
            this.managerType = managerType;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        public Builder ipAddress(Optional<? extends String> ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = ipAddress;
            return this;
        }
        
        public ListInstancesRequest build() {
            return new ListInstancesRequest(
                managerId,
                managerType,
                ipAddress);
        }
    }
}

