/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class DbaasTask {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create-time")
    private Optional<? extends OffsetDateTime> createTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("result")
    private Optional<? extends String> result;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("result-codes")
    private Optional<? extends java.util.List<ResultCodes>> resultCodes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private Optional<? extends Boolean> success;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("task-type")
    private Optional<? extends String> taskType;

    public DbaasTask(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("create-time") Optional<? extends OffsetDateTime> createTime,
            @JsonProperty("result") Optional<? extends String> result,
            @JsonProperty("result-codes") Optional<? extends java.util.List<ResultCodes>> resultCodes,
            @JsonProperty("success") Optional<? extends Boolean> success,
            @JsonProperty("task-type") Optional<? extends String> taskType) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createTime, "createTime");
        Utils.checkNotNull(result, "result");
        Utils.checkNotNull(resultCodes, "resultCodes");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(taskType, "taskType");
        this.id = id;
        this.createTime = createTime;
        this.result = result;
        this.resultCodes = resultCodes;
        this.success = success;
        this.taskType = taskType;
    }

    public Optional<? extends String> id() {
        return id;
    }

    public Optional<? extends OffsetDateTime> createTime() {
        return createTime;
    }

    public Optional<? extends String> result() {
        return result;
    }

    public Optional<? extends java.util.List<ResultCodes>> resultCodes() {
        return resultCodes;
    }

    public Optional<? extends Boolean> success() {
        return success;
    }

    public Optional<? extends String> taskType() {
        return taskType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DbaasTask withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public DbaasTask withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public DbaasTask withCreateTime(OffsetDateTime createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = Optional.ofNullable(createTime);
        return this;
    }

    public DbaasTask withCreateTime(Optional<? extends OffsetDateTime> createTime) {
        Utils.checkNotNull(createTime, "createTime");
        this.createTime = createTime;
        return this;
    }

    public DbaasTask withResult(String result) {
        Utils.checkNotNull(result, "result");
        this.result = Optional.ofNullable(result);
        return this;
    }

    public DbaasTask withResult(Optional<? extends String> result) {
        Utils.checkNotNull(result, "result");
        this.result = result;
        return this;
    }

    public DbaasTask withResultCodes(java.util.List<ResultCodes> resultCodes) {
        Utils.checkNotNull(resultCodes, "resultCodes");
        this.resultCodes = Optional.ofNullable(resultCodes);
        return this;
    }

    public DbaasTask withResultCodes(Optional<? extends java.util.List<ResultCodes>> resultCodes) {
        Utils.checkNotNull(resultCodes, "resultCodes");
        this.resultCodes = resultCodes;
        return this;
    }

    public DbaasTask withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = Optional.ofNullable(success);
        return this;
    }

    public DbaasTask withSuccess(Optional<? extends Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    public DbaasTask withTaskType(String taskType) {
        Utils.checkNotNull(taskType, "taskType");
        this.taskType = Optional.ofNullable(taskType);
        return this;
    }

    public DbaasTask withTaskType(Optional<? extends String> taskType) {
        Utils.checkNotNull(taskType, "taskType");
        this.taskType = taskType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasTask other = (DbaasTask) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.createTime, other.createTime) &&
            java.util.Objects.deepEquals(this.result, other.result) &&
            java.util.Objects.deepEquals(this.resultCodes, other.resultCodes) &&
            java.util.Objects.deepEquals(this.success, other.success) &&
            java.util.Objects.deepEquals(this.taskType, other.taskType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            createTime,
            result,
            resultCodes,
            success,
            taskType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasTask.class,
                "id", id,
                "createTime", createTime,
                "result", result,
                "resultCodes", resultCodes,
                "success", success,
                "taskType", taskType);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createTime = Optional.empty();
 
        private Optional<? extends String> result = Optional.empty();
 
        private Optional<? extends java.util.List<ResultCodes>> resultCodes = Optional.empty();
 
        private Optional<? extends Boolean> success = Optional.empty();
 
        private Optional<? extends String> taskType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder createTime(OffsetDateTime createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = Optional.ofNullable(createTime);
            return this;
        }

        public Builder createTime(Optional<? extends OffsetDateTime> createTime) {
            Utils.checkNotNull(createTime, "createTime");
            this.createTime = createTime;
            return this;
        }

        public Builder result(String result) {
            Utils.checkNotNull(result, "result");
            this.result = Optional.ofNullable(result);
            return this;
        }

        public Builder result(Optional<? extends String> result) {
            Utils.checkNotNull(result, "result");
            this.result = result;
            return this;
        }

        public Builder resultCodes(java.util.List<ResultCodes> resultCodes) {
            Utils.checkNotNull(resultCodes, "resultCodes");
            this.resultCodes = Optional.ofNullable(resultCodes);
            return this;
        }

        public Builder resultCodes(Optional<? extends java.util.List<ResultCodes>> resultCodes) {
            Utils.checkNotNull(resultCodes, "resultCodes");
            this.resultCodes = resultCodes;
            return this;
        }

        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = Optional.ofNullable(success);
            return this;
        }

        public Builder success(Optional<? extends Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        public Builder taskType(String taskType) {
            Utils.checkNotNull(taskType, "taskType");
            this.taskType = Optional.ofNullable(taskType);
            return this;
        }

        public Builder taskType(Optional<? extends String> taskType) {
            Utils.checkNotNull(taskType, "taskType");
            this.taskType = taskType;
            return this;
        }
        
        public DbaasTask build() {
            return new DbaasTask(
                id,
                createTime,
                result,
                resultCodes,
                success,
                taskType);
        }
    }
}

