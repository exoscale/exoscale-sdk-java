/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.sdk.api;

import com.exoscale.sdk.client.ApiException;
import com.exoscale.sdk.model.AddExternalSourceToSecurityGroupRequest;
import com.exoscale.sdk.model.AddRuleToSecurityGroupRequest;
import com.exoscale.sdk.model.AddServiceToLoadBalancerRequest;
import com.exoscale.sdk.model.AntiAffinityGroup;
import com.exoscale.sdk.model.AttachBlockStorageVolumeToInstanceRequest;
import com.exoscale.sdk.model.AttachDbaasServiceToEndpointRequest;
import com.exoscale.sdk.model.AttachInstanceToPrivateNetworkRequest;
import com.exoscale.sdk.model.BlockStorageSnapshot;
import com.exoscale.sdk.model.BlockStorageVolume;
import com.exoscale.sdk.model.CopyTemplateRequest;
import com.exoscale.sdk.model.CreateAntiAffinityGroupRequest;
import com.exoscale.sdk.model.CreateApiKeyRequest;
import com.exoscale.sdk.model.CreateBlockStorageSnapshotRequest;
import com.exoscale.sdk.model.CreateBlockStorageVolumeRequest;
import com.exoscale.sdk.model.CreateDbaasIntegrationRequest;
import com.exoscale.sdk.model.CreateDbaasKafkaUserRequest;
import com.exoscale.sdk.model.CreateDbaasMysqlDatabaseRequest;
import com.exoscale.sdk.model.CreateDbaasMysqlUserRequest;
import com.exoscale.sdk.model.CreateDbaasPgConnectionPoolRequest;
import com.exoscale.sdk.model.CreateDbaasPgDatabaseRequest;
import com.exoscale.sdk.model.CreateDbaasPgUpgradeCheckRequest;
import com.exoscale.sdk.model.CreateDbaasPostgresUserRequest;
import com.exoscale.sdk.model.CreateDbaasServiceGrafanaRequest;
import com.exoscale.sdk.model.CreateDbaasServiceKafkaRequest;
import com.exoscale.sdk.model.CreateDbaasServiceMysqlRequest;
import com.exoscale.sdk.model.CreateDbaasServiceOpensearchRequest;
import com.exoscale.sdk.model.CreateDbaasServicePgRequest;
import com.exoscale.sdk.model.CreateDbaasServiceValkeyRequest;
import com.exoscale.sdk.model.CreateDbaasTaskMigrationCheckRequest;
import com.exoscale.sdk.model.CreateDnsDomainRecordRequest;
import com.exoscale.sdk.model.CreateDnsDomainRequest;
import com.exoscale.sdk.model.CreateElasticIpRequest;
import com.exoscale.sdk.model.CreateIamRoleRequest;
import com.exoscale.sdk.model.CreateInstancePoolRequest;
import com.exoscale.sdk.model.CreateInstanceRequest;
import com.exoscale.sdk.model.CreateLoadBalancerRequest;
import com.exoscale.sdk.model.CreatePrivateNetworkRequest;
import com.exoscale.sdk.model.CreateSecurityGroupRequest;
import com.exoscale.sdk.model.CreateSksClusterRequest;
import com.exoscale.sdk.model.CreateSksNodepoolRequest;
import com.exoscale.sdk.model.CreateUserRequest;
import com.exoscale.sdk.model.DbaasEndpointDatadogInputCreate;
import com.exoscale.sdk.model.DbaasEndpointDatadogInputUpdate;
import com.exoscale.sdk.model.DbaasEndpointElasticsearchInputCreate;
import com.exoscale.sdk.model.DbaasEndpointElasticsearchInputUpdate;
import com.exoscale.sdk.model.DbaasEndpointElasticsearchOutput;
import com.exoscale.sdk.model.DbaasEndpointExternalPrometheusOutput;
import com.exoscale.sdk.model.DbaasEndpointOpensearchInputCreate;
import com.exoscale.sdk.model.DbaasEndpointOpensearchInputUpdate;
import com.exoscale.sdk.model.DbaasEndpointOpensearchOutput;
import com.exoscale.sdk.model.DbaasEndpointPrometheusPayload;
import com.exoscale.sdk.model.DbaasEndpointRsyslogInputCreate;
import com.exoscale.sdk.model.DbaasEndpointRsyslogInputUpdate;
import com.exoscale.sdk.model.DbaasExternalEndpointDatadogOutput;
import com.exoscale.sdk.model.DbaasExternalEndpointRsyslogOutput;
import com.exoscale.sdk.model.DbaasExternalIntegration;
import com.exoscale.sdk.model.DbaasIntegration;
import com.exoscale.sdk.model.DbaasKafkaAcls;
import com.exoscale.sdk.model.DbaasKafkaSchemaRegistryAclEntry;
import com.exoscale.sdk.model.DbaasKafkaTopicAclEntry;
import com.exoscale.sdk.model.DbaasMigrationStatus;
import com.exoscale.sdk.model.DbaasOpensearchAclConfig;
import com.exoscale.sdk.model.DbaasPostgresUsers;
import com.exoscale.sdk.model.DbaasServiceGrafana;
import com.exoscale.sdk.model.DbaasServiceKafka;
import com.exoscale.sdk.model.DbaasServiceLogs;
import com.exoscale.sdk.model.DbaasServiceMysql;
import com.exoscale.sdk.model.DbaasServiceOpensearch;
import com.exoscale.sdk.model.DbaasServicePg;
import com.exoscale.sdk.model.DbaasServiceType;
import com.exoscale.sdk.model.DbaasServiceValkey;
import com.exoscale.sdk.model.DbaasTask;
import com.exoscale.sdk.model.DbaasUserGrafanaSecrets;
import com.exoscale.sdk.model.DbaasUserKafkaConnectSecrets;
import com.exoscale.sdk.model.DbaasUserKafkaSecrets;
import com.exoscale.sdk.model.DbaasUserMysqlSecrets;
import com.exoscale.sdk.model.DbaasUserOpensearchSecrets;
import com.exoscale.sdk.model.DbaasUserPostgresSecrets;
import com.exoscale.sdk.model.DbaasUserValkeySecrets;
import com.exoscale.sdk.model.DeployTarget;
import com.exoscale.sdk.model.DetachDbaasServiceFromEndpointRequest;
import com.exoscale.sdk.model.DetachInstanceFromPrivateNetworkRequest;
import com.exoscale.sdk.model.DnsDomain;
import com.exoscale.sdk.model.DnsDomainRecord;
import com.exoscale.sdk.model.ElasticIp;
import com.exoscale.sdk.model.Event;
import com.exoscale.sdk.model.EvictInstancePoolMembersRequest;
import com.exoscale.sdk.model.EvictSksNodepoolMembersRequest;
import com.exoscale.sdk.model.GenerateSksClusterKubeconfig200Response;
import com.exoscale.sdk.model.GetConsoleProxyUrl200Response;
import com.exoscale.sdk.model.GetDbaasCaCertificate200Response;
import com.exoscale.sdk.model.GetDbaasExternalIntegrationSettingsDatadog200Response;
import com.exoscale.sdk.model.GetDbaasServiceLogsRequest;
import com.exoscale.sdk.model.GetDbaasServiceMetrics200Response;
import com.exoscale.sdk.model.GetDbaasServiceMetricsRequest;
import com.exoscale.sdk.model.GetDbaasSettingsGrafana200Response;
import com.exoscale.sdk.model.GetDbaasSettingsKafka200Response;
import com.exoscale.sdk.model.GetDbaasSettingsMysql200Response;
import com.exoscale.sdk.model.GetDbaasSettingsOpensearch200Response;
import com.exoscale.sdk.model.GetDbaasSettingsPg200Response;
import com.exoscale.sdk.model.GetDbaasSettingsValkey200Response;
import com.exoscale.sdk.model.GetDnsDomainZoneFile200Response;
import com.exoscale.sdk.model.GetEnvImpact200Response;
import com.exoscale.sdk.model.GetSksClusterAuthorityCert200Response;
import com.exoscale.sdk.model.GetSosPresignedUrl200Response;
import com.exoscale.sdk.model.GetUsageReport200Response;
import com.exoscale.sdk.model.IamApiKey;
import com.exoscale.sdk.model.IamApiKeyCreated;
import com.exoscale.sdk.model.IamPolicy;
import com.exoscale.sdk.model.IamRole;
import com.exoscale.sdk.model.Instance;
import com.exoscale.sdk.model.InstancePassword;
import com.exoscale.sdk.model.InstancePool;
import com.exoscale.sdk.model.InstanceType;
import com.exoscale.sdk.model.ListAntiAffinityGroups200Response;
import com.exoscale.sdk.model.ListApiKeys200Response;
import com.exoscale.sdk.model.ListBlockStorageSnapshots200Response;
import com.exoscale.sdk.model.ListBlockStorageVolumes200Response;
import com.exoscale.sdk.model.ListDbaasExternalEndpointTypes200Response;
import com.exoscale.sdk.model.ListDbaasExternalEndpoints200Response;
import com.exoscale.sdk.model.ListDbaasExternalIntegrations200Response;
import com.exoscale.sdk.model.ListDbaasIntegrationSettings200Response;
import com.exoscale.sdk.model.ListDbaasIntegrationTypes200Response;
import com.exoscale.sdk.model.ListDbaasServiceTypes200Response;
import com.exoscale.sdk.model.ListDbaasServices200Response;
import com.exoscale.sdk.model.ListDeployTargets200Response;
import com.exoscale.sdk.model.ListDnsDomainRecords200Response;
import com.exoscale.sdk.model.ListDnsDomains200Response;
import com.exoscale.sdk.model.ListElasticIps200Response;
import com.exoscale.sdk.model.ListIamRoles200Response;
import com.exoscale.sdk.model.ListInstancePools200Response;
import com.exoscale.sdk.model.ListInstanceTypes200Response;
import com.exoscale.sdk.model.ListInstances200Response;
import com.exoscale.sdk.model.ListLoadBalancers200Response;
import com.exoscale.sdk.model.ListPrivateNetworks200Response;
import com.exoscale.sdk.model.ListQuotas200Response;
import com.exoscale.sdk.model.ListSecurityGroups200Response;
import com.exoscale.sdk.model.ListSksClusterVersions200Response;
import com.exoscale.sdk.model.ListSksClusters200Response;
import com.exoscale.sdk.model.ListSnapshots200Response;
import com.exoscale.sdk.model.ListSosBucketsUsage200Response;
import com.exoscale.sdk.model.ListSshKeys200Response;
import com.exoscale.sdk.model.ListTemplates200Response;
import com.exoscale.sdk.model.ListUsers200Response;
import com.exoscale.sdk.model.ListZones200Response;
import com.exoscale.sdk.model.LoadBalancer;
import com.exoscale.sdk.model.LoadBalancerService;
import java.time.OffsetDateTime;
import com.exoscale.sdk.model.Operation;
import com.exoscale.sdk.model.Organization;
import com.exoscale.sdk.model.PrivateNetwork;
import com.exoscale.sdk.model.PromoteSnapshotToTemplateRequest;
import com.exoscale.sdk.model.Quota;
import com.exoscale.sdk.model.RegisterSshKeyRequest;
import com.exoscale.sdk.model.RegisterTemplateRequest;
import com.exoscale.sdk.model.RemoveExternalSourceFromSecurityGroupRequest;
import com.exoscale.sdk.model.ResetDbaasMysqlUserPasswordRequest;
import com.exoscale.sdk.model.ResetDbaasValkeyUserPasswordRequest;
import com.exoscale.sdk.model.ResetInstanceRequest;
import com.exoscale.sdk.model.ResizeBlockStorageVolumeRequest;
import com.exoscale.sdk.model.ResizeInstanceDiskRequest;
import com.exoscale.sdk.model.ReverseDnsRecord;
import com.exoscale.sdk.model.RevertInstanceToSnapshotRequest;
import com.exoscale.sdk.model.ScaleInstancePoolRequest;
import com.exoscale.sdk.model.ScaleInstanceRequest;
import com.exoscale.sdk.model.ScaleSksNodepoolRequest;
import com.exoscale.sdk.model.SecurityGroup;
import com.exoscale.sdk.model.SksCluster;
import com.exoscale.sdk.model.SksClusterDeprecatedResource;
import com.exoscale.sdk.model.SksKubeconfigRequest;
import com.exoscale.sdk.model.SksNodepool;
import com.exoscale.sdk.model.Snapshot;
import com.exoscale.sdk.model.SshKey;
import com.exoscale.sdk.model.StartInstanceRequest;
import com.exoscale.sdk.model.Template;
import java.util.UUID;
import com.exoscale.sdk.model.UpdateBlockStorageSnapshotRequest;
import com.exoscale.sdk.model.UpdateBlockStorageVolumeRequest;
import com.exoscale.sdk.model.UpdateDbaasIntegrationRequest;
import com.exoscale.sdk.model.UpdateDbaasPgConnectionPoolRequest;
import com.exoscale.sdk.model.UpdateDbaasPostgresAllowReplicationRequest;
import com.exoscale.sdk.model.UpdateDbaasServiceGrafanaRequest;
import com.exoscale.sdk.model.UpdateDbaasServiceKafkaRequest;
import com.exoscale.sdk.model.UpdateDbaasServiceMysqlRequest;
import com.exoscale.sdk.model.UpdateDbaasServiceOpensearchRequest;
import com.exoscale.sdk.model.UpdateDbaasServicePgRequest;
import com.exoscale.sdk.model.UpdateDbaasServiceValkeyRequest;
import com.exoscale.sdk.model.UpdateDnsDomainRecordRequest;
import com.exoscale.sdk.model.UpdateElasticIpRequest;
import com.exoscale.sdk.model.UpdateIamRoleRequest;
import com.exoscale.sdk.model.UpdateInstancePoolRequest;
import com.exoscale.sdk.model.UpdateInstanceRequest;
import com.exoscale.sdk.model.UpdateLoadBalancerRequest;
import com.exoscale.sdk.model.UpdateLoadBalancerServiceRequest;
import com.exoscale.sdk.model.UpdatePrivateNetworkInstanceIpRequest;
import com.exoscale.sdk.model.UpdatePrivateNetworkRequest;
import com.exoscale.sdk.model.UpdateReverseDnsElasticIpRequest;
import com.exoscale.sdk.model.UpdateSksClusterRequest;
import com.exoscale.sdk.model.UpdateSksNodepoolRequest;
import com.exoscale.sdk.model.UpdateTemplateRequest;
import com.exoscale.sdk.model.UpdateUserRoleRequest;
import com.exoscale.sdk.model.UpgradeSksClusterRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ExoscaleApi
 */
@Ignore
public class ExoscaleApiTest {

    private final ExoscaleApi api = new ExoscaleApi();

    
    /**
     * Add an external source as a member of a Security Group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExternalSourceToSecurityGroupTest() throws ApiException {
        UUID id = null;
        AddExternalSourceToSecurityGroupRequest addExternalSourceToSecurityGroupRequest = null;
        Operation response = 
        api.addExternalSourceToSecurityGroup(id, addExternalSourceToSecurityGroupRequest);
        
        // TODO: test validations
    }
    
    /**
     * Set instance destruction protection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInstanceProtectionTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.addInstanceProtection(id);
        
        // TODO: test validations
    }
    
    /**
     * Create a Security Group rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addRuleToSecurityGroupTest() throws ApiException {
        UUID id = null;
        AddRuleToSecurityGroupRequest addRuleToSecurityGroupRequest = null;
        Operation response = 
        api.addRuleToSecurityGroup(id, addRuleToSecurityGroupRequest);
        
        // TODO: test validations
    }
    
    /**
     * Add a Load Balancer Service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addServiceToLoadBalancerTest() throws ApiException {
        UUID id = null;
        AddServiceToLoadBalancerRequest addServiceToLoadBalancerRequest = null;
        Operation response = 
        api.addServiceToLoadBalancer(id, addServiceToLoadBalancerRequest);
        
        // TODO: test validations
    }
    
    /**
     * Attach block storage volume to an instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachBlockStorageVolumeToInstanceTest() throws ApiException {
        UUID id = null;
        AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest = null;
        Operation response = 
        api.attachBlockStorageVolumeToInstance(id, attachBlockStorageVolumeToInstanceRequest);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Create a new DBaaS connection between a DBaaS service and an external service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachDbaasServiceToEndpointTest() throws ApiException {
        String sourceServiceName = null;
        AttachDbaasServiceToEndpointRequest attachDbaasServiceToEndpointRequest = null;
        Operation response = 
        api.attachDbaasServiceToEndpoint(sourceServiceName, attachDbaasServiceToEndpointRequest);
        
        // TODO: test validations
    }
    
    /**
     * Attach a Compute instance to an Elastic IP
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachInstanceToElasticIpTest() throws ApiException {
        UUID id = null;
        AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest = null;
        Operation response = 
        api.attachInstanceToElasticIp(id, attachBlockStorageVolumeToInstanceRequest);
        
        // TODO: test validations
    }
    
    /**
     * Attach a Compute instance to a Private Network
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachInstanceToPrivateNetworkTest() throws ApiException {
        UUID id = null;
        AttachInstanceToPrivateNetworkRequest attachInstanceToPrivateNetworkRequest = null;
        Operation response = 
        api.attachInstanceToPrivateNetwork(id, attachInstanceToPrivateNetworkRequest);
        
        // TODO: test validations
    }
    
    /**
     * Attach a Compute instance to a Security Group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachInstanceToSecurityGroupTest() throws ApiException {
        UUID id = null;
        DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest = null;
        Operation response = 
        api.attachInstanceToSecurityGroup(id, detachInstanceFromPrivateNetworkRequest);
        
        // TODO: test validations
    }
    
    /**
     * Copy a Template from a zone to another
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyTemplateTest() throws ApiException {
        UUID id = null;
        CopyTemplateRequest copyTemplateRequest = null;
        Operation response = 
        api.copyTemplate(id, copyTemplateRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create an Anti-affinity Group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAntiAffinityGroupTest() throws ApiException {
        CreateAntiAffinityGroupRequest createAntiAffinityGroupRequest = null;
        Operation response = 
        api.createAntiAffinityGroup(createAntiAffinityGroupRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a new API key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        CreateApiKeyRequest createApiKeyRequest = null;
        IamApiKeyCreated response = 
        api.createApiKey(createApiKeyRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a block storage snapshot
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBlockStorageSnapshotTest() throws ApiException {
        UUID id = null;
        CreateBlockStorageSnapshotRequest createBlockStorageSnapshotRequest = null;
        Operation response = 
        api.createBlockStorageSnapshot(id, createBlockStorageSnapshotRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a block storage volume
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBlockStorageVolumeTest() throws ApiException {
        CreateBlockStorageVolumeRequest createBlockStorageVolumeRequest = null;
        Operation response = 
        api.createBlockStorageVolume(createBlockStorageVolumeRequest);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Create DataDog external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasExternalEndpointDatadogTest() throws ApiException {
        String name = null;
        DbaasEndpointDatadogInputCreate dbaasEndpointDatadogInputCreate = null;
        Operation response = 
        api.createDbaasExternalEndpointDatadog(name, dbaasEndpointDatadogInputCreate);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Create ElasticSearch Logs external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasExternalEndpointElasticsearchTest() throws ApiException {
        String name = null;
        DbaasEndpointElasticsearchInputCreate dbaasEndpointElasticsearchInputCreate = null;
        Operation response = 
        api.createDbaasExternalEndpointElasticsearch(name, dbaasEndpointElasticsearchInputCreate);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Create OpenSearch Logs external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasExternalEndpointOpensearchTest() throws ApiException {
        String name = null;
        DbaasEndpointOpensearchInputCreate dbaasEndpointOpensearchInputCreate = null;
        Operation response = 
        api.createDbaasExternalEndpointOpensearch(name, dbaasEndpointOpensearchInputCreate);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Create Prometheus external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasExternalEndpointPrometheusTest() throws ApiException {
        String name = null;
        DbaasEndpointPrometheusPayload dbaasEndpointPrometheusPayload = null;
        Operation response = 
        api.createDbaasExternalEndpointPrometheus(name, dbaasEndpointPrometheusPayload);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Create RSyslog external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasExternalEndpointRsyslogTest() throws ApiException {
        String name = null;
        DbaasEndpointRsyslogInputCreate dbaasEndpointRsyslogInputCreate = null;
        Operation response = 
        api.createDbaasExternalEndpointRsyslog(name, dbaasEndpointRsyslogInputCreate);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Create a new DBaaS integration between two services
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasIntegrationTest() throws ApiException {
        CreateDbaasIntegrationRequest createDbaasIntegrationRequest = null;
        Operation response = 
        api.createDbaasIntegration(createDbaasIntegrationRequest);
        
        // TODO: test validations
    }
    
    /**
     * Add a Kafka Schema Registry ACL entry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasKafkaSchemaRegistryAclConfigTest() throws ApiException {
        String name = null;
        DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry = null;
        Operation response = 
        api.createDbaasKafkaSchemaRegistryAclConfig(name, dbaasKafkaSchemaRegistryAclEntry);
        
        // TODO: test validations
    }
    
    /**
     * Add a Kafka topic ACL entry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasKafkaTopicAclConfigTest() throws ApiException {
        String name = null;
        DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry = null;
        Operation response = 
        api.createDbaasKafkaTopicAclConfig(name, dbaasKafkaTopicAclEntry);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Kafka user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasKafkaUserTest() throws ApiException {
        String serviceName = null;
        CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest = null;
        Operation response = 
        api.createDbaasKafkaUser(serviceName, createDbaasKafkaUserRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS MySQL database
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasMysqlDatabaseTest() throws ApiException {
        String serviceName = null;
        CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest = null;
        Operation response = 
        api.createDbaasMysqlDatabase(serviceName, createDbaasMysqlDatabaseRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS MySQL user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasMysqlUserTest() throws ApiException {
        String serviceName = null;
        CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest = null;
        Operation response = 
        api.createDbaasMysqlUser(serviceName, createDbaasMysqlUserRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS OpenSearch user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasOpensearchUserTest() throws ApiException {
        String serviceName = null;
        CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest = null;
        Operation response = 
        api.createDbaasOpensearchUser(serviceName, createDbaasKafkaUserRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS PostgreSQL connection pool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasPgConnectionPoolTest() throws ApiException {
        String serviceName = null;
        CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest = null;
        Operation response = 
        api.createDbaasPgConnectionPool(serviceName, createDbaasPgConnectionPoolRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Postgres database
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasPgDatabaseTest() throws ApiException {
        String serviceName = null;
        CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest = null;
        Operation response = 
        api.createDbaasPgDatabase(serviceName, createDbaasPgDatabaseRequest);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Check whether you can upgrade Postgres service to a newer version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasPgUpgradeCheckTest() throws ApiException {
        String service = null;
        CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest = null;
        DbaasTask response = 
        api.createDbaasPgUpgradeCheck(service, createDbaasPgUpgradeCheckRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Postgres user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasPostgresUserTest() throws ApiException {
        String serviceName = null;
        CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest = null;
        Operation response = 
        api.createDbaasPostgresUser(serviceName, createDbaasPostgresUserRequest);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a DBaaS Grafana service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasServiceGrafanaTest() throws ApiException {
        String name = null;
        CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest = null;
        Operation response = 
        api.createDbaasServiceGrafana(name, createDbaasServiceGrafanaRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Kafka service
     *
     * Create a DBaaS Kafka service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasServiceKafkaTest() throws ApiException {
        String name = null;
        CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest = null;
        Operation response = 
        api.createDbaasServiceKafka(name, createDbaasServiceKafkaRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS MySQL service
     *
     * Create a DBaaS MySQL service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasServiceMysqlTest() throws ApiException {
        String name = null;
        CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest = null;
        Operation response = 
        api.createDbaasServiceMysql(name, createDbaasServiceMysqlRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS OpenSearch service
     *
     * Create a DBaaS OpenSearch service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasServiceOpensearchTest() throws ApiException {
        String name = null;
        CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest = null;
        Operation response = 
        api.createDbaasServiceOpensearch(name, createDbaasServiceOpensearchRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS PostgreSQL service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasServicePgTest() throws ApiException {
        String name = null;
        CreateDbaasServicePgRequest createDbaasServicePgRequest = null;
        Operation response = 
        api.createDbaasServicePg(name, createDbaasServicePgRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Valkey service
     *
     * Create a DBaaS Valkey service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasServiceValkeyTest() throws ApiException {
        String name = null;
        CreateDbaasServiceValkeyRequest createDbaasServiceValkeyRequest = null;
        Operation response = 
        api.createDbaasServiceValkey(name, createDbaasServiceValkeyRequest);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a DBaaS task to check migration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasTaskMigrationCheckTest() throws ApiException {
        String service = null;
        CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest = null;
        Operation response = 
        api.createDbaasTaskMigrationCheck(service, createDbaasTaskMigrationCheckRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Valkey user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDbaasValkeyUserTest() throws ApiException {
        String serviceName = null;
        CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest = null;
        Operation response = 
        api.createDbaasValkeyUser(serviceName, createDbaasKafkaUserRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create DNS domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDnsDomainTest() throws ApiException {
        CreateDnsDomainRequest createDnsDomainRequest = null;
        Operation response = 
        api.createDnsDomain(createDnsDomainRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create DNS domain record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDnsDomainRecordTest() throws ApiException {
        UUID domainId = null;
        CreateDnsDomainRecordRequest createDnsDomainRecordRequest = null;
        Operation response = 
        api.createDnsDomainRecord(domainId, createDnsDomainRecordRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create an Elastic IP
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createElasticIpTest() throws ApiException {
        CreateElasticIpRequest createElasticIpRequest = null;
        Operation response = 
        api.createElasticIp(createElasticIpRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create IAM Role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIamRoleTest() throws ApiException {
        CreateIamRoleRequest createIamRoleRequest = null;
        Operation response = 
        api.createIamRole(createIamRoleRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a Compute instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInstanceTest() throws ApiException {
        CreateInstanceRequest createInstanceRequest = null;
        Operation response = 
        api.createInstance(createInstanceRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create an Instance Pool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInstancePoolTest() throws ApiException {
        CreateInstancePoolRequest createInstancePoolRequest = null;
        Operation response = 
        api.createInstancePool(createInstancePoolRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a Load Balancer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerTest() throws ApiException {
        CreateLoadBalancerRequest createLoadBalancerRequest = null;
        Operation response = 
        api.createLoadBalancer(createLoadBalancerRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a Private Network
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPrivateNetworkTest() throws ApiException {
        CreatePrivateNetworkRequest createPrivateNetworkRequest = null;
        Operation response = 
        api.createPrivateNetwork(createPrivateNetworkRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a Security Group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecurityGroupTest() throws ApiException {
        CreateSecurityGroupRequest createSecurityGroupRequest = null;
        Operation response = 
        api.createSecurityGroup(createSecurityGroupRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create an SKS cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSksClusterTest() throws ApiException {
        CreateSksClusterRequest createSksClusterRequest = null;
        Operation response = 
        api.createSksCluster(createSksClusterRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a new SKS Nodepool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSksNodepoolTest() throws ApiException {
        UUID id = null;
        CreateSksNodepoolRequest createSksNodepoolRequest = null;
        Operation response = 
        api.createSksNodepool(id, createSksNodepoolRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a Snapshot of a Compute instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSnapshotTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.createSnapshot(id);
        
        // TODO: test validations
    }
    
    /**
     * Create a User
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        CreateUserRequest createUserRequest = null;
        Operation response = 
        api.createUser(createUserRequest);
        
        // TODO: test validations
    }
    
    /**
     * Delete an Anti-affinity Group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAntiAffinityGroupTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteAntiAffinityGroup(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete an API key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApiKeyTest() throws ApiException {
        String id = null;
        Operation response = 
        api.deleteApiKey(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a block storage snapshot, data will be unrecoverable
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBlockStorageSnapshotTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteBlockStorageSnapshot(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a block storage volume, data will be unrecoverable
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBlockStorageVolumeTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteBlockStorageVolume(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Delete DataDog external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasExternalEndpointDatadogTest() throws ApiException {
        UUID endpointId = null;
        Operation response = 
        api.deleteDbaasExternalEndpointDatadog(endpointId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Delete ElasticSearch logs external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasExternalEndpointElasticsearchTest() throws ApiException {
        UUID endpointId = null;
        Operation response = 
        api.deleteDbaasExternalEndpointElasticsearch(endpointId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Delete OpenSearch logs external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasExternalEndpointOpensearchTest() throws ApiException {
        UUID endpointId = null;
        Operation response = 
        api.deleteDbaasExternalEndpointOpensearch(endpointId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Delete Prometheus external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasExternalEndpointPrometheusTest() throws ApiException {
        UUID endpointId = null;
        Operation response = 
        api.deleteDbaasExternalEndpointPrometheus(endpointId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Delete RSyslog external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasExternalEndpointRsyslogTest() throws ApiException {
        UUID endpointId = null;
        Operation response = 
        api.deleteDbaasExternalEndpointRsyslog(endpointId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Delete a DBaaS Integration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasIntegrationTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteDbaasIntegration(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Kafka ACL entry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasKafkaSchemaRegistryAclConfigTest() throws ApiException {
        String name = null;
        String aclId = null;
        Operation response = 
        api.deleteDbaasKafkaSchemaRegistryAclConfig(name, aclId);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Kafka ACL entry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasKafkaTopicAclConfigTest() throws ApiException {
        String name = null;
        String aclId = null;
        Operation response = 
        api.deleteDbaasKafkaTopicAclConfig(name, aclId);
        
        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS kafka user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasKafkaUserTest() throws ApiException {
        String serviceName = null;
        String username = null;
        Operation response = 
        api.deleteDbaasKafkaUser(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS MySQL database
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasMysqlDatabaseTest() throws ApiException {
        String serviceName = null;
        String databaseName = null;
        Operation response = 
        api.deleteDbaasMysqlDatabase(serviceName, databaseName);
        
        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS MySQL user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasMysqlUserTest() throws ApiException {
        String serviceName = null;
        String username = null;
        Operation response = 
        api.deleteDbaasMysqlUser(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS OpenSearch user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasOpensearchUserTest() throws ApiException {
        String serviceName = null;
        String username = null;
        Operation response = 
        api.deleteDbaasOpensearchUser(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS PostgreSQL connection pool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasPgConnectionPoolTest() throws ApiException {
        String serviceName = null;
        String connectionPoolName = null;
        Operation response = 
        api.deleteDbaasPgConnectionPool(serviceName, connectionPoolName);
        
        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS Postgres database
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasPgDatabaseTest() throws ApiException {
        String serviceName = null;
        String databaseName = null;
        Operation response = 
        api.deleteDbaasPgDatabase(serviceName, databaseName);
        
        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS Postgres user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasPostgresUserTest() throws ApiException {
        String serviceName = null;
        String username = null;
        Operation response = 
        api.deleteDbaasPostgresUser(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS service
     *
     * Delete a DBaaS service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasServiceTest() throws ApiException {
        String name = null;
        Operation response = 
        api.deleteDbaasService(name);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Grafana service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasServiceGrafanaTest() throws ApiException {
        String name = null;
        Operation response = 
        api.deleteDbaasServiceGrafana(name);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Kafka service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasServiceKafkaTest() throws ApiException {
        String name = null;
        Operation response = 
        api.deleteDbaasServiceKafka(name);
        
        // TODO: test validations
    }
    
    /**
     * Delete a MySQL service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasServiceMysqlTest() throws ApiException {
        String name = null;
        Operation response = 
        api.deleteDbaasServiceMysql(name);
        
        // TODO: test validations
    }
    
    /**
     * Delete a OpenSearch service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasServiceOpensearchTest() throws ApiException {
        String name = null;
        Operation response = 
        api.deleteDbaasServiceOpensearch(name);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Postgres service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasServicePgTest() throws ApiException {
        String name = null;
        Operation response = 
        api.deleteDbaasServicePg(name);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Valkey service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasServiceValkeyTest() throws ApiException {
        String name = null;
        Operation response = 
        api.deleteDbaasServiceValkey(name);
        
        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS Valkey user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDbaasValkeyUserTest() throws ApiException {
        String serviceName = null;
        String username = null;
        Operation response = 
        api.deleteDbaasValkeyUser(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Delete DNS Domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnsDomainTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteDnsDomain(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete DNS domain record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnsDomainRecordTest() throws ApiException {
        UUID domainId = null;
        UUID recordId = null;
        Operation response = 
        api.deleteDnsDomainRecord(domainId, recordId);
        
        // TODO: test validations
    }
    
    /**
     * Delete an Elastic IP
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteElasticIpTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteElasticIp(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete IAM Role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIamRoleTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteIamRole(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Compute instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInstanceTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteInstance(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete an Instance Pool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInstancePoolTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteInstancePool(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Load Balancer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteLoadBalancer(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Load Balancer Service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerServiceTest() throws ApiException {
        UUID id = null;
        UUID serviceId = null;
        Operation response = 
        api.deleteLoadBalancerService(id, serviceId);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Private Network
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePrivateNetworkTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deletePrivateNetwork(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete the PTR DNS record for an elastic IP
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReverseDnsElasticIpTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteReverseDnsElasticIp(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete the PTR DNS record for an instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReverseDnsInstanceTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteReverseDnsInstance(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Security Group rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRuleFromSecurityGroupTest() throws ApiException {
        UUID id = null;
        UUID ruleId = null;
        Operation response = 
        api.deleteRuleFromSecurityGroup(id, ruleId);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Security Group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityGroupTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteSecurityGroup(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete an SKS cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSksClusterTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteSksCluster(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete an SKS Nodepool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSksNodepoolTest() throws ApiException {
        UUID id = null;
        UUID sksNodepoolId = null;
        Operation response = 
        api.deleteSksNodepool(id, sksNodepoolId);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Snapshot
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteSnapshot(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete a SSH key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSshKeyTest() throws ApiException {
        String name = null;
        Operation response = 
        api.deleteSshKey(name);
        
        // TODO: test validations
    }
    
    /**
     * Delete a Template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTemplateTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteTemplate(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete User
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteUser(id);
        
        // TODO: test validations
    }
    
    /**
     * Detach block storage volume
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachBlockStorageVolumeTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.detachBlockStorageVolume(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Detach a DBaaS external integration from a service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachDbaasServiceFromEndpointTest() throws ApiException {
        String sourceServiceName = null;
        DetachDbaasServiceFromEndpointRequest detachDbaasServiceFromEndpointRequest = null;
        Operation response = 
        api.detachDbaasServiceFromEndpoint(sourceServiceName, detachDbaasServiceFromEndpointRequest);
        
        // TODO: test validations
    }
    
    /**
     * Detach a Compute instance from an Elastic IP
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachInstanceFromElasticIpTest() throws ApiException {
        UUID id = null;
        AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest = null;
        Operation response = 
        api.detachInstanceFromElasticIp(id, attachBlockStorageVolumeToInstanceRequest);
        
        // TODO: test validations
    }
    
    /**
     * Detach a Compute instance from a Private Network
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachInstanceFromPrivateNetworkTest() throws ApiException {
        UUID id = null;
        DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest = null;
        Operation response = 
        api.detachInstanceFromPrivateNetwork(id, detachInstanceFromPrivateNetworkRequest);
        
        // TODO: test validations
    }
    
    /**
     * Detach a Compute instance from a Security Group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachInstanceFromSecurityGroupTest() throws ApiException {
        UUID id = null;
        DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest = null;
        Operation response = 
        api.detachInstanceFromSecurityGroup(id, detachInstanceFromPrivateNetworkRequest);
        
        // TODO: test validations
    }
    
    /**
     * Temporarily enable writes for MySQL services in read-only mode due to filled up storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableDbaasMysqlWritesTest() throws ApiException {
        String name = null;
        Operation response = 
        api.enableDbaasMysqlWrites(name);
        
        // TODO: test validations
    }
    
    /**
     * Enable tpm for the instance.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableTpmTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.enableTpm(id);
        
        // TODO: test validations
    }
    
    /**
     * Evict Instance Pool members
     *
     * This operation evicts the specified Compute instances member from the Instance Pool, shrinking it to &#x60;&amp;lt;current pool size&amp;gt; - &amp;lt;# evicted members&amp;gt;&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void evictInstancePoolMembersTest() throws ApiException {
        UUID id = null;
        EvictInstancePoolMembersRequest evictInstancePoolMembersRequest = null;
        Operation response = 
        api.evictInstancePoolMembers(id, evictInstancePoolMembersRequest);
        
        // TODO: test validations
    }
    
    /**
     * Evict Nodepool members
     *
     * This operation evicts the specified Compute instances member from the Nodepool, shrinking it to &#x60;&amp;lt;current nodepool size&amp;gt; - &amp;lt;# evicted members&amp;gt;&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void evictSksNodepoolMembersTest() throws ApiException {
        UUID id = null;
        UUID sksNodepoolId = null;
        EvictSksNodepoolMembersRequest evictSksNodepoolMembersRequest = null;
        Operation response = 
        api.evictSksNodepoolMembers(id, sksNodepoolId, evictSksNodepoolMembersRequest);
        
        // TODO: test validations
    }
    
    /**
     * Export a Snapshot
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportSnapshotTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.exportSnapshot(id);
        
        // TODO: test validations
    }
    
    /**
     * Generate a new Kubeconfig file for a SKS cluster
     *
     * This operation returns a Kubeconfig file encoded in base64.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateSksClusterKubeconfigTest() throws ApiException {
        UUID id = null;
        SksKubeconfigRequest sksKubeconfigRequest = null;
        GenerateSksClusterKubeconfig200Response response = 
        api.generateSksClusterKubeconfig(id, sksKubeconfigRequest);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Anti-affinity Group details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAntiAffinityGroupTest() throws ApiException {
        UUID id = null;
        AntiAffinityGroup response = 
        api.getAntiAffinityGroup(id);
        
        // TODO: test validations
    }
    
    /**
     * Get API key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiKeyTest() throws ApiException {
        String id = null;
        IamApiKey response = 
        api.getApiKey(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve block storage snapshot details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockStorageSnapshotTest() throws ApiException {
        UUID id = null;
        BlockStorageSnapshot response = 
        api.getBlockStorageSnapshot(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve block storage volume details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockStorageVolumeTest() throws ApiException {
        UUID id = null;
        BlockStorageVolume response = 
        api.getBlockStorageVolume(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve signed url valid for 60 seconds to connect via console-proxy websocket to VM VNC console.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsoleProxyUrlTest() throws ApiException {
        UUID id = null;
        GetConsoleProxyUrl200Response response = 
        api.getConsoleProxyUrl(id);
        
        // TODO: test validations
    }
    
    /**
     * Get DBaaS CA Certificate
     *
     * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasCaCertificateTest() throws ApiException {
        GetDbaasCaCertificate200Response response = 
        api.getDbaasCaCertificate();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Get DataDog external endpoint settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasExternalEndpointDatadogTest() throws ApiException {
        UUID endpointId = null;
        DbaasExternalEndpointDatadogOutput response = 
        api.getDbaasExternalEndpointDatadog(endpointId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Get ElasticSearch Logs external integration endpoint settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasExternalEndpointElasticsearchTest() throws ApiException {
        UUID endpointId = null;
        DbaasEndpointElasticsearchOutput response = 
        api.getDbaasExternalEndpointElasticsearch(endpointId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Get OpenSearch Logs external integration endpoint settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasExternalEndpointOpensearchTest() throws ApiException {
        UUID endpointId = null;
        DbaasEndpointOpensearchOutput response = 
        api.getDbaasExternalEndpointOpensearch(endpointId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Get Prometheus external integration endpoint settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasExternalEndpointPrometheusTest() throws ApiException {
        UUID endpointId = null;
        DbaasEndpointExternalPrometheusOutput response = 
        api.getDbaasExternalEndpointPrometheus(endpointId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Get RSyslog external integration endpoint settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasExternalEndpointRsyslogTest() throws ApiException {
        UUID endpointId = null;
        DbaasExternalEndpointRsyslogOutput response = 
        api.getDbaasExternalEndpointRsyslog(endpointId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Get a DBaaS external integration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasExternalIntegrationTest() throws ApiException {
        UUID integrationId = null;
        DbaasExternalIntegration response = 
        api.getDbaasExternalIntegration(integrationId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Get Datadog integration settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasExternalIntegrationSettingsDatadogTest() throws ApiException {
        UUID integrationId = null;
        GetDbaasExternalIntegrationSettingsDatadog200Response response = 
        api.getDbaasExternalIntegrationSettingsDatadog(integrationId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Get a DBaaS Integration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasIntegrationTest() throws ApiException {
        UUID id = null;
        DbaasIntegration response = 
        api.getDbaasIntegration(id);
        
        // TODO: test validations
    }
    
    /**
     * Get DBaaS kafka ACL configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasKafkaAclConfigTest() throws ApiException {
        String name = null;
        DbaasKafkaAcls response = 
        api.getDbaasKafkaAclConfig(name);
        
        // TODO: test validations
    }
    
    /**
     * Get a DBaaS migration status
     *
     * Get a DBaaS migration status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasMigrationStatusTest() throws ApiException {
        String name = null;
        DbaasMigrationStatus response = 
        api.getDbaasMigrationStatus(name);
        
        // TODO: test validations
    }
    
    /**
     * Get DBaaS OpenSearch ACL configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasOpensearchAclConfigTest() throws ApiException {
        String name = null;
        DbaasOpensearchAclConfig response = 
        api.getDbaasOpensearchAclConfig(name);
        
        // TODO: test validations
    }
    
    /**
     * Get a DBaaS Grafana service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasServiceGrafanaTest() throws ApiException {
        String name = null;
        DbaasServiceGrafana response = 
        api.getDbaasServiceGrafana(name);
        
        // TODO: test validations
    }
    
    /**
     * Get a DBaaS Kafka service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasServiceKafkaTest() throws ApiException {
        String name = null;
        DbaasServiceKafka response = 
        api.getDbaasServiceKafka(name);
        
        // TODO: test validations
    }
    
    /**
     * Get logs of DBaaS service
     *
     * Get logs of DBaaS service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasServiceLogsTest() throws ApiException {
        String serviceName = null;
        GetDbaasServiceLogsRequest getDbaasServiceLogsRequest = null;
        DbaasServiceLogs response = 
        api.getDbaasServiceLogs(serviceName, getDbaasServiceLogsRequest);
        
        // TODO: test validations
    }
    
    /**
     * Get metrics of DBaaS service
     *
     * Get metrics of DBaaS service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasServiceMetricsTest() throws ApiException {
        String serviceName = null;
        GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest = null;
        GetDbaasServiceMetrics200Response response = 
        api.getDbaasServiceMetrics(serviceName, getDbaasServiceMetricsRequest);
        
        // TODO: test validations
    }
    
    /**
     * Get a DBaaS MySQL service
     *
     * Get a DBaaS MySQL service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasServiceMysqlTest() throws ApiException {
        String name = null;
        DbaasServiceMysql response = 
        api.getDbaasServiceMysql(name);
        
        // TODO: test validations
    }
    
    /**
     * Get a DBaaS OpenSearch service
     *
     * Get a DBaaS OpenSearch service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasServiceOpensearchTest() throws ApiException {
        String name = null;
        DbaasServiceOpensearch response = 
        api.getDbaasServiceOpensearch(name);
        
        // TODO: test validations
    }
    
    /**
     * Get a DBaaS PostgreSQL service
     *
     * Get a DBaaS PostgreSQL service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasServicePgTest() throws ApiException {
        String name = null;
        DbaasServicePg response = 
        api.getDbaasServicePg(name);
        
        // TODO: test validations
    }
    
    /**
     * Get a DBaaS service type
     *
     * Get a DBaaS service type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasServiceTypeTest() throws ApiException {
        String serviceTypeName = null;
        DbaasServiceType response = 
        api.getDbaasServiceType(serviceTypeName);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a DBaaS Valkey service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasServiceValkeyTest() throws ApiException {
        String name = null;
        DbaasServiceValkey response = 
        api.getDbaasServiceValkey(name);
        
        // TODO: test validations
    }
    
    /**
     * Get DBaaS Grafana settings
     *
     * Get DBaaS Grafana settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasSettingsGrafanaTest() throws ApiException {
        GetDbaasSettingsGrafana200Response response = 
        api.getDbaasSettingsGrafana();
        
        // TODO: test validations
    }
    
    /**
     * Get DBaaS Kafka settings
     *
     * Get DBaaS Kafka settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasSettingsKafkaTest() throws ApiException {
        GetDbaasSettingsKafka200Response response = 
        api.getDbaasSettingsKafka();
        
        // TODO: test validations
    }
    
    /**
     * Get DBaaS MySQL settings
     *
     * Get DBaaS MySQL settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasSettingsMysqlTest() throws ApiException {
        GetDbaasSettingsMysql200Response response = 
        api.getDbaasSettingsMysql();
        
        // TODO: test validations
    }
    
    /**
     * Get DBaaS OpenSearch settings
     *
     * Get DBaaS OpenSearch settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasSettingsOpensearchTest() throws ApiException {
        GetDbaasSettingsOpensearch200Response response = 
        api.getDbaasSettingsOpensearch();
        
        // TODO: test validations
    }
    
    /**
     * Get DBaaS PostgreSQL settings
     *
     * Get DBaaS PostgreSQL settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasSettingsPgTest() throws ApiException {
        GetDbaasSettingsPg200Response response = 
        api.getDbaasSettingsPg();
        
        // TODO: test validations
    }
    
    /**
     * Get DBaaS Valkey settings
     *
     * Returns the default settings for Valkey.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasSettingsValkeyTest() throws ApiException {
        GetDbaasSettingsValkey200Response response = 
        api.getDbaasSettingsValkey();
        
        // TODO: test validations
    }
    
    /**
     * Get a DBaaS task
     *
     * Get a DBaaS task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDbaasTaskTest() throws ApiException {
        String service = null;
        UUID id = null;
        DbaasTask response = 
        api.getDbaasTask(service, id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Deploy Target details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeployTargetTest() throws ApiException {
        UUID id = null;
        DeployTarget response = 
        api.getDeployTarget(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve DNS domain details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsDomainTest() throws ApiException {
        UUID id = null;
        DnsDomain response = 
        api.getDnsDomain(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve DNS domain record details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsDomainRecordTest() throws ApiException {
        UUID domainId = null;
        UUID recordId = null;
        DnsDomainRecord response = 
        api.getDnsDomainRecord(domainId, recordId);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve DNS domain zone file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsDomainZoneFileTest() throws ApiException {
        UUID id = null;
        GetDnsDomainZoneFile200Response response = 
        api.getDnsDomainZoneFile(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Elastic IP details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getElasticIpTest() throws ApiException {
        UUID id = null;
        ElasticIp response = 
        api.getElasticIp(id);
        
        // TODO: test validations
    }
    
    /**
     * [BETA] Retrieve organization environmental impact reports
     *
     * [BETA] Returns environmental impact reports for an organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnvImpactTest() throws ApiException {
        String period = null;
        GetEnvImpact200Response response = 
        api.getEnvImpact(period);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve IAM Organization Policy
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIamOrganizationPolicyTest() throws ApiException {
        IamPolicy response = 
        api.getIamOrganizationPolicy();
        
        // TODO: test validations
    }
    
    /**
     * Retrieve IAM Role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIamRoleTest() throws ApiException {
        UUID id = null;
        IamRole response = 
        api.getIamRole(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Compute instance details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceTest() throws ApiException {
        UUID id = null;
        Instance response = 
        api.getInstance(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Instance Pool details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstancePoolTest() throws ApiException {
        UUID id = null;
        InstancePool response = 
        api.getInstancePool(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Instance Type details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceTypeTest() throws ApiException {
        UUID id = null;
        InstanceType response = 
        api.getInstanceType(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Load Balancer details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerTest() throws ApiException {
        UUID id = null;
        LoadBalancer response = 
        api.getLoadBalancer(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Load Balancer Service details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerServiceTest() throws ApiException {
        UUID id = null;
        UUID serviceId = null;
        LoadBalancerService response = 
        api.getLoadBalancerService(id, serviceId);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Operation details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOperationTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.getOperation(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve an organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationTest() throws ApiException {
        Organization response = 
        api.getOrganization();
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Private Network details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPrivateNetworkTest() throws ApiException {
        UUID id = null;
        PrivateNetwork response = 
        api.getPrivateNetwork(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Resource Quota
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuotaTest() throws ApiException {
        String entity = null;
        Quota response = 
        api.getQuota(entity);
        
        // TODO: test validations
    }
    
    /**
     * Query the PTR DNS records for an elastic IP
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReverseDnsElasticIpTest() throws ApiException {
        UUID id = null;
        ReverseDnsRecord response = 
        api.getReverseDnsElasticIp(id);
        
        // TODO: test validations
    }
    
    /**
     * Query the PTR DNS records for an instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReverseDnsInstanceTest() throws ApiException {
        UUID id = null;
        ReverseDnsRecord response = 
        api.getReverseDnsInstance(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Security Group details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityGroupTest() throws ApiException {
        UUID id = null;
        SecurityGroup response = 
        api.getSecurityGroup(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve SKS cluster details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSksClusterTest() throws ApiException {
        UUID id = null;
        SksCluster response = 
        api.getSksCluster(id);
        
        // TODO: test validations
    }
    
    /**
     * Get the certificate for a SKS cluster authority
     *
     * This operation returns the certificate for the given SKS cluster authority encoded in base64.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSksClusterAuthorityCertTest() throws ApiException {
        UUID id = null;
        String authority = null;
        GetSksClusterAuthorityCert200Response response = 
        api.getSksClusterAuthorityCert(id, authority);
        
        // TODO: test validations
    }
    
    /**
     * Get the latest inspection result
     *
     * Helps troubleshoot common problems when deploying a kubernetes cluster. Inspections run every couple of minutes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSksClusterInspectionTest() throws ApiException {
        UUID id = null;
        Map<String, Object> response = 
        api.getSksClusterInspection(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve SKS Nodepool details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSksNodepoolTest() throws ApiException {
        UUID id = null;
        UUID sksNodepoolId = null;
        SksNodepool response = 
        api.getSksNodepool(id, sksNodepoolId);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Snapshot details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotTest() throws ApiException {
        UUID id = null;
        Snapshot response = 
        api.getSnapshot(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Presigned Download URL for SOS object
     *
     * Generates Presigned Download URL for SOS object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSosPresignedUrlTest() throws ApiException {
        String bucket = null;
        String key = null;
        GetSosPresignedUrl200Response response = 
        api.getSosPresignedUrl(bucket, key);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve SSH key details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSshKeyTest() throws ApiException {
        String name = null;
        SshKey response = 
        api.getSshKey(name);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Template details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplateTest() throws ApiException {
        UUID id = null;
        Template response = 
        api.getTemplate(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve organization usage reports
     *
     * Returns aggregated usage reports for an organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageReportTest() throws ApiException {
        String period = null;
        GetUsageReport200Response response = 
        api.getUsageReport(period);
        
        // TODO: test validations
    }
    
    /**
     * List Anti-affinity Groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAntiAffinityGroupsTest() throws ApiException {
        ListAntiAffinityGroups200Response response = 
        api.listAntiAffinityGroups();
        
        // TODO: test validations
    }
    
    /**
     * List API keys
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApiKeysTest() throws ApiException {
        ListApiKeys200Response response = 
        api.listApiKeys();
        
        // TODO: test validations
    }
    
    /**
     * List block storage snapshots
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBlockStorageSnapshotsTest() throws ApiException {
        ListBlockStorageSnapshots200Response response = 
        api.listBlockStorageSnapshots();
        
        // TODO: test validations
    }
    
    /**
     * List block storage volumes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBlockStorageVolumesTest() throws ApiException {
        UUID instanceId = null;
        ListBlockStorageVolumes200Response response = 
        api.listBlockStorageVolumes(instanceId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] List available external endpoint types and their schemas for DBaaS external integrations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDbaasExternalEndpointTypesTest() throws ApiException {
        ListDbaasExternalEndpointTypes200Response response = 
        api.listDbaasExternalEndpointTypes();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] List available external endpoints for integrations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDbaasExternalEndpointsTest() throws ApiException {
        ListDbaasExternalEndpoints200Response response = 
        api.listDbaasExternalEndpoints();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] List all DBaaS connections between services and external endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDbaasExternalIntegrationsTest() throws ApiException {
        String serviceName = null;
        ListDbaasExternalIntegrations200Response response = 
        api.listDbaasExternalIntegrations(serviceName);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Get DBaaS integration settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDbaasIntegrationSettingsTest() throws ApiException {
        String integrationType = null;
        String sourceType = null;
        String destType = null;
        ListDbaasIntegrationSettings200Response response = 
        api.listDbaasIntegrationSettings(integrationType, sourceType, destType);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Get DBaaS integration types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDbaasIntegrationTypesTest() throws ApiException {
        ListDbaasIntegrationTypes200Response response = 
        api.listDbaasIntegrationTypes();
        
        // TODO: test validations
    }
    
    /**
     * DBaaS Service Types
     *
     * List available service types for DBaaS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDbaasServiceTypesTest() throws ApiException {
        ListDbaasServiceTypes200Response response = 
        api.listDbaasServiceTypes();
        
        // TODO: test validations
    }
    
    /**
     * List DBaaS services
     *
     * List DBaaS services
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDbaasServicesTest() throws ApiException {
        ListDbaasServices200Response response = 
        api.listDbaasServices();
        
        // TODO: test validations
    }
    
    /**
     * List Deploy Targets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDeployTargetsTest() throws ApiException {
        ListDeployTargets200Response response = 
        api.listDeployTargets();
        
        // TODO: test validations
    }
    
    /**
     * List DNS domain records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDnsDomainRecordsTest() throws ApiException {
        UUID domainId = null;
        ListDnsDomainRecords200Response response = 
        api.listDnsDomainRecords(domainId);
        
        // TODO: test validations
    }
    
    /**
     * List DNS domains
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDnsDomainsTest() throws ApiException {
        ListDnsDomains200Response response = 
        api.listDnsDomains();
        
        // TODO: test validations
    }
    
    /**
     * List Elastic IPs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listElasticIpsTest() throws ApiException {
        ListElasticIps200Response response = 
        api.listElasticIps();
        
        // TODO: test validations
    }
    
    /**
     * List Events
     *
     * Retrieve Mutation Events for a given date range. Defaults to retrieving Events for the past 24 hours.          Both a &#x60;from&#x60; and &#x60;to&#x60; arguments can be specified to filter Events over a specific period.          Events will be the the most descriptive possible but not all fields are mandatory
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEventsTest() throws ApiException {
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        List<Event> response = 
        api.listEvents(from, to);
        
        // TODO: test validations
    }
    
    /**
     * List IAM Roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIamRolesTest() throws ApiException {
        ListIamRoles200Response response = 
        api.listIamRoles();
        
        // TODO: test validations
    }
    
    /**
     * List Instance Pools
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInstancePoolsTest() throws ApiException {
        ListInstancePools200Response response = 
        api.listInstancePools();
        
        // TODO: test validations
    }
    
    /**
     * List Compute instance Types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInstanceTypesTest() throws ApiException {
        ListInstanceTypes200Response response = 
        api.listInstanceTypes();
        
        // TODO: test validations
    }
    
    /**
     * List Compute instances
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInstancesTest() throws ApiException {
        UUID managerId = null;
        String managerType = null;
        String ipAddress = null;
        ListInstances200Response response = 
        api.listInstances(managerId, managerType, ipAddress);
        
        // TODO: test validations
    }
    
    /**
     * List Load Balancers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancersTest() throws ApiException {
        ListLoadBalancers200Response response = 
        api.listLoadBalancers();
        
        // TODO: test validations
    }
    
    /**
     * List Private Networks
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPrivateNetworksTest() throws ApiException {
        ListPrivateNetworks200Response response = 
        api.listPrivateNetworks();
        
        // TODO: test validations
    }
    
    /**
     * List Organization Quotas
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listQuotasTest() throws ApiException {
        ListQuotas200Response response = 
        api.listQuotas();
        
        // TODO: test validations
    }
    
    /**
     * List Security Groups.
     *
     * Lists security groups. When visibility is set to public, lists public security groups. Public security groups are objects maintained by Exoscale which contain source addresses for relevant services hosted by Exoscale. They can be used a source in ingress rules and as a destination in egress rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSecurityGroupsTest() throws ApiException {
        String visibility = null;
        ListSecurityGroups200Response response = 
        api.listSecurityGroups(visibility);
        
        // TODO: test validations
    }
    
    /**
     * Resources that are scheduled to be removed in future kubernetes releases
     *
     * This operation returns the deprecated resources for a given cluster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSksClusterDeprecatedResourcesTest() throws ApiException {
        UUID id = null;
        List<SksClusterDeprecatedResource> response = 
        api.listSksClusterDeprecatedResources(id);
        
        // TODO: test validations
    }
    
    /**
     * List available versions for SKS clusters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSksClusterVersionsTest() throws ApiException {
        String includeDeprecated = null;
        ListSksClusterVersions200Response response = 
        api.listSksClusterVersions(includeDeprecated);
        
        // TODO: test validations
    }
    
    /**
     * List SKS clusters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSksClustersTest() throws ApiException {
        ListSksClusters200Response response = 
        api.listSksClusters();
        
        // TODO: test validations
    }
    
    /**
     * List Snapshots
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSnapshotsTest() throws ApiException {
        ListSnapshots200Response response = 
        api.listSnapshots();
        
        // TODO: test validations
    }
    
    /**
     * List SOS Buckets Usage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSosBucketsUsageTest() throws ApiException {
        ListSosBucketsUsage200Response response = 
        api.listSosBucketsUsage();
        
        // TODO: test validations
    }
    
    /**
     * List SSH keys
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSshKeysTest() throws ApiException {
        ListSshKeys200Response response = 
        api.listSshKeys();
        
        // TODO: test validations
    }
    
    /**
     * List Templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTemplatesTest() throws ApiException {
        String visibility = null;
        String family = null;
        ListTemplates200Response response = 
        api.listTemplates(visibility, family);
        
        // TODO: test validations
    }
    
    /**
     * List Users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        ListUsers200Response response = 
        api.listUsers();
        
        // TODO: test validations
    }
    
    /**
     * List Zones
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listZonesTest() throws ApiException {
        ListZones200Response response = 
        api.listZones();
        
        // TODO: test validations
    }
    
    /**
     * Promote a Snapshot to a Template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void promoteSnapshotToTemplateTest() throws ApiException {
        UUID id = null;
        PromoteSnapshotToTemplateRequest promoteSnapshotToTemplateRequest = null;
        Operation response = 
        api.promoteSnapshotToTemplate(id, promoteSnapshotToTemplateRequest);
        
        // TODO: test validations
    }
    
    /**
     * Reboot a Compute instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rebootInstanceTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.rebootInstance(id);
        
        // TODO: test validations
    }
    
    /**
     * Import SSH key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerSshKeyTest() throws ApiException {
        RegisterSshKeyRequest registerSshKeyRequest = null;
        Operation response = 
        api.registerSshKey(registerSshKeyRequest);
        
        // TODO: test validations
    }
    
    /**
     * Register a Template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerTemplateTest() throws ApiException {
        RegisterTemplateRequest registerTemplateRequest = null;
        Operation response = 
        api.registerTemplate(registerTemplateRequest);
        
        // TODO: test validations
    }
    
    /**
     * Remove an external source from a Security Group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeExternalSourceFromSecurityGroupTest() throws ApiException {
        UUID id = null;
        RemoveExternalSourceFromSecurityGroupRequest removeExternalSourceFromSecurityGroupRequest = null;
        Operation response = 
        api.removeExternalSourceFromSecurityGroup(id, removeExternalSourceFromSecurityGroupRequest);
        
        // TODO: test validations
    }
    
    /**
     * Remove instance destruction protection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeInstanceProtectionTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.removeInstanceProtection(id);
        
        // TODO: test validations
    }
    
    /**
     * Reset the credentials of a DBaaS Grafana user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetDbaasGrafanaUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasValkeyUserPasswordRequest resetDbaasValkeyUserPasswordRequest = null;
        Operation response = 
        api.resetDbaasGrafanaUserPassword(serviceName, username, resetDbaasValkeyUserPasswordRequest);
        
        // TODO: test validations
    }
    
    /**
     * Reset the credentials of a DBaaS Kafka user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetDbaasKafkaUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasValkeyUserPasswordRequest resetDbaasValkeyUserPasswordRequest = null;
        Operation response = 
        api.resetDbaasKafkaUserPassword(serviceName, username, resetDbaasValkeyUserPasswordRequest);
        
        // TODO: test validations
    }
    
    /**
     * Reset the credentials of a DBaaS mysql user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetDbaasMysqlUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest = null;
        Operation response = 
        api.resetDbaasMysqlUserPassword(serviceName, username, resetDbaasMysqlUserPasswordRequest);
        
        // TODO: test validations
    }
    
    /**
     * Reset the credentials of a DBaaS OpenSearch user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetDbaasOpensearchUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasValkeyUserPasswordRequest resetDbaasValkeyUserPasswordRequest = null;
        Operation response = 
        api.resetDbaasOpensearchUserPassword(serviceName, username, resetDbaasValkeyUserPasswordRequest);
        
        // TODO: test validations
    }
    
    /**
     * Reset the credentials of a DBaaS Postgres user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetDbaasPostgresUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasValkeyUserPasswordRequest resetDbaasValkeyUserPasswordRequest = null;
        Operation response = 
        api.resetDbaasPostgresUserPassword(serviceName, username, resetDbaasValkeyUserPasswordRequest);
        
        // TODO: test validations
    }
    
    /**
     * Reset the credentials of a DBaaS Valkey user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetDbaasValkeyUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasValkeyUserPasswordRequest resetDbaasValkeyUserPasswordRequest = null;
        Operation response = 
        api.resetDbaasValkeyUserPassword(serviceName, username, resetDbaasValkeyUserPasswordRequest);
        
        // TODO: test validations
    }
    
    /**
     * Reset an Elastic IP field to its default value
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetElasticIpFieldTest() throws ApiException {
        UUID id = null;
        String field = null;
        Operation response = 
        api.resetElasticIpField(id, field);
        
        // TODO: test validations
    }
    
    /**
     * Reset IAM Organization Policy
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetIamOrganizationPolicyTest() throws ApiException {
        Operation response = 
        api.resetIamOrganizationPolicy();
        
        // TODO: test validations
    }
    
    /**
     * Reset a Compute instance to a base/target template
     *
     * This operation re-installs a Compute instance to a base template. If target template is provided it will be used to recreated instance from. Warning: the operation wipes all data stored on the disk.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetInstanceTest() throws ApiException {
        UUID id = null;
        ResetInstanceRequest resetInstanceRequest = null;
        Operation response = 
        api.resetInstance(id, resetInstanceRequest);
        
        // TODO: test validations
    }
    
    /**
     * Reset Instance field
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetInstanceFieldTest() throws ApiException {
        UUID id = null;
        String field = null;
        Operation response = 
        api.resetInstanceField(id, field);
        
        // TODO: test validations
    }
    
    /**
     * Reset a compute instance password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetInstancePasswordTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.resetInstancePassword(id);
        
        // TODO: test validations
    }
    
    /**
     * Reset an Instance Pool field to its default value
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetInstancePoolFieldTest() throws ApiException {
        UUID id = null;
        String field = null;
        Operation response = 
        api.resetInstancePoolField(id, field);
        
        // TODO: test validations
    }
    
    /**
     * Reset a Load Balancer field to its default value
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetLoadBalancerFieldTest() throws ApiException {
        UUID id = null;
        String field = null;
        Operation response = 
        api.resetLoadBalancerField(id, field);
        
        // TODO: test validations
    }
    
    /**
     * Reset a Load Balancer Service field to its default value
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetLoadBalancerServiceFieldTest() throws ApiException {
        UUID id = null;
        UUID serviceId = null;
        String field = null;
        Operation response = 
        api.resetLoadBalancerServiceField(id, serviceId, field);
        
        // TODO: test validations
    }
    
    /**
     * Reset Private Network field
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPrivateNetworkFieldTest() throws ApiException {
        UUID id = null;
        String field = null;
        Operation response = 
        api.resetPrivateNetworkField(id, field);
        
        // TODO: test validations
    }
    
    /**
     * Reset an SKS cluster field to its default value
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetSksClusterFieldTest() throws ApiException {
        UUID id = null;
        String field = null;
        Operation response = 
        api.resetSksClusterField(id, field);
        
        // TODO: test validations
    }
    
    /**
     * Reset an SKS Nodepool field to its default value
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetSksNodepoolFieldTest() throws ApiException {
        UUID id = null;
        UUID sksNodepoolId = null;
        String field = null;
        Operation response = 
        api.resetSksNodepoolField(id, sksNodepoolId, field);
        
        // TODO: test validations
    }
    
    /**
     * Resize a block storage volume
     *
     * This operation resizes a Block storage volume. Note: the volume can only grow, cannot be shrunk. Only detached volumes or volumes attached to stopped instances can be resized.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resizeBlockStorageVolumeTest() throws ApiException {
        UUID id = null;
        ResizeBlockStorageVolumeRequest resizeBlockStorageVolumeRequest = null;
        BlockStorageVolume response = 
        api.resizeBlockStorageVolume(id, resizeBlockStorageVolumeRequest);
        
        // TODO: test validations
    }
    
    /**
     * Resize a Compute instance disk
     *
     * This operation resizes a Compute instance&#39;s disk volume. Note: the disk can only grow, cannot be shrunk.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resizeInstanceDiskTest() throws ApiException {
        UUID id = null;
        ResizeInstanceDiskRequest resizeInstanceDiskRequest = null;
        Operation response = 
        api.resizeInstanceDisk(id, resizeInstanceDiskRequest);
        
        // TODO: test validations
    }
    
    /**
     * Reveal the secrets of a DBaaS Grafana user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revealDbaasGrafanaUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserGrafanaSecrets response = 
        api.revealDbaasGrafanaUserPassword(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Reveal the secrets for DBaaS Kafka Connect
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revealDbaasKafkaConnectPasswordTest() throws ApiException {
        String serviceName = null;
        DbaasUserKafkaConnectSecrets response = 
        api.revealDbaasKafkaConnectPassword(serviceName);
        
        // TODO: test validations
    }
    
    /**
     * Reveal the secrets of a DBaaS Kafka user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revealDbaasKafkaUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserKafkaSecrets response = 
        api.revealDbaasKafkaUserPassword(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Reveal the secrets of a DBaaS MySQL user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revealDbaasMysqlUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserMysqlSecrets response = 
        api.revealDbaasMysqlUserPassword(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Reveal the secrets of a DBaaS OpenSearch user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revealDbaasOpensearchUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserOpensearchSecrets response = 
        api.revealDbaasOpensearchUserPassword(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Reveal the secrets of a DBaaS Postgres user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revealDbaasPostgresUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserPostgresSecrets response = 
        api.revealDbaasPostgresUserPassword(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Reveal the secrets of a DBaaS Valkey user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revealDbaasValkeyUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserValkeySecrets response = 
        api.revealDbaasValkeyUserPassword(serviceName, username);
        
        // TODO: test validations
    }
    
    /**
     * Reveal the password used during instance creation or the latest password reset.
     *
     * Reveal the password used during instance creation or the latest password reset.             This is only available for VMs created against templates having the &#x60;password-enabled&#x60;             property set to &#x60;true&#x60;.              Passwords are transiently stored for at most 24 hours and intended to be retrieved shortly after             creation or resets.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revealInstancePasswordTest() throws ApiException {
        UUID id = null;
        InstancePassword response = 
        api.revealInstancePassword(id);
        
        // TODO: test validations
    }
    
    /**
     * Revert a snapshot for an instance
     *
     * This operation reverts the snapshot to the Compute instance volume, restoring stored data as it was at the time of the snapshot. The Compute instance must be previously stopped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revertInstanceToSnapshotTest() throws ApiException {
        UUID instanceId = null;
        RevertInstanceToSnapshotRequest revertInstanceToSnapshotRequest = null;
        Operation response = 
        api.revertInstanceToSnapshot(instanceId, revertInstanceToSnapshotRequest);
        
        // TODO: test validations
    }
    
    /**
     * Rotate Exoscale CCM credentials
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rotateSksCcmCredentialsTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.rotateSksCcmCredentials(id);
        
        // TODO: test validations
    }
    
    /**
     * Rotate Exoscale CSI credentials
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rotateSksCsiCredentialsTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.rotateSksCsiCredentials(id);
        
        // TODO: test validations
    }
    
    /**
     * Rotate Exoscale Karpenter credentials
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rotateSksKarpenterCredentialsTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.rotateSksKarpenterCredentials(id);
        
        // TODO: test validations
    }
    
    /**
     * Rotate operators certificate authority
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rotateSksOperatorsCaTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.rotateSksOperatorsCa(id);
        
        // TODO: test validations
    }
    
    /**
     * Scale a Compute instance to a new Instance Type
     *
     * This operation changes the Compute instance&#39;s type. Note: the new Instance Type must be within the same family (e.g. a standard instance cannot be scaled to gpu2 or storage).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scaleInstanceTest() throws ApiException {
        UUID id = null;
        ScaleInstanceRequest scaleInstanceRequest = null;
        Operation response = 
        api.scaleInstance(id, scaleInstanceRequest);
        
        // TODO: test validations
    }
    
    /**
     * Scale an Instance Pool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scaleInstancePoolTest() throws ApiException {
        UUID id = null;
        ScaleInstancePoolRequest scaleInstancePoolRequest = null;
        Operation response = 
        api.scaleInstancePool(id, scaleInstancePoolRequest);
        
        // TODO: test validations
    }
    
    /**
     * Scale a SKS Nodepool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scaleSksNodepoolTest() throws ApiException {
        UUID id = null;
        UUID sksNodepoolId = null;
        ScaleSksNodepoolRequest scaleSksNodepoolRequest = null;
        Operation response = 
        api.scaleSksNodepool(id, sksNodepoolId, scaleSksNodepoolRequest);
        
        // TODO: test validations
    }
    
    /**
     * Initiate Grafana maintenance update
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDbaasGrafanaMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = 
        api.startDbaasGrafanaMaintenance(name);
        
        // TODO: test validations
    }
    
    /**
     * Initiate Kafka maintenance update
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDbaasKafkaMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = 
        api.startDbaasKafkaMaintenance(name);
        
        // TODO: test validations
    }
    
    /**
     * Initiate MySQL maintenance update
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDbaasMysqlMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = 
        api.startDbaasMysqlMaintenance(name);
        
        // TODO: test validations
    }
    
    /**
     * Initiate OpenSearch maintenance update
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDbaasOpensearchMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = 
        api.startDbaasOpensearchMaintenance(name);
        
        // TODO: test validations
    }
    
    /**
     * Initiate PostgreSQL maintenance update
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDbaasPgMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = 
        api.startDbaasPgMaintenance(name);
        
        // TODO: test validations
    }
    
    /**
     * Initiate Valkey maintenance update
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDbaasValkeyMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = 
        api.startDbaasValkeyMaintenance(name);
        
        // TODO: test validations
    }
    
    /**
     * Start a Compute instance
     *
     * This operation starts a virtual machine, potentially using a rescue profile if specified
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startInstanceTest() throws ApiException {
        UUID id = null;
        StartInstanceRequest startInstanceRequest = null;
        Operation response = 
        api.startInstance(id, startInstanceRequest);
        
        // TODO: test validations
    }
    
    /**
     * Stop a DBaaS MySQL migration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopDbaasMysqlMigrationTest() throws ApiException {
        String name = null;
        Operation response = 
        api.stopDbaasMysqlMigration(name);
        
        // TODO: test validations
    }
    
    /**
     * Stop a DBaaS PostgreSQL migration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopDbaasPgMigrationTest() throws ApiException {
        String name = null;
        Operation response = 
        api.stopDbaasPgMigration(name);
        
        // TODO: test validations
    }
    
    /**
     * Stop a DBaaS Valkey migration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopDbaasValkeyMigrationTest() throws ApiException {
        String name = null;
        Operation response = 
        api.stopDbaasValkeyMigration(name);
        
        // TODO: test validations
    }
    
    /**
     * Stop a Compute instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopInstanceTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.stopInstance(id);
        
        // TODO: test validations
    }
    
    /**
     * Update block storage volume snapshot
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBlockStorageSnapshotTest() throws ApiException {
        UUID id = null;
        UpdateBlockStorageSnapshotRequest updateBlockStorageSnapshotRequest = null;
        Operation response = 
        api.updateBlockStorageSnapshot(id, updateBlockStorageSnapshotRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update block storage volume
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBlockStorageVolumeTest() throws ApiException {
        UUID id = null;
        UpdateBlockStorageVolumeRequest updateBlockStorageVolumeRequest = null;
        Operation response = 
        api.updateBlockStorageVolume(id, updateBlockStorageVolumeRequest);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Update DataDog external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasExternalEndpointDatadogTest() throws ApiException {
        UUID endpointId = null;
        DbaasEndpointDatadogInputUpdate dbaasEndpointDatadogInputUpdate = null;
        Operation response = 
        api.updateDbaasExternalEndpointDatadog(endpointId, dbaasEndpointDatadogInputUpdate);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Update ElasticSearch Logs external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasExternalEndpointElasticsearchTest() throws ApiException {
        UUID endpointId = null;
        DbaasEndpointElasticsearchInputUpdate dbaasEndpointElasticsearchInputUpdate = null;
        Operation response = 
        api.updateDbaasExternalEndpointElasticsearch(endpointId, dbaasEndpointElasticsearchInputUpdate);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Update OpenSearch Logs external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasExternalEndpointOpensearchTest() throws ApiException {
        UUID endpointId = null;
        DbaasEndpointOpensearchInputUpdate dbaasEndpointOpensearchInputUpdate = null;
        Operation response = 
        api.updateDbaasExternalEndpointOpensearch(endpointId, dbaasEndpointOpensearchInputUpdate);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Update Prometheus external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasExternalEndpointPrometheusTest() throws ApiException {
        UUID endpointId = null;
        DbaasEndpointPrometheusPayload dbaasEndpointPrometheusPayload = null;
        Operation response = 
        api.updateDbaasExternalEndpointPrometheus(endpointId, dbaasEndpointPrometheusPayload);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Update RSyslog external integration endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasExternalEndpointRsyslogTest() throws ApiException {
        UUID endpointId = null;
        DbaasEndpointRsyslogInputUpdate dbaasEndpointRsyslogInputUpdate = null;
        Operation response = 
        api.updateDbaasExternalEndpointRsyslog(endpointId, dbaasEndpointRsyslogInputUpdate);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Manage Datadog integration settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasExternalIntegrationSettingsDatadogTest() throws ApiException {
        UUID integrationId = null;
        GetDbaasExternalIntegrationSettingsDatadog200Response getDbaasExternalIntegrationSettingsDatadog200Response = null;
        Operation response = 
        api.updateDbaasExternalIntegrationSettingsDatadog(integrationId, getDbaasExternalIntegrationSettingsDatadog200Response);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * [BETA] Update a existing DBaaS integration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasIntegrationTest() throws ApiException {
        UUID id = null;
        UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest = null;
        Operation response = 
        api.updateDbaasIntegration(id, updateDbaasIntegrationRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create a DBaaS OpenSearch ACL configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasOpensearchAclConfigTest() throws ApiException {
        String name = null;
        DbaasOpensearchAclConfig dbaasOpensearchAclConfig = null;
        Operation response = 
        api.updateDbaasOpensearchAclConfig(name, dbaasOpensearchAclConfig);
        
        // TODO: test validations
    }
    
    /**
     * Update a DBaaS PostgreSQL connection pool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasPgConnectionPoolTest() throws ApiException {
        String serviceName = null;
        String connectionPoolName = null;
        UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest = null;
        Operation response = 
        api.updateDbaasPgConnectionPool(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update access control for one service user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasPostgresAllowReplicationTest() throws ApiException {
        String serviceName = null;
        String username = null;
        UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest = null;
        DbaasPostgresUsers response = 
        api.updateDbaasPostgresAllowReplication(serviceName, username, updateDbaasPostgresAllowReplicationRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update a DBaaS Grafana service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasServiceGrafanaTest() throws ApiException {
        String name = null;
        UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest = null;
        Operation response = 
        api.updateDbaasServiceGrafana(name, updateDbaasServiceGrafanaRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update a DBaaS Kafka service
     *
     * Update a DBaaS Kafka service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasServiceKafkaTest() throws ApiException {
        String name = null;
        UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest = null;
        Operation response = 
        api.updateDbaasServiceKafka(name, updateDbaasServiceKafkaRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update a DBaaS MySQL service
     *
     * Update a DBaaS MySQL service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasServiceMysqlTest() throws ApiException {
        String name = null;
        UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest = null;
        Operation response = 
        api.updateDbaasServiceMysql(name, updateDbaasServiceMysqlRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update a DBaaS OpenSearch service
     *
     * Update a DBaaS OpenSearch service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasServiceOpensearchTest() throws ApiException {
        String name = null;
        UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest = null;
        Operation response = 
        api.updateDbaasServiceOpensearch(name, updateDbaasServiceOpensearchRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update a DBaaS PostgreSQL service
     *
     * Update a DBaaS PostgreSQL service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasServicePgTest() throws ApiException {
        String name = null;
        UpdateDbaasServicePgRequest updateDbaasServicePgRequest = null;
        Operation response = 
        api.updateDbaasServicePg(name, updateDbaasServicePgRequest);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a DBaaS Valkey service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDbaasServiceValkeyTest() throws ApiException {
        String name = null;
        UpdateDbaasServiceValkeyRequest updateDbaasServiceValkeyRequest = null;
        Operation response = 
        api.updateDbaasServiceValkey(name, updateDbaasServiceValkeyRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update DNS domain record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDnsDomainRecordTest() throws ApiException {
        UUID domainId = null;
        UUID recordId = null;
        UpdateDnsDomainRecordRequest updateDnsDomainRecordRequest = null;
        Operation response = 
        api.updateDnsDomainRecord(domainId, recordId, updateDnsDomainRecordRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update an Elastic IP
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateElasticIpTest() throws ApiException {
        UUID id = null;
        UpdateElasticIpRequest updateElasticIpRequest = null;
        Operation response = 
        api.updateElasticIp(id, updateElasticIpRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update IAM Organization Policy
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIamOrganizationPolicyTest() throws ApiException {
        IamPolicy iamPolicy = null;
        Operation response = 
        api.updateIamOrganizationPolicy(iamPolicy);
        
        // TODO: test validations
    }
    
    /**
     * Update IAM Role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIamRoleTest() throws ApiException {
        UUID id = null;
        UpdateIamRoleRequest updateIamRoleRequest = null;
        Operation response = 
        api.updateIamRole(id, updateIamRoleRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update IAM Role Policy
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIamRolePolicyTest() throws ApiException {
        UUID id = null;
        IamPolicy iamPolicy = null;
        Operation response = 
        api.updateIamRolePolicy(id, iamPolicy);
        
        // TODO: test validations
    }
    
    /**
     * Update a Compute instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstanceTest() throws ApiException {
        UUID id = null;
        UpdateInstanceRequest updateInstanceRequest = null;
        Operation response = 
        api.updateInstance(id, updateInstanceRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update an Instance Pool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstancePoolTest() throws ApiException {
        UUID id = null;
        UpdateInstancePoolRequest updateInstancePoolRequest = null;
        Operation response = 
        api.updateInstancePool(id, updateInstancePoolRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update a Load Balancer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerTest() throws ApiException {
        UUID id = null;
        UpdateLoadBalancerRequest updateLoadBalancerRequest = null;
        Operation response = 
        api.updateLoadBalancer(id, updateLoadBalancerRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update a Load Balancer Service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerServiceTest() throws ApiException {
        UUID id = null;
        UUID serviceId = null;
        UpdateLoadBalancerServiceRequest updateLoadBalancerServiceRequest = null;
        Operation response = 
        api.updateLoadBalancerService(id, serviceId, updateLoadBalancerServiceRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update a Private Network
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePrivateNetworkTest() throws ApiException {
        UUID id = null;
        UpdatePrivateNetworkRequest updatePrivateNetworkRequest = null;
        Operation response = 
        api.updatePrivateNetwork(id, updatePrivateNetworkRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update the IP address of an instance attached to a managed private network
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePrivateNetworkInstanceIpTest() throws ApiException {
        UUID id = null;
        UpdatePrivateNetworkInstanceIpRequest updatePrivateNetworkInstanceIpRequest = null;
        Operation response = 
        api.updatePrivateNetworkInstanceIp(id, updatePrivateNetworkInstanceIpRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update/Create the PTR DNS record for an elastic IP
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateReverseDnsElasticIpTest() throws ApiException {
        UUID id = null;
        UpdateReverseDnsElasticIpRequest updateReverseDnsElasticIpRequest = null;
        Operation response = 
        api.updateReverseDnsElasticIp(id, updateReverseDnsElasticIpRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update/Create the PTR DNS record for an instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateReverseDnsInstanceTest() throws ApiException {
        UUID id = null;
        UpdateReverseDnsElasticIpRequest updateReverseDnsElasticIpRequest = null;
        Operation response = 
        api.updateReverseDnsInstance(id, updateReverseDnsElasticIpRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update an SKS cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSksClusterTest() throws ApiException {
        UUID id = null;
        UpdateSksClusterRequest updateSksClusterRequest = null;
        Operation response = 
        api.updateSksCluster(id, updateSksClusterRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update an SKS Nodepool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSksNodepoolTest() throws ApiException {
        UUID id = null;
        UUID sksNodepoolId = null;
        UpdateSksNodepoolRequest updateSksNodepoolRequest = null;
        Operation response = 
        api.updateSksNodepool(id, sksNodepoolId, updateSksNodepoolRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update template attributes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTemplateTest() throws ApiException {
        UUID id = null;
        UpdateTemplateRequest updateTemplateRequest = null;
        Operation response = 
        api.updateTemplate(id, updateTemplateRequest);
        
        // TODO: test validations
    }
    
    /**
     * Update a User&#39;s IAM role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserRoleTest() throws ApiException {
        UUID id = null;
        UpdateUserRoleRequest updateUserRoleRequest = null;
        Operation response = 
        api.updateUserRole(id, updateUserRoleRequest);
        
        // TODO: test validations
    }
    
    /**
     * Upgrade an SKS cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeSksClusterTest() throws ApiException {
        UUID id = null;
        UpgradeSksClusterRequest upgradeSksClusterRequest = null;
        Operation response = 
        api.upgradeSksCluster(id, upgradeSksClusterRequest);
        
        // TODO: test validations
    }
    
    /**
     * Upgrade a SKS cluster to pro
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeSksClusterServiceLevelTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.upgradeSksClusterServiceLevel(id);
        
        // TODO: test validations
    }
    
}
