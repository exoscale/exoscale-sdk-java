/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class Acls {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rules")
    private Optional<? extends java.util.List<Rules>> rules;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<? extends String> username;

    public Acls(
            @JsonProperty("rules") Optional<? extends java.util.List<Rules>> rules,
            @JsonProperty("username") Optional<? extends String> username) {
        Utils.checkNotNull(rules, "rules");
        Utils.checkNotNull(username, "username");
        this.rules = rules;
        this.username = username;
    }

    public Optional<? extends java.util.List<Rules>> rules() {
        return rules;
    }

    public Optional<? extends String> username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Acls withRules(java.util.List<Rules> rules) {
        Utils.checkNotNull(rules, "rules");
        this.rules = Optional.ofNullable(rules);
        return this;
    }

    public Acls withRules(Optional<? extends java.util.List<Rules>> rules) {
        Utils.checkNotNull(rules, "rules");
        this.rules = rules;
        return this;
    }

    public Acls withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }

    public Acls withUsername(Optional<? extends String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Acls other = (Acls) o;
        return 
            java.util.Objects.deepEquals(this.rules, other.rules) &&
            java.util.Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            rules,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Acls.class,
                "rules", rules,
                "username", username);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<Rules>> rules = Optional.empty();
 
        private Optional<? extends String> username = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder rules(java.util.List<Rules> rules) {
            Utils.checkNotNull(rules, "rules");
            this.rules = Optional.ofNullable(rules);
            return this;
        }

        public Builder rules(Optional<? extends java.util.List<Rules>> rules) {
            Utils.checkNotNull(rules, "rules");
            this.rules = rules;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        public Builder username(Optional<? extends String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public Acls build() {
            return new Acls(
                rules,
                username);
        }
    }
}

