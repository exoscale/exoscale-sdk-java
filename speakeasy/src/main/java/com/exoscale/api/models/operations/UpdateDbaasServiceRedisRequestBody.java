/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class UpdateDbaasServiceRedisRequestBody {

    /**
     * Automatic maintenance settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenance")
    private Optional<? extends UpdateDbaasServiceRedisMaintenance> maintenance;

    /**
     * Subscription plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan")
    private Optional<? extends String> plan;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip-filter")
    private Optional<? extends java.util.List<String>> ipFilter;

    /**
     * Migrate data from existing server
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("migration")
    private Optional<? extends UpdateDbaasServiceRedisMigration> migration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redis-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaRedis> redisSettings;

    public UpdateDbaasServiceRedisRequestBody(
            @JsonProperty("maintenance") Optional<? extends UpdateDbaasServiceRedisMaintenance> maintenance,
            @JsonProperty("plan") Optional<? extends String> plan,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("ip-filter") Optional<? extends java.util.List<String>> ipFilter,
            @JsonProperty("migration") Optional<? extends UpdateDbaasServiceRedisMigration> migration,
            @JsonProperty("redis-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaRedis> redisSettings) {
        Utils.checkNotNull(maintenance, "maintenance");
        Utils.checkNotNull(plan, "plan");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(ipFilter, "ipFilter");
        Utils.checkNotNull(migration, "migration");
        Utils.checkNotNull(redisSettings, "redisSettings");
        this.maintenance = maintenance;
        this.plan = plan;
        this.terminationProtection = terminationProtection;
        this.ipFilter = ipFilter;
        this.migration = migration;
        this.redisSettings = redisSettings;
    }

    /**
     * Automatic maintenance settings
     */
    public Optional<? extends UpdateDbaasServiceRedisMaintenance> maintenance() {
        return maintenance;
    }

    /**
     * Subscription plan
     */
    public Optional<? extends String> plan() {
        return plan;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public Optional<? extends java.util.List<String>> ipFilter() {
        return ipFilter;
    }

    /**
     * Migrate data from existing server
     */
    public Optional<? extends UpdateDbaasServiceRedisMigration> migration() {
        return migration;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaRedis> redisSettings() {
        return redisSettings;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Automatic maintenance settings
     */
    public UpdateDbaasServiceRedisRequestBody withMaintenance(UpdateDbaasServiceRedisMaintenance maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = Optional.ofNullable(maintenance);
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public UpdateDbaasServiceRedisRequestBody withMaintenance(Optional<? extends UpdateDbaasServiceRedisMaintenance> maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = maintenance;
        return this;
    }

    /**
     * Subscription plan
     */
    public UpdateDbaasServiceRedisRequestBody withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = Optional.ofNullable(plan);
        return this;
    }

    /**
     * Subscription plan
     */
    public UpdateDbaasServiceRedisRequestBody withPlan(Optional<? extends String> plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public UpdateDbaasServiceRedisRequestBody withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public UpdateDbaasServiceRedisRequestBody withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public UpdateDbaasServiceRedisRequestBody withIpFilter(java.util.List<String> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = Optional.ofNullable(ipFilter);
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public UpdateDbaasServiceRedisRequestBody withIpFilter(Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = ipFilter;
        return this;
    }

    /**
     * Migrate data from existing server
     */
    public UpdateDbaasServiceRedisRequestBody withMigration(UpdateDbaasServiceRedisMigration migration) {
        Utils.checkNotNull(migration, "migration");
        this.migration = Optional.ofNullable(migration);
        return this;
    }

    /**
     * Migrate data from existing server
     */
    public UpdateDbaasServiceRedisRequestBody withMigration(Optional<? extends UpdateDbaasServiceRedisMigration> migration) {
        Utils.checkNotNull(migration, "migration");
        this.migration = migration;
        return this;
    }

    public UpdateDbaasServiceRedisRequestBody withRedisSettings(com.exoscale.api.models.components.JsonSchemaRedis redisSettings) {
        Utils.checkNotNull(redisSettings, "redisSettings");
        this.redisSettings = Optional.ofNullable(redisSettings);
        return this;
    }

    public UpdateDbaasServiceRedisRequestBody withRedisSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaRedis> redisSettings) {
        Utils.checkNotNull(redisSettings, "redisSettings");
        this.redisSettings = redisSettings;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDbaasServiceRedisRequestBody other = (UpdateDbaasServiceRedisRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.maintenance, other.maintenance) &&
            java.util.Objects.deepEquals(this.plan, other.plan) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.ipFilter, other.ipFilter) &&
            java.util.Objects.deepEquals(this.migration, other.migration) &&
            java.util.Objects.deepEquals(this.redisSettings, other.redisSettings);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            maintenance,
            plan,
            terminationProtection,
            ipFilter,
            migration,
            redisSettings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateDbaasServiceRedisRequestBody.class,
                "maintenance", maintenance,
                "plan", plan,
                "terminationProtection", terminationProtection,
                "ipFilter", ipFilter,
                "migration", migration,
                "redisSettings", redisSettings);
    }
    
    public final static class Builder {
 
        private Optional<? extends UpdateDbaasServiceRedisMaintenance> maintenance = Optional.empty();
 
        private Optional<? extends String> plan = Optional.empty();
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ipFilter = Optional.empty();
 
        private Optional<? extends UpdateDbaasServiceRedisMigration> migration = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaRedis> redisSettings = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(UpdateDbaasServiceRedisMaintenance maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = Optional.ofNullable(maintenance);
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Optional<? extends UpdateDbaasServiceRedisMaintenance> maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = Optional.ofNullable(plan);
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(Optional<? extends String> plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(java.util.List<String> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = Optional.ofNullable(ipFilter);
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(Optional<? extends java.util.List<String>> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * Migrate data from existing server
         */
        public Builder migration(UpdateDbaasServiceRedisMigration migration) {
            Utils.checkNotNull(migration, "migration");
            this.migration = Optional.ofNullable(migration);
            return this;
        }

        /**
         * Migrate data from existing server
         */
        public Builder migration(Optional<? extends UpdateDbaasServiceRedisMigration> migration) {
            Utils.checkNotNull(migration, "migration");
            this.migration = migration;
            return this;
        }

        public Builder redisSettings(com.exoscale.api.models.components.JsonSchemaRedis redisSettings) {
            Utils.checkNotNull(redisSettings, "redisSettings");
            this.redisSettings = Optional.ofNullable(redisSettings);
            return this;
        }

        public Builder redisSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaRedis> redisSettings) {
            Utils.checkNotNull(redisSettings, "redisSettings");
            this.redisSettings = redisSettings;
            return this;
        }
        
        public UpdateDbaasServiceRedisRequestBody build() {
            return new UpdateDbaasServiceRedisRequestBody(
                maintenance,
                plan,
                terminationProtection,
                ipFilter,
                migration,
                redisSettings);
        }
    }
}

