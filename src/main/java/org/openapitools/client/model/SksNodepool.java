/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import org.openapitools.client.model.AntiAffinityGroup;
import org.openapitools.client.model.DeployTarget;
import org.openapitools.client.model.InstancePool;
import org.openapitools.client.model.InstanceType;
import org.openapitools.client.model.KubeletImageGc;
import org.openapitools.client.model.PrivateNetwork;
import org.openapitools.client.model.SecurityGroup;
import org.openapitools.client.model.SksNodepoolTaint;
import org.openapitools.client.model.Template;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SKS Nodepool
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class SksNodepool {
  public static final String SERIALIZED_NAME_ANTI_AFFINITY_GROUPS = "anti-affinity-groups";
  @SerializedName(SERIALIZED_NAME_ANTI_AFFINITY_GROUPS)
  private List<AntiAffinityGroup> antiAffinityGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_TAINTS = "taints";
  @SerializedName(SERIALIZED_NAME_TAINTS)
  private Map<String, SksNodepoolTaint> taints = new HashMap<>();

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "security-groups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List<SecurityGroup> securityGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instance-type";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private InstanceType instanceType;

  public static final String SERIALIZED_NAME_PRIVATE_NETWORKS = "private-networks";
  @SerializedName(SERIALIZED_NAME_PRIVATE_NETWORKS)
  private List<PrivateNetwork> privateNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private Template template;

  /**
   * Nodepool state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    RENEWING_TOKEN("renewing-token"),
    
    CREATING("creating"),
    
    DELETING("deleting"),
    
    RUNNING("running"),
    
    SCALING("scaling"),
    
    UPDATING("updating"),
    
    ERROR("error");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_KUBELET_IMAGE_GC = "kubelet-image-gc";
  @SerializedName(SERIALIZED_NAME_KUBELET_IMAGE_GC)
  private KubeletImageGc kubeletImageGc;

  public static final String SERIALIZED_NAME_INSTANCE_POOL = "instance-pool";
  @SerializedName(SERIALIZED_NAME_INSTANCE_POOL)
  private InstancePool instancePool;

  public static final String SERIALIZED_NAME_INSTANCE_PREFIX = "instance-prefix";
  @SerializedName(SERIALIZED_NAME_INSTANCE_PREFIX)
  private String instancePrefix;

  public static final String SERIALIZED_NAME_DEPLOY_TARGET = "deploy-target";
  @SerializedName(SERIALIZED_NAME_DEPLOY_TARGET)
  private DeployTarget deployTarget;

  /**
   * Gets or Sets addons
   */
  @JsonAdapter(AddonsEnum.Adapter.class)
  public enum AddonsEnum {
    STORAGE_LVM("storage-lvm");

    private String value;

    AddonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddonsEnum fromValue(String value) {
      for (AddonsEnum b : AddonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AddonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AddonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDONS = "addons";
  @SerializedName(SERIALIZED_NAME_ADDONS)
  private Set<AddonsEnum> addons = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_DISK_SIZE = "disk-size";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE)
  private Long diskSize;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CREATED_AT = "created-at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public SksNodepool() {
  }

  public SksNodepool(
     StateEnum state, 
     UUID id, 
     String version, 
     OffsetDateTime createdAt
  ) {
    this();
    this.state = state;
    this.id = id;
    this.version = version;
    this.createdAt = createdAt;
  }

  public SksNodepool antiAffinityGroups(List<AntiAffinityGroup> antiAffinityGroups) {
    this.antiAffinityGroups = antiAffinityGroups;
    return this;
  }

  public SksNodepool addAntiAffinityGroupsItem(AntiAffinityGroup antiAffinityGroupsItem) {
    if (this.antiAffinityGroups == null) {
      this.antiAffinityGroups = new ArrayList<>();
    }
    this.antiAffinityGroups.add(antiAffinityGroupsItem);
    return this;
  }

   /**
   * Nodepool Anti-affinity Groups
   * @return antiAffinityGroups
  **/
  @javax.annotation.Nullable
  public List<AntiAffinityGroup> getAntiAffinityGroups() {
    return antiAffinityGroups;
  }

  public void setAntiAffinityGroups(List<AntiAffinityGroup> antiAffinityGroups) {
    this.antiAffinityGroups = antiAffinityGroups;
  }


  public SksNodepool description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Nodepool description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SksNodepool labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public SksNodepool putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public SksNodepool taints(Map<String, SksNodepoolTaint> taints) {
    this.taints = taints;
    return this;
  }

  public SksNodepool putTaintsItem(String key, SksNodepoolTaint taintsItem) {
    if (this.taints == null) {
      this.taints = new HashMap<>();
    }
    this.taints.put(key, taintsItem);
    return this;
  }

   /**
   * Get taints
   * @return taints
  **/
  @javax.annotation.Nullable
  public Map<String, SksNodepoolTaint> getTaints() {
    return taints;
  }

  public void setTaints(Map<String, SksNodepoolTaint> taints) {
    this.taints = taints;
  }


  public SksNodepool securityGroups(List<SecurityGroup> securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

  public SksNodepool addSecurityGroupsItem(SecurityGroup securityGroupsItem) {
    if (this.securityGroups == null) {
      this.securityGroups = new ArrayList<>();
    }
    this.securityGroups.add(securityGroupsItem);
    return this;
  }

   /**
   * Nodepool Security Groups
   * @return securityGroups
  **/
  @javax.annotation.Nullable
  public List<SecurityGroup> getSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(List<SecurityGroup> securityGroups) {
    this.securityGroups = securityGroups;
  }


  public SksNodepool name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Nodepool name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SksNodepool instanceType(InstanceType instanceType) {
    this.instanceType = instanceType;
    return this;
  }

   /**
   * Get instanceType
   * @return instanceType
  **/
  @javax.annotation.Nullable
  public InstanceType getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(InstanceType instanceType) {
    this.instanceType = instanceType;
  }


  public SksNodepool privateNetworks(List<PrivateNetwork> privateNetworks) {
    this.privateNetworks = privateNetworks;
    return this;
  }

  public SksNodepool addPrivateNetworksItem(PrivateNetwork privateNetworksItem) {
    if (this.privateNetworks == null) {
      this.privateNetworks = new ArrayList<>();
    }
    this.privateNetworks.add(privateNetworksItem);
    return this;
  }

   /**
   * Nodepool Private Networks
   * @return privateNetworks
  **/
  @javax.annotation.Nullable
  public List<PrivateNetwork> getPrivateNetworks() {
    return privateNetworks;
  }

  public void setPrivateNetworks(List<PrivateNetwork> privateNetworks) {
    this.privateNetworks = privateNetworks;
  }


  public SksNodepool template(Template template) {
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @javax.annotation.Nullable
  public Template getTemplate() {
    return template;
  }

  public void setTemplate(Template template) {
    this.template = template;
  }


   /**
   * Nodepool state
   * @return state
  **/
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public SksNodepool size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Number of instances
   * minimum: 0
   * @return size
  **/
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public SksNodepool kubeletImageGc(KubeletImageGc kubeletImageGc) {
    this.kubeletImageGc = kubeletImageGc;
    return this;
  }

   /**
   * Get kubeletImageGc
   * @return kubeletImageGc
  **/
  @javax.annotation.Nullable
  public KubeletImageGc getKubeletImageGc() {
    return kubeletImageGc;
  }

  public void setKubeletImageGc(KubeletImageGc kubeletImageGc) {
    this.kubeletImageGc = kubeletImageGc;
  }


  public SksNodepool instancePool(InstancePool instancePool) {
    this.instancePool = instancePool;
    return this;
  }

   /**
   * Get instancePool
   * @return instancePool
  **/
  @javax.annotation.Nullable
  public InstancePool getInstancePool() {
    return instancePool;
  }

  public void setInstancePool(InstancePool instancePool) {
    this.instancePool = instancePool;
  }


  public SksNodepool instancePrefix(String instancePrefix) {
    this.instancePrefix = instancePrefix;
    return this;
  }

   /**
   * The instances created by the Nodepool will be prefixed with this value (default: pool)
   * @return instancePrefix
  **/
  @javax.annotation.Nullable
  public String getInstancePrefix() {
    return instancePrefix;
  }

  public void setInstancePrefix(String instancePrefix) {
    this.instancePrefix = instancePrefix;
  }


  public SksNodepool deployTarget(DeployTarget deployTarget) {
    this.deployTarget = deployTarget;
    return this;
  }

   /**
   * Get deployTarget
   * @return deployTarget
  **/
  @javax.annotation.Nullable
  public DeployTarget getDeployTarget() {
    return deployTarget;
  }

  public void setDeployTarget(DeployTarget deployTarget) {
    this.deployTarget = deployTarget;
  }


  public SksNodepool addons(Set<AddonsEnum> addons) {
    this.addons = addons;
    return this;
  }

  public SksNodepool addAddonsItem(AddonsEnum addonsItem) {
    if (this.addons == null) {
      this.addons = new LinkedHashSet<>();
    }
    this.addons.add(addonsItem);
    return this;
  }

   /**
   * Nodepool addons
   * @return addons
  **/
  @javax.annotation.Nullable
  public Set<AddonsEnum> getAddons() {
    return addons;
  }

  public void setAddons(Set<AddonsEnum> addons) {
    this.addons = addons;
  }


   /**
   * Nodepool ID
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  public SksNodepool diskSize(Long diskSize) {
    this.diskSize = diskSize;
    return this;
  }

   /**
   * Nodepool instances disk size in GB
   * minimum: 20
   * maximum: 50000
   * @return diskSize
  **/
  @javax.annotation.Nullable
  public Long getDiskSize() {
    return diskSize;
  }

  public void setDiskSize(Long diskSize) {
    this.diskSize = diskSize;
  }


   /**
   * Nodepool version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }



   /**
   * Nodepool creation date
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SksNodepool sksNodepool = (SksNodepool) o;
    return Objects.equals(this.antiAffinityGroups, sksNodepool.antiAffinityGroups) &&
        Objects.equals(this.description, sksNodepool.description) &&
        Objects.equals(this.labels, sksNodepool.labels) &&
        Objects.equals(this.taints, sksNodepool.taints) &&
        Objects.equals(this.securityGroups, sksNodepool.securityGroups) &&
        Objects.equals(this.name, sksNodepool.name) &&
        Objects.equals(this.instanceType, sksNodepool.instanceType) &&
        Objects.equals(this.privateNetworks, sksNodepool.privateNetworks) &&
        Objects.equals(this.template, sksNodepool.template) &&
        Objects.equals(this.state, sksNodepool.state) &&
        Objects.equals(this.size, sksNodepool.size) &&
        Objects.equals(this.kubeletImageGc, sksNodepool.kubeletImageGc) &&
        Objects.equals(this.instancePool, sksNodepool.instancePool) &&
        Objects.equals(this.instancePrefix, sksNodepool.instancePrefix) &&
        Objects.equals(this.deployTarget, sksNodepool.deployTarget) &&
        Objects.equals(this.addons, sksNodepool.addons) &&
        Objects.equals(this.id, sksNodepool.id) &&
        Objects.equals(this.diskSize, sksNodepool.diskSize) &&
        Objects.equals(this.version, sksNodepool.version) &&
        Objects.equals(this.createdAt, sksNodepool.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antiAffinityGroups, description, labels, taints, securityGroups, name, instanceType, privateNetworks, template, state, size, kubeletImageGc, instancePool, instancePrefix, deployTarget, addons, id, diskSize, version, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SksNodepool {\n");
    sb.append("    antiAffinityGroups: ").append(toIndentedString(antiAffinityGroups)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    taints: ").append(toIndentedString(taints)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    privateNetworks: ").append(toIndentedString(privateNetworks)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    kubeletImageGc: ").append(toIndentedString(kubeletImageGc)).append("\n");
    sb.append("    instancePool: ").append(toIndentedString(instancePool)).append("\n");
    sb.append("    instancePrefix: ").append(toIndentedString(instancePrefix)).append("\n");
    sb.append("    deployTarget: ").append(toIndentedString(deployTarget)).append("\n");
    sb.append("    addons: ").append(toIndentedString(addons)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    diskSize: ").append(toIndentedString(diskSize)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anti-affinity-groups");
    openapiFields.add("description");
    openapiFields.add("labels");
    openapiFields.add("taints");
    openapiFields.add("security-groups");
    openapiFields.add("name");
    openapiFields.add("instance-type");
    openapiFields.add("private-networks");
    openapiFields.add("template");
    openapiFields.add("state");
    openapiFields.add("size");
    openapiFields.add("kubelet-image-gc");
    openapiFields.add("instance-pool");
    openapiFields.add("instance-prefix");
    openapiFields.add("deploy-target");
    openapiFields.add("addons");
    openapiFields.add("id");
    openapiFields.add("disk-size");
    openapiFields.add("version");
    openapiFields.add("created-at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SksNodepool
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SksNodepool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SksNodepool is not found in the empty JSON string", SksNodepool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SksNodepool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SksNodepool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("anti-affinity-groups") != null && !jsonObj.get("anti-affinity-groups").isJsonNull()) {
        JsonArray jsonArrayantiAffinityGroups = jsonObj.getAsJsonArray("anti-affinity-groups");
        if (jsonArrayantiAffinityGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("anti-affinity-groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `anti-affinity-groups` to be an array in the JSON string but got `%s`", jsonObj.get("anti-affinity-groups").toString()));
          }

          // validate the optional field `anti-affinity-groups` (array)
          for (int i = 0; i < jsonArrayantiAffinityGroups.size(); i++) {
            AntiAffinityGroup.validateJsonElement(jsonArrayantiAffinityGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("security-groups") != null && !jsonObj.get("security-groups").isJsonNull()) {
        JsonArray jsonArraysecurityGroups = jsonObj.getAsJsonArray("security-groups");
        if (jsonArraysecurityGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("security-groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `security-groups` to be an array in the JSON string but got `%s`", jsonObj.get("security-groups").toString()));
          }

          // validate the optional field `security-groups` (array)
          for (int i = 0; i < jsonArraysecurityGroups.size(); i++) {
            SecurityGroup.validateJsonElement(jsonArraysecurityGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `instance-type`
      if (jsonObj.get("instance-type") != null && !jsonObj.get("instance-type").isJsonNull()) {
        InstanceType.validateJsonElement(jsonObj.get("instance-type"));
      }
      if (jsonObj.get("private-networks") != null && !jsonObj.get("private-networks").isJsonNull()) {
        JsonArray jsonArrayprivateNetworks = jsonObj.getAsJsonArray("private-networks");
        if (jsonArrayprivateNetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("private-networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `private-networks` to be an array in the JSON string but got `%s`", jsonObj.get("private-networks").toString()));
          }

          // validate the optional field `private-networks` (array)
          for (int i = 0; i < jsonArrayprivateNetworks.size(); i++) {
            PrivateNetwork.validateJsonElement(jsonArrayprivateNetworks.get(i));
          };
        }
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        Template.validateJsonElement(jsonObj.get("template"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `kubelet-image-gc`
      if (jsonObj.get("kubelet-image-gc") != null && !jsonObj.get("kubelet-image-gc").isJsonNull()) {
        KubeletImageGc.validateJsonElement(jsonObj.get("kubelet-image-gc"));
      }
      // validate the optional field `instance-pool`
      if (jsonObj.get("instance-pool") != null && !jsonObj.get("instance-pool").isJsonNull()) {
        InstancePool.validateJsonElement(jsonObj.get("instance-pool"));
      }
      if ((jsonObj.get("instance-prefix") != null && !jsonObj.get("instance-prefix").isJsonNull()) && !jsonObj.get("instance-prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance-prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance-prefix").toString()));
      }
      // validate the optional field `deploy-target`
      if (jsonObj.get("deploy-target") != null && !jsonObj.get("deploy-target").isJsonNull()) {
        DeployTarget.validateJsonElement(jsonObj.get("deploy-target"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("addons") != null && !jsonObj.get("addons").isJsonNull() && !jsonObj.get("addons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addons` to be an array in the JSON string but got `%s`", jsonObj.get("addons").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SksNodepool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SksNodepool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SksNodepool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SksNodepool.class));

       return (TypeAdapter<T>) new TypeAdapter<SksNodepool>() {
           @Override
           public void write(JsonWriter out, SksNodepool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SksNodepool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SksNodepool given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SksNodepool
  * @throws IOException if the JSON string is invalid with respect to SksNodepool
  */
  public static SksNodepool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SksNodepool.class);
  }

 /**
  * Convert an instance of SksNodepool to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

