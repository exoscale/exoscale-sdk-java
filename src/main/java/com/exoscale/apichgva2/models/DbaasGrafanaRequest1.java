/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for DbaasGrafanaRequest1 type.
 */
public class DbaasGrafanaRequest1 {
    private Maintenance maintenance;
    private String plan;
    private Boolean terminationProtection;
    private String forkFromService;
    private GrafanaSettings grafanaSettings;
    private List<String> ipFilter;

    /**
     * Default constructor.
     */
    public DbaasGrafanaRequest1() {
    }

    /**
     * Initialization constructor.
     * @param  plan  String value for plan.
     * @param  maintenance  Maintenance value for maintenance.
     * @param  terminationProtection  Boolean value for terminationProtection.
     * @param  forkFromService  String value for forkFromService.
     * @param  grafanaSettings  GrafanaSettings value for grafanaSettings.
     * @param  ipFilter  List of String value for ipFilter.
     */
    public DbaasGrafanaRequest1(
            String plan,
            Maintenance maintenance,
            Boolean terminationProtection,
            String forkFromService,
            GrafanaSettings grafanaSettings,
            List<String> ipFilter) {
        this.maintenance = maintenance;
        this.plan = plan;
        this.terminationProtection = terminationProtection;
        this.forkFromService = forkFromService;
        this.grafanaSettings = grafanaSettings;
        this.ipFilter = ipFilter;
    }

    /**
     * Getter for Maintenance.
     * Automatic maintenance settings
     * @return Returns the Maintenance
     */
    @JsonGetter("maintenance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Maintenance getMaintenance() {
        return maintenance;
    }

    /**
     * Setter for Maintenance.
     * Automatic maintenance settings
     * @param maintenance Value for Maintenance
     */
    @JsonSetter("maintenance")
    public void setMaintenance(Maintenance maintenance) {
        this.maintenance = maintenance;
    }

    /**
     * Getter for Plan.
     * Subscription plan
     * @return Returns the String
     */
    @JsonGetter("plan")
    public String getPlan() {
        return plan;
    }

    /**
     * Setter for Plan.
     * Subscription plan
     * @param plan Value for String
     */
    @JsonSetter("plan")
    public void setPlan(String plan) {
        this.plan = plan;
    }

    /**
     * Getter for TerminationProtection.
     * Service is protected against termination and powering off
     * @return Returns the Boolean
     */
    @JsonGetter("termination-protection")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTerminationProtection() {
        return terminationProtection;
    }

    /**
     * Setter for TerminationProtection.
     * Service is protected against termination and powering off
     * @param terminationProtection Value for Boolean
     */
    @JsonSetter("termination-protection")
    public void setTerminationProtection(Boolean terminationProtection) {
        this.terminationProtection = terminationProtection;
    }

    /**
     * Getter for ForkFromService.
     * @return Returns the String
     */
    @JsonGetter("fork-from-service")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getForkFromService() {
        return forkFromService;
    }

    /**
     * Setter for ForkFromService.
     * @param forkFromService Value for String
     */
    @JsonSetter("fork-from-service")
    public void setForkFromService(String forkFromService) {
        this.forkFromService = forkFromService;
    }

    /**
     * Getter for GrafanaSettings.
     * @return Returns the GrafanaSettings
     */
    @JsonGetter("grafana-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public GrafanaSettings getGrafanaSettings() {
        return grafanaSettings;
    }

    /**
     * Setter for GrafanaSettings.
     * @param grafanaSettings Value for GrafanaSettings
     */
    @JsonSetter("grafana-settings")
    public void setGrafanaSettings(GrafanaSettings grafanaSettings) {
        this.grafanaSettings = grafanaSettings;
    }

    /**
     * Getter for IpFilter.
     * Allowed CIDR address blocks for incoming connections
     * @return Returns the List of String
     */
    @JsonGetter("ip-filter")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getIpFilter() {
        return ipFilter;
    }

    /**
     * Setter for IpFilter.
     * Allowed CIDR address blocks for incoming connections
     * @param ipFilter Value for List of String
     */
    @JsonSetter("ip-filter")
    public void setIpFilter(List<String> ipFilter) {
        this.ipFilter = ipFilter;
    }

    /**
     * Converts this DbaasGrafanaRequest1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DbaasGrafanaRequest1 [" + "plan=" + plan + ", maintenance=" + maintenance
                + ", terminationProtection=" + terminationProtection + ", forkFromService="
                + forkFromService + ", grafanaSettings=" + grafanaSettings + ", ipFilter="
                + ipFilter + "]";
    }

    /**
     * Builds a new {@link DbaasGrafanaRequest1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DbaasGrafanaRequest1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(plan)
                .maintenance(getMaintenance())
                .terminationProtection(getTerminationProtection())
                .forkFromService(getForkFromService())
                .grafanaSettings(getGrafanaSettings())
                .ipFilter(getIpFilter());
        return builder;
    }

    /**
     * Class to build instances of {@link DbaasGrafanaRequest1}.
     */
    public static class Builder {
        private String plan;
        private Maintenance maintenance;
        private Boolean terminationProtection;
        private String forkFromService;
        private GrafanaSettings grafanaSettings;
        private List<String> ipFilter;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  plan  String value for plan.
         */
        public Builder(String plan) {
            this.plan = plan;
        }

        /**
         * Setter for plan.
         * @param  plan  String value for plan.
         * @return Builder
         */
        public Builder plan(String plan) {
            this.plan = plan;
            return this;
        }

        /**
         * Setter for maintenance.
         * @param  maintenance  Maintenance value for maintenance.
         * @return Builder
         */
        public Builder maintenance(Maintenance maintenance) {
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Setter for terminationProtection.
         * @param  terminationProtection  Boolean value for terminationProtection.
         * @return Builder
         */
        public Builder terminationProtection(Boolean terminationProtection) {
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Setter for forkFromService.
         * @param  forkFromService  String value for forkFromService.
         * @return Builder
         */
        public Builder forkFromService(String forkFromService) {
            this.forkFromService = forkFromService;
            return this;
        }

        /**
         * Setter for grafanaSettings.
         * @param  grafanaSettings  GrafanaSettings value for grafanaSettings.
         * @return Builder
         */
        public Builder grafanaSettings(GrafanaSettings grafanaSettings) {
            this.grafanaSettings = grafanaSettings;
            return this;
        }

        /**
         * Setter for ipFilter.
         * @param  ipFilter  List of String value for ipFilter.
         * @return Builder
         */
        public Builder ipFilter(List<String> ipFilter) {
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * Builds a new {@link DbaasGrafanaRequest1} object using the set fields.
         * @return {@link DbaasGrafanaRequest1}
         */
        public DbaasGrafanaRequest1 build() {
            return new DbaasGrafanaRequest1(plan, maintenance, terminationProtection,
                    forkFromService, grafanaSettings, ipFilter);
        }
    }
}
