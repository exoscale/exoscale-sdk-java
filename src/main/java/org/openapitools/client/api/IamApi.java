/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Pair;

import org.openapitools.client.model.AccessKey;
import org.openapitools.client.model.CreateAccessKeyRequest;
import org.openapitools.client.model.CreateApiKeyRequest;
import org.openapitools.client.model.CreateIamRoleRequest;
import org.openapitools.client.model.IamApiKey;
import org.openapitools.client.model.IamApiKeyCreated;
import org.openapitools.client.model.IamPolicy;
import org.openapitools.client.model.IamRole;
import org.openapitools.client.model.ListAccessKeyKnownOperations200Response;
import org.openapitools.client.model.ListAccessKeys200Response;
import org.openapitools.client.model.ListApiKeys200Response;
import org.openapitools.client.model.ListIamRoles200Response;
import org.openapitools.client.model.Operation;
import java.util.UUID;
import org.openapitools.client.model.UpdateIamRoleRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-02T12:56:21.011484+02:00[Europe/Vienna]", comments = "Generator version: 7.4.0")
public class IamApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public IamApi() {
    this(new ApiClient());
  }

  public IamApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a legacy IAM Access Key
   * This operation creates a legacy IAM Access Key, to create a key for use with IAM roles use the api-key endpoint.The corresponding secret is only available in the response returned by this operation, the caller must take care of storing it safely as there is no other way to retrieve it.
   * @param createAccessKeyRequest  (required)
   * @return AccessKey
   * @throws ApiException if fails to make API call
   */
  public AccessKey createAccessKey(CreateAccessKeyRequest createAccessKeyRequest) throws ApiException {
    ApiResponse<AccessKey> localVarResponse = createAccessKeyWithHttpInfo(createAccessKeyRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a legacy IAM Access Key
   * This operation creates a legacy IAM Access Key, to create a key for use with IAM roles use the api-key endpoint.The corresponding secret is only available in the response returned by this operation, the caller must take care of storing it safely as there is no other way to retrieve it.
   * @param createAccessKeyRequest  (required)
   * @return ApiResponse&lt;AccessKey&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AccessKey> createAccessKeyWithHttpInfo(CreateAccessKeyRequest createAccessKeyRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAccessKeyRequestBuilder(createAccessKeyRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAccessKey", localVarResponse);
        }
        return new ApiResponse<AccessKey>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccessKey>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAccessKeyRequestBuilder(CreateAccessKeyRequest createAccessKeyRequest) throws ApiException {
    // verify the required parameter 'createAccessKeyRequest' is set
    if (createAccessKeyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createAccessKeyRequest' when calling createAccessKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/access-key";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createAccessKeyRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new API key
   * 
   * @param createApiKeyRequest  (required)
   * @return IamApiKeyCreated
   * @throws ApiException if fails to make API call
   */
  public IamApiKeyCreated createApiKey(CreateApiKeyRequest createApiKeyRequest) throws ApiException {
    ApiResponse<IamApiKeyCreated> localVarResponse = createApiKeyWithHttpInfo(createApiKeyRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a new API key
   * 
   * @param createApiKeyRequest  (required)
   * @return ApiResponse&lt;IamApiKeyCreated&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IamApiKeyCreated> createApiKeyWithHttpInfo(CreateApiKeyRequest createApiKeyRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createApiKeyRequestBuilder(createApiKeyRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createApiKey", localVarResponse);
        }
        return new ApiResponse<IamApiKeyCreated>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IamApiKeyCreated>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createApiKeyRequestBuilder(CreateApiKeyRequest createApiKeyRequest) throws ApiException {
    // verify the required parameter 'createApiKeyRequest' is set
    if (createApiKeyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiKeyRequest' when calling createApiKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api-key";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createApiKeyRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create IAM Role
   * 
   * @param createIamRoleRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createIamRole(CreateIamRoleRequest createIamRoleRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createIamRoleWithHttpInfo(createIamRoleRequest);
    return localVarResponse.getData();
  }

  /**
   * Create IAM Role
   * 
   * @param createIamRoleRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createIamRoleWithHttpInfo(CreateIamRoleRequest createIamRoleRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createIamRoleRequestBuilder(createIamRoleRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createIamRole", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createIamRoleRequestBuilder(CreateIamRoleRequest createIamRoleRequest) throws ApiException {
    // verify the required parameter 'createIamRoleRequest' is set
    if (createIamRoleRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createIamRoleRequest' when calling createIamRole");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createIamRoleRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an API key
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteApiKey(String id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteApiKeyWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete an API key
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteApiKeyWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteApiKeyRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteApiKey", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteApiKeyRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api-key/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete IAM Role
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteIamRole(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteIamRoleWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete IAM Role
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteIamRoleWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteIamRoleRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteIamRole", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteIamRoleRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteIamRole");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve IAM Access Key details
   * 
   * @param key  (required)
   * @return AccessKey
   * @throws ApiException if fails to make API call
   */
  public AccessKey getAccessKey(String key) throws ApiException {
    ApiResponse<AccessKey> localVarResponse = getAccessKeyWithHttpInfo(key);
    return localVarResponse.getData();
  }

  /**
   * Retrieve IAM Access Key details
   * 
   * @param key  (required)
   * @return ApiResponse&lt;AccessKey&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AccessKey> getAccessKeyWithHttpInfo(String key) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAccessKeyRequestBuilder(key);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAccessKey", localVarResponse);
        }
        return new ApiResponse<AccessKey>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccessKey>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAccessKeyRequestBuilder(String key) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getAccessKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/access-key/{key}"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get API key
   * 
   * @param id  (required)
   * @return IamApiKey
   * @throws ApiException if fails to make API call
   */
  public IamApiKey getApiKey(String id) throws ApiException {
    ApiResponse<IamApiKey> localVarResponse = getApiKeyWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get API key
   * 
   * @param id  (required)
   * @return ApiResponse&lt;IamApiKey&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IamApiKey> getApiKeyWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getApiKeyRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getApiKey", localVarResponse);
        }
        return new ApiResponse<IamApiKey>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IamApiKey>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getApiKeyRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getApiKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api-key/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve IAM Organization Policy
   * 
   * @return IamPolicy
   * @throws ApiException if fails to make API call
   */
  public IamPolicy getIamOrganizationPolicy() throws ApiException {
    ApiResponse<IamPolicy> localVarResponse = getIamOrganizationPolicyWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve IAM Organization Policy
   * 
   * @return ApiResponse&lt;IamPolicy&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IamPolicy> getIamOrganizationPolicyWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIamOrganizationPolicyRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getIamOrganizationPolicy", localVarResponse);
        }
        return new ApiResponse<IamPolicy>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IamPolicy>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIamOrganizationPolicyRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-organization-policy";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve IAM Role
   * 
   * @param id  (required)
   * @return IamRole
   * @throws ApiException if fails to make API call
   */
  public IamRole getIamRole(UUID id) throws ApiException {
    ApiResponse<IamRole> localVarResponse = getIamRoleWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve IAM Role
   * 
   * @param id  (required)
   * @return ApiResponse&lt;IamRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IamRole> getIamRoleWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIamRoleRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getIamRole", localVarResponse);
        }
        return new ApiResponse<IamRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IamRole>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIamRoleRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getIamRole");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve all known available IAM Access Key operations and associated tags
   * 
   * @return ListAccessKeyKnownOperations200Response
   * @throws ApiException if fails to make API call
   */
  public ListAccessKeyKnownOperations200Response listAccessKeyKnownOperations() throws ApiException {
    ApiResponse<ListAccessKeyKnownOperations200Response> localVarResponse = listAccessKeyKnownOperationsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve all known available IAM Access Key operations and associated tags
   * 
   * @return ApiResponse&lt;ListAccessKeyKnownOperations200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAccessKeyKnownOperations200Response> listAccessKeyKnownOperationsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAccessKeyKnownOperationsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAccessKeyKnownOperations", localVarResponse);
        }
        return new ApiResponse<ListAccessKeyKnownOperations200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAccessKeyKnownOperations200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAccessKeyKnownOperationsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/access-key-known-operations";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve IAM Access Key operations and associated tags for the signing key
   * 
   * @return ListAccessKeyKnownOperations200Response
   * @throws ApiException if fails to make API call
   */
  public ListAccessKeyKnownOperations200Response listAccessKeyOperations() throws ApiException {
    ApiResponse<ListAccessKeyKnownOperations200Response> localVarResponse = listAccessKeyOperationsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve IAM Access Key operations and associated tags for the signing key
   * 
   * @return ApiResponse&lt;ListAccessKeyKnownOperations200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAccessKeyKnownOperations200Response> listAccessKeyOperationsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAccessKeyOperationsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAccessKeyOperations", localVarResponse);
        }
        return new ApiResponse<ListAccessKeyKnownOperations200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAccessKeyKnownOperations200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAccessKeyOperationsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/access-key-operations";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List IAM Access Keys
   * 
   * @return ListAccessKeys200Response
   * @throws ApiException if fails to make API call
   */
  public ListAccessKeys200Response listAccessKeys() throws ApiException {
    ApiResponse<ListAccessKeys200Response> localVarResponse = listAccessKeysWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List IAM Access Keys
   * 
   * @return ApiResponse&lt;ListAccessKeys200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAccessKeys200Response> listAccessKeysWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAccessKeysRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAccessKeys", localVarResponse);
        }
        return new ApiResponse<ListAccessKeys200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAccessKeys200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAccessKeysRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/access-key";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List API keys
   * 
   * @return ListApiKeys200Response
   * @throws ApiException if fails to make API call
   */
  public ListApiKeys200Response listApiKeys() throws ApiException {
    ApiResponse<ListApiKeys200Response> localVarResponse = listApiKeysWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List API keys
   * 
   * @return ApiResponse&lt;ListApiKeys200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListApiKeys200Response> listApiKeysWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listApiKeysRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listApiKeys", localVarResponse);
        }
        return new ApiResponse<ListApiKeys200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListApiKeys200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listApiKeysRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api-key";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List IAM Roles
   * 
   * @return ListIamRoles200Response
   * @throws ApiException if fails to make API call
   */
  public ListIamRoles200Response listIamRoles() throws ApiException {
    ApiResponse<ListIamRoles200Response> localVarResponse = listIamRolesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List IAM Roles
   * 
   * @return ApiResponse&lt;ListIamRoles200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListIamRoles200Response> listIamRolesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listIamRolesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listIamRoles", localVarResponse);
        }
        return new ApiResponse<ListIamRoles200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListIamRoles200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listIamRolesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Revoke an IAM Access Key
   * This operation revokes the specified IAM Access Key. Access Keys created by the revoked Access Key will not be revoked.
   * @param key  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation revokeAccessKey(String key) throws ApiException {
    ApiResponse<Operation> localVarResponse = revokeAccessKeyWithHttpInfo(key);
    return localVarResponse.getData();
  }

  /**
   * Revoke an IAM Access Key
   * This operation revokes the specified IAM Access Key. Access Keys created by the revoked Access Key will not be revoked.
   * @param key  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> revokeAccessKeyWithHttpInfo(String key) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revokeAccessKeyRequestBuilder(key);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revokeAccessKey", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revokeAccessKeyRequestBuilder(String key) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling revokeAccessKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/access-key/{key}"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update IAM Organization Policy
   * 
   * @param iamPolicy  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateIamOrganizationPolicy(IamPolicy iamPolicy) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateIamOrganizationPolicyWithHttpInfo(iamPolicy);
    return localVarResponse.getData();
  }

  /**
   * Update IAM Organization Policy
   * 
   * @param iamPolicy  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateIamOrganizationPolicyWithHttpInfo(IamPolicy iamPolicy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateIamOrganizationPolicyRequestBuilder(iamPolicy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateIamOrganizationPolicy", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateIamOrganizationPolicyRequestBuilder(IamPolicy iamPolicy) throws ApiException {
    // verify the required parameter 'iamPolicy' is set
    if (iamPolicy == null) {
      throw new ApiException(400, "Missing the required parameter 'iamPolicy' when calling updateIamOrganizationPolicy");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-organization-policy";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(iamPolicy);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update IAM Role
   * 
   * @param id  (required)
   * @param updateIamRoleRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateIamRole(UUID id, UpdateIamRoleRequest updateIamRoleRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateIamRoleWithHttpInfo(id, updateIamRoleRequest);
    return localVarResponse.getData();
  }

  /**
   * Update IAM Role
   * 
   * @param id  (required)
   * @param updateIamRoleRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateIamRoleWithHttpInfo(UUID id, UpdateIamRoleRequest updateIamRoleRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateIamRoleRequestBuilder(id, updateIamRoleRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateIamRole", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateIamRoleRequestBuilder(UUID id, UpdateIamRoleRequest updateIamRoleRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateIamRole");
    }
    // verify the required parameter 'updateIamRoleRequest' is set
    if (updateIamRoleRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateIamRoleRequest' when calling updateIamRole");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateIamRoleRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update IAM Role Policy
   * 
   * @param id  (required)
   * @param iamPolicy  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateIamRolePolicy(UUID id, IamPolicy iamPolicy) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateIamRolePolicyWithHttpInfo(id, iamPolicy);
    return localVarResponse.getData();
  }

  /**
   * Update IAM Role Policy
   * 
   * @param id  (required)
   * @param iamPolicy  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateIamRolePolicyWithHttpInfo(UUID id, IamPolicy iamPolicy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateIamRolePolicyRequestBuilder(id, iamPolicy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateIamRolePolicy", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateIamRolePolicyRequestBuilder(UUID id, IamPolicy iamPolicy) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateIamRolePolicy");
    }
    // verify the required parameter 'iamPolicy' is set
    if (iamPolicy == null) {
      throw new ApiException(400, "Missing the required parameter 'iamPolicy' when calling updateIamRolePolicy");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role/{id}:policy"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(iamPolicy);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
