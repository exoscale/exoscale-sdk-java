/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Migration type.
 */
public class Migration {
    private String host;
    private long port;
    private String password;
    private Boolean ssl;
    private String username;
    private String dbname;
    private String ignoreDbs;
    private EnumMigrationMethodEnum method;

    /**
     * Default constructor.
     */
    public Migration() {
    }

    /**
     * Initialization constructor.
     * @param  host  String value for host.
     * @param  port  long value for port.
     * @param  password  String value for password.
     * @param  ssl  Boolean value for ssl.
     * @param  username  String value for username.
     * @param  dbname  String value for dbname.
     * @param  ignoreDbs  String value for ignoreDbs.
     * @param  method  EnumMigrationMethodEnum value for method.
     */
    public Migration(
            String host,
            long port,
            String password,
            Boolean ssl,
            String username,
            String dbname,
            String ignoreDbs,
            EnumMigrationMethodEnum method) {
        this.host = host;
        this.port = port;
        this.password = password;
        this.ssl = ssl;
        this.username = username;
        this.dbname = dbname;
        this.ignoreDbs = ignoreDbs;
        this.method = method;
    }

    /**
     * Getter for Host.
     * Hostname or IP address of the server where to migrate data from
     * @return Returns the String
     */
    @JsonGetter("host")
    public String getHost() {
        return host;
    }

    /**
     * Setter for Host.
     * Hostname or IP address of the server where to migrate data from
     * @param host Value for String
     */
    @JsonSetter("host")
    public void setHost(String host) {
        this.host = host;
    }

    /**
     * Getter for Port.
     * Port number of the server where to migrate data from
     * @return Returns the long
     */
    @JsonGetter("port")
    public long getPort() {
        return port;
    }

    /**
     * Setter for Port.
     * Port number of the server where to migrate data from
     * @param port Value for long
     */
    @JsonSetter("port")
    public void setPort(long port) {
        this.port = port;
    }

    /**
     * Getter for Password.
     * Password for authentication with the server where to migrate data from
     * @return Returns the String
     */
    @JsonGetter("password")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPassword() {
        return password;
    }

    /**
     * Setter for Password.
     * Password for authentication with the server where to migrate data from
     * @param password Value for String
     */
    @JsonSetter("password")
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Getter for Ssl.
     * The server where to migrate data from is secured with SSL
     * @return Returns the Boolean
     */
    @JsonGetter("ssl")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSsl() {
        return ssl;
    }

    /**
     * Setter for Ssl.
     * The server where to migrate data from is secured with SSL
     * @param ssl Value for Boolean
     */
    @JsonSetter("ssl")
    public void setSsl(Boolean ssl) {
        this.ssl = ssl;
    }

    /**
     * Getter for Username.
     * User name for authentication with the server where to migrate data from
     * @return Returns the String
     */
    @JsonGetter("username")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUsername() {
        return username;
    }

    /**
     * Setter for Username.
     * User name for authentication with the server where to migrate data from
     * @param username Value for String
     */
    @JsonSetter("username")
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Getter for Dbname.
     * Database name for bootstrapping the initial connection
     * @return Returns the String
     */
    @JsonGetter("dbname")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDbname() {
        return dbname;
    }

    /**
     * Setter for Dbname.
     * Database name for bootstrapping the initial connection
     * @param dbname Value for String
     */
    @JsonSetter("dbname")
    public void setDbname(String dbname) {
        this.dbname = dbname;
    }

    /**
     * Getter for IgnoreDbs.
     * Comma-separated list of databases, which should be ignored during migration (supported by
     * MySQL only at the moment)
     * @return Returns the String
     */
    @JsonGetter("ignore-dbs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getIgnoreDbs() {
        return ignoreDbs;
    }

    /**
     * Setter for IgnoreDbs.
     * Comma-separated list of databases, which should be ignored during migration (supported by
     * MySQL only at the moment)
     * @param ignoreDbs Value for String
     */
    @JsonSetter("ignore-dbs")
    public void setIgnoreDbs(String ignoreDbs) {
        this.ignoreDbs = ignoreDbs;
    }

    /**
     * Getter for Method.
     * @return Returns the EnumMigrationMethodEnum
     */
    @JsonGetter("method")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EnumMigrationMethodEnum getMethod() {
        return method;
    }

    /**
     * Setter for Method.
     * @param method Value for EnumMigrationMethodEnum
     */
    @JsonSetter("method")
    public void setMethod(EnumMigrationMethodEnum method) {
        this.method = method;
    }

    /**
     * Converts this Migration into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Migration [" + "host=" + host + ", port=" + port + ", password=" + password
                + ", ssl=" + ssl + ", username=" + username + ", dbname=" + dbname + ", ignoreDbs="
                + ignoreDbs + ", method=" + method + "]";
    }

    /**
     * Builds a new {@link Migration.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Migration.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(host, port)
                .password(getPassword())
                .ssl(getSsl())
                .username(getUsername())
                .dbname(getDbname())
                .ignoreDbs(getIgnoreDbs())
                .method(getMethod());
        return builder;
    }

    /**
     * Class to build instances of {@link Migration}.
     */
    public static class Builder {
        private String host;
        private long port;
        private String password;
        private Boolean ssl;
        private String username;
        private String dbname;
        private String ignoreDbs;
        private EnumMigrationMethodEnum method;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  host  String value for host.
         * @param  port  long value for port.
         */
        public Builder(String host, long port) {
            this.host = host;
            this.port = port;
        }

        /**
         * Setter for host.
         * @param  host  String value for host.
         * @return Builder
         */
        public Builder host(String host) {
            this.host = host;
            return this;
        }

        /**
         * Setter for port.
         * @param  port  long value for port.
         * @return Builder
         */
        public Builder port(long port) {
            this.port = port;
            return this;
        }

        /**
         * Setter for password.
         * @param  password  String value for password.
         * @return Builder
         */
        public Builder password(String password) {
            this.password = password;
            return this;
        }

        /**
         * Setter for ssl.
         * @param  ssl  Boolean value for ssl.
         * @return Builder
         */
        public Builder ssl(Boolean ssl) {
            this.ssl = ssl;
            return this;
        }

        /**
         * Setter for username.
         * @param  username  String value for username.
         * @return Builder
         */
        public Builder username(String username) {
            this.username = username;
            return this;
        }

        /**
         * Setter for dbname.
         * @param  dbname  String value for dbname.
         * @return Builder
         */
        public Builder dbname(String dbname) {
            this.dbname = dbname;
            return this;
        }

        /**
         * Setter for ignoreDbs.
         * @param  ignoreDbs  String value for ignoreDbs.
         * @return Builder
         */
        public Builder ignoreDbs(String ignoreDbs) {
            this.ignoreDbs = ignoreDbs;
            return this;
        }

        /**
         * Setter for method.
         * @param  method  EnumMigrationMethodEnum value for method.
         * @return Builder
         */
        public Builder method(EnumMigrationMethodEnum method) {
            this.method = method;
            return this;
        }

        /**
         * Builds a new {@link Migration} object using the set fields.
         * @return {@link Migration}
         */
        public Migration build() {
            return new Migration(host, port, password, ssl, username, dbname, ignoreDbs, method);
        }
    }
}
