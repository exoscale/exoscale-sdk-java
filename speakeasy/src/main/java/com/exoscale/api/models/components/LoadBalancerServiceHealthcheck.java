/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * LoadBalancerServiceHealthcheck - Load Balancer Service healthcheck
 */

public class LoadBalancerServiceHealthcheck {

    /**
     * Healthcheck mode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends Mode> mode;

    /**
     * Healthcheck interval (default: 10). Must be greater than or equal to Timeout
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    private Optional<? extends Long> interval;

    /**
     * An endpoint to use for the HTTP healthcheck, e.g. '/status'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    private Optional<? extends String> uri;

    /**
     * Healthcheck port
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<? extends Long> port;

    /**
     * Healthcheck timeout value (default: 2). Must be lower than or equal to Interval
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    private Optional<? extends Long> timeout;

    /**
     * Number of retries before considering a Service failed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retries")
    private Optional<? extends Long> retries;

    /**
     * SNI domain for HTTPS healthchecks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tls-sni")
    private Optional<? extends String> tlsSni;

    public LoadBalancerServiceHealthcheck(
            @JsonProperty("mode") Optional<? extends Mode> mode,
            @JsonProperty("interval") Optional<? extends Long> interval,
            @JsonProperty("uri") Optional<? extends String> uri,
            @JsonProperty("port") Optional<? extends Long> port,
            @JsonProperty("timeout") Optional<? extends Long> timeout,
            @JsonProperty("retries") Optional<? extends Long> retries,
            @JsonProperty("tls-sni") Optional<? extends String> tlsSni) {
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(uri, "uri");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(timeout, "timeout");
        Utils.checkNotNull(retries, "retries");
        Utils.checkNotNull(tlsSni, "tlsSni");
        this.mode = mode;
        this.interval = interval;
        this.uri = uri;
        this.port = port;
        this.timeout = timeout;
        this.retries = retries;
        this.tlsSni = tlsSni;
    }

    /**
     * Healthcheck mode
     */
    public Optional<? extends Mode> mode() {
        return mode;
    }

    /**
     * Healthcheck interval (default: 10). Must be greater than or equal to Timeout
     */
    public Optional<? extends Long> interval() {
        return interval;
    }

    /**
     * An endpoint to use for the HTTP healthcheck, e.g. '/status'
     */
    public Optional<? extends String> uri() {
        return uri;
    }

    /**
     * Healthcheck port
     */
    public Optional<? extends Long> port() {
        return port;
    }

    /**
     * Healthcheck timeout value (default: 2). Must be lower than or equal to Interval
     */
    public Optional<? extends Long> timeout() {
        return timeout;
    }

    /**
     * Number of retries before considering a Service failed
     */
    public Optional<? extends Long> retries() {
        return retries;
    }

    /**
     * SNI domain for HTTPS healthchecks
     */
    public Optional<? extends String> tlsSni() {
        return tlsSni;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Healthcheck mode
     */
    public LoadBalancerServiceHealthcheck withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }

    /**
     * Healthcheck mode
     */
    public LoadBalancerServiceHealthcheck withMode(Optional<? extends Mode> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * Healthcheck interval (default: 10). Must be greater than or equal to Timeout
     */
    public LoadBalancerServiceHealthcheck withInterval(long interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = Optional.ofNullable(interval);
        return this;
    }

    /**
     * Healthcheck interval (default: 10). Must be greater than or equal to Timeout
     */
    public LoadBalancerServiceHealthcheck withInterval(Optional<? extends Long> interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * An endpoint to use for the HTTP healthcheck, e.g. '/status'
     */
    public LoadBalancerServiceHealthcheck withUri(String uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = Optional.ofNullable(uri);
        return this;
    }

    /**
     * An endpoint to use for the HTTP healthcheck, e.g. '/status'
     */
    public LoadBalancerServiceHealthcheck withUri(Optional<? extends String> uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = uri;
        return this;
    }

    /**
     * Healthcheck port
     */
    public LoadBalancerServiceHealthcheck withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * Healthcheck port
     */
    public LoadBalancerServiceHealthcheck withPort(Optional<? extends Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * Healthcheck timeout value (default: 2). Must be lower than or equal to Interval
     */
    public LoadBalancerServiceHealthcheck withTimeout(long timeout) {
        Utils.checkNotNull(timeout, "timeout");
        this.timeout = Optional.ofNullable(timeout);
        return this;
    }

    /**
     * Healthcheck timeout value (default: 2). Must be lower than or equal to Interval
     */
    public LoadBalancerServiceHealthcheck withTimeout(Optional<? extends Long> timeout) {
        Utils.checkNotNull(timeout, "timeout");
        this.timeout = timeout;
        return this;
    }

    /**
     * Number of retries before considering a Service failed
     */
    public LoadBalancerServiceHealthcheck withRetries(long retries) {
        Utils.checkNotNull(retries, "retries");
        this.retries = Optional.ofNullable(retries);
        return this;
    }

    /**
     * Number of retries before considering a Service failed
     */
    public LoadBalancerServiceHealthcheck withRetries(Optional<? extends Long> retries) {
        Utils.checkNotNull(retries, "retries");
        this.retries = retries;
        return this;
    }

    /**
     * SNI domain for HTTPS healthchecks
     */
    public LoadBalancerServiceHealthcheck withTlsSni(String tlsSni) {
        Utils.checkNotNull(tlsSni, "tlsSni");
        this.tlsSni = Optional.ofNullable(tlsSni);
        return this;
    }

    /**
     * SNI domain for HTTPS healthchecks
     */
    public LoadBalancerServiceHealthcheck withTlsSni(Optional<? extends String> tlsSni) {
        Utils.checkNotNull(tlsSni, "tlsSni");
        this.tlsSni = tlsSni;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LoadBalancerServiceHealthcheck other = (LoadBalancerServiceHealthcheck) o;
        return 
            java.util.Objects.deepEquals(this.mode, other.mode) &&
            java.util.Objects.deepEquals(this.interval, other.interval) &&
            java.util.Objects.deepEquals(this.uri, other.uri) &&
            java.util.Objects.deepEquals(this.port, other.port) &&
            java.util.Objects.deepEquals(this.timeout, other.timeout) &&
            java.util.Objects.deepEquals(this.retries, other.retries) &&
            java.util.Objects.deepEquals(this.tlsSni, other.tlsSni);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            mode,
            interval,
            uri,
            port,
            timeout,
            retries,
            tlsSni);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LoadBalancerServiceHealthcheck.class,
                "mode", mode,
                "interval", interval,
                "uri", uri,
                "port", port,
                "timeout", timeout,
                "retries", retries,
                "tlsSni", tlsSni);
    }
    
    public final static class Builder {
 
        private Optional<? extends Mode> mode = Optional.empty();
 
        private Optional<? extends Long> interval = Optional.empty();
 
        private Optional<? extends String> uri = Optional.empty();
 
        private Optional<? extends Long> port = Optional.empty();
 
        private Optional<? extends Long> timeout = Optional.empty();
 
        private Optional<? extends Long> retries = Optional.empty();
 
        private Optional<? extends String> tlsSni = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Healthcheck mode
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Healthcheck mode
         */
        public Builder mode(Optional<? extends Mode> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * Healthcheck interval (default: 10). Must be greater than or equal to Timeout
         */
        public Builder interval(long interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = Optional.ofNullable(interval);
            return this;
        }

        /**
         * Healthcheck interval (default: 10). Must be greater than or equal to Timeout
         */
        public Builder interval(Optional<? extends Long> interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }

        /**
         * An endpoint to use for the HTTP healthcheck, e.g. '/status'
         */
        public Builder uri(String uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = Optional.ofNullable(uri);
            return this;
        }

        /**
         * An endpoint to use for the HTTP healthcheck, e.g. '/status'
         */
        public Builder uri(Optional<? extends String> uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = uri;
            return this;
        }

        /**
         * Healthcheck port
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * Healthcheck port
         */
        public Builder port(Optional<? extends Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * Healthcheck timeout value (default: 2). Must be lower than or equal to Interval
         */
        public Builder timeout(long timeout) {
            Utils.checkNotNull(timeout, "timeout");
            this.timeout = Optional.ofNullable(timeout);
            return this;
        }

        /**
         * Healthcheck timeout value (default: 2). Must be lower than or equal to Interval
         */
        public Builder timeout(Optional<? extends Long> timeout) {
            Utils.checkNotNull(timeout, "timeout");
            this.timeout = timeout;
            return this;
        }

        /**
         * Number of retries before considering a Service failed
         */
        public Builder retries(long retries) {
            Utils.checkNotNull(retries, "retries");
            this.retries = Optional.ofNullable(retries);
            return this;
        }

        /**
         * Number of retries before considering a Service failed
         */
        public Builder retries(Optional<? extends Long> retries) {
            Utils.checkNotNull(retries, "retries");
            this.retries = retries;
            return this;
        }

        /**
         * SNI domain for HTTPS healthchecks
         */
        public Builder tlsSni(String tlsSni) {
            Utils.checkNotNull(tlsSni, "tlsSni");
            this.tlsSni = Optional.ofNullable(tlsSni);
            return this;
        }

        /**
         * SNI domain for HTTPS healthchecks
         */
        public Builder tlsSni(Optional<? extends String> tlsSni) {
            Utils.checkNotNull(tlsSni, "tlsSni");
            this.tlsSni = tlsSni;
            return this;
        }
        
        public LoadBalancerServiceHealthcheck build() {
            return new LoadBalancerServiceHealthcheck(
                mode,
                interval,
                uri,
                port,
                timeout,
                retries,
                tlsSni);
        }
    }
}

