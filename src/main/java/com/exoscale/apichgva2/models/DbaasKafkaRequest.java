/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for DbaasKafkaRequest type.
 */
public class DbaasKafkaRequest {
    private AuthenticationMethods1 authenticationMethods;
    private Boolean kafkaRestEnabled;
    private Boolean kafkaConnectEnabled;
    private List<String> ipFilter;
    private SchemaRegistryConfiguration schemaRegistrySettings;
    private KafkaRESTConfiguration kafkaRestSettings;
    private Boolean terminationProtection;
    private KafkaConnectConfigurationValues kafkaConnectSettings;
    private Maintenance maintenance;
    private KafkaBrokerConfigurationValues kafkaSettings;
    private Boolean schemaRegistryEnabled;
    private String version;
    private String plan;

    /**
     * Default constructor.
     */
    public DbaasKafkaRequest() {
    }

    /**
     * Initialization constructor.
     * @param  plan  String value for plan.
     * @param  authenticationMethods  AuthenticationMethods1 value for authenticationMethods.
     * @param  kafkaRestEnabled  Boolean value for kafkaRestEnabled.
     * @param  kafkaConnectEnabled  Boolean value for kafkaConnectEnabled.
     * @param  ipFilter  List of String value for ipFilter.
     * @param  schemaRegistrySettings  SchemaRegistryConfiguration value for schemaRegistrySettings.
     * @param  kafkaRestSettings  KafkaRESTConfiguration value for kafkaRestSettings.
     * @param  terminationProtection  Boolean value for terminationProtection.
     * @param  kafkaConnectSettings  KafkaConnectConfigurationValues value for kafkaConnectSettings.
     * @param  maintenance  Maintenance value for maintenance.
     * @param  kafkaSettings  KafkaBrokerConfigurationValues value for kafkaSettings.
     * @param  schemaRegistryEnabled  Boolean value for schemaRegistryEnabled.
     * @param  version  String value for version.
     */
    public DbaasKafkaRequest(
            String plan,
            AuthenticationMethods1 authenticationMethods,
            Boolean kafkaRestEnabled,
            Boolean kafkaConnectEnabled,
            List<String> ipFilter,
            SchemaRegistryConfiguration schemaRegistrySettings,
            KafkaRESTConfiguration kafkaRestSettings,
            Boolean terminationProtection,
            KafkaConnectConfigurationValues kafkaConnectSettings,
            Maintenance maintenance,
            KafkaBrokerConfigurationValues kafkaSettings,
            Boolean schemaRegistryEnabled,
            String version) {
        this.authenticationMethods = authenticationMethods;
        this.kafkaRestEnabled = kafkaRestEnabled;
        this.kafkaConnectEnabled = kafkaConnectEnabled;
        this.ipFilter = ipFilter;
        this.schemaRegistrySettings = schemaRegistrySettings;
        this.kafkaRestSettings = kafkaRestSettings;
        this.terminationProtection = terminationProtection;
        this.kafkaConnectSettings = kafkaConnectSettings;
        this.maintenance = maintenance;
        this.kafkaSettings = kafkaSettings;
        this.schemaRegistryEnabled = schemaRegistryEnabled;
        this.version = version;
        this.plan = plan;
    }

    /**
     * Getter for AuthenticationMethods.
     * Kafka authentication methods
     * @return Returns the AuthenticationMethods1
     */
    @JsonGetter("authentication-methods")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AuthenticationMethods1 getAuthenticationMethods() {
        return authenticationMethods;
    }

    /**
     * Setter for AuthenticationMethods.
     * Kafka authentication methods
     * @param authenticationMethods Value for AuthenticationMethods1
     */
    @JsonSetter("authentication-methods")
    public void setAuthenticationMethods(AuthenticationMethods1 authenticationMethods) {
        this.authenticationMethods = authenticationMethods;
    }

    /**
     * Getter for KafkaRestEnabled.
     * Enable Kafka-REST service
     * @return Returns the Boolean
     */
    @JsonGetter("kafka-rest-enabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getKafkaRestEnabled() {
        return kafkaRestEnabled;
    }

    /**
     * Setter for KafkaRestEnabled.
     * Enable Kafka-REST service
     * @param kafkaRestEnabled Value for Boolean
     */
    @JsonSetter("kafka-rest-enabled")
    public void setKafkaRestEnabled(Boolean kafkaRestEnabled) {
        this.kafkaRestEnabled = kafkaRestEnabled;
    }

    /**
     * Getter for KafkaConnectEnabled.
     * Allow clients to connect to kafka_connect from the public internet for service nodes that are
     * in a project VPC or another type of private network
     * @return Returns the Boolean
     */
    @JsonGetter("kafka-connect-enabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getKafkaConnectEnabled() {
        return kafkaConnectEnabled;
    }

    /**
     * Setter for KafkaConnectEnabled.
     * Allow clients to connect to kafka_connect from the public internet for service nodes that are
     * in a project VPC or another type of private network
     * @param kafkaConnectEnabled Value for Boolean
     */
    @JsonSetter("kafka-connect-enabled")
    public void setKafkaConnectEnabled(Boolean kafkaConnectEnabled) {
        this.kafkaConnectEnabled = kafkaConnectEnabled;
    }

    /**
     * Getter for IpFilter.
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     * @return Returns the List of String
     */
    @JsonGetter("ip-filter")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getIpFilter() {
        return ipFilter;
    }

    /**
     * Setter for IpFilter.
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     * @param ipFilter Value for List of String
     */
    @JsonSetter("ip-filter")
    public void setIpFilter(List<String> ipFilter) {
        this.ipFilter = ipFilter;
    }

    /**
     * Getter for SchemaRegistrySettings.
     * @return Returns the SchemaRegistryConfiguration
     */
    @JsonGetter("schema-registry-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SchemaRegistryConfiguration getSchemaRegistrySettings() {
        return schemaRegistrySettings;
    }

    /**
     * Setter for SchemaRegistrySettings.
     * @param schemaRegistrySettings Value for SchemaRegistryConfiguration
     */
    @JsonSetter("schema-registry-settings")
    public void setSchemaRegistrySettings(SchemaRegistryConfiguration schemaRegistrySettings) {
        this.schemaRegistrySettings = schemaRegistrySettings;
    }

    /**
     * Getter for KafkaRestSettings.
     * @return Returns the KafkaRESTConfiguration
     */
    @JsonGetter("kafka-rest-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public KafkaRESTConfiguration getKafkaRestSettings() {
        return kafkaRestSettings;
    }

    /**
     * Setter for KafkaRestSettings.
     * @param kafkaRestSettings Value for KafkaRESTConfiguration
     */
    @JsonSetter("kafka-rest-settings")
    public void setKafkaRestSettings(KafkaRESTConfiguration kafkaRestSettings) {
        this.kafkaRestSettings = kafkaRestSettings;
    }

    /**
     * Getter for TerminationProtection.
     * Service is protected against termination and powering off
     * @return Returns the Boolean
     */
    @JsonGetter("termination-protection")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTerminationProtection() {
        return terminationProtection;
    }

    /**
     * Setter for TerminationProtection.
     * Service is protected against termination and powering off
     * @param terminationProtection Value for Boolean
     */
    @JsonSetter("termination-protection")
    public void setTerminationProtection(Boolean terminationProtection) {
        this.terminationProtection = terminationProtection;
    }

    /**
     * Getter for KafkaConnectSettings.
     * @return Returns the KafkaConnectConfigurationValues
     */
    @JsonGetter("kafka-connect-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public KafkaConnectConfigurationValues getKafkaConnectSettings() {
        return kafkaConnectSettings;
    }

    /**
     * Setter for KafkaConnectSettings.
     * @param kafkaConnectSettings Value for KafkaConnectConfigurationValues
     */
    @JsonSetter("kafka-connect-settings")
    public void setKafkaConnectSettings(KafkaConnectConfigurationValues kafkaConnectSettings) {
        this.kafkaConnectSettings = kafkaConnectSettings;
    }

    /**
     * Getter for Maintenance.
     * Automatic maintenance settings
     * @return Returns the Maintenance
     */
    @JsonGetter("maintenance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Maintenance getMaintenance() {
        return maintenance;
    }

    /**
     * Setter for Maintenance.
     * Automatic maintenance settings
     * @param maintenance Value for Maintenance
     */
    @JsonSetter("maintenance")
    public void setMaintenance(Maintenance maintenance) {
        this.maintenance = maintenance;
    }

    /**
     * Getter for KafkaSettings.
     * @return Returns the KafkaBrokerConfigurationValues
     */
    @JsonGetter("kafka-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public KafkaBrokerConfigurationValues getKafkaSettings() {
        return kafkaSettings;
    }

    /**
     * Setter for KafkaSettings.
     * @param kafkaSettings Value for KafkaBrokerConfigurationValues
     */
    @JsonSetter("kafka-settings")
    public void setKafkaSettings(KafkaBrokerConfigurationValues kafkaSettings) {
        this.kafkaSettings = kafkaSettings;
    }

    /**
     * Getter for SchemaRegistryEnabled.
     * Enable Schema-Registry service
     * @return Returns the Boolean
     */
    @JsonGetter("schema-registry-enabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSchemaRegistryEnabled() {
        return schemaRegistryEnabled;
    }

    /**
     * Setter for SchemaRegistryEnabled.
     * Enable Schema-Registry service
     * @param schemaRegistryEnabled Value for Boolean
     */
    @JsonSetter("schema-registry-enabled")
    public void setSchemaRegistryEnabled(Boolean schemaRegistryEnabled) {
        this.schemaRegistryEnabled = schemaRegistryEnabled;
    }

    /**
     * Getter for Version.
     * Kafka major version
     * @return Returns the String
     */
    @JsonGetter("version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVersion() {
        return version;
    }

    /**
     * Setter for Version.
     * Kafka major version
     * @param version Value for String
     */
    @JsonSetter("version")
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Getter for Plan.
     * Subscription plan
     * @return Returns the String
     */
    @JsonGetter("plan")
    public String getPlan() {
        return plan;
    }

    /**
     * Setter for Plan.
     * Subscription plan
     * @param plan Value for String
     */
    @JsonSetter("plan")
    public void setPlan(String plan) {
        this.plan = plan;
    }

    /**
     * Converts this DbaasKafkaRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DbaasKafkaRequest [" + "plan=" + plan + ", authenticationMethods="
                + authenticationMethods + ", kafkaRestEnabled=" + kafkaRestEnabled
                + ", kafkaConnectEnabled=" + kafkaConnectEnabled + ", ipFilter=" + ipFilter
                + ", schemaRegistrySettings=" + schemaRegistrySettings + ", kafkaRestSettings="
                + kafkaRestSettings + ", terminationProtection=" + terminationProtection
                + ", kafkaConnectSettings=" + kafkaConnectSettings + ", maintenance=" + maintenance
                + ", kafkaSettings=" + kafkaSettings + ", schemaRegistryEnabled="
                + schemaRegistryEnabled + ", version=" + version + "]";
    }

    /**
     * Builds a new {@link DbaasKafkaRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DbaasKafkaRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(plan)
                .authenticationMethods(getAuthenticationMethods())
                .kafkaRestEnabled(getKafkaRestEnabled())
                .kafkaConnectEnabled(getKafkaConnectEnabled())
                .ipFilter(getIpFilter())
                .schemaRegistrySettings(getSchemaRegistrySettings())
                .kafkaRestSettings(getKafkaRestSettings())
                .terminationProtection(getTerminationProtection())
                .kafkaConnectSettings(getKafkaConnectSettings())
                .maintenance(getMaintenance())
                .kafkaSettings(getKafkaSettings())
                .schemaRegistryEnabled(getSchemaRegistryEnabled())
                .version(getVersion());
        return builder;
    }

    /**
     * Class to build instances of {@link DbaasKafkaRequest}.
     */
    public static class Builder {
        private String plan;
        private AuthenticationMethods1 authenticationMethods;
        private Boolean kafkaRestEnabled;
        private Boolean kafkaConnectEnabled;
        private List<String> ipFilter;
        private SchemaRegistryConfiguration schemaRegistrySettings;
        private KafkaRESTConfiguration kafkaRestSettings;
        private Boolean terminationProtection;
        private KafkaConnectConfigurationValues kafkaConnectSettings;
        private Maintenance maintenance;
        private KafkaBrokerConfigurationValues kafkaSettings;
        private Boolean schemaRegistryEnabled;
        private String version;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  plan  String value for plan.
         */
        public Builder(String plan) {
            this.plan = plan;
        }

        /**
         * Setter for plan.
         * @param  plan  String value for plan.
         * @return Builder
         */
        public Builder plan(String plan) {
            this.plan = plan;
            return this;
        }

        /**
         * Setter for authenticationMethods.
         * @param  authenticationMethods  AuthenticationMethods1 value for authenticationMethods.
         * @return Builder
         */
        public Builder authenticationMethods(AuthenticationMethods1 authenticationMethods) {
            this.authenticationMethods = authenticationMethods;
            return this;
        }

        /**
         * Setter for kafkaRestEnabled.
         * @param  kafkaRestEnabled  Boolean value for kafkaRestEnabled.
         * @return Builder
         */
        public Builder kafkaRestEnabled(Boolean kafkaRestEnabled) {
            this.kafkaRestEnabled = kafkaRestEnabled;
            return this;
        }

        /**
         * Setter for kafkaConnectEnabled.
         * @param  kafkaConnectEnabled  Boolean value for kafkaConnectEnabled.
         * @return Builder
         */
        public Builder kafkaConnectEnabled(Boolean kafkaConnectEnabled) {
            this.kafkaConnectEnabled = kafkaConnectEnabled;
            return this;
        }

        /**
         * Setter for ipFilter.
         * @param  ipFilter  List of String value for ipFilter.
         * @return Builder
         */
        public Builder ipFilter(List<String> ipFilter) {
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * Setter for schemaRegistrySettings.
         * @param  schemaRegistrySettings  SchemaRegistryConfiguration value for
         *         schemaRegistrySettings.
         * @return Builder
         */
        public Builder schemaRegistrySettings(
                SchemaRegistryConfiguration schemaRegistrySettings) {
            this.schemaRegistrySettings = schemaRegistrySettings;
            return this;
        }

        /**
         * Setter for kafkaRestSettings.
         * @param  kafkaRestSettings  KafkaRESTConfiguration value for kafkaRestSettings.
         * @return Builder
         */
        public Builder kafkaRestSettings(KafkaRESTConfiguration kafkaRestSettings) {
            this.kafkaRestSettings = kafkaRestSettings;
            return this;
        }

        /**
         * Setter for terminationProtection.
         * @param  terminationProtection  Boolean value for terminationProtection.
         * @return Builder
         */
        public Builder terminationProtection(Boolean terminationProtection) {
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Setter for kafkaConnectSettings.
         * @param  kafkaConnectSettings  KafkaConnectConfigurationValues value for
         *         kafkaConnectSettings.
         * @return Builder
         */
        public Builder kafkaConnectSettings(
                KafkaConnectConfigurationValues kafkaConnectSettings) {
            this.kafkaConnectSettings = kafkaConnectSettings;
            return this;
        }

        /**
         * Setter for maintenance.
         * @param  maintenance  Maintenance value for maintenance.
         * @return Builder
         */
        public Builder maintenance(Maintenance maintenance) {
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Setter for kafkaSettings.
         * @param  kafkaSettings  KafkaBrokerConfigurationValues value for kafkaSettings.
         * @return Builder
         */
        public Builder kafkaSettings(KafkaBrokerConfigurationValues kafkaSettings) {
            this.kafkaSettings = kafkaSettings;
            return this;
        }

        /**
         * Setter for schemaRegistryEnabled.
         * @param  schemaRegistryEnabled  Boolean value for schemaRegistryEnabled.
         * @return Builder
         */
        public Builder schemaRegistryEnabled(Boolean schemaRegistryEnabled) {
            this.schemaRegistryEnabled = schemaRegistryEnabled;
            return this;
        }

        /**
         * Setter for version.
         * @param  version  String value for version.
         * @return Builder
         */
        public Builder version(String version) {
            this.version = version;
            return this;
        }

        /**
         * Builds a new {@link DbaasKafkaRequest} object using the set fields.
         * @return {@link DbaasKafkaRequest}
         */
        public DbaasKafkaRequest build() {
            return new DbaasKafkaRequest(plan, authenticationMethods, kafkaRestEnabled,
                    kafkaConnectEnabled, ipFilter, schemaRegistrySettings, kafkaRestSettings,
                    terminationProtection, kafkaConnectSettings, maintenance, kafkaSettings,
                    schemaRegistryEnabled, version);
        }
    }
}
