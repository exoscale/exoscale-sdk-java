/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * ListLoadBalancersResponseBody - 200
 */

public class ListLoadBalancersResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("load-balancers")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.LoadBalancer>> loadBalancers;

    public ListLoadBalancersResponseBody(
            @JsonProperty("load-balancers") Optional<? extends java.util.List<com.exoscale.api.models.components.LoadBalancer>> loadBalancers) {
        Utils.checkNotNull(loadBalancers, "loadBalancers");
        this.loadBalancers = loadBalancers;
    }

    public Optional<? extends java.util.List<com.exoscale.api.models.components.LoadBalancer>> loadBalancers() {
        return loadBalancers;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListLoadBalancersResponseBody withLoadBalancers(java.util.List<com.exoscale.api.models.components.LoadBalancer> loadBalancers) {
        Utils.checkNotNull(loadBalancers, "loadBalancers");
        this.loadBalancers = Optional.ofNullable(loadBalancers);
        return this;
    }

    public ListLoadBalancersResponseBody withLoadBalancers(Optional<? extends java.util.List<com.exoscale.api.models.components.LoadBalancer>> loadBalancers) {
        Utils.checkNotNull(loadBalancers, "loadBalancers");
        this.loadBalancers = loadBalancers;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListLoadBalancersResponseBody other = (ListLoadBalancersResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.loadBalancers, other.loadBalancers);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            loadBalancers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListLoadBalancersResponseBody.class,
                "loadBalancers", loadBalancers);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.LoadBalancer>> loadBalancers = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder loadBalancers(java.util.List<com.exoscale.api.models.components.LoadBalancer> loadBalancers) {
            Utils.checkNotNull(loadBalancers, "loadBalancers");
            this.loadBalancers = Optional.ofNullable(loadBalancers);
            return this;
        }

        public Builder loadBalancers(Optional<? extends java.util.List<com.exoscale.api.models.components.LoadBalancer>> loadBalancers) {
            Utils.checkNotNull(loadBalancers, "loadBalancers");
            this.loadBalancers = loadBalancers;
            return this;
        }
        
        public ListLoadBalancersResponseBody build() {
            return new ListLoadBalancersResponseBody(
                loadBalancers);
        }
    }
}

