/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * InternalAuthenticationBackendLimiting
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class InternalAuthenticationBackendLimiting {
  /**
   * The type of rate limiting
   */
  public enum TypeEnum {
    USERNAME("username");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  /**
   * The internal backend. Enter &#x60;internal&#x60;
   */
  public enum AuthenticationBackendEnum {
    INTERNAL("internal");

    private String value;

    AuthenticationBackendEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AuthenticationBackendEnum fromValue(String input) {
      for (AuthenticationBackendEnum b : AuthenticationBackendEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("authentication_backend")
  private AuthenticationBackendEnum authenticationBackend = null;

  @JsonProperty("allowed_tries")
  private Integer allowedTries = null;

  @JsonProperty("time_window_seconds")
  private Integer timeWindowSeconds = null;

  @JsonProperty("block_expiry_seconds")
  private Integer blockExpirySeconds = null;

  @JsonProperty("max_blocked_clients")
  private Integer maxBlockedClients = null;

  @JsonProperty("max_tracked_clients")
  private Integer maxTrackedClients = null;

  public InternalAuthenticationBackendLimiting type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of rate limiting
   * @return type
  **/
  @Schema(example = "username", description = "The type of rate limiting")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public InternalAuthenticationBackendLimiting authenticationBackend(AuthenticationBackendEnum authenticationBackend) {
    this.authenticationBackend = authenticationBackend;
    return this;
  }

   /**
   * The internal backend. Enter &#x60;internal&#x60;
   * @return authenticationBackend
  **/
  @Schema(example = "internal", description = "The internal backend. Enter `internal`")
  public AuthenticationBackendEnum getAuthenticationBackend() {
    return authenticationBackend;
  }

  public void setAuthenticationBackend(AuthenticationBackendEnum authenticationBackend) {
    this.authenticationBackend = authenticationBackend;
  }

  public InternalAuthenticationBackendLimiting allowedTries(Integer allowedTries) {
    this.allowedTries = allowedTries;
    return this;
  }

   /**
   * The number of login attempts allowed before login is blocked
   * minimum: 0
   * maximum: 2147483647
   * @return allowedTries
  **/
  @Schema(example = "10", description = "The number of login attempts allowed before login is blocked")
  public Integer getAllowedTries() {
    return allowedTries;
  }

  public void setAllowedTries(Integer allowedTries) {
    this.allowedTries = allowedTries;
  }

  public InternalAuthenticationBackendLimiting timeWindowSeconds(Integer timeWindowSeconds) {
    this.timeWindowSeconds = timeWindowSeconds;
    return this;
  }

   /**
   * The window of time in which the value for &#x60;allowed_tries&#x60; is enforced
   * minimum: 0
   * maximum: 2147483647
   * @return timeWindowSeconds
  **/
  @Schema(example = "3600", description = "The window of time in which the value for `allowed_tries` is enforced")
  public Integer getTimeWindowSeconds() {
    return timeWindowSeconds;
  }

  public void setTimeWindowSeconds(Integer timeWindowSeconds) {
    this.timeWindowSeconds = timeWindowSeconds;
  }

  public InternalAuthenticationBackendLimiting blockExpirySeconds(Integer blockExpirySeconds) {
    this.blockExpirySeconds = blockExpirySeconds;
    return this;
  }

   /**
   * The duration of time that login remains blocked after a failed login
   * minimum: 0
   * maximum: 2147483647
   * @return blockExpirySeconds
  **/
  @Schema(example = "600", description = "The duration of time that login remains blocked after a failed login")
  public Integer getBlockExpirySeconds() {
    return blockExpirySeconds;
  }

  public void setBlockExpirySeconds(Integer blockExpirySeconds) {
    this.blockExpirySeconds = blockExpirySeconds;
  }

  public InternalAuthenticationBackendLimiting maxBlockedClients(Integer maxBlockedClients) {
    this.maxBlockedClients = maxBlockedClients;
    return this;
  }

   /**
   * The maximum number of blocked IP addresses
   * minimum: 0
   * maximum: 2147483647
   * @return maxBlockedClients
  **/
  @Schema(example = "100000", description = "The maximum number of blocked IP addresses")
  public Integer getMaxBlockedClients() {
    return maxBlockedClients;
  }

  public void setMaxBlockedClients(Integer maxBlockedClients) {
    this.maxBlockedClients = maxBlockedClients;
  }

  public InternalAuthenticationBackendLimiting maxTrackedClients(Integer maxTrackedClients) {
    this.maxTrackedClients = maxTrackedClients;
    return this;
  }

   /**
   * The maximum number of tracked IP addresses that have failed login
   * minimum: 0
   * maximum: 2147483647
   * @return maxTrackedClients
  **/
  @Schema(example = "100000", description = "The maximum number of tracked IP addresses that have failed login")
  public Integer getMaxTrackedClients() {
    return maxTrackedClients;
  }

  public void setMaxTrackedClients(Integer maxTrackedClients) {
    this.maxTrackedClients = maxTrackedClients;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternalAuthenticationBackendLimiting internalAuthenticationBackendLimiting = (InternalAuthenticationBackendLimiting) o;
    return Objects.equals(this.type, internalAuthenticationBackendLimiting.type) &&
        Objects.equals(this.authenticationBackend, internalAuthenticationBackendLimiting.authenticationBackend) &&
        Objects.equals(this.allowedTries, internalAuthenticationBackendLimiting.allowedTries) &&
        Objects.equals(this.timeWindowSeconds, internalAuthenticationBackendLimiting.timeWindowSeconds) &&
        Objects.equals(this.blockExpirySeconds, internalAuthenticationBackendLimiting.blockExpirySeconds) &&
        Objects.equals(this.maxBlockedClients, internalAuthenticationBackendLimiting.maxBlockedClients) &&
        Objects.equals(this.maxTrackedClients, internalAuthenticationBackendLimiting.maxTrackedClients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, authenticationBackend, allowedTries, timeWindowSeconds, blockExpirySeconds, maxBlockedClients, maxTrackedClients);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternalAuthenticationBackendLimiting {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    authenticationBackend: ").append(toIndentedString(authenticationBackend)).append("\n");
    sb.append("    allowedTries: ").append(toIndentedString(allowedTries)).append("\n");
    sb.append("    timeWindowSeconds: ").append(toIndentedString(timeWindowSeconds)).append("\n");
    sb.append("    blockExpirySeconds: ").append(toIndentedString(blockExpirySeconds)).append("\n");
    sb.append("    maxBlockedClients: ").append(toIndentedString(maxBlockedClients)).append("\n");
    sb.append("    maxTrackedClients: ").append(toIndentedString(maxTrackedClients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
