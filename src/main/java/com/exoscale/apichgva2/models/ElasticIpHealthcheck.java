/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for ElasticIpHealthcheck type.
 */
public class ElasticIpHealthcheck {
    private Long strikesOk;
    private Boolean tlsSkipVerify;
    private String tlsSni;
    private Long strikesFail;
    private ModeEnum mode;
    private long port;
    private String uri;
    private Long interval;
    private Long timeout;

    /**
     * Default constructor.
     */
    public ElasticIpHealthcheck() {
    }

    /**
     * Initialization constructor.
     * @param  mode  ModeEnum value for mode.
     * @param  port  long value for port.
     * @param  strikesOk  Long value for strikesOk.
     * @param  tlsSkipVerify  Boolean value for tlsSkipVerify.
     * @param  tlsSni  String value for tlsSni.
     * @param  strikesFail  Long value for strikesFail.
     * @param  uri  String value for uri.
     * @param  interval  Long value for interval.
     * @param  timeout  Long value for timeout.
     */
    public ElasticIpHealthcheck(
            ModeEnum mode,
            long port,
            Long strikesOk,
            Boolean tlsSkipVerify,
            String tlsSni,
            Long strikesFail,
            String uri,
            Long interval,
            Long timeout) {
        this.strikesOk = strikesOk;
        this.tlsSkipVerify = tlsSkipVerify;
        this.tlsSni = tlsSni;
        this.strikesFail = strikesFail;
        this.mode = mode;
        this.port = port;
        this.uri = uri;
        this.interval = interval;
        this.timeout = timeout;
    }

    /**
     * Getter for StrikesOk.
     * Number of attempts before considering the target healthy (default: 2)
     * @return Returns the Long
     */
    @JsonGetter("strikes-ok")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getStrikesOk() {
        return strikesOk;
    }

    /**
     * Setter for StrikesOk.
     * Number of attempts before considering the target healthy (default: 2)
     * @param strikesOk Value for Long
     */
    @JsonSetter("strikes-ok")
    public void setStrikesOk(Long strikesOk) {
        this.strikesOk = strikesOk;
    }

    /**
     * Getter for TlsSkipVerify.
     * Skip TLS verification
     * @return Returns the Boolean
     */
    @JsonGetter("tls-skip-verify")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTlsSkipVerify() {
        return tlsSkipVerify;
    }

    /**
     * Setter for TlsSkipVerify.
     * Skip TLS verification
     * @param tlsSkipVerify Value for Boolean
     */
    @JsonSetter("tls-skip-verify")
    public void setTlsSkipVerify(Boolean tlsSkipVerify) {
        this.tlsSkipVerify = tlsSkipVerify;
    }

    /**
     * Getter for TlsSni.
     * An optional domain or subdomain to check TLS against
     * @return Returns the String
     */
    @JsonGetter("tls-sni")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTlsSni() {
        return tlsSni;
    }

    /**
     * Setter for TlsSni.
     * An optional domain or subdomain to check TLS against
     * @param tlsSni Value for String
     */
    @JsonSetter("tls-sni")
    public void setTlsSni(String tlsSni) {
        this.tlsSni = tlsSni;
    }

    /**
     * Getter for StrikesFail.
     * Number of attempts before considering the target unhealthy (default: 3)
     * @return Returns the Long
     */
    @JsonGetter("strikes-fail")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getStrikesFail() {
        return strikesFail;
    }

    /**
     * Setter for StrikesFail.
     * Number of attempts before considering the target unhealthy (default: 3)
     * @param strikesFail Value for Long
     */
    @JsonSetter("strikes-fail")
    public void setStrikesFail(Long strikesFail) {
        this.strikesFail = strikesFail;
    }

    /**
     * Getter for Mode.
     * Health check mode
     * @return Returns the ModeEnum
     */
    @JsonGetter("mode")
    public ModeEnum getMode() {
        return mode;
    }

    /**
     * Setter for Mode.
     * Health check mode
     * @param mode Value for ModeEnum
     */
    @JsonSetter("mode")
    public void setMode(ModeEnum mode) {
        this.mode = mode;
    }

    /**
     * Getter for Port.
     * Health check port
     * @return Returns the long
     */
    @JsonGetter("port")
    public long getPort() {
        return port;
    }

    /**
     * Setter for Port.
     * Health check port
     * @param port Value for long
     */
    @JsonSetter("port")
    public void setPort(long port) {
        this.port = port;
    }

    /**
     * Getter for Uri.
     * An endpoint to use for the health check, for example '/status'
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * An endpoint to use for the health check, for example '/status'
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for Interval.
     * Interval between the checks in seconds (default: 10)
     * @return Returns the Long
     */
    @JsonGetter("interval")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getInterval() {
        return interval;
    }

    /**
     * Setter for Interval.
     * Interval between the checks in seconds (default: 10)
     * @param interval Value for Long
     */
    @JsonSetter("interval")
    public void setInterval(Long interval) {
        this.interval = interval;
    }

    /**
     * Getter for Timeout.
     * Health check timeout value in seconds (default: 2)
     * @return Returns the Long
     */
    @JsonGetter("timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getTimeout() {
        return timeout;
    }

    /**
     * Setter for Timeout.
     * Health check timeout value in seconds (default: 2)
     * @param timeout Value for Long
     */
    @JsonSetter("timeout")
    public void setTimeout(Long timeout) {
        this.timeout = timeout;
    }

    /**
     * Converts this ElasticIpHealthcheck into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ElasticIpHealthcheck [" + "mode=" + mode + ", port=" + port + ", strikesOk="
                + strikesOk + ", tlsSkipVerify=" + tlsSkipVerify + ", tlsSni=" + tlsSni
                + ", strikesFail=" + strikesFail + ", uri=" + uri + ", interval=" + interval
                + ", timeout=" + timeout + "]";
    }

    /**
     * Builds a new {@link ElasticIpHealthcheck.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ElasticIpHealthcheck.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(mode, port)
                .strikesOk(getStrikesOk())
                .tlsSkipVerify(getTlsSkipVerify())
                .tlsSni(getTlsSni())
                .strikesFail(getStrikesFail())
                .uri(getUri())
                .interval(getInterval())
                .timeout(getTimeout());
        return builder;
    }

    /**
     * Class to build instances of {@link ElasticIpHealthcheck}.
     */
    public static class Builder {
        private ModeEnum mode;
        private long port;
        private Long strikesOk;
        private Boolean tlsSkipVerify;
        private String tlsSni;
        private Long strikesFail;
        private String uri;
        private Long interval;
        private Long timeout;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  mode  ModeEnum value for mode.
         * @param  port  long value for port.
         */
        public Builder(ModeEnum mode, long port) {
            this.mode = mode;
            this.port = port;
        }

        /**
         * Setter for mode.
         * @param  mode  ModeEnum value for mode.
         * @return Builder
         */
        public Builder mode(ModeEnum mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Setter for port.
         * @param  port  long value for port.
         * @return Builder
         */
        public Builder port(long port) {
            this.port = port;
            return this;
        }

        /**
         * Setter for strikesOk.
         * @param  strikesOk  Long value for strikesOk.
         * @return Builder
         */
        public Builder strikesOk(Long strikesOk) {
            this.strikesOk = strikesOk;
            return this;
        }

        /**
         * Setter for tlsSkipVerify.
         * @param  tlsSkipVerify  Boolean value for tlsSkipVerify.
         * @return Builder
         */
        public Builder tlsSkipVerify(Boolean tlsSkipVerify) {
            this.tlsSkipVerify = tlsSkipVerify;
            return this;
        }

        /**
         * Setter for tlsSni.
         * @param  tlsSni  String value for tlsSni.
         * @return Builder
         */
        public Builder tlsSni(String tlsSni) {
            this.tlsSni = tlsSni;
            return this;
        }

        /**
         * Setter for strikesFail.
         * @param  strikesFail  Long value for strikesFail.
         * @return Builder
         */
        public Builder strikesFail(Long strikesFail) {
            this.strikesFail = strikesFail;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for interval.
         * @param  interval  Long value for interval.
         * @return Builder
         */
        public Builder interval(Long interval) {
            this.interval = interval;
            return this;
        }

        /**
         * Setter for timeout.
         * @param  timeout  Long value for timeout.
         * @return Builder
         */
        public Builder timeout(Long timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Builds a new {@link ElasticIpHealthcheck} object using the set fields.
         * @return {@link ElasticIpHealthcheck}
         */
        public ElasticIpHealthcheck build() {
            return new ElasticIpHealthcheck(mode, port, strikesOk, tlsSkipVerify, tlsSni,
                    strikesFail, uri, interval, timeout);
        }
    }
}
