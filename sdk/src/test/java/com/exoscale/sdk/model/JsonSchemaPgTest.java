/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.sdk.model;

import com.exoscale.sdk.model.AutovacuumSettings;
import com.exoscale.sdk.model.BackgroundBGWriterSettings;
import com.exoscale.sdk.model.WriteAheadLogWALSettings;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

/**
 * Model tests for JsonSchemaPg
 */
public class JsonSchemaPgTest {
    private final JsonSchemaPg model = new JsonSchemaPg();

    /**
     * Model tests for JsonSchemaPg
     */
    @Test
    public void testJsonSchemaPg() {
        // TODO: test JsonSchemaPg
    }

    /**
     * Test the property 'trackActivityQuerySize'
     */
    @Test
    public void trackActivityQuerySizeTest() {
        // TODO: test trackActivityQuerySize
    }

    /**
     * Test the property 'timezone'
     */
    @Test
    public void timezoneTest() {
        // TODO: test timezone
    }

    /**
     * Test the property 'trackIoTiming'
     */
    @Test
    public void trackIoTimingTest() {
        // TODO: test trackIoTiming
    }

    /**
     * Test the property 'pgStatMonitorPgsmEnableQueryPlan'
     */
    @Test
    public void pgStatMonitorPgsmEnableQueryPlanTest() {
        // TODO: test pgStatMonitorPgsmEnableQueryPlan
    }

    /**
     * Test the property 'maxFilesPerProcess'
     */
    @Test
    public void maxFilesPerProcessTest() {
        // TODO: test maxFilesPerProcess
    }

    /**
     * Test the property 'pgStatMonitorPgsmMaxBuckets'
     */
    @Test
    public void pgStatMonitorPgsmMaxBucketsTest() {
        // TODO: test pgStatMonitorPgsmMaxBuckets
    }

    /**
     * Test the property 'wal'
     */
    @Test
    public void walTest() {
        // TODO: test wal
    }

    /**
     * Test the property 'defaultToastCompression'
     */
    @Test
    public void defaultToastCompressionTest() {
        // TODO: test defaultToastCompression
    }

    /**
     * Test the property 'deadlockTimeout'
     */
    @Test
    public void deadlockTimeoutTest() {
        // TODO: test deadlockTimeout
    }

    /**
     * Test the property 'idleInTransactionSessionTimeout'
     */
    @Test
    public void idleInTransactionSessionTimeoutTest() {
        // TODO: test idleInTransactionSessionTimeout
    }

    /**
     * Test the property 'maxPredLocksPerTransaction'
     */
    @Test
    public void maxPredLocksPerTransactionTest() {
        // TODO: test maxPredLocksPerTransaction
    }

    /**
     * Test the property 'maxReplicationSlots'
     */
    @Test
    public void maxReplicationSlotsTest() {
        // TODO: test maxReplicationSlots
    }

    /**
     * Test the property 'autovacuum'
     */
    @Test
    public void autovacuumTest() {
        // TODO: test autovacuum
    }

    /**
     * Test the property 'maxParallelWorkersPerGather'
     */
    @Test
    public void maxParallelWorkersPerGatherTest() {
        // TODO: test maxParallelWorkersPerGather
    }

    /**
     * Test the property 'pgPartmanBgwInterval'
     */
    @Test
    public void pgPartmanBgwIntervalTest() {
        // TODO: test pgPartmanBgwInterval
    }

    /**
     * Test the property 'logLinePrefix'
     */
    @Test
    public void logLinePrefixTest() {
        // TODO: test logLinePrefix
    }

    /**
     * Test the property 'logTempFiles'
     */
    @Test
    public void logTempFilesTest() {
        // TODO: test logTempFiles
    }

    /**
     * Test the property 'maxLocksPerTransaction'
     */
    @Test
    public void maxLocksPerTransactionTest() {
        // TODO: test maxLocksPerTransaction
    }

    /**
     * Test the property 'trackCommitTimestamp'
     */
    @Test
    public void trackCommitTimestampTest() {
        // TODO: test trackCommitTimestamp
    }

    /**
     * Test the property 'trackFunctions'
     */
    @Test
    public void trackFunctionsTest() {
        // TODO: test trackFunctions
    }

    /**
     * Test the property 'maxStackDepth'
     */
    @Test
    public void maxStackDepthTest() {
        // TODO: test maxStackDepth
    }

    /**
     * Test the property 'maxParallelWorkers'
     */
    @Test
    public void maxParallelWorkersTest() {
        // TODO: test maxParallelWorkers
    }

    /**
     * Test the property 'pgPartmanBgwRole'
     */
    @Test
    public void pgPartmanBgwRoleTest() {
        // TODO: test pgPartmanBgwRole
    }

    /**
     * Test the property 'maxLogicalReplicationWorkers'
     */
    @Test
    public void maxLogicalReplicationWorkersTest() {
        // TODO: test maxLogicalReplicationWorkers
    }

    /**
     * Test the property 'maxPreparedTransactions'
     */
    @Test
    public void maxPreparedTransactionsTest() {
        // TODO: test maxPreparedTransactions
    }

    /**
     * Test the property 'maxWorkerProcesses'
     */
    @Test
    public void maxWorkerProcessesTest() {
        // TODO: test maxWorkerProcesses
    }

    /**
     * Test the property 'pgStatStatementsTrack'
     */
    @Test
    public void pgStatStatementsTrackTest() {
        // TODO: test pgStatStatementsTrack
    }

    /**
     * Test the property 'tempFileLimit'
     */
    @Test
    public void tempFileLimitTest() {
        // TODO: test tempFileLimit
    }

    /**
     * Test the property 'logErrorVerbosity'
     */
    @Test
    public void logErrorVerbosityTest() {
        // TODO: test logErrorVerbosity
    }

    /**
     * Test the property 'logMinDurationStatement'
     */
    @Test
    public void logMinDurationStatementTest() {
        // TODO: test logMinDurationStatement
    }

    /**
     * Test the property 'maxStandbyStreamingDelay'
     */
    @Test
    public void maxStandbyStreamingDelayTest() {
        // TODO: test maxStandbyStreamingDelay
    }

    /**
     * Test the property 'jit'
     */
    @Test
    public void jitTest() {
        // TODO: test jit
    }

    /**
     * Test the property 'maxStandbyArchiveDelay'
     */
    @Test
    public void maxStandbyArchiveDelayTest() {
        // TODO: test maxStandbyArchiveDelay
    }

    /**
     * Test the property 'bgWriter'
     */
    @Test
    public void bgWriterTest() {
        // TODO: test bgWriter
    }

}
