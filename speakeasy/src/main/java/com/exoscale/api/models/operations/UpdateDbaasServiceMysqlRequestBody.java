/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class UpdateDbaasServiceMysqlRequestBody {

    /**
     * Automatic maintenance settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenance")
    private Optional<? extends Maintenance> maintenance;

    /**
     * Subscription plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan")
    private Optional<? extends String> plan;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip-filter")
    private Optional<? extends java.util.List<String>> ipFilter;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mysql-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings;

    /**
     * Migrate data from existing server
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("migration")
    private Optional<? extends Migration> migration;

    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("binlog-retention-period")
    private Optional<? extends Long> binlogRetentionPeriod;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup-schedule")
    private Optional<? extends BackupSchedule> backupSchedule;

    public UpdateDbaasServiceMysqlRequestBody(
            @JsonProperty("maintenance") Optional<? extends Maintenance> maintenance,
            @JsonProperty("plan") Optional<? extends String> plan,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("ip-filter") Optional<? extends java.util.List<String>> ipFilter,
            @JsonProperty("mysql-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings,
            @JsonProperty("migration") Optional<? extends Migration> migration,
            @JsonProperty("binlog-retention-period") Optional<? extends Long> binlogRetentionPeriod,
            @JsonProperty("backup-schedule") Optional<? extends BackupSchedule> backupSchedule) {
        Utils.checkNotNull(maintenance, "maintenance");
        Utils.checkNotNull(plan, "plan");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(ipFilter, "ipFilter");
        Utils.checkNotNull(mysqlSettings, "mysqlSettings");
        Utils.checkNotNull(migration, "migration");
        Utils.checkNotNull(binlogRetentionPeriod, "binlogRetentionPeriod");
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.maintenance = maintenance;
        this.plan = plan;
        this.terminationProtection = terminationProtection;
        this.ipFilter = ipFilter;
        this.mysqlSettings = mysqlSettings;
        this.migration = migration;
        this.binlogRetentionPeriod = binlogRetentionPeriod;
        this.backupSchedule = backupSchedule;
    }

    /**
     * Automatic maintenance settings
     */
    public Optional<? extends Maintenance> maintenance() {
        return maintenance;
    }

    /**
     * Subscription plan
     */
    public Optional<? extends String> plan() {
        return plan;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public Optional<? extends java.util.List<String>> ipFilter() {
        return ipFilter;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings() {
        return mysqlSettings;
    }

    /**
     * Migrate data from existing server
     */
    public Optional<? extends Migration> migration() {
        return migration;
    }

    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     */
    public Optional<? extends Long> binlogRetentionPeriod() {
        return binlogRetentionPeriod;
    }

    public Optional<? extends BackupSchedule> backupSchedule() {
        return backupSchedule;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Automatic maintenance settings
     */
    public UpdateDbaasServiceMysqlRequestBody withMaintenance(Maintenance maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = Optional.ofNullable(maintenance);
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public UpdateDbaasServiceMysqlRequestBody withMaintenance(Optional<? extends Maintenance> maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = maintenance;
        return this;
    }

    /**
     * Subscription plan
     */
    public UpdateDbaasServiceMysqlRequestBody withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = Optional.ofNullable(plan);
        return this;
    }

    /**
     * Subscription plan
     */
    public UpdateDbaasServiceMysqlRequestBody withPlan(Optional<? extends String> plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public UpdateDbaasServiceMysqlRequestBody withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public UpdateDbaasServiceMysqlRequestBody withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public UpdateDbaasServiceMysqlRequestBody withIpFilter(java.util.List<String> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = Optional.ofNullable(ipFilter);
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public UpdateDbaasServiceMysqlRequestBody withIpFilter(Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = ipFilter;
        return this;
    }

    public UpdateDbaasServiceMysqlRequestBody withMysqlSettings(com.exoscale.api.models.components.JsonSchemaMysql mysqlSettings) {
        Utils.checkNotNull(mysqlSettings, "mysqlSettings");
        this.mysqlSettings = Optional.ofNullable(mysqlSettings);
        return this;
    }

    public UpdateDbaasServiceMysqlRequestBody withMysqlSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings) {
        Utils.checkNotNull(mysqlSettings, "mysqlSettings");
        this.mysqlSettings = mysqlSettings;
        return this;
    }

    /**
     * Migrate data from existing server
     */
    public UpdateDbaasServiceMysqlRequestBody withMigration(Migration migration) {
        Utils.checkNotNull(migration, "migration");
        this.migration = Optional.ofNullable(migration);
        return this;
    }

    /**
     * Migrate data from existing server
     */
    public UpdateDbaasServiceMysqlRequestBody withMigration(Optional<? extends Migration> migration) {
        Utils.checkNotNull(migration, "migration");
        this.migration = migration;
        return this;
    }

    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     */
    public UpdateDbaasServiceMysqlRequestBody withBinlogRetentionPeriod(long binlogRetentionPeriod) {
        Utils.checkNotNull(binlogRetentionPeriod, "binlogRetentionPeriod");
        this.binlogRetentionPeriod = Optional.ofNullable(binlogRetentionPeriod);
        return this;
    }

    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     */
    public UpdateDbaasServiceMysqlRequestBody withBinlogRetentionPeriod(Optional<? extends Long> binlogRetentionPeriod) {
        Utils.checkNotNull(binlogRetentionPeriod, "binlogRetentionPeriod");
        this.binlogRetentionPeriod = binlogRetentionPeriod;
        return this;
    }

    public UpdateDbaasServiceMysqlRequestBody withBackupSchedule(BackupSchedule backupSchedule) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.backupSchedule = Optional.ofNullable(backupSchedule);
        return this;
    }

    public UpdateDbaasServiceMysqlRequestBody withBackupSchedule(Optional<? extends BackupSchedule> backupSchedule) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.backupSchedule = backupSchedule;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDbaasServiceMysqlRequestBody other = (UpdateDbaasServiceMysqlRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.maintenance, other.maintenance) &&
            java.util.Objects.deepEquals(this.plan, other.plan) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.ipFilter, other.ipFilter) &&
            java.util.Objects.deepEquals(this.mysqlSettings, other.mysqlSettings) &&
            java.util.Objects.deepEquals(this.migration, other.migration) &&
            java.util.Objects.deepEquals(this.binlogRetentionPeriod, other.binlogRetentionPeriod) &&
            java.util.Objects.deepEquals(this.backupSchedule, other.backupSchedule);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            maintenance,
            plan,
            terminationProtection,
            ipFilter,
            mysqlSettings,
            migration,
            binlogRetentionPeriod,
            backupSchedule);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateDbaasServiceMysqlRequestBody.class,
                "maintenance", maintenance,
                "plan", plan,
                "terminationProtection", terminationProtection,
                "ipFilter", ipFilter,
                "mysqlSettings", mysqlSettings,
                "migration", migration,
                "binlogRetentionPeriod", binlogRetentionPeriod,
                "backupSchedule", backupSchedule);
    }
    
    public final static class Builder {
 
        private Optional<? extends Maintenance> maintenance = Optional.empty();
 
        private Optional<? extends String> plan = Optional.empty();
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ipFilter = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings = Optional.empty();
 
        private Optional<? extends Migration> migration = Optional.empty();
 
        private Optional<? extends Long> binlogRetentionPeriod = Optional.empty();
 
        private Optional<? extends BackupSchedule> backupSchedule = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Maintenance maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = Optional.ofNullable(maintenance);
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Optional<? extends Maintenance> maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = Optional.ofNullable(plan);
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(Optional<? extends String> plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(java.util.List<String> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = Optional.ofNullable(ipFilter);
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(Optional<? extends java.util.List<String>> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = ipFilter;
            return this;
        }

        public Builder mysqlSettings(com.exoscale.api.models.components.JsonSchemaMysql mysqlSettings) {
            Utils.checkNotNull(mysqlSettings, "mysqlSettings");
            this.mysqlSettings = Optional.ofNullable(mysqlSettings);
            return this;
        }

        public Builder mysqlSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings) {
            Utils.checkNotNull(mysqlSettings, "mysqlSettings");
            this.mysqlSettings = mysqlSettings;
            return this;
        }

        /**
         * Migrate data from existing server
         */
        public Builder migration(Migration migration) {
            Utils.checkNotNull(migration, "migration");
            this.migration = Optional.ofNullable(migration);
            return this;
        }

        /**
         * Migrate data from existing server
         */
        public Builder migration(Optional<? extends Migration> migration) {
            Utils.checkNotNull(migration, "migration");
            this.migration = migration;
            return this;
        }

        /**
         * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
         */
        public Builder binlogRetentionPeriod(long binlogRetentionPeriod) {
            Utils.checkNotNull(binlogRetentionPeriod, "binlogRetentionPeriod");
            this.binlogRetentionPeriod = Optional.ofNullable(binlogRetentionPeriod);
            return this;
        }

        /**
         * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
         */
        public Builder binlogRetentionPeriod(Optional<? extends Long> binlogRetentionPeriod) {
            Utils.checkNotNull(binlogRetentionPeriod, "binlogRetentionPeriod");
            this.binlogRetentionPeriod = binlogRetentionPeriod;
            return this;
        }

        public Builder backupSchedule(BackupSchedule backupSchedule) {
            Utils.checkNotNull(backupSchedule, "backupSchedule");
            this.backupSchedule = Optional.ofNullable(backupSchedule);
            return this;
        }

        public Builder backupSchedule(Optional<? extends BackupSchedule> backupSchedule) {
            Utils.checkNotNull(backupSchedule, "backupSchedule");
            this.backupSchedule = backupSchedule;
            return this;
        }
        
        public UpdateDbaasServiceMysqlRequestBody build() {
            return new UpdateDbaasServiceMysqlRequestBody(
                maintenance,
                plan,
                terminationProtection,
                ipFilter,
                mysqlSettings,
                migration,
                binlogRetentionPeriod,
                backupSchedule);
        }
    }
}

