/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterTemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class RegisterTemplateRequest {
  public static final String SERIALIZED_NAME_MAINTAINER = "maintainer";
  @SerializedName(SERIALIZED_NAME_MAINTAINER)
  private String maintainer;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SSH_KEY_ENABLED = "ssh-key-enabled";
  @SerializedName(SERIALIZED_NAME_SSH_KEY_ENABLED)
  private Boolean sshKeyEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DEFAULT_USER = "default-user";
  @SerializedName(SERIALIZED_NAME_DEFAULT_USER)
  private String defaultUser;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_PASSWORD_ENABLED = "password-enabled";
  @SerializedName(SERIALIZED_NAME_PASSWORD_ENABLED)
  private Boolean passwordEnabled;

  public static final String SERIALIZED_NAME_BUILD = "build";
  @SerializedName(SERIALIZED_NAME_BUILD)
  private String build;

  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  private String checksum;

  /**
   * Boot mode (default: legacy)
   */
  @JsonAdapter(BootModeEnum.Adapter.class)
  public enum BootModeEnum {
    LEGACY("legacy"),
    
    UEFI("uefi");

    private String value;

    BootModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BootModeEnum fromValue(String value) {
      for (BootModeEnum b : BootModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BootModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BootModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BootModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BootModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BootModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOOT_MODE = "boot-mode";
  @SerializedName(SERIALIZED_NAME_BOOT_MODE)
  private BootModeEnum bootMode;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public RegisterTemplateRequest() {
  }

  public RegisterTemplateRequest maintainer(String maintainer) {
    this.maintainer = maintainer;
    return this;
  }

   /**
   * Template maintainer
   * @return maintainer
  **/
  @javax.annotation.Nullable
  public String getMaintainer() {
    return maintainer;
  }

  public void setMaintainer(String maintainer) {
    this.maintainer = maintainer;
  }


  public RegisterTemplateRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Template description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RegisterTemplateRequest sshKeyEnabled(Boolean sshKeyEnabled) {
    this.sshKeyEnabled = sshKeyEnabled;
    return this;
  }

   /**
   * Enable SSH key-based login
   * @return sshKeyEnabled
  **/
  @javax.annotation.Nonnull
  public Boolean getSshKeyEnabled() {
    return sshKeyEnabled;
  }

  public void setSshKeyEnabled(Boolean sshKeyEnabled) {
    this.sshKeyEnabled = sshKeyEnabled;
  }


  public RegisterTemplateRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Template name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RegisterTemplateRequest defaultUser(String defaultUser) {
    this.defaultUser = defaultUser;
    return this;
  }

   /**
   * Template default user
   * @return defaultUser
  **/
  @javax.annotation.Nullable
  public String getDefaultUser() {
    return defaultUser;
  }

  public void setDefaultUser(String defaultUser) {
    this.defaultUser = defaultUser;
  }


  public RegisterTemplateRequest size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Template size
   * minimum: 0
   * @return size
  **/
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public RegisterTemplateRequest passwordEnabled(Boolean passwordEnabled) {
    this.passwordEnabled = passwordEnabled;
    return this;
  }

   /**
   * Enable password-based login
   * @return passwordEnabled
  **/
  @javax.annotation.Nonnull
  public Boolean getPasswordEnabled() {
    return passwordEnabled;
  }

  public void setPasswordEnabled(Boolean passwordEnabled) {
    this.passwordEnabled = passwordEnabled;
  }


  public RegisterTemplateRequest build(String build) {
    this.build = build;
    return this;
  }

   /**
   * Template build
   * @return build
  **/
  @javax.annotation.Nullable
  public String getBuild() {
    return build;
  }

  public void setBuild(String build) {
    this.build = build;
  }


  public RegisterTemplateRequest checksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

   /**
   * Template MD5 checksum
   * @return checksum
  **/
  @javax.annotation.Nonnull
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }


  public RegisterTemplateRequest bootMode(BootModeEnum bootMode) {
    this.bootMode = bootMode;
    return this;
  }

   /**
   * Boot mode (default: legacy)
   * @return bootMode
  **/
  @javax.annotation.Nullable
  public BootModeEnum getBootMode() {
    return bootMode;
  }

  public void setBootMode(BootModeEnum bootMode) {
    this.bootMode = bootMode;
  }


  public RegisterTemplateRequest url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Template source URL
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public RegisterTemplateRequest version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Template version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterTemplateRequest registerTemplateRequest = (RegisterTemplateRequest) o;
    return Objects.equals(this.maintainer, registerTemplateRequest.maintainer) &&
        Objects.equals(this.description, registerTemplateRequest.description) &&
        Objects.equals(this.sshKeyEnabled, registerTemplateRequest.sshKeyEnabled) &&
        Objects.equals(this.name, registerTemplateRequest.name) &&
        Objects.equals(this.defaultUser, registerTemplateRequest.defaultUser) &&
        Objects.equals(this.size, registerTemplateRequest.size) &&
        Objects.equals(this.passwordEnabled, registerTemplateRequest.passwordEnabled) &&
        Objects.equals(this.build, registerTemplateRequest.build) &&
        Objects.equals(this.checksum, registerTemplateRequest.checksum) &&
        Objects.equals(this.bootMode, registerTemplateRequest.bootMode) &&
        Objects.equals(this.url, registerTemplateRequest.url) &&
        Objects.equals(this.version, registerTemplateRequest.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maintainer, description, sshKeyEnabled, name, defaultUser, size, passwordEnabled, build, checksum, bootMode, url, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterTemplateRequest {\n");
    sb.append("    maintainer: ").append(toIndentedString(maintainer)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sshKeyEnabled: ").append(toIndentedString(sshKeyEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    defaultUser: ").append(toIndentedString(defaultUser)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    passwordEnabled: ").append(toIndentedString(passwordEnabled)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    bootMode: ").append(toIndentedString(bootMode)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maintainer");
    openapiFields.add("description");
    openapiFields.add("ssh-key-enabled");
    openapiFields.add("name");
    openapiFields.add("default-user");
    openapiFields.add("size");
    openapiFields.add("password-enabled");
    openapiFields.add("build");
    openapiFields.add("checksum");
    openapiFields.add("boot-mode");
    openapiFields.add("url");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ssh-key-enabled");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("password-enabled");
    openapiRequiredFields.add("checksum");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RegisterTemplateRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterTemplateRequest is not found in the empty JSON string", RegisterTemplateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterTemplateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterTemplateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegisterTemplateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maintainer") != null && !jsonObj.get("maintainer").isJsonNull()) && !jsonObj.get("maintainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maintainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maintainer").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("default-user") != null && !jsonObj.get("default-user").isJsonNull()) && !jsonObj.get("default-user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default-user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default-user").toString()));
      }
      if ((jsonObj.get("build") != null && !jsonObj.get("build").isJsonNull()) && !jsonObj.get("build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build").toString()));
      }
      if (!jsonObj.get("checksum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checksum").toString()));
      }
      if ((jsonObj.get("boot-mode") != null && !jsonObj.get("boot-mode").isJsonNull()) && !jsonObj.get("boot-mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boot-mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boot-mode").toString()));
      }
      // validate the optional field `boot-mode`
      if (jsonObj.get("boot-mode") != null && !jsonObj.get("boot-mode").isJsonNull()) {
        BootModeEnum.validateJsonElement(jsonObj.get("boot-mode"));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterTemplateRequest>() {
           @Override
           public void write(JsonWriter out, RegisterTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegisterTemplateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegisterTemplateRequest
  * @throws IOException if the JSON string is invalid with respect to RegisterTemplateRequest
  */
  public static RegisterTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterTemplateRequest.class);
  }

 /**
  * Convert an instance of RegisterTemplateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

