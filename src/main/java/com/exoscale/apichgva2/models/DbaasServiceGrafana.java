/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.exoscale.apichgva2.DateTimeHelper;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for DbaasServiceGrafana type.
 */
public class DbaasServiceGrafana {
    private String description;
    private LocalDateTime updatedAt;
    private Long nodeCount;
    private ConnectionInfo3 connectionInfo;
    private Long nodeCpuCount;
    private List<DbaasIntegration> integrations;
    private String zone;
    private List<DbaasNodeState> nodeStates;
    private String name;
    private String type;
    private EnumServiceStateEnum state;
    private GrafanaSettings grafanaSettings;
    private List<String> ipFilter;
    private List<DbaasServiceBackup> backups;
    private Boolean terminationProtection;
    private List<DbaasServiceNotification> notifications;
    private List<Component> components;
    private DbaasServiceMaintenance maintenance;
    private Long diskSize;
    private Long nodeMemory;
    private String uri;
    private Object uriParams;
    private String version;
    private LocalDateTime createdAt;
    private String plan;
    private List<User3> users;

    /**
     * Default constructor.
     */
    public DbaasServiceGrafana() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  type  String value for type.
     * @param  plan  String value for plan.
     * @param  description  String value for description.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  nodeCount  Long value for nodeCount.
     * @param  connectionInfo  ConnectionInfo3 value for connectionInfo.
     * @param  nodeCpuCount  Long value for nodeCpuCount.
     * @param  integrations  List of DbaasIntegration value for integrations.
     * @param  zone  String value for zone.
     * @param  nodeStates  List of DbaasNodeState value for nodeStates.
     * @param  state  EnumServiceStateEnum value for state.
     * @param  grafanaSettings  GrafanaSettings value for grafanaSettings.
     * @param  ipFilter  List of String value for ipFilter.
     * @param  backups  List of DbaasServiceBackup value for backups.
     * @param  terminationProtection  Boolean value for terminationProtection.
     * @param  notifications  List of DbaasServiceNotification value for notifications.
     * @param  components  List of Component value for components.
     * @param  maintenance  DbaasServiceMaintenance value for maintenance.
     * @param  diskSize  Long value for diskSize.
     * @param  nodeMemory  Long value for nodeMemory.
     * @param  uri  String value for uri.
     * @param  uriParams  Object value for uriParams.
     * @param  version  String value for version.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  users  List of User3 value for users.
     */
    public DbaasServiceGrafana(
            String name,
            String type,
            String plan,
            String description,
            LocalDateTime updatedAt,
            Long nodeCount,
            ConnectionInfo3 connectionInfo,
            Long nodeCpuCount,
            List<DbaasIntegration> integrations,
            String zone,
            List<DbaasNodeState> nodeStates,
            EnumServiceStateEnum state,
            GrafanaSettings grafanaSettings,
            List<String> ipFilter,
            List<DbaasServiceBackup> backups,
            Boolean terminationProtection,
            List<DbaasServiceNotification> notifications,
            List<Component> components,
            DbaasServiceMaintenance maintenance,
            Long diskSize,
            Long nodeMemory,
            String uri,
            Object uriParams,
            String version,
            LocalDateTime createdAt,
            List<User3> users) {
        this.description = description;
        this.updatedAt = updatedAt;
        this.nodeCount = nodeCount;
        this.connectionInfo = connectionInfo;
        this.nodeCpuCount = nodeCpuCount;
        this.integrations = integrations;
        this.zone = zone;
        this.nodeStates = nodeStates;
        this.name = name;
        this.type = type;
        this.state = state;
        this.grafanaSettings = grafanaSettings;
        this.ipFilter = ipFilter;
        this.backups = backups;
        this.terminationProtection = terminationProtection;
        this.notifications = notifications;
        this.components = components;
        this.maintenance = maintenance;
        this.diskSize = diskSize;
        this.nodeMemory = nodeMemory;
        this.uri = uri;
        this.uriParams = uriParams;
        this.version = version;
        this.createdAt = createdAt;
        this.plan = plan;
        this.users = users;
    }

    /**
     * Getter for Description.
     * DbaaS service description
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * DbaaS service description
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for UpdatedAt.
     * Service last update timestamp (ISO 8601)
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated-at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * Service last update timestamp (ISO 8601)
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated-at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for NodeCount.
     * Number of service nodes in the active plan
     * @return Returns the Long
     */
    @JsonGetter("node-count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNodeCount() {
        return nodeCount;
    }

    /**
     * Setter for NodeCount.
     * Number of service nodes in the active plan
     * @param nodeCount Value for Long
     */
    @JsonSetter("node-count")
    public void setNodeCount(Long nodeCount) {
        this.nodeCount = nodeCount;
    }

    /**
     * Getter for ConnectionInfo.
     * Grafana connection information properties
     * @return Returns the ConnectionInfo3
     */
    @JsonGetter("connection-info")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ConnectionInfo3 getConnectionInfo() {
        return connectionInfo;
    }

    /**
     * Setter for ConnectionInfo.
     * Grafana connection information properties
     * @param connectionInfo Value for ConnectionInfo3
     */
    @JsonSetter("connection-info")
    public void setConnectionInfo(ConnectionInfo3 connectionInfo) {
        this.connectionInfo = connectionInfo;
    }

    /**
     * Getter for NodeCpuCount.
     * Number of CPUs for each node
     * @return Returns the Long
     */
    @JsonGetter("node-cpu-count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNodeCpuCount() {
        return nodeCpuCount;
    }

    /**
     * Setter for NodeCpuCount.
     * Number of CPUs for each node
     * @param nodeCpuCount Value for Long
     */
    @JsonSetter("node-cpu-count")
    public void setNodeCpuCount(Long nodeCpuCount) {
        this.nodeCpuCount = nodeCpuCount;
    }

    /**
     * Getter for Integrations.
     * Service integrations
     * @return Returns the List of DbaasIntegration
     */
    @JsonGetter("integrations")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasIntegration> getIntegrations() {
        return integrations;
    }

    /**
     * Setter for Integrations.
     * Service integrations
     * @param integrations Value for List of DbaasIntegration
     */
    @JsonSetter("integrations")
    public void setIntegrations(List<DbaasIntegration> integrations) {
        this.integrations = integrations;
    }

    /**
     * Getter for Zone.
     * The zone where the service is running
     * @return Returns the String
     */
    @JsonGetter("zone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getZone() {
        return zone;
    }

    /**
     * Setter for Zone.
     * The zone where the service is running
     * @param zone Value for String
     */
    @JsonSetter("zone")
    public void setZone(String zone) {
        this.zone = zone;
    }

    /**
     * Getter for NodeStates.
     * State of individual service nodes
     * @return Returns the List of DbaasNodeState
     */
    @JsonGetter("node-states")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasNodeState> getNodeStates() {
        return nodeStates;
    }

    /**
     * Setter for NodeStates.
     * State of individual service nodes
     * @param nodeStates Value for List of DbaasNodeState
     */
    @JsonSetter("node-states")
    public void setNodeStates(List<DbaasNodeState> nodeStates) {
        this.nodeStates = nodeStates;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for State.
     * @return Returns the EnumServiceStateEnum
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EnumServiceStateEnum getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for EnumServiceStateEnum
     */
    @JsonSetter("state")
    public void setState(EnumServiceStateEnum state) {
        this.state = state;
    }

    /**
     * Getter for GrafanaSettings.
     * @return Returns the GrafanaSettings
     */
    @JsonGetter("grafana-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public GrafanaSettings getGrafanaSettings() {
        return grafanaSettings;
    }

    /**
     * Setter for GrafanaSettings.
     * @param grafanaSettings Value for GrafanaSettings
     */
    @JsonSetter("grafana-settings")
    public void setGrafanaSettings(GrafanaSettings grafanaSettings) {
        this.grafanaSettings = grafanaSettings;
    }

    /**
     * Getter for IpFilter.
     * Allowed CIDR address blocks for incoming connections
     * @return Returns the List of String
     */
    @JsonGetter("ip-filter")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getIpFilter() {
        return ipFilter;
    }

    /**
     * Setter for IpFilter.
     * Allowed CIDR address blocks for incoming connections
     * @param ipFilter Value for List of String
     */
    @JsonSetter("ip-filter")
    public void setIpFilter(List<String> ipFilter) {
        this.ipFilter = ipFilter;
    }

    /**
     * Getter for Backups.
     * List of backups for the service
     * @return Returns the List of DbaasServiceBackup
     */
    @JsonGetter("backups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasServiceBackup> getBackups() {
        return backups;
    }

    /**
     * Setter for Backups.
     * List of backups for the service
     * @param backups Value for List of DbaasServiceBackup
     */
    @JsonSetter("backups")
    public void setBackups(List<DbaasServiceBackup> backups) {
        this.backups = backups;
    }

    /**
     * Getter for TerminationProtection.
     * Service is protected against termination and powering off
     * @return Returns the Boolean
     */
    @JsonGetter("termination-protection")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTerminationProtection() {
        return terminationProtection;
    }

    /**
     * Setter for TerminationProtection.
     * Service is protected against termination and powering off
     * @param terminationProtection Value for Boolean
     */
    @JsonSetter("termination-protection")
    public void setTerminationProtection(Boolean terminationProtection) {
        this.terminationProtection = terminationProtection;
    }

    /**
     * Getter for Notifications.
     * Service notifications
     * @return Returns the List of DbaasServiceNotification
     */
    @JsonGetter("notifications")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasServiceNotification> getNotifications() {
        return notifications;
    }

    /**
     * Setter for Notifications.
     * Service notifications
     * @param notifications Value for List of DbaasServiceNotification
     */
    @JsonSetter("notifications")
    public void setNotifications(List<DbaasServiceNotification> notifications) {
        this.notifications = notifications;
    }

    /**
     * Getter for Components.
     * Service component information objects
     * @return Returns the List of Component
     */
    @JsonGetter("components")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Component> getComponents() {
        return components;
    }

    /**
     * Setter for Components.
     * Service component information objects
     * @param components Value for List of Component
     */
    @JsonSetter("components")
    public void setComponents(List<Component> components) {
        this.components = components;
    }

    /**
     * Getter for Maintenance.
     * Automatic maintenance settings
     * @return Returns the DbaasServiceMaintenance
     */
    @JsonGetter("maintenance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DbaasServiceMaintenance getMaintenance() {
        return maintenance;
    }

    /**
     * Setter for Maintenance.
     * Automatic maintenance settings
     * @param maintenance Value for DbaasServiceMaintenance
     */
    @JsonSetter("maintenance")
    public void setMaintenance(DbaasServiceMaintenance maintenance) {
        this.maintenance = maintenance;
    }

    /**
     * Getter for DiskSize.
     * TODO UNIT disk space for data storage
     * @return Returns the Long
     */
    @JsonGetter("disk-size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getDiskSize() {
        return diskSize;
    }

    /**
     * Setter for DiskSize.
     * TODO UNIT disk space for data storage
     * @param diskSize Value for Long
     */
    @JsonSetter("disk-size")
    public void setDiskSize(Long diskSize) {
        this.diskSize = diskSize;
    }

    /**
     * Getter for NodeMemory.
     * TODO UNIT of memory for each node
     * @return Returns the Long
     */
    @JsonGetter("node-memory")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNodeMemory() {
        return nodeMemory;
    }

    /**
     * Setter for NodeMemory.
     * TODO UNIT of memory for each node
     * @param nodeMemory Value for Long
     */
    @JsonSetter("node-memory")
    public void setNodeMemory(Long nodeMemory) {
        this.nodeMemory = nodeMemory;
    }

    /**
     * Getter for Uri.
     * URI for connecting to the service (may be absent)
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * URI for connecting to the service (may be absent)
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for UriParams.
     * service_uri parameterized into key-value pairs
     * @return Returns the Object
     */
    @JsonGetter("uri-params")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getUriParams() {
        return uriParams;
    }

    /**
     * Setter for UriParams.
     * service_uri parameterized into key-value pairs
     * @param uriParams Value for Object
     */
    @JsonSetter("uri-params")
    public void setUriParams(Object uriParams) {
        this.uriParams = uriParams;
    }

    /**
     * Getter for Version.
     * Grafana version
     * @return Returns the String
     */
    @JsonGetter("version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVersion() {
        return version;
    }

    /**
     * Setter for Version.
     * Grafana version
     * @param version Value for String
     */
    @JsonSetter("version")
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Getter for CreatedAt.
     * Service creation timestamp (ISO 8601)
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created-at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * Service creation timestamp (ISO 8601)
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created-at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Plan.
     * Subscription plan
     * @return Returns the String
     */
    @JsonGetter("plan")
    public String getPlan() {
        return plan;
    }

    /**
     * Setter for Plan.
     * Subscription plan
     * @param plan Value for String
     */
    @JsonSetter("plan")
    public void setPlan(String plan) {
        this.plan = plan;
    }

    /**
     * Getter for Users.
     * List of service users
     * @return Returns the List of User3
     */
    @JsonGetter("users")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<User3> getUsers() {
        return users;
    }

    /**
     * Setter for Users.
     * List of service users
     * @param users Value for List of User3
     */
    @JsonSetter("users")
    public void setUsers(List<User3> users) {
        this.users = users;
    }

    /**
     * Converts this DbaasServiceGrafana into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DbaasServiceGrafana [" + "name=" + name + ", type=" + type + ", plan=" + plan
                + ", description=" + description + ", updatedAt=" + updatedAt + ", nodeCount="
                + nodeCount + ", connectionInfo=" + connectionInfo + ", nodeCpuCount="
                + nodeCpuCount + ", integrations=" + integrations + ", zone=" + zone
                + ", nodeStates=" + nodeStates + ", state=" + state + ", grafanaSettings="
                + grafanaSettings + ", ipFilter=" + ipFilter + ", backups=" + backups
                + ", terminationProtection=" + terminationProtection + ", notifications="
                + notifications + ", components=" + components + ", maintenance=" + maintenance
                + ", diskSize=" + diskSize + ", nodeMemory=" + nodeMemory + ", uri=" + uri
                + ", uriParams=" + uriParams + ", version=" + version + ", createdAt=" + createdAt
                + ", users=" + users + "]";
    }

    /**
     * Builds a new {@link DbaasServiceGrafana.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DbaasServiceGrafana.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(name, type, plan)
                .description(getDescription())
                .updatedAt(getUpdatedAt())
                .nodeCount(getNodeCount())
                .connectionInfo(getConnectionInfo())
                .nodeCpuCount(getNodeCpuCount())
                .integrations(getIntegrations())
                .zone(getZone())
                .nodeStates(getNodeStates())
                .state(getState())
                .grafanaSettings(getGrafanaSettings())
                .ipFilter(getIpFilter())
                .backups(getBackups())
                .terminationProtection(getTerminationProtection())
                .notifications(getNotifications())
                .components(getComponents())
                .maintenance(getMaintenance())
                .diskSize(getDiskSize())
                .nodeMemory(getNodeMemory())
                .uri(getUri())
                .uriParams(getUriParams())
                .version(getVersion())
                .createdAt(getCreatedAt())
                .users(getUsers());
        return builder;
    }

    /**
     * Class to build instances of {@link DbaasServiceGrafana}.
     */
    public static class Builder {
        private String name;
        private String type;
        private String plan;
        private String description;
        private LocalDateTime updatedAt;
        private Long nodeCount;
        private ConnectionInfo3 connectionInfo;
        private Long nodeCpuCount;
        private List<DbaasIntegration> integrations;
        private String zone;
        private List<DbaasNodeState> nodeStates;
        private EnumServiceStateEnum state;
        private GrafanaSettings grafanaSettings;
        private List<String> ipFilter;
        private List<DbaasServiceBackup> backups;
        private Boolean terminationProtection;
        private List<DbaasServiceNotification> notifications;
        private List<Component> components;
        private DbaasServiceMaintenance maintenance;
        private Long diskSize;
        private Long nodeMemory;
        private String uri;
        private Object uriParams;
        private String version;
        private LocalDateTime createdAt;
        private List<User3> users;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  name  String value for name.
         * @param  type  String value for type.
         * @param  plan  String value for plan.
         */
        public Builder(String name, String type, String plan) {
            this.name = name;
            this.type = type;
            this.plan = plan;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for plan.
         * @param  plan  String value for plan.
         * @return Builder
         */
        public Builder plan(String plan) {
            this.plan = plan;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for nodeCount.
         * @param  nodeCount  Long value for nodeCount.
         * @return Builder
         */
        public Builder nodeCount(Long nodeCount) {
            this.nodeCount = nodeCount;
            return this;
        }

        /**
         * Setter for connectionInfo.
         * @param  connectionInfo  ConnectionInfo3 value for connectionInfo.
         * @return Builder
         */
        public Builder connectionInfo(ConnectionInfo3 connectionInfo) {
            this.connectionInfo = connectionInfo;
            return this;
        }

        /**
         * Setter for nodeCpuCount.
         * @param  nodeCpuCount  Long value for nodeCpuCount.
         * @return Builder
         */
        public Builder nodeCpuCount(Long nodeCpuCount) {
            this.nodeCpuCount = nodeCpuCount;
            return this;
        }

        /**
         * Setter for integrations.
         * @param  integrations  List of DbaasIntegration value for integrations.
         * @return Builder
         */
        public Builder integrations(List<DbaasIntegration> integrations) {
            this.integrations = integrations;
            return this;
        }

        /**
         * Setter for zone.
         * @param  zone  String value for zone.
         * @return Builder
         */
        public Builder zone(String zone) {
            this.zone = zone;
            return this;
        }

        /**
         * Setter for nodeStates.
         * @param  nodeStates  List of DbaasNodeState value for nodeStates.
         * @return Builder
         */
        public Builder nodeStates(List<DbaasNodeState> nodeStates) {
            this.nodeStates = nodeStates;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  EnumServiceStateEnum value for state.
         * @return Builder
         */
        public Builder state(EnumServiceStateEnum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for grafanaSettings.
         * @param  grafanaSettings  GrafanaSettings value for grafanaSettings.
         * @return Builder
         */
        public Builder grafanaSettings(GrafanaSettings grafanaSettings) {
            this.grafanaSettings = grafanaSettings;
            return this;
        }

        /**
         * Setter for ipFilter.
         * @param  ipFilter  List of String value for ipFilter.
         * @return Builder
         */
        public Builder ipFilter(List<String> ipFilter) {
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * Setter for backups.
         * @param  backups  List of DbaasServiceBackup value for backups.
         * @return Builder
         */
        public Builder backups(List<DbaasServiceBackup> backups) {
            this.backups = backups;
            return this;
        }

        /**
         * Setter for terminationProtection.
         * @param  terminationProtection  Boolean value for terminationProtection.
         * @return Builder
         */
        public Builder terminationProtection(Boolean terminationProtection) {
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Setter for notifications.
         * @param  notifications  List of DbaasServiceNotification value for notifications.
         * @return Builder
         */
        public Builder notifications(List<DbaasServiceNotification> notifications) {
            this.notifications = notifications;
            return this;
        }

        /**
         * Setter for components.
         * @param  components  List of Component value for components.
         * @return Builder
         */
        public Builder components(List<Component> components) {
            this.components = components;
            return this;
        }

        /**
         * Setter for maintenance.
         * @param  maintenance  DbaasServiceMaintenance value for maintenance.
         * @return Builder
         */
        public Builder maintenance(DbaasServiceMaintenance maintenance) {
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Setter for diskSize.
         * @param  diskSize  Long value for diskSize.
         * @return Builder
         */
        public Builder diskSize(Long diskSize) {
            this.diskSize = diskSize;
            return this;
        }

        /**
         * Setter for nodeMemory.
         * @param  nodeMemory  Long value for nodeMemory.
         * @return Builder
         */
        public Builder nodeMemory(Long nodeMemory) {
            this.nodeMemory = nodeMemory;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for uriParams.
         * @param  uriParams  Object value for uriParams.
         * @return Builder
         */
        public Builder uriParams(Object uriParams) {
            this.uriParams = uriParams;
            return this;
        }

        /**
         * Setter for version.
         * @param  version  String value for version.
         * @return Builder
         */
        public Builder version(String version) {
            this.version = version;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for users.
         * @param  users  List of User3 value for users.
         * @return Builder
         */
        public Builder users(List<User3> users) {
            this.users = users;
            return this;
        }

        /**
         * Builds a new {@link DbaasServiceGrafana} object using the set fields.
         * @return {@link DbaasServiceGrafana}
         */
        public DbaasServiceGrafana build() {
            return new DbaasServiceGrafana(name, type, plan, description, updatedAt, nodeCount,
                    connectionInfo, nodeCpuCount, integrations, zone, nodeStates, state,
                    grafanaSettings, ipFilter, backups, terminationProtection, notifications,
                    components, maintenance, diskSize, nodeMemory, uri, uriParams, version,
                    createdAt, users);
        }
    }
}
