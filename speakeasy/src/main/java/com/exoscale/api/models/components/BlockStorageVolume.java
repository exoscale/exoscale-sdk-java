/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * BlockStorageVolume - Block storage volume
 */

public class BlockStorageVolume {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    /**
     * Target Instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance")
    private Optional<? extends InstanceTarget> instance;

    /**
     * Volume name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Volume state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends BlockStorageVolumeState> state;

    /**
     * Volume size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Long> size;

    /**
     * Volume block size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocksize")
    private Optional<? extends Long> blocksize;

    /**
     * Volume snapshots, if any
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block-storage-snapshots")
    private Optional<? extends java.util.List<BlockStorageSnapshotTarget>> blockStorageSnapshots;

    /**
     * Volume ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Volume creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    public BlockStorageVolume(
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("instance") Optional<? extends InstanceTarget> instance,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("state") Optional<? extends BlockStorageVolumeState> state,
            @JsonProperty("size") Optional<? extends Long> size,
            @JsonProperty("blocksize") Optional<? extends Long> blocksize,
            @JsonProperty("block-storage-snapshots") Optional<? extends java.util.List<BlockStorageSnapshotTarget>> blockStorageSnapshots,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(instance, "instance");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(blocksize, "blocksize");
        Utils.checkNotNull(blockStorageSnapshots, "blockStorageSnapshots");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createdAt, "createdAt");
        this.labels = labels;
        this.instance = instance;
        this.name = name;
        this.state = state;
        this.size = size;
        this.blocksize = blocksize;
        this.blockStorageSnapshots = blockStorageSnapshots;
        this.id = id;
        this.createdAt = createdAt;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    /**
     * Target Instance
     */
    public Optional<? extends InstanceTarget> instance() {
        return instance;
    }

    /**
     * Volume name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Volume state
     */
    public Optional<? extends BlockStorageVolumeState> state() {
        return state;
    }

    /**
     * Volume size
     */
    public Optional<? extends Long> size() {
        return size;
    }

    /**
     * Volume block size
     */
    public Optional<? extends Long> blocksize() {
        return blocksize;
    }

    /**
     * Volume snapshots, if any
     */
    public Optional<? extends java.util.List<BlockStorageSnapshotTarget>> blockStorageSnapshots() {
        return blockStorageSnapshots;
    }

    /**
     * Volume ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Volume creation date
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public BlockStorageVolume withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public BlockStorageVolume withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    /**
     * Target Instance
     */
    public BlockStorageVolume withInstance(InstanceTarget instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = Optional.ofNullable(instance);
        return this;
    }

    /**
     * Target Instance
     */
    public BlockStorageVolume withInstance(Optional<? extends InstanceTarget> instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = instance;
        return this;
    }

    /**
     * Volume name
     */
    public BlockStorageVolume withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Volume name
     */
    public BlockStorageVolume withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Volume state
     */
    public BlockStorageVolume withState(BlockStorageVolumeState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * Volume state
     */
    public BlockStorageVolume withState(Optional<? extends BlockStorageVolumeState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Volume size
     */
    public BlockStorageVolume withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Volume size
     */
    public BlockStorageVolume withSize(Optional<? extends Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Volume block size
     */
    public BlockStorageVolume withBlocksize(long blocksize) {
        Utils.checkNotNull(blocksize, "blocksize");
        this.blocksize = Optional.ofNullable(blocksize);
        return this;
    }

    /**
     * Volume block size
     */
    public BlockStorageVolume withBlocksize(Optional<? extends Long> blocksize) {
        Utils.checkNotNull(blocksize, "blocksize");
        this.blocksize = blocksize;
        return this;
    }

    /**
     * Volume snapshots, if any
     */
    public BlockStorageVolume withBlockStorageSnapshots(java.util.List<BlockStorageSnapshotTarget> blockStorageSnapshots) {
        Utils.checkNotNull(blockStorageSnapshots, "blockStorageSnapshots");
        this.blockStorageSnapshots = Optional.ofNullable(blockStorageSnapshots);
        return this;
    }

    /**
     * Volume snapshots, if any
     */
    public BlockStorageVolume withBlockStorageSnapshots(Optional<? extends java.util.List<BlockStorageSnapshotTarget>> blockStorageSnapshots) {
        Utils.checkNotNull(blockStorageSnapshots, "blockStorageSnapshots");
        this.blockStorageSnapshots = blockStorageSnapshots;
        return this;
    }

    /**
     * Volume ID
     */
    public BlockStorageVolume withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Volume ID
     */
    public BlockStorageVolume withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Volume creation date
     */
    public BlockStorageVolume withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Volume creation date
     */
    public BlockStorageVolume withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BlockStorageVolume other = (BlockStorageVolume) o;
        return 
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.instance, other.instance) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.blocksize, other.blocksize) &&
            java.util.Objects.deepEquals(this.blockStorageSnapshots, other.blockStorageSnapshots) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            labels,
            instance,
            name,
            state,
            size,
            blocksize,
            blockStorageSnapshots,
            id,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BlockStorageVolume.class,
                "labels", labels,
                "instance", instance,
                "name", name,
                "state", state,
                "size", size,
                "blocksize", blocksize,
                "blockStorageSnapshots", blockStorageSnapshots,
                "id", id,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends InstanceTarget> instance = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends BlockStorageVolumeState> state = Optional.empty();
 
        private Optional<? extends Long> size = Optional.empty();
 
        private Optional<? extends Long> blocksize = Optional.empty();
 
        private Optional<? extends java.util.List<BlockStorageSnapshotTarget>> blockStorageSnapshots = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        /**
         * Target Instance
         */
        public Builder instance(InstanceTarget instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = Optional.ofNullable(instance);
            return this;
        }

        /**
         * Target Instance
         */
        public Builder instance(Optional<? extends InstanceTarget> instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = instance;
            return this;
        }

        /**
         * Volume name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Volume name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Volume state
         */
        public Builder state(BlockStorageVolumeState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Volume state
         */
        public Builder state(Optional<? extends BlockStorageVolumeState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Volume size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Volume size
         */
        public Builder size(Optional<? extends Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * Volume block size
         */
        public Builder blocksize(long blocksize) {
            Utils.checkNotNull(blocksize, "blocksize");
            this.blocksize = Optional.ofNullable(blocksize);
            return this;
        }

        /**
         * Volume block size
         */
        public Builder blocksize(Optional<? extends Long> blocksize) {
            Utils.checkNotNull(blocksize, "blocksize");
            this.blocksize = blocksize;
            return this;
        }

        /**
         * Volume snapshots, if any
         */
        public Builder blockStorageSnapshots(java.util.List<BlockStorageSnapshotTarget> blockStorageSnapshots) {
            Utils.checkNotNull(blockStorageSnapshots, "blockStorageSnapshots");
            this.blockStorageSnapshots = Optional.ofNullable(blockStorageSnapshots);
            return this;
        }

        /**
         * Volume snapshots, if any
         */
        public Builder blockStorageSnapshots(Optional<? extends java.util.List<BlockStorageSnapshotTarget>> blockStorageSnapshots) {
            Utils.checkNotNull(blockStorageSnapshots, "blockStorageSnapshots");
            this.blockStorageSnapshots = blockStorageSnapshots;
            return this;
        }

        /**
         * Volume ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Volume ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Volume creation date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Volume creation date
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public BlockStorageVolume build() {
            return new BlockStorageVolume(
                labels,
                instance,
                name,
                state,
                size,
                blocksize,
                blockStorageSnapshots,
                id,
                createdAt);
        }
    }
}

