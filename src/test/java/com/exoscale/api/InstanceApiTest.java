/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.api;

import com.exoscale.model.CreateInstanceRequest;
import com.exoscale.model.Instance;
import com.exoscale.model.InstancePassword;
import com.exoscale.model.ListInstances200Response;
import com.exoscale.model.Operation;
import com.exoscale.model.ResetInstanceRequest;
import com.exoscale.model.ResizeInstanceDiskRequest;
import com.exoscale.model.RevertInstanceToSnapshotRequest;
import com.exoscale.model.ScaleInstanceRequest;
import com.exoscale.model.StartInstanceRequest;
import java.util.UUID;
import com.exoscale.model.UpdateInstanceRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for InstanceApi
 */
@Ignore
public class InstanceApiTest {

    private final InstanceApi api = new InstanceApi();

    
    /**
     * Set instance destruction protection
     *
     * 
     */
    @Test
    public void addInstanceProtectionTest()  {
        UUID id = null;
        Object response = api.addInstanceProtection(id).block();

        // TODO: test validations
    }
    
    /**
     * Create a Compute instance
     *
     * 
     */
    @Test
    public void createInstanceTest()  {
        CreateInstanceRequest createInstanceRequest = null;
        Operation response = api.createInstance(createInstanceRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a Snapshot of a Compute instance
     *
     * 
     */
    @Test
    public void createSnapshotTest()  {
        UUID id = null;
        Operation response = api.createSnapshot(id).block();

        // TODO: test validations
    }
    
    /**
     * Delete a Compute instance
     *
     * 
     */
    @Test
    public void deleteInstanceTest()  {
        UUID id = null;
        Operation response = api.deleteInstance(id).block();

        // TODO: test validations
    }
    
    /**
     * Retrieve Compute instance details
     *
     * 
     */
    @Test
    public void getInstanceTest()  {
        UUID id = null;
        Instance response = api.getInstance(id).block();

        // TODO: test validations
    }
    
    /**
     * List Compute instances
     *
     * 
     */
    @Test
    public void listInstancesTest()  {
        UUID managerId = null;
        String managerType = null;
        String ipAddress = null;
        ListInstances200Response response = api.listInstances(managerId, managerType, ipAddress).block();

        // TODO: test validations
    }
    
    /**
     * Reboot a Compute instance
     *
     * 
     */
    @Test
    public void rebootInstanceTest()  {
        UUID id = null;
        Operation response = api.rebootInstance(id).block();

        // TODO: test validations
    }
    
    /**
     * Remove instance destruction protection
     *
     * 
     */
    @Test
    public void removeInstanceProtectionTest()  {
        UUID id = null;
        Object response = api.removeInstanceProtection(id).block();

        // TODO: test validations
    }
    
    /**
     * Reset a Compute instance to a base/target template
     *
     * This operation re-installs a Compute instance to a base template. If target template is provided it will be used to recreated instance from. Warning: the operation wipes all data stored on the disk.
     */
    @Test
    public void resetInstanceTest()  {
        UUID id = null;
        ResetInstanceRequest resetInstanceRequest = null;
        Operation response = api.resetInstance(id, resetInstanceRequest).block();

        // TODO: test validations
    }
    
    /**
     * Reset Instance field
     *
     * 
     */
    @Test
    public void resetInstanceFieldTest()  {
        UUID id = null;
        String field = null;
        Operation response = api.resetInstanceField(id, field).block();

        // TODO: test validations
    }
    
    /**
     * Reset a compute instance password
     *
     * 
     */
    @Test
    public void resetInstancePasswordTest()  {
        UUID id = null;
        Operation response = api.resetInstancePassword(id).block();

        // TODO: test validations
    }
    
    /**
     * Resize a Compute instance disk
     *
     * This operation resizes a Compute instance&#39;s disk volume. Note: the disk can only grow, cannot be shrunk.
     */
    @Test
    public void resizeInstanceDiskTest()  {
        UUID id = null;
        ResizeInstanceDiskRequest resizeInstanceDiskRequest = null;
        Operation response = api.resizeInstanceDisk(id, resizeInstanceDiskRequest).block();

        // TODO: test validations
    }
    
    /**
     * Reveal the password used during instance creation or the latest password reset.
     *
     * Reveal the password used during instance creation or the latest password reset.             This is only available for VMs created against templates having the &#x60;password-enabled&#x60;             property set to &#x60;true&#x60;.              Passwords are transiently stored for at most 24 hours and intended to be retrieved shortly after             creation or resets.
     */
    @Test
    public void revealInstancePasswordTest()  {
        UUID id = null;
        InstancePassword response = api.revealInstancePassword(id).block();

        // TODO: test validations
    }
    
    /**
     * Revert a snapshot for an instance
     *
     * This operation reverts the snapshot to the Compute instance volume, restoring stored data as it was at the time of the snapshot. The Compute instance must be previously stopped.
     */
    @Test
    public void revertInstanceToSnapshotTest()  {
        UUID instanceId = null;
        RevertInstanceToSnapshotRequest revertInstanceToSnapshotRequest = null;
        Operation response = api.revertInstanceToSnapshot(instanceId, revertInstanceToSnapshotRequest).block();

        // TODO: test validations
    }
    
    /**
     * Scale a Compute instance to a new Instance Type
     *
     * This operation changes the Compute instance&#39;s type. Note: the new Instance Type must be within the same family (e.g. a standard instance cannot be scaled to gpu2 or storage).
     */
    @Test
    public void scaleInstanceTest()  {
        UUID id = null;
        ScaleInstanceRequest scaleInstanceRequest = null;
        Operation response = api.scaleInstance(id, scaleInstanceRequest).block();

        // TODO: test validations
    }
    
    /**
     * Start a Compute instance
     *
     * This operation starts a virtual machine, potentially using a rescue profile if specified
     */
    @Test
    public void startInstanceTest()  {
        UUID id = null;
        StartInstanceRequest startInstanceRequest = null;
        Operation response = api.startInstance(id, startInstanceRequest).block();

        // TODO: test validations
    }
    
    /**
     * Stop a Compute instance
     *
     * 
     */
    @Test
    public void stopInstanceTest()  {
        UUID id = null;
        Operation response = api.stopInstance(id).block();

        // TODO: test validations
    }
    
    /**
     * Update a Compute instance
     *
     * 
     */
    @Test
    public void updateInstanceTest()  {
        UUID id = null;
        UpdateInstanceRequest updateInstanceRequest = null;
        Operation response = api.updateInstance(id, updateInstanceRequest).block();

        // TODO: test validations
    }
    
}
