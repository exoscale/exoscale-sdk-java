/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for DbaasServiceComponents type.
 */
public class DbaasServiceComponents {
    private String component;
    private String host;
    private EnumKafkaAuthMethodEnum kafkaAuthenticationMethod;
    private String path;
    private long port;
    private RouteEnum route;
    private Boolean ssl;
    private UsageEnum usage;

    /**
     * Default constructor.
     */
    public DbaasServiceComponents() {
    }

    /**
     * Initialization constructor.
     * @param  component  String value for component.
     * @param  host  String value for host.
     * @param  port  long value for port.
     * @param  route  RouteEnum value for route.
     * @param  usage  UsageEnum value for usage.
     * @param  kafkaAuthenticationMethod  EnumKafkaAuthMethodEnum value for
     *         kafkaAuthenticationMethod.
     * @param  path  String value for path.
     * @param  ssl  Boolean value for ssl.
     */
    public DbaasServiceComponents(
            String component,
            String host,
            long port,
            RouteEnum route,
            UsageEnum usage,
            EnumKafkaAuthMethodEnum kafkaAuthenticationMethod,
            String path,
            Boolean ssl) {
        this.component = component;
        this.host = host;
        this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
        this.path = path;
        this.port = port;
        this.route = route;
        this.ssl = ssl;
        this.usage = usage;
    }

    /**
     * Getter for Component.
     * Service component name
     * @return Returns the String
     */
    @JsonGetter("component")
    public String getComponent() {
        return component;
    }

    /**
     * Setter for Component.
     * Service component name
     * @param component Value for String
     */
    @JsonSetter("component")
    public void setComponent(String component) {
        this.component = component;
    }

    /**
     * Getter for Host.
     * DNS name for connecting to the service component
     * @return Returns the String
     */
    @JsonGetter("host")
    public String getHost() {
        return host;
    }

    /**
     * Setter for Host.
     * DNS name for connecting to the service component
     * @param host Value for String
     */
    @JsonSetter("host")
    public void setHost(String host) {
        this.host = host;
    }

    /**
     * Getter for KafkaAuthenticationMethod.
     * @return Returns the EnumKafkaAuthMethodEnum
     */
    @JsonGetter("kafka-authentication-method")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EnumKafkaAuthMethodEnum getKafkaAuthenticationMethod() {
        return kafkaAuthenticationMethod;
    }

    /**
     * Setter for KafkaAuthenticationMethod.
     * @param kafkaAuthenticationMethod Value for EnumKafkaAuthMethodEnum
     */
    @JsonSetter("kafka-authentication-method")
    public void setKafkaAuthenticationMethod(EnumKafkaAuthMethodEnum kafkaAuthenticationMethod) {
        this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
    }

    /**
     * Getter for Path.
     * Path component of the service URL (useful only if service component is HTTP or HTTPS
     * endpoint)
     * @return Returns the String
     */
    @JsonGetter("path")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPath() {
        return path;
    }

    /**
     * Setter for Path.
     * Path component of the service URL (useful only if service component is HTTP or HTTPS
     * endpoint)
     * @param path Value for String
     */
    @JsonSetter("path")
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for Port.
     * Port number for connecting to the service component
     * @return Returns the long
     */
    @JsonGetter("port")
    public long getPort() {
        return port;
    }

    /**
     * Setter for Port.
     * Port number for connecting to the service component
     * @param port Value for long
     */
    @JsonSetter("port")
    public void setPort(long port) {
        this.port = port;
    }

    /**
     * Getter for Route.
     * Network access route
     * @return Returns the RouteEnum
     */
    @JsonGetter("route")
    public RouteEnum getRoute() {
        return route;
    }

    /**
     * Setter for Route.
     * Network access route
     * @param route Value for RouteEnum
     */
    @JsonSetter("route")
    public void setRoute(RouteEnum route) {
        this.route = route;
    }

    /**
     * Getter for Ssl.
     * Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always
     * encrypted and this property is only included for service components that may disable
     * encryption.
     * @return Returns the Boolean
     */
    @JsonGetter("ssl")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSsl() {
        return ssl;
    }

    /**
     * Setter for Ssl.
     * Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always
     * encrypted and this property is only included for service components that may disable
     * encryption.
     * @param ssl Value for Boolean
     */
    @JsonSetter("ssl")
    public void setSsl(Boolean ssl) {
        this.ssl = ssl;
    }

    /**
     * Getter for Usage.
     * DNS usage name
     * @return Returns the UsageEnum
     */
    @JsonGetter("usage")
    public UsageEnum getUsage() {
        return usage;
    }

    /**
     * Setter for Usage.
     * DNS usage name
     * @param usage Value for UsageEnum
     */
    @JsonSetter("usage")
    public void setUsage(UsageEnum usage) {
        this.usage = usage;
    }

    /**
     * Converts this DbaasServiceComponents into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DbaasServiceComponents [" + "component=" + component + ", host=" + host + ", port="
                + port + ", route=" + route + ", usage=" + usage + ", kafkaAuthenticationMethod="
                + kafkaAuthenticationMethod + ", path=" + path + ", ssl=" + ssl + "]";
    }

    /**
     * Builds a new {@link DbaasServiceComponents.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DbaasServiceComponents.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(component, host, port, route, usage)
                .kafkaAuthenticationMethod(getKafkaAuthenticationMethod())
                .path(getPath())
                .ssl(getSsl());
        return builder;
    }

    /**
     * Class to build instances of {@link DbaasServiceComponents}.
     */
    public static class Builder {
        private String component;
        private String host;
        private long port;
        private RouteEnum route;
        private UsageEnum usage;
        private EnumKafkaAuthMethodEnum kafkaAuthenticationMethod;
        private String path;
        private Boolean ssl;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  component  String value for component.
         * @param  host  String value for host.
         * @param  port  long value for port.
         * @param  route  RouteEnum value for route.
         * @param  usage  UsageEnum value for usage.
         */
        public Builder(String component, String host, long port, RouteEnum route, UsageEnum usage) {
            this.component = component;
            this.host = host;
            this.port = port;
            this.route = route;
            this.usage = usage;
        }

        /**
         * Setter for component.
         * @param  component  String value for component.
         * @return Builder
         */
        public Builder component(String component) {
            this.component = component;
            return this;
        }

        /**
         * Setter for host.
         * @param  host  String value for host.
         * @return Builder
         */
        public Builder host(String host) {
            this.host = host;
            return this;
        }

        /**
         * Setter for port.
         * @param  port  long value for port.
         * @return Builder
         */
        public Builder port(long port) {
            this.port = port;
            return this;
        }

        /**
         * Setter for route.
         * @param  route  RouteEnum value for route.
         * @return Builder
         */
        public Builder route(RouteEnum route) {
            this.route = route;
            return this;
        }

        /**
         * Setter for usage.
         * @param  usage  UsageEnum value for usage.
         * @return Builder
         */
        public Builder usage(UsageEnum usage) {
            this.usage = usage;
            return this;
        }

        /**
         * Setter for kafkaAuthenticationMethod.
         * @param  kafkaAuthenticationMethod  EnumKafkaAuthMethodEnum value for
         *         kafkaAuthenticationMethod.
         * @return Builder
         */
        public Builder kafkaAuthenticationMethod(
                EnumKafkaAuthMethodEnum kafkaAuthenticationMethod) {
            this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
            return this;
        }

        /**
         * Setter for path.
         * @param  path  String value for path.
         * @return Builder
         */
        public Builder path(String path) {
            this.path = path;
            return this;
        }

        /**
         * Setter for ssl.
         * @param  ssl  Boolean value for ssl.
         * @return Builder
         */
        public Builder ssl(Boolean ssl) {
            this.ssl = ssl;
            return this;
        }

        /**
         * Builds a new {@link DbaasServiceComponents} object using the set fields.
         * @return {@link DbaasServiceComponents}
         */
        public DbaasServiceComponents build() {
            return new DbaasServiceComponents(component, host, port, route, usage,
                    kafkaAuthenticationMethod, path, ssl);
        }
    }
}
