/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Component4 type.
 */
public class Component4 {
    private String component;
    private String host;
    private long port;
    private EnumComponentRouteEnum route;
    private Boolean ssl;
    private EnumComponentUsageEnum usage;

    /**
     * Default constructor.
     */
    public Component4() {
    }

    /**
     * Initialization constructor.
     * @param  component  String value for component.
     * @param  host  String value for host.
     * @param  port  long value for port.
     * @param  route  EnumComponentRouteEnum value for route.
     * @param  usage  EnumComponentUsageEnum value for usage.
     * @param  ssl  Boolean value for ssl.
     */
    public Component4(
            String component,
            String host,
            long port,
            EnumComponentRouteEnum route,
            EnumComponentUsageEnum usage,
            Boolean ssl) {
        this.component = component;
        this.host = host;
        this.port = port;
        this.route = route;
        this.ssl = ssl;
        this.usage = usage;
    }

    /**
     * Getter for Component.
     * Service component name
     * @return Returns the String
     */
    @JsonGetter("component")
    public String getComponent() {
        return component;
    }

    /**
     * Setter for Component.
     * Service component name
     * @param component Value for String
     */
    @JsonSetter("component")
    public void setComponent(String component) {
        this.component = component;
    }

    /**
     * Getter for Host.
     * DNS name for connecting to the service component
     * @return Returns the String
     */
    @JsonGetter("host")
    public String getHost() {
        return host;
    }

    /**
     * Setter for Host.
     * DNS name for connecting to the service component
     * @param host Value for String
     */
    @JsonSetter("host")
    public void setHost(String host) {
        this.host = host;
    }

    /**
     * Getter for Port.
     * Port number for connecting to the service component
     * @return Returns the long
     */
    @JsonGetter("port")
    public long getPort() {
        return port;
    }

    /**
     * Setter for Port.
     * Port number for connecting to the service component
     * @param port Value for long
     */
    @JsonSetter("port")
    public void setPort(long port) {
        this.port = port;
    }

    /**
     * Getter for Route.
     * @return Returns the EnumComponentRouteEnum
     */
    @JsonGetter("route")
    public EnumComponentRouteEnum getRoute() {
        return route;
    }

    /**
     * Setter for Route.
     * @param route Value for EnumComponentRouteEnum
     */
    @JsonSetter("route")
    public void setRoute(EnumComponentRouteEnum route) {
        this.route = route;
    }

    /**
     * Getter for Ssl.
     * Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always
     * encrypted and this property is only included for service components that may disable
     * encryption.
     * @return Returns the Boolean
     */
    @JsonGetter("ssl")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSsl() {
        return ssl;
    }

    /**
     * Setter for Ssl.
     * Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always
     * encrypted and this property is only included for service components that may disable
     * encryption.
     * @param ssl Value for Boolean
     */
    @JsonSetter("ssl")
    public void setSsl(Boolean ssl) {
        this.ssl = ssl;
    }

    /**
     * Getter for Usage.
     * @return Returns the EnumComponentUsageEnum
     */
    @JsonGetter("usage")
    public EnumComponentUsageEnum getUsage() {
        return usage;
    }

    /**
     * Setter for Usage.
     * @param usage Value for EnumComponentUsageEnum
     */
    @JsonSetter("usage")
    public void setUsage(EnumComponentUsageEnum usage) {
        this.usage = usage;
    }

    /**
     * Converts this Component4 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Component4 [" + "component=" + component + ", host=" + host + ", port=" + port
                + ", route=" + route + ", usage=" + usage + ", ssl=" + ssl + "]";
    }

    /**
     * Builds a new {@link Component4.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Component4.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(component, host, port, route, usage)
                .ssl(getSsl());
        return builder;
    }

    /**
     * Class to build instances of {@link Component4}.
     */
    public static class Builder {
        private String component;
        private String host;
        private long port;
        private EnumComponentRouteEnum route;
        private EnumComponentUsageEnum usage;
        private Boolean ssl;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  component  String value for component.
         * @param  host  String value for host.
         * @param  port  long value for port.
         * @param  route  EnumComponentRouteEnum value for route.
         * @param  usage  EnumComponentUsageEnum value for usage.
         */
        public Builder(String component, String host, long port, EnumComponentRouteEnum route,
                EnumComponentUsageEnum usage) {
            this.component = component;
            this.host = host;
            this.port = port;
            this.route = route;
            this.usage = usage;
        }

        /**
         * Setter for component.
         * @param  component  String value for component.
         * @return Builder
         */
        public Builder component(String component) {
            this.component = component;
            return this;
        }

        /**
         * Setter for host.
         * @param  host  String value for host.
         * @return Builder
         */
        public Builder host(String host) {
            this.host = host;
            return this;
        }

        /**
         * Setter for port.
         * @param  port  long value for port.
         * @return Builder
         */
        public Builder port(long port) {
            this.port = port;
            return this;
        }

        /**
         * Setter for route.
         * @param  route  EnumComponentRouteEnum value for route.
         * @return Builder
         */
        public Builder route(EnumComponentRouteEnum route) {
            this.route = route;
            return this;
        }

        /**
         * Setter for usage.
         * @param  usage  EnumComponentUsageEnum value for usage.
         * @return Builder
         */
        public Builder usage(EnumComponentUsageEnum usage) {
            this.usage = usage;
            return this;
        }

        /**
         * Setter for ssl.
         * @param  ssl  Boolean value for ssl.
         * @return Builder
         */
        public Builder ssl(Boolean ssl) {
            this.ssl = ssl;
            return this;
        }

        /**
         * Builds a new {@link Component4} object using the set fields.
         * @return {@link Component4}
         */
        public Component4 build() {
            return new Component4(component, host, port, route, usage, ssl);
        }
    }
}
