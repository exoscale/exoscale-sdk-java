/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for MysqlConfConfigurationValues type.
 */
public class MysqlConfConfigurationValues {
    private Integer netWriteTimeout;
    private InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine;
    private String sqlMode;
    private Integer informationSchemaStatsExpiry;
    private Integer sortBufferSize;
    private Integer innodbThreadConcurrency;
    private Integer innodbWriteIoThreads;
    private Integer innodbFtMinTokenSize;
    private Integer innodbChangeBufferMaxSize;
    private Integer innodbFlushNeighbors;
    private Integer tmpTableSize;
    private Boolean slowQueryLog;
    private Integer connectTimeout;
    private Integer netReadTimeout;
    private Integer innodbLockWaitTimeout;
    private Integer waitTimeout;
    private Boolean innodbRollbackOnTimeout;
    private Integer groupConcatMaxLen;
    private Integer netBufferLength;
    private Boolean innodbPrintAllDeadlocks;
    private Integer innodbOnlineAlterLogMaxSize;
    private Integer interactiveTimeout;
    private Integer innodbLogBufferSize;
    private Integer maxAllowedPacket;
    private Integer maxHeapTableSize;
    private OptionalNullable<String> innodbFtServerStopwordTable;
    private Integer innodbReadIoThreads;
    private Boolean sqlRequirePrimaryKey;
    private String defaultTimeZone;
    private Double longQueryTime;

    /**
     * Default constructor.
     */
    public MysqlConfConfigurationValues() {
    }

    /**
     * Initialization constructor.
     * @param  netWriteTimeout  Integer value for netWriteTimeout.
     * @param  internalTmpMemStorageEngine  InternalTmpMemStorageEngineEnum value for
     *         internalTmpMemStorageEngine.
     * @param  sqlMode  String value for sqlMode.
     * @param  informationSchemaStatsExpiry  Integer value for informationSchemaStatsExpiry.
     * @param  sortBufferSize  Integer value for sortBufferSize.
     * @param  innodbThreadConcurrency  Integer value for innodbThreadConcurrency.
     * @param  innodbWriteIoThreads  Integer value for innodbWriteIoThreads.
     * @param  innodbFtMinTokenSize  Integer value for innodbFtMinTokenSize.
     * @param  innodbChangeBufferMaxSize  Integer value for innodbChangeBufferMaxSize.
     * @param  innodbFlushNeighbors  Integer value for innodbFlushNeighbors.
     * @param  tmpTableSize  Integer value for tmpTableSize.
     * @param  slowQueryLog  Boolean value for slowQueryLog.
     * @param  connectTimeout  Integer value for connectTimeout.
     * @param  netReadTimeout  Integer value for netReadTimeout.
     * @param  innodbLockWaitTimeout  Integer value for innodbLockWaitTimeout.
     * @param  waitTimeout  Integer value for waitTimeout.
     * @param  innodbRollbackOnTimeout  Boolean value for innodbRollbackOnTimeout.
     * @param  groupConcatMaxLen  Integer value for groupConcatMaxLen.
     * @param  netBufferLength  Integer value for netBufferLength.
     * @param  innodbPrintAllDeadlocks  Boolean value for innodbPrintAllDeadlocks.
     * @param  innodbOnlineAlterLogMaxSize  Integer value for innodbOnlineAlterLogMaxSize.
     * @param  interactiveTimeout  Integer value for interactiveTimeout.
     * @param  innodbLogBufferSize  Integer value for innodbLogBufferSize.
     * @param  maxAllowedPacket  Integer value for maxAllowedPacket.
     * @param  maxHeapTableSize  Integer value for maxHeapTableSize.
     * @param  innodbFtServerStopwordTable  String value for innodbFtServerStopwordTable.
     * @param  innodbReadIoThreads  Integer value for innodbReadIoThreads.
     * @param  sqlRequirePrimaryKey  Boolean value for sqlRequirePrimaryKey.
     * @param  defaultTimeZone  String value for defaultTimeZone.
     * @param  longQueryTime  Double value for longQueryTime.
     */
    public MysqlConfConfigurationValues(
            Integer netWriteTimeout,
            InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine,
            String sqlMode,
            Integer informationSchemaStatsExpiry,
            Integer sortBufferSize,
            Integer innodbThreadConcurrency,
            Integer innodbWriteIoThreads,
            Integer innodbFtMinTokenSize,
            Integer innodbChangeBufferMaxSize,
            Integer innodbFlushNeighbors,
            Integer tmpTableSize,
            Boolean slowQueryLog,
            Integer connectTimeout,
            Integer netReadTimeout,
            Integer innodbLockWaitTimeout,
            Integer waitTimeout,
            Boolean innodbRollbackOnTimeout,
            Integer groupConcatMaxLen,
            Integer netBufferLength,
            Boolean innodbPrintAllDeadlocks,
            Integer innodbOnlineAlterLogMaxSize,
            Integer interactiveTimeout,
            Integer innodbLogBufferSize,
            Integer maxAllowedPacket,
            Integer maxHeapTableSize,
            String innodbFtServerStopwordTable,
            Integer innodbReadIoThreads,
            Boolean sqlRequirePrimaryKey,
            String defaultTimeZone,
            Double longQueryTime) {
        this.netWriteTimeout = netWriteTimeout;
        this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
        this.sqlMode = sqlMode;
        this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
        this.sortBufferSize = sortBufferSize;
        this.innodbThreadConcurrency = innodbThreadConcurrency;
        this.innodbWriteIoThreads = innodbWriteIoThreads;
        this.innodbFtMinTokenSize = innodbFtMinTokenSize;
        this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
        this.innodbFlushNeighbors = innodbFlushNeighbors;
        this.tmpTableSize = tmpTableSize;
        this.slowQueryLog = slowQueryLog;
        this.connectTimeout = connectTimeout;
        this.netReadTimeout = netReadTimeout;
        this.innodbLockWaitTimeout = innodbLockWaitTimeout;
        this.waitTimeout = waitTimeout;
        this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
        this.groupConcatMaxLen = groupConcatMaxLen;
        this.netBufferLength = netBufferLength;
        this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
        this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
        this.interactiveTimeout = interactiveTimeout;
        this.innodbLogBufferSize = innodbLogBufferSize;
        this.maxAllowedPacket = maxAllowedPacket;
        this.maxHeapTableSize = maxHeapTableSize;
        this.innodbFtServerStopwordTable = OptionalNullable.of(innodbFtServerStopwordTable);
        this.innodbReadIoThreads = innodbReadIoThreads;
        this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
        this.defaultTimeZone = defaultTimeZone;
        this.longQueryTime = longQueryTime;
    }

    /**
     * Initialization constructor.
     * @param  netWriteTimeout  Integer value for netWriteTimeout.
     * @param  internalTmpMemStorageEngine  InternalTmpMemStorageEngineEnum value for
     *         internalTmpMemStorageEngine.
     * @param  sqlMode  String value for sqlMode.
     * @param  informationSchemaStatsExpiry  Integer value for informationSchemaStatsExpiry.
     * @param  sortBufferSize  Integer value for sortBufferSize.
     * @param  innodbThreadConcurrency  Integer value for innodbThreadConcurrency.
     * @param  innodbWriteIoThreads  Integer value for innodbWriteIoThreads.
     * @param  innodbFtMinTokenSize  Integer value for innodbFtMinTokenSize.
     * @param  innodbChangeBufferMaxSize  Integer value for innodbChangeBufferMaxSize.
     * @param  innodbFlushNeighbors  Integer value for innodbFlushNeighbors.
     * @param  tmpTableSize  Integer value for tmpTableSize.
     * @param  slowQueryLog  Boolean value for slowQueryLog.
     * @param  connectTimeout  Integer value for connectTimeout.
     * @param  netReadTimeout  Integer value for netReadTimeout.
     * @param  innodbLockWaitTimeout  Integer value for innodbLockWaitTimeout.
     * @param  waitTimeout  Integer value for waitTimeout.
     * @param  innodbRollbackOnTimeout  Boolean value for innodbRollbackOnTimeout.
     * @param  groupConcatMaxLen  Integer value for groupConcatMaxLen.
     * @param  netBufferLength  Integer value for netBufferLength.
     * @param  innodbPrintAllDeadlocks  Boolean value for innodbPrintAllDeadlocks.
     * @param  innodbOnlineAlterLogMaxSize  Integer value for innodbOnlineAlterLogMaxSize.
     * @param  interactiveTimeout  Integer value for interactiveTimeout.
     * @param  innodbLogBufferSize  Integer value for innodbLogBufferSize.
     * @param  maxAllowedPacket  Integer value for maxAllowedPacket.
     * @param  maxHeapTableSize  Integer value for maxHeapTableSize.
     * @param  innodbFtServerStopwordTable  String value for innodbFtServerStopwordTable.
     * @param  innodbReadIoThreads  Integer value for innodbReadIoThreads.
     * @param  sqlRequirePrimaryKey  Boolean value for sqlRequirePrimaryKey.
     * @param  defaultTimeZone  String value for defaultTimeZone.
     * @param  longQueryTime  Double value for longQueryTime.
     */

    protected MysqlConfConfigurationValues(Integer netWriteTimeout,
            InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine, String sqlMode,
            Integer informationSchemaStatsExpiry, Integer sortBufferSize,
            Integer innodbThreadConcurrency, Integer innodbWriteIoThreads,
            Integer innodbFtMinTokenSize, Integer innodbChangeBufferMaxSize,
            Integer innodbFlushNeighbors, Integer tmpTableSize, Boolean slowQueryLog,
            Integer connectTimeout, Integer netReadTimeout, Integer innodbLockWaitTimeout,
            Integer waitTimeout, Boolean innodbRollbackOnTimeout, Integer groupConcatMaxLen,
            Integer netBufferLength, Boolean innodbPrintAllDeadlocks,
            Integer innodbOnlineAlterLogMaxSize, Integer interactiveTimeout,
            Integer innodbLogBufferSize, Integer maxAllowedPacket, Integer maxHeapTableSize,
            OptionalNullable<String> innodbFtServerStopwordTable, Integer innodbReadIoThreads,
            Boolean sqlRequirePrimaryKey, String defaultTimeZone, Double longQueryTime) {
        this.netWriteTimeout = netWriteTimeout;
        this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
        this.sqlMode = sqlMode;
        this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
        this.sortBufferSize = sortBufferSize;
        this.innodbThreadConcurrency = innodbThreadConcurrency;
        this.innodbWriteIoThreads = innodbWriteIoThreads;
        this.innodbFtMinTokenSize = innodbFtMinTokenSize;
        this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
        this.innodbFlushNeighbors = innodbFlushNeighbors;
        this.tmpTableSize = tmpTableSize;
        this.slowQueryLog = slowQueryLog;
        this.connectTimeout = connectTimeout;
        this.netReadTimeout = netReadTimeout;
        this.innodbLockWaitTimeout = innodbLockWaitTimeout;
        this.waitTimeout = waitTimeout;
        this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
        this.groupConcatMaxLen = groupConcatMaxLen;
        this.netBufferLength = netBufferLength;
        this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
        this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
        this.interactiveTimeout = interactiveTimeout;
        this.innodbLogBufferSize = innodbLogBufferSize;
        this.maxAllowedPacket = maxAllowedPacket;
        this.maxHeapTableSize = maxHeapTableSize;
        this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
        this.innodbReadIoThreads = innodbReadIoThreads;
        this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
        this.defaultTimeZone = defaultTimeZone;
        this.longQueryTime = longQueryTime;
    }

    /**
     * Getter for NetWriteTimeout.
     * The number of seconds to wait for a block to be written to a connection before aborting the
     * write.
     * @return Returns the Integer
     */
    @JsonGetter("net_write_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getNetWriteTimeout() {
        return netWriteTimeout;
    }

    /**
     * Setter for NetWriteTimeout.
     * The number of seconds to wait for a block to be written to a connection before aborting the
     * write.
     * @param netWriteTimeout Value for Integer
     */
    @JsonSetter("net_write_timeout")
    public void setNetWriteTimeout(Integer netWriteTimeout) {
        this.netWriteTimeout = netWriteTimeout;
    }

    /**
     * Getter for InternalTmpMemStorageEngine.
     * The storage engine for in-memory internal temporary tables.
     * @return Returns the InternalTmpMemStorageEngineEnum
     */
    @JsonGetter("internal_tmp_mem_storage_engine")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InternalTmpMemStorageEngineEnum getInternalTmpMemStorageEngine() {
        return internalTmpMemStorageEngine;
    }

    /**
     * Setter for InternalTmpMemStorageEngine.
     * The storage engine for in-memory internal temporary tables.
     * @param internalTmpMemStorageEngine Value for InternalTmpMemStorageEngineEnum
     */
    @JsonSetter("internal_tmp_mem_storage_engine")
    public void setInternalTmpMemStorageEngine(InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine) {
        this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
    }

    /**
     * Getter for SqlMode.
     * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and
     * not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be
     * assigned.
     * @return Returns the String
     */
    @JsonGetter("sql_mode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSqlMode() {
        return sqlMode;
    }

    /**
     * Setter for SqlMode.
     * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and
     * not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be
     * assigned.
     * @param sqlMode Value for String
     */
    @JsonSetter("sql_mode")
    public void setSqlMode(String sqlMode) {
        this.sqlMode = sqlMode;
    }

    /**
     * Getter for InformationSchemaStatsExpiry.
     * The time, in seconds, before cached statistics expire
     * @return Returns the Integer
     */
    @JsonGetter("information_schema_stats_expiry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInformationSchemaStatsExpiry() {
        return informationSchemaStatsExpiry;
    }

    /**
     * Setter for InformationSchemaStatsExpiry.
     * The time, in seconds, before cached statistics expire
     * @param informationSchemaStatsExpiry Value for Integer
     */
    @JsonSetter("information_schema_stats_expiry")
    public void setInformationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
        this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
    }

    /**
     * Getter for SortBufferSize.
     * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)
     * @return Returns the Integer
     */
    @JsonGetter("sort_buffer_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSortBufferSize() {
        return sortBufferSize;
    }

    /**
     * Setter for SortBufferSize.
     * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)
     * @param sortBufferSize Value for Integer
     */
    @JsonSetter("sort_buffer_size")
    public void setSortBufferSize(Integer sortBufferSize) {
        this.sortBufferSize = sortBufferSize;
    }

    /**
     * Getter for InnodbThreadConcurrency.
     * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite
     * concurrency - no limit)
     * @return Returns the Integer
     */
    @JsonGetter("innodb_thread_concurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInnodbThreadConcurrency() {
        return innodbThreadConcurrency;
    }

    /**
     * Setter for InnodbThreadConcurrency.
     * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite
     * concurrency - no limit)
     * @param innodbThreadConcurrency Value for Integer
     */
    @JsonSetter("innodb_thread_concurrency")
    public void setInnodbThreadConcurrency(Integer innodbThreadConcurrency) {
        this.innodbThreadConcurrency = innodbThreadConcurrency;
    }

    /**
     * Getter for InnodbWriteIoThreads.
     * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this
     * parameter will lead to a restart of the MySQL service.
     * @return Returns the Integer
     */
    @JsonGetter("innodb_write_io_threads")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInnodbWriteIoThreads() {
        return innodbWriteIoThreads;
    }

    /**
     * Setter for InnodbWriteIoThreads.
     * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this
     * parameter will lead to a restart of the MySQL service.
     * @param innodbWriteIoThreads Value for Integer
     */
    @JsonSetter("innodb_write_io_threads")
    public void setInnodbWriteIoThreads(Integer innodbWriteIoThreads) {
        this.innodbWriteIoThreads = innodbWriteIoThreads;
    }

    /**
     * Getter for InnodbFtMinTokenSize.
     * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter
     * will lead to a restart of the MySQL service.
     * @return Returns the Integer
     */
    @JsonGetter("innodb_ft_min_token_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInnodbFtMinTokenSize() {
        return innodbFtMinTokenSize;
    }

    /**
     * Setter for InnodbFtMinTokenSize.
     * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter
     * will lead to a restart of the MySQL service.
     * @param innodbFtMinTokenSize Value for Integer
     */
    @JsonSetter("innodb_ft_min_token_size")
    public void setInnodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
        this.innodbFtMinTokenSize = innodbFtMinTokenSize;
    }

    /**
     * Getter for InnodbChangeBufferMaxSize.
     * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer
     * pool. Default is 25
     * @return Returns the Integer
     */
    @JsonGetter("innodb_change_buffer_max_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInnodbChangeBufferMaxSize() {
        return innodbChangeBufferMaxSize;
    }

    /**
     * Setter for InnodbChangeBufferMaxSize.
     * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer
     * pool. Default is 25
     * @param innodbChangeBufferMaxSize Value for Integer
     */
    @JsonSetter("innodb_change_buffer_max_size")
    public void setInnodbChangeBufferMaxSize(Integer innodbChangeBufferMaxSize) {
        this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
    }

    /**
     * Getter for InnodbFlushNeighbors.
     * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages
     * in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 -
     * flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent
     * @return Returns the Integer
     */
    @JsonGetter("innodb_flush_neighbors")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInnodbFlushNeighbors() {
        return innodbFlushNeighbors;
    }

    /**
     * Setter for InnodbFlushNeighbors.
     * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages
     * in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 -
     * flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent
     * @param innodbFlushNeighbors Value for Integer
     */
    @JsonSetter("innodb_flush_neighbors")
    public void setInnodbFlushNeighbors(Integer innodbFlushNeighbors) {
        this.innodbFlushNeighbors = innodbFlushNeighbors;
    }

    /**
     * Getter for TmpTableSize.
     * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is
     * 16777216 (16M)
     * @return Returns the Integer
     */
    @JsonGetter("tmp_table_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTmpTableSize() {
        return tmpTableSize;
    }

    /**
     * Setter for TmpTableSize.
     * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is
     * 16777216 (16M)
     * @param tmpTableSize Value for Integer
     */
    @JsonSetter("tmp_table_size")
    public void setTmpTableSize(Integer tmpTableSize) {
        this.tmpTableSize = tmpTableSize;
    }

    /**
     * Getter for SlowQueryLog.
     * Slow query log enables capturing of slow queries. Setting slow_query_log to false also
     * truncates the mysql.slow_log table. Default is off
     * @return Returns the Boolean
     */
    @JsonGetter("slow_query_log")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSlowQueryLog() {
        return slowQueryLog;
    }

    /**
     * Setter for SlowQueryLog.
     * Slow query log enables capturing of slow queries. Setting slow_query_log to false also
     * truncates the mysql.slow_log table. Default is off
     * @param slowQueryLog Value for Boolean
     */
    @JsonSetter("slow_query_log")
    public void setSlowQueryLog(Boolean slowQueryLog) {
        this.slowQueryLog = slowQueryLog;
    }

    /**
     * Getter for ConnectTimeout.
     * The number of seconds that the mysqld server waits for a connect packet before responding
     * with Bad handshake
     * @return Returns the Integer
     */
    @JsonGetter("connect_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getConnectTimeout() {
        return connectTimeout;
    }

    /**
     * Setter for ConnectTimeout.
     * The number of seconds that the mysqld server waits for a connect packet before responding
     * with Bad handshake
     * @param connectTimeout Value for Integer
     */
    @JsonSetter("connect_timeout")
    public void setConnectTimeout(Integer connectTimeout) {
        this.connectTimeout = connectTimeout;
    }

    /**
     * Getter for NetReadTimeout.
     * The number of seconds to wait for more data from a connection before aborting the read.
     * @return Returns the Integer
     */
    @JsonGetter("net_read_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getNetReadTimeout() {
        return netReadTimeout;
    }

    /**
     * Setter for NetReadTimeout.
     * The number of seconds to wait for more data from a connection before aborting the read.
     * @param netReadTimeout Value for Integer
     */
    @JsonSetter("net_read_timeout")
    public void setNetReadTimeout(Integer netReadTimeout) {
        this.netReadTimeout = netReadTimeout;
    }

    /**
     * Getter for InnodbLockWaitTimeout.
     * The length of time in seconds an InnoDB transaction waits for a row lock before giving up.
     * Default is 120.
     * @return Returns the Integer
     */
    @JsonGetter("innodb_lock_wait_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInnodbLockWaitTimeout() {
        return innodbLockWaitTimeout;
    }

    /**
     * Setter for InnodbLockWaitTimeout.
     * The length of time in seconds an InnoDB transaction waits for a row lock before giving up.
     * Default is 120.
     * @param innodbLockWaitTimeout Value for Integer
     */
    @JsonSetter("innodb_lock_wait_timeout")
    public void setInnodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
        this.innodbLockWaitTimeout = innodbLockWaitTimeout;
    }

    /**
     * Getter for WaitTimeout.
     * The number of seconds the server waits for activity on a noninteractive connection before
     * closing it.
     * @return Returns the Integer
     */
    @JsonGetter("wait_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getWaitTimeout() {
        return waitTimeout;
    }

    /**
     * Setter for WaitTimeout.
     * The number of seconds the server waits for activity on a noninteractive connection before
     * closing it.
     * @param waitTimeout Value for Integer
     */
    @JsonSetter("wait_timeout")
    public void setWaitTimeout(Integer waitTimeout) {
        this.waitTimeout = waitTimeout;
    }

    /**
     * Getter for InnodbRollbackOnTimeout.
     * When enabled a transaction timeout causes InnoDB to abort and roll back the entire
     * transaction. Changing this parameter will lead to a restart of the MySQL service.
     * @return Returns the Boolean
     */
    @JsonGetter("innodb_rollback_on_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getInnodbRollbackOnTimeout() {
        return innodbRollbackOnTimeout;
    }

    /**
     * Setter for InnodbRollbackOnTimeout.
     * When enabled a transaction timeout causes InnoDB to abort and roll back the entire
     * transaction. Changing this parameter will lead to a restart of the MySQL service.
     * @param innodbRollbackOnTimeout Value for Boolean
     */
    @JsonSetter("innodb_rollback_on_timeout")
    public void setInnodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
        this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
    }

    /**
     * Getter for GroupConcatMaxLen.
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * @return Returns the Integer
     */
    @JsonGetter("group_concat_max_len")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getGroupConcatMaxLen() {
        return groupConcatMaxLen;
    }

    /**
     * Setter for GroupConcatMaxLen.
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * @param groupConcatMaxLen Value for Integer
     */
    @JsonSetter("group_concat_max_len")
    public void setGroupConcatMaxLen(Integer groupConcatMaxLen) {
        this.groupConcatMaxLen = groupConcatMaxLen;
    }

    /**
     * Getter for NetBufferLength.
     * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this
     * parameter will lead to a restart of the MySQL service.
     * @return Returns the Integer
     */
    @JsonGetter("net_buffer_length")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getNetBufferLength() {
        return netBufferLength;
    }

    /**
     * Setter for NetBufferLength.
     * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this
     * parameter will lead to a restart of the MySQL service.
     * @param netBufferLength Value for Integer
     */
    @JsonSetter("net_buffer_length")
    public void setNetBufferLength(Integer netBufferLength) {
        this.netBufferLength = netBufferLength;
    }

    /**
     * Getter for InnodbPrintAllDeadlocks.
     * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the
     * error log. Disabled by default.
     * @return Returns the Boolean
     */
    @JsonGetter("innodb_print_all_deadlocks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getInnodbPrintAllDeadlocks() {
        return innodbPrintAllDeadlocks;
    }

    /**
     * Setter for InnodbPrintAllDeadlocks.
     * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the
     * error log. Disabled by default.
     * @param innodbPrintAllDeadlocks Value for Boolean
     */
    @JsonSetter("innodb_print_all_deadlocks")
    public void setInnodbPrintAllDeadlocks(Boolean innodbPrintAllDeadlocks) {
        this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
    }

    /**
     * Getter for InnodbOnlineAlterLogMaxSize.
     * The upper limit in bytes on the size of the temporary log files used during online DDL
     * operations for InnoDB tables.
     * @return Returns the Integer
     */
    @JsonGetter("innodb_online_alter_log_max_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInnodbOnlineAlterLogMaxSize() {
        return innodbOnlineAlterLogMaxSize;
    }

    /**
     * Setter for InnodbOnlineAlterLogMaxSize.
     * The upper limit in bytes on the size of the temporary log files used during online DDL
     * operations for InnoDB tables.
     * @param innodbOnlineAlterLogMaxSize Value for Integer
     */
    @JsonSetter("innodb_online_alter_log_max_size")
    public void setInnodbOnlineAlterLogMaxSize(Integer innodbOnlineAlterLogMaxSize) {
        this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
    }

    /**
     * Getter for InteractiveTimeout.
     * The number of seconds the server waits for activity on an interactive connection before
     * closing it.
     * @return Returns the Integer
     */
    @JsonGetter("interactive_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInteractiveTimeout() {
        return interactiveTimeout;
    }

    /**
     * Setter for InteractiveTimeout.
     * The number of seconds the server waits for activity on an interactive connection before
     * closing it.
     * @param interactiveTimeout Value for Integer
     */
    @JsonSetter("interactive_timeout")
    public void setInteractiveTimeout(Integer interactiveTimeout) {
        this.interactiveTimeout = interactiveTimeout;
    }

    /**
     * Getter for InnodbLogBufferSize.
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * @return Returns the Integer
     */
    @JsonGetter("innodb_log_buffer_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInnodbLogBufferSize() {
        return innodbLogBufferSize;
    }

    /**
     * Setter for InnodbLogBufferSize.
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * @param innodbLogBufferSize Value for Integer
     */
    @JsonSetter("innodb_log_buffer_size")
    public void setInnodbLogBufferSize(Integer innodbLogBufferSize) {
        this.innodbLogBufferSize = innodbLogBufferSize;
    }

    /**
     * Getter for MaxAllowedPacket.
     * Size of the largest message in bytes that can be received by the server. Default is 67108864
     * (64M)
     * @return Returns the Integer
     */
    @JsonGetter("max_allowed_packet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxAllowedPacket() {
        return maxAllowedPacket;
    }

    /**
     * Setter for MaxAllowedPacket.
     * Size of the largest message in bytes that can be received by the server. Default is 67108864
     * (64M)
     * @param maxAllowedPacket Value for Integer
     */
    @JsonSetter("max_allowed_packet")
    public void setMaxAllowedPacket(Integer maxAllowedPacket) {
        this.maxAllowedPacket = maxAllowedPacket;
    }

    /**
     * Getter for MaxHeapTableSize.
     * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216
     * (16M)
     * @return Returns the Integer
     */
    @JsonGetter("max_heap_table_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxHeapTableSize() {
        return maxHeapTableSize;
    }

    /**
     * Setter for MaxHeapTableSize.
     * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216
     * (16M)
     * @param maxHeapTableSize Value for Integer
     */
    @JsonSetter("max_heap_table_size")
    public void setMaxHeapTableSize(Integer maxHeapTableSize) {
        this.maxHeapTableSize = maxHeapTableSize;
    }

    /**
     * Internal Getter for InnodbFtServerStopwordTable.
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB
     * tables.
     * @return Returns the Internal String
     */
    @JsonGetter("innodb_ft_server_stopword_table")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInnodbFtServerStopwordTable() {
        return this.innodbFtServerStopwordTable;
    }

    /**
     * Getter for InnodbFtServerStopwordTable.
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB
     * tables.
     * @return Returns the String
     */
    public String getInnodbFtServerStopwordTable() {
        return OptionalNullable.getFrom(innodbFtServerStopwordTable);
    }

    /**
     * Setter for InnodbFtServerStopwordTable.
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB
     * tables.
     * @param innodbFtServerStopwordTable Value for String
     */
    @JsonSetter("innodb_ft_server_stopword_table")
    public void setInnodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
        this.innodbFtServerStopwordTable = OptionalNullable.of(innodbFtServerStopwordTable);
    }

    /**
     * UnSetter for InnodbFtServerStopwordTable.
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB
     * tables.
     */
    public void unsetInnodbFtServerStopwordTable() {
        innodbFtServerStopwordTable = null;
    }

    /**
     * Getter for InnodbReadIoThreads.
     * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this
     * parameter will lead to a restart of the MySQL service.
     * @return Returns the Integer
     */
    @JsonGetter("innodb_read_io_threads")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInnodbReadIoThreads() {
        return innodbReadIoThreads;
    }

    /**
     * Setter for InnodbReadIoThreads.
     * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this
     * parameter will lead to a restart of the MySQL service.
     * @param innodbReadIoThreads Value for Integer
     */
    @JsonSetter("innodb_read_io_threads")
    public void setInnodbReadIoThreads(Integer innodbReadIoThreads) {
        this.innodbReadIoThreads = innodbReadIoThreads;
    }

    /**
     * Getter for SqlRequirePrimaryKey.
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and
     * fail if missing. It is recommended to always have primary keys because various functionality
     * may break if any large table is missing them.
     * @return Returns the Boolean
     */
    @JsonGetter("sql_require_primary_key")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSqlRequirePrimaryKey() {
        return sqlRequirePrimaryKey;
    }

    /**
     * Setter for SqlRequirePrimaryKey.
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and
     * fail if missing. It is recommended to always have primary keys because various functionality
     * may break if any large table is missing them.
     * @param sqlRequirePrimaryKey Value for Boolean
     */
    @JsonSetter("sql_require_primary_key")
    public void setSqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
        this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
    }

    /**
     * Getter for DefaultTimeZone.
     * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or
     * 'SYSTEM' to use the MySQL server default.
     * @return Returns the String
     */
    @JsonGetter("default_time_zone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDefaultTimeZone() {
        return defaultTimeZone;
    }

    /**
     * Setter for DefaultTimeZone.
     * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or
     * 'SYSTEM' to use the MySQL server default.
     * @param defaultTimeZone Value for String
     */
    @JsonSetter("default_time_zone")
    public void setDefaultTimeZone(String defaultTimeZone) {
        this.defaultTimeZone = defaultTimeZone;
    }

    /**
     * Getter for LongQueryTime.
     * The slow_query_logs work as SQL statements that take more than long_query_time seconds to
     * execute. Default is 10s
     * @return Returns the Double
     */
    @JsonGetter("long_query_time")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLongQueryTime() {
        return longQueryTime;
    }

    /**
     * Setter for LongQueryTime.
     * The slow_query_logs work as SQL statements that take more than long_query_time seconds to
     * execute. Default is 10s
     * @param longQueryTime Value for Double
     */
    @JsonSetter("long_query_time")
    public void setLongQueryTime(Double longQueryTime) {
        this.longQueryTime = longQueryTime;
    }

    /**
     * Converts this MysqlConfConfigurationValues into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "MysqlConfConfigurationValues [" + "netWriteTimeout=" + netWriteTimeout
                + ", internalTmpMemStorageEngine=" + internalTmpMemStorageEngine + ", sqlMode="
                + sqlMode + ", informationSchemaStatsExpiry=" + informationSchemaStatsExpiry
                + ", sortBufferSize=" + sortBufferSize + ", innodbThreadConcurrency="
                + innodbThreadConcurrency + ", innodbWriteIoThreads=" + innodbWriteIoThreads
                + ", innodbFtMinTokenSize=" + innodbFtMinTokenSize + ", innodbChangeBufferMaxSize="
                + innodbChangeBufferMaxSize + ", innodbFlushNeighbors=" + innodbFlushNeighbors
                + ", tmpTableSize=" + tmpTableSize + ", slowQueryLog=" + slowQueryLog
                + ", connectTimeout=" + connectTimeout + ", netReadTimeout=" + netReadTimeout
                + ", innodbLockWaitTimeout=" + innodbLockWaitTimeout + ", waitTimeout="
                + waitTimeout + ", innodbRollbackOnTimeout=" + innodbRollbackOnTimeout
                + ", groupConcatMaxLen=" + groupConcatMaxLen + ", netBufferLength="
                + netBufferLength + ", innodbPrintAllDeadlocks=" + innodbPrintAllDeadlocks
                + ", innodbOnlineAlterLogMaxSize=" + innodbOnlineAlterLogMaxSize
                + ", interactiveTimeout=" + interactiveTimeout + ", innodbLogBufferSize="
                + innodbLogBufferSize + ", maxAllowedPacket=" + maxAllowedPacket
                + ", maxHeapTableSize=" + maxHeapTableSize + ", innodbFtServerStopwordTable="
                + innodbFtServerStopwordTable + ", innodbReadIoThreads=" + innodbReadIoThreads
                + ", sqlRequirePrimaryKey=" + sqlRequirePrimaryKey + ", defaultTimeZone="
                + defaultTimeZone + ", longQueryTime=" + longQueryTime + "]";
    }

    /**
     * Builds a new {@link MysqlConfConfigurationValues.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link MysqlConfConfigurationValues.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .netWriteTimeout(getNetWriteTimeout())
                .internalTmpMemStorageEngine(getInternalTmpMemStorageEngine())
                .sqlMode(getSqlMode())
                .informationSchemaStatsExpiry(getInformationSchemaStatsExpiry())
                .sortBufferSize(getSortBufferSize())
                .innodbThreadConcurrency(getInnodbThreadConcurrency())
                .innodbWriteIoThreads(getInnodbWriteIoThreads())
                .innodbFtMinTokenSize(getInnodbFtMinTokenSize())
                .innodbChangeBufferMaxSize(getInnodbChangeBufferMaxSize())
                .innodbFlushNeighbors(getInnodbFlushNeighbors())
                .tmpTableSize(getTmpTableSize())
                .slowQueryLog(getSlowQueryLog())
                .connectTimeout(getConnectTimeout())
                .netReadTimeout(getNetReadTimeout())
                .innodbLockWaitTimeout(getInnodbLockWaitTimeout())
                .waitTimeout(getWaitTimeout())
                .innodbRollbackOnTimeout(getInnodbRollbackOnTimeout())
                .groupConcatMaxLen(getGroupConcatMaxLen())
                .netBufferLength(getNetBufferLength())
                .innodbPrintAllDeadlocks(getInnodbPrintAllDeadlocks())
                .innodbOnlineAlterLogMaxSize(getInnodbOnlineAlterLogMaxSize())
                .interactiveTimeout(getInteractiveTimeout())
                .innodbLogBufferSize(getInnodbLogBufferSize())
                .maxAllowedPacket(getMaxAllowedPacket())
                .maxHeapTableSize(getMaxHeapTableSize())
                .innodbReadIoThreads(getInnodbReadIoThreads())
                .sqlRequirePrimaryKey(getSqlRequirePrimaryKey())
                .defaultTimeZone(getDefaultTimeZone())
                .longQueryTime(getLongQueryTime());
        builder.innodbFtServerStopwordTable = internalGetInnodbFtServerStopwordTable();
        return builder;
    }

    /**
     * Class to build instances of {@link MysqlConfConfigurationValues}.
     */
    public static class Builder {
        private Integer netWriteTimeout;
        private InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine;
        private String sqlMode;
        private Integer informationSchemaStatsExpiry;
        private Integer sortBufferSize;
        private Integer innodbThreadConcurrency;
        private Integer innodbWriteIoThreads;
        private Integer innodbFtMinTokenSize;
        private Integer innodbChangeBufferMaxSize;
        private Integer innodbFlushNeighbors;
        private Integer tmpTableSize;
        private Boolean slowQueryLog;
        private Integer connectTimeout;
        private Integer netReadTimeout;
        private Integer innodbLockWaitTimeout;
        private Integer waitTimeout;
        private Boolean innodbRollbackOnTimeout;
        private Integer groupConcatMaxLen;
        private Integer netBufferLength;
        private Boolean innodbPrintAllDeadlocks;
        private Integer innodbOnlineAlterLogMaxSize;
        private Integer interactiveTimeout;
        private Integer innodbLogBufferSize;
        private Integer maxAllowedPacket;
        private Integer maxHeapTableSize;
        private OptionalNullable<String> innodbFtServerStopwordTable;
        private Integer innodbReadIoThreads;
        private Boolean sqlRequirePrimaryKey;
        private String defaultTimeZone;
        private Double longQueryTime;



        /**
         * Setter for netWriteTimeout.
         * @param  netWriteTimeout  Integer value for netWriteTimeout.
         * @return Builder
         */
        public Builder netWriteTimeout(Integer netWriteTimeout) {
            this.netWriteTimeout = netWriteTimeout;
            return this;
        }

        /**
         * Setter for internalTmpMemStorageEngine.
         * @param  internalTmpMemStorageEngine  InternalTmpMemStorageEngineEnum value for
         *         internalTmpMemStorageEngine.
         * @return Builder
         */
        public Builder internalTmpMemStorageEngine(
                InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine) {
            this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
            return this;
        }

        /**
         * Setter for sqlMode.
         * @param  sqlMode  String value for sqlMode.
         * @return Builder
         */
        public Builder sqlMode(String sqlMode) {
            this.sqlMode = sqlMode;
            return this;
        }

        /**
         * Setter for informationSchemaStatsExpiry.
         * @param  informationSchemaStatsExpiry  Integer value for informationSchemaStatsExpiry.
         * @return Builder
         */
        public Builder informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
            this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }

        /**
         * Setter for sortBufferSize.
         * @param  sortBufferSize  Integer value for sortBufferSize.
         * @return Builder
         */
        public Builder sortBufferSize(Integer sortBufferSize) {
            this.sortBufferSize = sortBufferSize;
            return this;
        }

        /**
         * Setter for innodbThreadConcurrency.
         * @param  innodbThreadConcurrency  Integer value for innodbThreadConcurrency.
         * @return Builder
         */
        public Builder innodbThreadConcurrency(Integer innodbThreadConcurrency) {
            this.innodbThreadConcurrency = innodbThreadConcurrency;
            return this;
        }

        /**
         * Setter for innodbWriteIoThreads.
         * @param  innodbWriteIoThreads  Integer value for innodbWriteIoThreads.
         * @return Builder
         */
        public Builder innodbWriteIoThreads(Integer innodbWriteIoThreads) {
            this.innodbWriteIoThreads = innodbWriteIoThreads;
            return this;
        }

        /**
         * Setter for innodbFtMinTokenSize.
         * @param  innodbFtMinTokenSize  Integer value for innodbFtMinTokenSize.
         * @return Builder
         */
        public Builder innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
            this.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }

        /**
         * Setter for innodbChangeBufferMaxSize.
         * @param  innodbChangeBufferMaxSize  Integer value for innodbChangeBufferMaxSize.
         * @return Builder
         */
        public Builder innodbChangeBufferMaxSize(Integer innodbChangeBufferMaxSize) {
            this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
            return this;
        }

        /**
         * Setter for innodbFlushNeighbors.
         * @param  innodbFlushNeighbors  Integer value for innodbFlushNeighbors.
         * @return Builder
         */
        public Builder innodbFlushNeighbors(Integer innodbFlushNeighbors) {
            this.innodbFlushNeighbors = innodbFlushNeighbors;
            return this;
        }

        /**
         * Setter for tmpTableSize.
         * @param  tmpTableSize  Integer value for tmpTableSize.
         * @return Builder
         */
        public Builder tmpTableSize(Integer tmpTableSize) {
            this.tmpTableSize = tmpTableSize;
            return this;
        }

        /**
         * Setter for slowQueryLog.
         * @param  slowQueryLog  Boolean value for slowQueryLog.
         * @return Builder
         */
        public Builder slowQueryLog(Boolean slowQueryLog) {
            this.slowQueryLog = slowQueryLog;
            return this;
        }

        /**
         * Setter for connectTimeout.
         * @param  connectTimeout  Integer value for connectTimeout.
         * @return Builder
         */
        public Builder connectTimeout(Integer connectTimeout) {
            this.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * Setter for netReadTimeout.
         * @param  netReadTimeout  Integer value for netReadTimeout.
         * @return Builder
         */
        public Builder netReadTimeout(Integer netReadTimeout) {
            this.netReadTimeout = netReadTimeout;
            return this;
        }

        /**
         * Setter for innodbLockWaitTimeout.
         * @param  innodbLockWaitTimeout  Integer value for innodbLockWaitTimeout.
         * @return Builder
         */
        public Builder innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
            this.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }

        /**
         * Setter for waitTimeout.
         * @param  waitTimeout  Integer value for waitTimeout.
         * @return Builder
         */
        public Builder waitTimeout(Integer waitTimeout) {
            this.waitTimeout = waitTimeout;
            return this;
        }

        /**
         * Setter for innodbRollbackOnTimeout.
         * @param  innodbRollbackOnTimeout  Boolean value for innodbRollbackOnTimeout.
         * @return Builder
         */
        public Builder innodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
            this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
            return this;
        }

        /**
         * Setter for groupConcatMaxLen.
         * @param  groupConcatMaxLen  Integer value for groupConcatMaxLen.
         * @return Builder
         */
        public Builder groupConcatMaxLen(Integer groupConcatMaxLen) {
            this.groupConcatMaxLen = groupConcatMaxLen;
            return this;
        }

        /**
         * Setter for netBufferLength.
         * @param  netBufferLength  Integer value for netBufferLength.
         * @return Builder
         */
        public Builder netBufferLength(Integer netBufferLength) {
            this.netBufferLength = netBufferLength;
            return this;
        }

        /**
         * Setter for innodbPrintAllDeadlocks.
         * @param  innodbPrintAllDeadlocks  Boolean value for innodbPrintAllDeadlocks.
         * @return Builder
         */
        public Builder innodbPrintAllDeadlocks(Boolean innodbPrintAllDeadlocks) {
            this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
            return this;
        }

        /**
         * Setter for innodbOnlineAlterLogMaxSize.
         * @param  innodbOnlineAlterLogMaxSize  Integer value for innodbOnlineAlterLogMaxSize.
         * @return Builder
         */
        public Builder innodbOnlineAlterLogMaxSize(Integer innodbOnlineAlterLogMaxSize) {
            this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            return this;
        }

        /**
         * Setter for interactiveTimeout.
         * @param  interactiveTimeout  Integer value for interactiveTimeout.
         * @return Builder
         */
        public Builder interactiveTimeout(Integer interactiveTimeout) {
            this.interactiveTimeout = interactiveTimeout;
            return this;
        }

        /**
         * Setter for innodbLogBufferSize.
         * @param  innodbLogBufferSize  Integer value for innodbLogBufferSize.
         * @return Builder
         */
        public Builder innodbLogBufferSize(Integer innodbLogBufferSize) {
            this.innodbLogBufferSize = innodbLogBufferSize;
            return this;
        }

        /**
         * Setter for maxAllowedPacket.
         * @param  maxAllowedPacket  Integer value for maxAllowedPacket.
         * @return Builder
         */
        public Builder maxAllowedPacket(Integer maxAllowedPacket) {
            this.maxAllowedPacket = maxAllowedPacket;
            return this;
        }

        /**
         * Setter for maxHeapTableSize.
         * @param  maxHeapTableSize  Integer value for maxHeapTableSize.
         * @return Builder
         */
        public Builder maxHeapTableSize(Integer maxHeapTableSize) {
            this.maxHeapTableSize = maxHeapTableSize;
            return this;
        }

        /**
         * Setter for innodbFtServerStopwordTable.
         * @param  innodbFtServerStopwordTable  String value for innodbFtServerStopwordTable.
         * @return Builder
         */
        public Builder innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
            this.innodbFtServerStopwordTable = OptionalNullable.of(innodbFtServerStopwordTable);
            return this;
        }

        /**
         * UnSetter for innodbFtServerStopwordTable.
         * @return Builder
         */
        public Builder unsetInnodbFtServerStopwordTable() {
            innodbFtServerStopwordTable = null;
            return this;
        }

        /**
         * Setter for innodbReadIoThreads.
         * @param  innodbReadIoThreads  Integer value for innodbReadIoThreads.
         * @return Builder
         */
        public Builder innodbReadIoThreads(Integer innodbReadIoThreads) {
            this.innodbReadIoThreads = innodbReadIoThreads;
            return this;
        }

        /**
         * Setter for sqlRequirePrimaryKey.
         * @param  sqlRequirePrimaryKey  Boolean value for sqlRequirePrimaryKey.
         * @return Builder
         */
        public Builder sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
            this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }

        /**
         * Setter for defaultTimeZone.
         * @param  defaultTimeZone  String value for defaultTimeZone.
         * @return Builder
         */
        public Builder defaultTimeZone(String defaultTimeZone) {
            this.defaultTimeZone = defaultTimeZone;
            return this;
        }

        /**
         * Setter for longQueryTime.
         * @param  longQueryTime  Double value for longQueryTime.
         * @return Builder
         */
        public Builder longQueryTime(Double longQueryTime) {
            this.longQueryTime = longQueryTime;
            return this;
        }

        /**
         * Builds a new {@link MysqlConfConfigurationValues} object using the set fields.
         * @return {@link MysqlConfConfigurationValues}
         */
        public MysqlConfConfigurationValues build() {
            return new MysqlConfConfigurationValues(netWriteTimeout, internalTmpMemStorageEngine,
                    sqlMode, informationSchemaStatsExpiry, sortBufferSize, innodbThreadConcurrency,
                    innodbWriteIoThreads, innodbFtMinTokenSize, innodbChangeBufferMaxSize,
                    innodbFlushNeighbors, tmpTableSize, slowQueryLog, connectTimeout,
                    netReadTimeout, innodbLockWaitTimeout, waitTimeout, innodbRollbackOnTimeout,
                    groupConcatMaxLen, netBufferLength, innodbPrintAllDeadlocks,
                    innodbOnlineAlterLogMaxSize, interactiveTimeout, innodbLogBufferSize,
                    maxAllowedPacket, maxHeapTableSize, innodbFtServerStopwordTable,
                    innodbReadIoThreads, sqlRequirePrimaryKey, defaultTimeZone, longQueryTime);
        }
    }
}
