/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for IndexTemplate type.
 */
public class IndexTemplate {
    private Long mappingNestedObjectsLimit;
    private Long numberOfReplicas;
    private Long numberOfShards;

    /**
     * Default constructor.
     */
    public IndexTemplate() {
    }

    /**
     * Initialization constructor.
     * @param  mappingNestedObjectsLimit  Long value for mappingNestedObjectsLimit.
     * @param  numberOfReplicas  Long value for numberOfReplicas.
     * @param  numberOfShards  Long value for numberOfShards.
     */
    public IndexTemplate(
            Long mappingNestedObjectsLimit,
            Long numberOfReplicas,
            Long numberOfShards) {
        this.mappingNestedObjectsLimit = mappingNestedObjectsLimit;
        this.numberOfReplicas = numberOfReplicas;
        this.numberOfShards = numberOfShards;
    }

    /**
     * Getter for MappingNestedObjectsLimit.
     * The maximum number of nested JSON objects that a single document can contain across all
     * nested types. This limit helps to prevent out of memory errors when a document contains too
     * many nested objects. Default is 10000.
     * @return Returns the Long
     */
    @JsonGetter("mapping-nested-objects-limit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getMappingNestedObjectsLimit() {
        return mappingNestedObjectsLimit;
    }

    /**
     * Setter for MappingNestedObjectsLimit.
     * The maximum number of nested JSON objects that a single document can contain across all
     * nested types. This limit helps to prevent out of memory errors when a document contains too
     * many nested objects. Default is 10000.
     * @param mappingNestedObjectsLimit Value for Long
     */
    @JsonSetter("mapping-nested-objects-limit")
    public void setMappingNestedObjectsLimit(Long mappingNestedObjectsLimit) {
        this.mappingNestedObjectsLimit = mappingNestedObjectsLimit;
    }

    /**
     * Getter for NumberOfReplicas.
     * The number of replicas each primary shard has.
     * @return Returns the Long
     */
    @JsonGetter("number-of-replicas")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNumberOfReplicas() {
        return numberOfReplicas;
    }

    /**
     * Setter for NumberOfReplicas.
     * The number of replicas each primary shard has.
     * @param numberOfReplicas Value for Long
     */
    @JsonSetter("number-of-replicas")
    public void setNumberOfReplicas(Long numberOfReplicas) {
        this.numberOfReplicas = numberOfReplicas;
    }

    /**
     * Getter for NumberOfShards.
     * The number of primary shards that an index should have.
     * @return Returns the Long
     */
    @JsonGetter("number-of-shards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNumberOfShards() {
        return numberOfShards;
    }

    /**
     * Setter for NumberOfShards.
     * The number of primary shards that an index should have.
     * @param numberOfShards Value for Long
     */
    @JsonSetter("number-of-shards")
    public void setNumberOfShards(Long numberOfShards) {
        this.numberOfShards = numberOfShards;
    }

    /**
     * Converts this IndexTemplate into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "IndexTemplate [" + "mappingNestedObjectsLimit=" + mappingNestedObjectsLimit
                + ", numberOfReplicas=" + numberOfReplicas + ", numberOfShards=" + numberOfShards
                + "]";
    }

    /**
     * Builds a new {@link IndexTemplate.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link IndexTemplate.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .mappingNestedObjectsLimit(getMappingNestedObjectsLimit())
                .numberOfReplicas(getNumberOfReplicas())
                .numberOfShards(getNumberOfShards());
        return builder;
    }

    /**
     * Class to build instances of {@link IndexTemplate}.
     */
    public static class Builder {
        private Long mappingNestedObjectsLimit;
        private Long numberOfReplicas;
        private Long numberOfShards;



        /**
         * Setter for mappingNestedObjectsLimit.
         * @param  mappingNestedObjectsLimit  Long value for mappingNestedObjectsLimit.
         * @return Builder
         */
        public Builder mappingNestedObjectsLimit(Long mappingNestedObjectsLimit) {
            this.mappingNestedObjectsLimit = mappingNestedObjectsLimit;
            return this;
        }

        /**
         * Setter for numberOfReplicas.
         * @param  numberOfReplicas  Long value for numberOfReplicas.
         * @return Builder
         */
        public Builder numberOfReplicas(Long numberOfReplicas) {
            this.numberOfReplicas = numberOfReplicas;
            return this;
        }

        /**
         * Setter for numberOfShards.
         * @param  numberOfShards  Long value for numberOfShards.
         * @return Builder
         */
        public Builder numberOfShards(Long numberOfShards) {
            this.numberOfShards = numberOfShards;
            return this;
        }

        /**
         * Builds a new {@link IndexTemplate} object using the set fields.
         * @return {@link IndexTemplate}
         */
        public IndexTemplate build() {
            return new IndexTemplate(mappingNestedObjectsLimit, numberOfReplicas, numberOfShards);
        }
    }
}
