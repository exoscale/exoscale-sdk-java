/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Redis connection information properties
 */
@Schema(description = "Redis connection information properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class DbaasserviceredisConnectioninfo {
  @JsonProperty("uri")
  private List<String> uri = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("slave")
  private List<String> slave = null;

  public DbaasserviceredisConnectioninfo uri(List<String> uri) {
    this.uri = uri;
    return this;
  }

  public DbaasserviceredisConnectioninfo addUriItem(String uriItem) {
    if (this.uri == null) {
      this.uri = new ArrayList<>();
    }
    this.uri.add(uriItem);
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @Schema(description = "")
  public List<String> getUri() {
    return uri;
  }

  public void setUri(List<String> uri) {
    this.uri = uri;
  }

  public DbaasserviceredisConnectioninfo password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @Schema(description = "")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public DbaasserviceredisConnectioninfo slave(List<String> slave) {
    this.slave = slave;
    return this;
  }

  public DbaasserviceredisConnectioninfo addSlaveItem(String slaveItem) {
    if (this.slave == null) {
      this.slave = new ArrayList<>();
    }
    this.slave.add(slaveItem);
    return this;
  }

   /**
   * Get slave
   * @return slave
  **/
  @Schema(description = "")
  public List<String> getSlave() {
    return slave;
  }

  public void setSlave(List<String> slave) {
    this.slave = slave;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasserviceredisConnectioninfo dbaasserviceredisConnectioninfo = (DbaasserviceredisConnectioninfo) o;
    return Objects.equals(this.uri, dbaasserviceredisConnectioninfo.uri) &&
        Objects.equals(this.password, dbaasserviceredisConnectioninfo.password) &&
        Objects.equals(this.slave, dbaasserviceredisConnectioninfo.slave);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, password, slave);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasserviceredisConnectioninfo {\n");
    
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    slave: ").append(toIndentedString(slave)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
