/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GetDbaasSettingsKafkaSettings {

    /**
     * Kafka broker configuration values
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka")
    private Optional<? extends Kafka> kafka;

    /**
     * Kafka Connect configuration values
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-connect")
    private Optional<? extends KafkaConnect> kafkaConnect;

    /**
     * Kafka REST configuration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-rest")
    private Optional<? extends KafkaRest> kafkaRest;

    /**
     * Schema Registry configuration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema-registry")
    private Optional<? extends SchemaRegistry> schemaRegistry;

    public GetDbaasSettingsKafkaSettings(
            @JsonProperty("kafka") Optional<? extends Kafka> kafka,
            @JsonProperty("kafka-connect") Optional<? extends KafkaConnect> kafkaConnect,
            @JsonProperty("kafka-rest") Optional<? extends KafkaRest> kafkaRest,
            @JsonProperty("schema-registry") Optional<? extends SchemaRegistry> schemaRegistry) {
        Utils.checkNotNull(kafka, "kafka");
        Utils.checkNotNull(kafkaConnect, "kafkaConnect");
        Utils.checkNotNull(kafkaRest, "kafkaRest");
        Utils.checkNotNull(schemaRegistry, "schemaRegistry");
        this.kafka = kafka;
        this.kafkaConnect = kafkaConnect;
        this.kafkaRest = kafkaRest;
        this.schemaRegistry = schemaRegistry;
    }

    /**
     * Kafka broker configuration values
     */
    public Optional<? extends Kafka> kafka() {
        return kafka;
    }

    /**
     * Kafka Connect configuration values
     */
    public Optional<? extends KafkaConnect> kafkaConnect() {
        return kafkaConnect;
    }

    /**
     * Kafka REST configuration
     */
    public Optional<? extends KafkaRest> kafkaRest() {
        return kafkaRest;
    }

    /**
     * Schema Registry configuration
     */
    public Optional<? extends SchemaRegistry> schemaRegistry() {
        return schemaRegistry;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Kafka broker configuration values
     */
    public GetDbaasSettingsKafkaSettings withKafka(Kafka kafka) {
        Utils.checkNotNull(kafka, "kafka");
        this.kafka = Optional.ofNullable(kafka);
        return this;
    }

    /**
     * Kafka broker configuration values
     */
    public GetDbaasSettingsKafkaSettings withKafka(Optional<? extends Kafka> kafka) {
        Utils.checkNotNull(kafka, "kafka");
        this.kafka = kafka;
        return this;
    }

    /**
     * Kafka Connect configuration values
     */
    public GetDbaasSettingsKafkaSettings withKafkaConnect(KafkaConnect kafkaConnect) {
        Utils.checkNotNull(kafkaConnect, "kafkaConnect");
        this.kafkaConnect = Optional.ofNullable(kafkaConnect);
        return this;
    }

    /**
     * Kafka Connect configuration values
     */
    public GetDbaasSettingsKafkaSettings withKafkaConnect(Optional<? extends KafkaConnect> kafkaConnect) {
        Utils.checkNotNull(kafkaConnect, "kafkaConnect");
        this.kafkaConnect = kafkaConnect;
        return this;
    }

    /**
     * Kafka REST configuration
     */
    public GetDbaasSettingsKafkaSettings withKafkaRest(KafkaRest kafkaRest) {
        Utils.checkNotNull(kafkaRest, "kafkaRest");
        this.kafkaRest = Optional.ofNullable(kafkaRest);
        return this;
    }

    /**
     * Kafka REST configuration
     */
    public GetDbaasSettingsKafkaSettings withKafkaRest(Optional<? extends KafkaRest> kafkaRest) {
        Utils.checkNotNull(kafkaRest, "kafkaRest");
        this.kafkaRest = kafkaRest;
        return this;
    }

    /**
     * Schema Registry configuration
     */
    public GetDbaasSettingsKafkaSettings withSchemaRegistry(SchemaRegistry schemaRegistry) {
        Utils.checkNotNull(schemaRegistry, "schemaRegistry");
        this.schemaRegistry = Optional.ofNullable(schemaRegistry);
        return this;
    }

    /**
     * Schema Registry configuration
     */
    public GetDbaasSettingsKafkaSettings withSchemaRegistry(Optional<? extends SchemaRegistry> schemaRegistry) {
        Utils.checkNotNull(schemaRegistry, "schemaRegistry");
        this.schemaRegistry = schemaRegistry;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDbaasSettingsKafkaSettings other = (GetDbaasSettingsKafkaSettings) o;
        return 
            java.util.Objects.deepEquals(this.kafka, other.kafka) &&
            java.util.Objects.deepEquals(this.kafkaConnect, other.kafkaConnect) &&
            java.util.Objects.deepEquals(this.kafkaRest, other.kafkaRest) &&
            java.util.Objects.deepEquals(this.schemaRegistry, other.schemaRegistry);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            kafka,
            kafkaConnect,
            kafkaRest,
            schemaRegistry);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDbaasSettingsKafkaSettings.class,
                "kafka", kafka,
                "kafkaConnect", kafkaConnect,
                "kafkaRest", kafkaRest,
                "schemaRegistry", schemaRegistry);
    }
    
    public final static class Builder {
 
        private Optional<? extends Kafka> kafka = Optional.empty();
 
        private Optional<? extends KafkaConnect> kafkaConnect = Optional.empty();
 
        private Optional<? extends KafkaRest> kafkaRest = Optional.empty();
 
        private Optional<? extends SchemaRegistry> schemaRegistry = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Kafka broker configuration values
         */
        public Builder kafka(Kafka kafka) {
            Utils.checkNotNull(kafka, "kafka");
            this.kafka = Optional.ofNullable(kafka);
            return this;
        }

        /**
         * Kafka broker configuration values
         */
        public Builder kafka(Optional<? extends Kafka> kafka) {
            Utils.checkNotNull(kafka, "kafka");
            this.kafka = kafka;
            return this;
        }

        /**
         * Kafka Connect configuration values
         */
        public Builder kafkaConnect(KafkaConnect kafkaConnect) {
            Utils.checkNotNull(kafkaConnect, "kafkaConnect");
            this.kafkaConnect = Optional.ofNullable(kafkaConnect);
            return this;
        }

        /**
         * Kafka Connect configuration values
         */
        public Builder kafkaConnect(Optional<? extends KafkaConnect> kafkaConnect) {
            Utils.checkNotNull(kafkaConnect, "kafkaConnect");
            this.kafkaConnect = kafkaConnect;
            return this;
        }

        /**
         * Kafka REST configuration
         */
        public Builder kafkaRest(KafkaRest kafkaRest) {
            Utils.checkNotNull(kafkaRest, "kafkaRest");
            this.kafkaRest = Optional.ofNullable(kafkaRest);
            return this;
        }

        /**
         * Kafka REST configuration
         */
        public Builder kafkaRest(Optional<? extends KafkaRest> kafkaRest) {
            Utils.checkNotNull(kafkaRest, "kafkaRest");
            this.kafkaRest = kafkaRest;
            return this;
        }

        /**
         * Schema Registry configuration
         */
        public Builder schemaRegistry(SchemaRegistry schemaRegistry) {
            Utils.checkNotNull(schemaRegistry, "schemaRegistry");
            this.schemaRegistry = Optional.ofNullable(schemaRegistry);
            return this;
        }

        /**
         * Schema Registry configuration
         */
        public Builder schemaRegistry(Optional<? extends SchemaRegistry> schemaRegistry) {
            Utils.checkNotNull(schemaRegistry, "schemaRegistry");
            this.schemaRegistry = schemaRegistry;
            return this;
        }
        
        public GetDbaasSettingsKafkaSettings build() {
            return new GetDbaasSettingsKafkaSettings(
                kafka,
                kafkaConnect,
                kafkaRest,
                schemaRegistry);
        }
    }
}

