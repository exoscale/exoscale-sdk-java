/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * JsonSchemaMysql
 */
@JsonPropertyOrder({
  JsonSchemaMysql.JSON_PROPERTY_NET_WRITE_TIMEOUT,
  JsonSchemaMysql.JSON_PROPERTY_INTERNAL_TMP_MEM_STORAGE_ENGINE,
  JsonSchemaMysql.JSON_PROPERTY_SQL_MODE,
  JsonSchemaMysql.JSON_PROPERTY_INFORMATION_SCHEMA_STATS_EXPIRY,
  JsonSchemaMysql.JSON_PROPERTY_SORT_BUFFER_SIZE,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_THREAD_CONCURRENCY,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_WRITE_IO_THREADS,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_FT_MIN_TOKEN_SIZE,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_CHANGE_BUFFER_MAX_SIZE,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_FLUSH_NEIGHBORS,
  JsonSchemaMysql.JSON_PROPERTY_TMP_TABLE_SIZE,
  JsonSchemaMysql.JSON_PROPERTY_SLOW_QUERY_LOG,
  JsonSchemaMysql.JSON_PROPERTY_CONNECT_TIMEOUT,
  JsonSchemaMysql.JSON_PROPERTY_NET_READ_TIMEOUT,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_LOCK_WAIT_TIMEOUT,
  JsonSchemaMysql.JSON_PROPERTY_WAIT_TIMEOUT,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_ROLLBACK_ON_TIMEOUT,
  JsonSchemaMysql.JSON_PROPERTY_GROUP_CONCAT_MAX_LEN,
  JsonSchemaMysql.JSON_PROPERTY_NET_BUFFER_LENGTH,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_PRINT_ALL_DEADLOCKS,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_ONLINE_ALTER_LOG_MAX_SIZE,
  JsonSchemaMysql.JSON_PROPERTY_INTERACTIVE_TIMEOUT,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_LOG_BUFFER_SIZE,
  JsonSchemaMysql.JSON_PROPERTY_MAX_ALLOWED_PACKET,
  JsonSchemaMysql.JSON_PROPERTY_MAX_HEAP_TABLE_SIZE,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_FT_SERVER_STOPWORD_TABLE,
  JsonSchemaMysql.JSON_PROPERTY_INNODB_READ_IO_THREADS,
  JsonSchemaMysql.JSON_PROPERTY_SQL_REQUIRE_PRIMARY_KEY,
  JsonSchemaMysql.JSON_PROPERTY_DEFAULT_TIME_ZONE,
  JsonSchemaMysql.JSON_PROPERTY_LONG_QUERY_TIME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-02T12:56:21.011484+02:00[Europe/Vienna]", comments = "Generator version: 7.4.0")
public class JsonSchemaMysql {
  public static final String JSON_PROPERTY_NET_WRITE_TIMEOUT = "net_write_timeout";
  private Integer netWriteTimeout;

  /**
   * The storage engine for in-memory internal temporary tables.
   */
  public enum InternalTmpMemStorageEngineEnum {
    TEMPTABLE("TempTable"),
    
    MEMORY("MEMORY");

    private String value;

    InternalTmpMemStorageEngineEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InternalTmpMemStorageEngineEnum fromValue(String value) {
      for (InternalTmpMemStorageEngineEnum b : InternalTmpMemStorageEngineEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTERNAL_TMP_MEM_STORAGE_ENGINE = "internal_tmp_mem_storage_engine";
  private InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine;

  public static final String JSON_PROPERTY_SQL_MODE = "sql_mode";
  private String sqlMode;

  public static final String JSON_PROPERTY_INFORMATION_SCHEMA_STATS_EXPIRY = "information_schema_stats_expiry";
  private Integer informationSchemaStatsExpiry;

  public static final String JSON_PROPERTY_SORT_BUFFER_SIZE = "sort_buffer_size";
  private Integer sortBufferSize;

  public static final String JSON_PROPERTY_INNODB_THREAD_CONCURRENCY = "innodb_thread_concurrency";
  private Integer innodbThreadConcurrency;

  public static final String JSON_PROPERTY_INNODB_WRITE_IO_THREADS = "innodb_write_io_threads";
  private Integer innodbWriteIoThreads;

  public static final String JSON_PROPERTY_INNODB_FT_MIN_TOKEN_SIZE = "innodb_ft_min_token_size";
  private Integer innodbFtMinTokenSize;

  public static final String JSON_PROPERTY_INNODB_CHANGE_BUFFER_MAX_SIZE = "innodb_change_buffer_max_size";
  private Integer innodbChangeBufferMaxSize;

  public static final String JSON_PROPERTY_INNODB_FLUSH_NEIGHBORS = "innodb_flush_neighbors";
  private Integer innodbFlushNeighbors;

  public static final String JSON_PROPERTY_TMP_TABLE_SIZE = "tmp_table_size";
  private Integer tmpTableSize;

  public static final String JSON_PROPERTY_SLOW_QUERY_LOG = "slow_query_log";
  private Boolean slowQueryLog;

  public static final String JSON_PROPERTY_CONNECT_TIMEOUT = "connect_timeout";
  private Integer connectTimeout;

  public static final String JSON_PROPERTY_NET_READ_TIMEOUT = "net_read_timeout";
  private Integer netReadTimeout;

  public static final String JSON_PROPERTY_INNODB_LOCK_WAIT_TIMEOUT = "innodb_lock_wait_timeout";
  private Integer innodbLockWaitTimeout;

  public static final String JSON_PROPERTY_WAIT_TIMEOUT = "wait_timeout";
  private Integer waitTimeout;

  public static final String JSON_PROPERTY_INNODB_ROLLBACK_ON_TIMEOUT = "innodb_rollback_on_timeout";
  private Boolean innodbRollbackOnTimeout;

  public static final String JSON_PROPERTY_GROUP_CONCAT_MAX_LEN = "group_concat_max_len";
  private Integer groupConcatMaxLen;

  public static final String JSON_PROPERTY_NET_BUFFER_LENGTH = "net_buffer_length";
  private Integer netBufferLength;

  public static final String JSON_PROPERTY_INNODB_PRINT_ALL_DEADLOCKS = "innodb_print_all_deadlocks";
  private Boolean innodbPrintAllDeadlocks;

  public static final String JSON_PROPERTY_INNODB_ONLINE_ALTER_LOG_MAX_SIZE = "innodb_online_alter_log_max_size";
  private Integer innodbOnlineAlterLogMaxSize;

  public static final String JSON_PROPERTY_INTERACTIVE_TIMEOUT = "interactive_timeout";
  private Integer interactiveTimeout;

  public static final String JSON_PROPERTY_INNODB_LOG_BUFFER_SIZE = "innodb_log_buffer_size";
  private Integer innodbLogBufferSize;

  public static final String JSON_PROPERTY_MAX_ALLOWED_PACKET = "max_allowed_packet";
  private Integer maxAllowedPacket;

  public static final String JSON_PROPERTY_MAX_HEAP_TABLE_SIZE = "max_heap_table_size";
  private Integer maxHeapTableSize;

  public static final String JSON_PROPERTY_INNODB_FT_SERVER_STOPWORD_TABLE = "innodb_ft_server_stopword_table";
  private JsonNullable<String> innodbFtServerStopwordTable = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_INNODB_READ_IO_THREADS = "innodb_read_io_threads";
  private Integer innodbReadIoThreads;

  public static final String JSON_PROPERTY_SQL_REQUIRE_PRIMARY_KEY = "sql_require_primary_key";
  private Boolean sqlRequirePrimaryKey;

  public static final String JSON_PROPERTY_DEFAULT_TIME_ZONE = "default_time_zone";
  private String defaultTimeZone;

  public static final String JSON_PROPERTY_LONG_QUERY_TIME = "long_query_time";
  private BigDecimal longQueryTime;

  public JsonSchemaMysql() { 
  }

  public JsonSchemaMysql netWriteTimeout(Integer netWriteTimeout) {
    this.netWriteTimeout = netWriteTimeout;
    return this;
  }

   /**
   * The number of seconds to wait for a block to be written to a connection before aborting the write.
   * minimum: 1
   * maximum: 3600
   * @return netWriteTimeout
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_WRITE_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNetWriteTimeout() {
    return netWriteTimeout;
  }


  @JsonProperty(JSON_PROPERTY_NET_WRITE_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetWriteTimeout(Integer netWriteTimeout) {
    this.netWriteTimeout = netWriteTimeout;
  }


  public JsonSchemaMysql internalTmpMemStorageEngine(InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine) {
    this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
    return this;
  }

   /**
   * The storage engine for in-memory internal temporary tables.
   * @return internalTmpMemStorageEngine
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_TMP_MEM_STORAGE_ENGINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InternalTmpMemStorageEngineEnum getInternalTmpMemStorageEngine() {
    return internalTmpMemStorageEngine;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_TMP_MEM_STORAGE_ENGINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalTmpMemStorageEngine(InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine) {
    this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
  }


  public JsonSchemaMysql sqlMode(String sqlMode) {
    this.sqlMode = sqlMode;
    return this;
  }

   /**
   * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
   * @return sqlMode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SQL_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSqlMode() {
    return sqlMode;
  }


  @JsonProperty(JSON_PROPERTY_SQL_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSqlMode(String sqlMode) {
    this.sqlMode = sqlMode;
  }


  public JsonSchemaMysql informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
    this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
    return this;
  }

   /**
   * The time, in seconds, before cached statistics expire
   * minimum: 900
   * maximum: 31536000
   * @return informationSchemaStatsExpiry
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INFORMATION_SCHEMA_STATS_EXPIRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInformationSchemaStatsExpiry() {
    return informationSchemaStatsExpiry;
  }


  @JsonProperty(JSON_PROPERTY_INFORMATION_SCHEMA_STATS_EXPIRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInformationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
    this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
  }


  public JsonSchemaMysql sortBufferSize(Integer sortBufferSize) {
    this.sortBufferSize = sortBufferSize;
    return this;
  }

   /**
   * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)
   * minimum: 32768
   * maximum: 1073741824
   * @return sortBufferSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORT_BUFFER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSortBufferSize() {
    return sortBufferSize;
  }


  @JsonProperty(JSON_PROPERTY_SORT_BUFFER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortBufferSize(Integer sortBufferSize) {
    this.sortBufferSize = sortBufferSize;
  }


  public JsonSchemaMysql innodbThreadConcurrency(Integer innodbThreadConcurrency) {
    this.innodbThreadConcurrency = innodbThreadConcurrency;
    return this;
  }

   /**
   * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit)
   * minimum: 0
   * maximum: 1000
   * @return innodbThreadConcurrency
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_THREAD_CONCURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInnodbThreadConcurrency() {
    return innodbThreadConcurrency;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_THREAD_CONCURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbThreadConcurrency(Integer innodbThreadConcurrency) {
    this.innodbThreadConcurrency = innodbThreadConcurrency;
  }


  public JsonSchemaMysql innodbWriteIoThreads(Integer innodbWriteIoThreads) {
    this.innodbWriteIoThreads = innodbWriteIoThreads;
    return this;
  }

   /**
   * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
   * minimum: 1
   * maximum: 64
   * @return innodbWriteIoThreads
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_WRITE_IO_THREADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInnodbWriteIoThreads() {
    return innodbWriteIoThreads;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_WRITE_IO_THREADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbWriteIoThreads(Integer innodbWriteIoThreads) {
    this.innodbWriteIoThreads = innodbWriteIoThreads;
  }


  public JsonSchemaMysql innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
    this.innodbFtMinTokenSize = innodbFtMinTokenSize;
    return this;
  }

   /**
   * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
   * minimum: 0
   * maximum: 16
   * @return innodbFtMinTokenSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_FT_MIN_TOKEN_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInnodbFtMinTokenSize() {
    return innodbFtMinTokenSize;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_FT_MIN_TOKEN_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
    this.innodbFtMinTokenSize = innodbFtMinTokenSize;
  }


  public JsonSchemaMysql innodbChangeBufferMaxSize(Integer innodbChangeBufferMaxSize) {
    this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
    return this;
  }

   /**
   * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25
   * minimum: 0
   * maximum: 50
   * @return innodbChangeBufferMaxSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_CHANGE_BUFFER_MAX_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInnodbChangeBufferMaxSize() {
    return innodbChangeBufferMaxSize;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_CHANGE_BUFFER_MAX_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbChangeBufferMaxSize(Integer innodbChangeBufferMaxSize) {
    this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
  }


  public JsonSchemaMysql innodbFlushNeighbors(Integer innodbFlushNeighbors) {
    this.innodbFlushNeighbors = innodbFlushNeighbors;
    return this;
  }

   /**
   * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed,  1 - flush contiguous dirty pages in the same extent,  2 - flush dirty pages in the same extent
   * minimum: 0
   * maximum: 2
   * @return innodbFlushNeighbors
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_FLUSH_NEIGHBORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInnodbFlushNeighbors() {
    return innodbFlushNeighbors;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_FLUSH_NEIGHBORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbFlushNeighbors(Integer innodbFlushNeighbors) {
    this.innodbFlushNeighbors = innodbFlushNeighbors;
  }


  public JsonSchemaMysql tmpTableSize(Integer tmpTableSize) {
    this.tmpTableSize = tmpTableSize;
    return this;
  }

   /**
   * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M)
   * minimum: 1048576
   * maximum: 1073741824
   * @return tmpTableSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TMP_TABLE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTmpTableSize() {
    return tmpTableSize;
  }


  @JsonProperty(JSON_PROPERTY_TMP_TABLE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTmpTableSize(Integer tmpTableSize) {
    this.tmpTableSize = tmpTableSize;
  }


  public JsonSchemaMysql slowQueryLog(Boolean slowQueryLog) {
    this.slowQueryLog = slowQueryLog;
    return this;
  }

   /**
   * Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off
   * @return slowQueryLog
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLOW_QUERY_LOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSlowQueryLog() {
    return slowQueryLog;
  }


  @JsonProperty(JSON_PROPERTY_SLOW_QUERY_LOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlowQueryLog(Boolean slowQueryLog) {
    this.slowQueryLog = slowQueryLog;
  }


  public JsonSchemaMysql connectTimeout(Integer connectTimeout) {
    this.connectTimeout = connectTimeout;
    return this;
  }

   /**
   * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake
   * minimum: 2
   * maximum: 3600
   * @return connectTimeout
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECT_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getConnectTimeout() {
    return connectTimeout;
  }


  @JsonProperty(JSON_PROPERTY_CONNECT_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectTimeout(Integer connectTimeout) {
    this.connectTimeout = connectTimeout;
  }


  public JsonSchemaMysql netReadTimeout(Integer netReadTimeout) {
    this.netReadTimeout = netReadTimeout;
    return this;
  }

   /**
   * The number of seconds to wait for more data from a connection before aborting the read.
   * minimum: 1
   * maximum: 3600
   * @return netReadTimeout
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_READ_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNetReadTimeout() {
    return netReadTimeout;
  }


  @JsonProperty(JSON_PROPERTY_NET_READ_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetReadTimeout(Integer netReadTimeout) {
    this.netReadTimeout = netReadTimeout;
  }


  public JsonSchemaMysql innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
    this.innodbLockWaitTimeout = innodbLockWaitTimeout;
    return this;
  }

   /**
   * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
   * minimum: 1
   * maximum: 3600
   * @return innodbLockWaitTimeout
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_LOCK_WAIT_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInnodbLockWaitTimeout() {
    return innodbLockWaitTimeout;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_LOCK_WAIT_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
    this.innodbLockWaitTimeout = innodbLockWaitTimeout;
  }


  public JsonSchemaMysql waitTimeout(Integer waitTimeout) {
    this.waitTimeout = waitTimeout;
    return this;
  }

   /**
   * The number of seconds the server waits for activity on a noninteractive connection before closing it.
   * minimum: 1
   * maximum: 2147483
   * @return waitTimeout
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WAIT_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWaitTimeout() {
    return waitTimeout;
  }


  @JsonProperty(JSON_PROPERTY_WAIT_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWaitTimeout(Integer waitTimeout) {
    this.waitTimeout = waitTimeout;
  }


  public JsonSchemaMysql innodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
    this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
    return this;
  }

   /**
   * When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
   * @return innodbRollbackOnTimeout
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_ROLLBACK_ON_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInnodbRollbackOnTimeout() {
    return innodbRollbackOnTimeout;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_ROLLBACK_ON_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
    this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
  }


  public JsonSchemaMysql groupConcatMaxLen(Integer groupConcatMaxLen) {
    this.groupConcatMaxLen = groupConcatMaxLen;
    return this;
  }

   /**
   * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
   * minimum: 4
   * maximum: -1
   * @return groupConcatMaxLen
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUP_CONCAT_MAX_LEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGroupConcatMaxLen() {
    return groupConcatMaxLen;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_CONCAT_MAX_LEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupConcatMaxLen(Integer groupConcatMaxLen) {
    this.groupConcatMaxLen = groupConcatMaxLen;
  }


  public JsonSchemaMysql netBufferLength(Integer netBufferLength) {
    this.netBufferLength = netBufferLength;
    return this;
  }

   /**
   * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
   * minimum: 1024
   * maximum: 1048576
   * @return netBufferLength
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_BUFFER_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNetBufferLength() {
    return netBufferLength;
  }


  @JsonProperty(JSON_PROPERTY_NET_BUFFER_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetBufferLength(Integer netBufferLength) {
    this.netBufferLength = netBufferLength;
  }


  public JsonSchemaMysql innodbPrintAllDeadlocks(Boolean innodbPrintAllDeadlocks) {
    this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
    return this;
  }

   /**
   * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
   * @return innodbPrintAllDeadlocks
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_PRINT_ALL_DEADLOCKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInnodbPrintAllDeadlocks() {
    return innodbPrintAllDeadlocks;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_PRINT_ALL_DEADLOCKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbPrintAllDeadlocks(Boolean innodbPrintAllDeadlocks) {
    this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
  }


  public JsonSchemaMysql innodbOnlineAlterLogMaxSize(Integer innodbOnlineAlterLogMaxSize) {
    this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
    return this;
  }

   /**
   * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
   * minimum: 65536
   * maximum: 1099511627776
   * @return innodbOnlineAlterLogMaxSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_ONLINE_ALTER_LOG_MAX_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInnodbOnlineAlterLogMaxSize() {
    return innodbOnlineAlterLogMaxSize;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_ONLINE_ALTER_LOG_MAX_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbOnlineAlterLogMaxSize(Integer innodbOnlineAlterLogMaxSize) {
    this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
  }


  public JsonSchemaMysql interactiveTimeout(Integer interactiveTimeout) {
    this.interactiveTimeout = interactiveTimeout;
    return this;
  }

   /**
   * The number of seconds the server waits for activity on an interactive connection before closing it.
   * minimum: 30
   * maximum: 604800
   * @return interactiveTimeout
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERACTIVE_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInteractiveTimeout() {
    return interactiveTimeout;
  }


  @JsonProperty(JSON_PROPERTY_INTERACTIVE_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInteractiveTimeout(Integer interactiveTimeout) {
    this.interactiveTimeout = interactiveTimeout;
  }


  public JsonSchemaMysql innodbLogBufferSize(Integer innodbLogBufferSize) {
    this.innodbLogBufferSize = innodbLogBufferSize;
    return this;
  }

   /**
   * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
   * minimum: 1048576
   * maximum: 4294967295
   * @return innodbLogBufferSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_LOG_BUFFER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInnodbLogBufferSize() {
    return innodbLogBufferSize;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_LOG_BUFFER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbLogBufferSize(Integer innodbLogBufferSize) {
    this.innodbLogBufferSize = innodbLogBufferSize;
  }


  public JsonSchemaMysql maxAllowedPacket(Integer maxAllowedPacket) {
    this.maxAllowedPacket = maxAllowedPacket;
    return this;
  }

   /**
   * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M)
   * minimum: 102400
   * maximum: 1073741824
   * @return maxAllowedPacket
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_ALLOWED_PACKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxAllowedPacket() {
    return maxAllowedPacket;
  }


  @JsonProperty(JSON_PROPERTY_MAX_ALLOWED_PACKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxAllowedPacket(Integer maxAllowedPacket) {
    this.maxAllowedPacket = maxAllowedPacket;
  }


  public JsonSchemaMysql maxHeapTableSize(Integer maxHeapTableSize) {
    this.maxHeapTableSize = maxHeapTableSize;
    return this;
  }

   /**
   * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
   * minimum: 1048576
   * maximum: 1073741824
   * @return maxHeapTableSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_HEAP_TABLE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxHeapTableSize() {
    return maxHeapTableSize;
  }


  @JsonProperty(JSON_PROPERTY_MAX_HEAP_TABLE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxHeapTableSize(Integer maxHeapTableSize) {
    this.maxHeapTableSize = maxHeapTableSize;
  }


  public JsonSchemaMysql innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
    this.innodbFtServerStopwordTable = JsonNullable.<String>of(innodbFtServerStopwordTable);
    return this;
  }

   /**
   * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
   * @return innodbFtServerStopwordTable
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getInnodbFtServerStopwordTable() {
        return innodbFtServerStopwordTable.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INNODB_FT_SERVER_STOPWORD_TABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getInnodbFtServerStopwordTable_JsonNullable() {
    return innodbFtServerStopwordTable;
  }
  
  @JsonProperty(JSON_PROPERTY_INNODB_FT_SERVER_STOPWORD_TABLE)
  public void setInnodbFtServerStopwordTable_JsonNullable(JsonNullable<String> innodbFtServerStopwordTable) {
    this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
  }

  public void setInnodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
    this.innodbFtServerStopwordTable = JsonNullable.<String>of(innodbFtServerStopwordTable);
  }


  public JsonSchemaMysql innodbReadIoThreads(Integer innodbReadIoThreads) {
    this.innodbReadIoThreads = innodbReadIoThreads;
    return this;
  }

   /**
   * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
   * minimum: 1
   * maximum: 64
   * @return innodbReadIoThreads
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNODB_READ_IO_THREADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInnodbReadIoThreads() {
    return innodbReadIoThreads;
  }


  @JsonProperty(JSON_PROPERTY_INNODB_READ_IO_THREADS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnodbReadIoThreads(Integer innodbReadIoThreads) {
    this.innodbReadIoThreads = innodbReadIoThreads;
  }


  public JsonSchemaMysql sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
    this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
    return this;
  }

   /**
   * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
   * @return sqlRequirePrimaryKey
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SQL_REQUIRE_PRIMARY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSqlRequirePrimaryKey() {
    return sqlRequirePrimaryKey;
  }


  @JsonProperty(JSON_PROPERTY_SQL_REQUIRE_PRIMARY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
    this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
  }


  public JsonSchemaMysql defaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
    return this;
  }

   /**
   * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or &#39;SYSTEM&#39; to use the MySQL server default.
   * @return defaultTimeZone
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_TIME_ZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultTimeZone() {
    return defaultTimeZone;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_TIME_ZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
  }


  public JsonSchemaMysql longQueryTime(BigDecimal longQueryTime) {
    this.longQueryTime = longQueryTime;
    return this;
  }

   /**
   * The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s
   * minimum: 0.0
   * maximum: 3600
   * @return longQueryTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LONG_QUERY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getLongQueryTime() {
    return longQueryTime;
  }


  @JsonProperty(JSON_PROPERTY_LONG_QUERY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLongQueryTime(BigDecimal longQueryTime) {
    this.longQueryTime = longQueryTime;
  }


  /**
   * Return true if this json-schema-mysql object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchemaMysql jsonSchemaMysql = (JsonSchemaMysql) o;
    return Objects.equals(this.netWriteTimeout, jsonSchemaMysql.netWriteTimeout) &&
        Objects.equals(this.internalTmpMemStorageEngine, jsonSchemaMysql.internalTmpMemStorageEngine) &&
        Objects.equals(this.sqlMode, jsonSchemaMysql.sqlMode) &&
        Objects.equals(this.informationSchemaStatsExpiry, jsonSchemaMysql.informationSchemaStatsExpiry) &&
        Objects.equals(this.sortBufferSize, jsonSchemaMysql.sortBufferSize) &&
        Objects.equals(this.innodbThreadConcurrency, jsonSchemaMysql.innodbThreadConcurrency) &&
        Objects.equals(this.innodbWriteIoThreads, jsonSchemaMysql.innodbWriteIoThreads) &&
        Objects.equals(this.innodbFtMinTokenSize, jsonSchemaMysql.innodbFtMinTokenSize) &&
        Objects.equals(this.innodbChangeBufferMaxSize, jsonSchemaMysql.innodbChangeBufferMaxSize) &&
        Objects.equals(this.innodbFlushNeighbors, jsonSchemaMysql.innodbFlushNeighbors) &&
        Objects.equals(this.tmpTableSize, jsonSchemaMysql.tmpTableSize) &&
        Objects.equals(this.slowQueryLog, jsonSchemaMysql.slowQueryLog) &&
        Objects.equals(this.connectTimeout, jsonSchemaMysql.connectTimeout) &&
        Objects.equals(this.netReadTimeout, jsonSchemaMysql.netReadTimeout) &&
        Objects.equals(this.innodbLockWaitTimeout, jsonSchemaMysql.innodbLockWaitTimeout) &&
        Objects.equals(this.waitTimeout, jsonSchemaMysql.waitTimeout) &&
        Objects.equals(this.innodbRollbackOnTimeout, jsonSchemaMysql.innodbRollbackOnTimeout) &&
        Objects.equals(this.groupConcatMaxLen, jsonSchemaMysql.groupConcatMaxLen) &&
        Objects.equals(this.netBufferLength, jsonSchemaMysql.netBufferLength) &&
        Objects.equals(this.innodbPrintAllDeadlocks, jsonSchemaMysql.innodbPrintAllDeadlocks) &&
        Objects.equals(this.innodbOnlineAlterLogMaxSize, jsonSchemaMysql.innodbOnlineAlterLogMaxSize) &&
        Objects.equals(this.interactiveTimeout, jsonSchemaMysql.interactiveTimeout) &&
        Objects.equals(this.innodbLogBufferSize, jsonSchemaMysql.innodbLogBufferSize) &&
        Objects.equals(this.maxAllowedPacket, jsonSchemaMysql.maxAllowedPacket) &&
        Objects.equals(this.maxHeapTableSize, jsonSchemaMysql.maxHeapTableSize) &&
        equalsNullable(this.innodbFtServerStopwordTable, jsonSchemaMysql.innodbFtServerStopwordTable) &&
        Objects.equals(this.innodbReadIoThreads, jsonSchemaMysql.innodbReadIoThreads) &&
        Objects.equals(this.sqlRequirePrimaryKey, jsonSchemaMysql.sqlRequirePrimaryKey) &&
        Objects.equals(this.defaultTimeZone, jsonSchemaMysql.defaultTimeZone) &&
        Objects.equals(this.longQueryTime, jsonSchemaMysql.longQueryTime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(netWriteTimeout, internalTmpMemStorageEngine, sqlMode, informationSchemaStatsExpiry, sortBufferSize, innodbThreadConcurrency, innodbWriteIoThreads, innodbFtMinTokenSize, innodbChangeBufferMaxSize, innodbFlushNeighbors, tmpTableSize, slowQueryLog, connectTimeout, netReadTimeout, innodbLockWaitTimeout, waitTimeout, innodbRollbackOnTimeout, groupConcatMaxLen, netBufferLength, innodbPrintAllDeadlocks, innodbOnlineAlterLogMaxSize, interactiveTimeout, innodbLogBufferSize, maxAllowedPacket, maxHeapTableSize, hashCodeNullable(innodbFtServerStopwordTable), innodbReadIoThreads, sqlRequirePrimaryKey, defaultTimeZone, longQueryTime);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchemaMysql {\n");
    sb.append("    netWriteTimeout: ").append(toIndentedString(netWriteTimeout)).append("\n");
    sb.append("    internalTmpMemStorageEngine: ").append(toIndentedString(internalTmpMemStorageEngine)).append("\n");
    sb.append("    sqlMode: ").append(toIndentedString(sqlMode)).append("\n");
    sb.append("    informationSchemaStatsExpiry: ").append(toIndentedString(informationSchemaStatsExpiry)).append("\n");
    sb.append("    sortBufferSize: ").append(toIndentedString(sortBufferSize)).append("\n");
    sb.append("    innodbThreadConcurrency: ").append(toIndentedString(innodbThreadConcurrency)).append("\n");
    sb.append("    innodbWriteIoThreads: ").append(toIndentedString(innodbWriteIoThreads)).append("\n");
    sb.append("    innodbFtMinTokenSize: ").append(toIndentedString(innodbFtMinTokenSize)).append("\n");
    sb.append("    innodbChangeBufferMaxSize: ").append(toIndentedString(innodbChangeBufferMaxSize)).append("\n");
    sb.append("    innodbFlushNeighbors: ").append(toIndentedString(innodbFlushNeighbors)).append("\n");
    sb.append("    tmpTableSize: ").append(toIndentedString(tmpTableSize)).append("\n");
    sb.append("    slowQueryLog: ").append(toIndentedString(slowQueryLog)).append("\n");
    sb.append("    connectTimeout: ").append(toIndentedString(connectTimeout)).append("\n");
    sb.append("    netReadTimeout: ").append(toIndentedString(netReadTimeout)).append("\n");
    sb.append("    innodbLockWaitTimeout: ").append(toIndentedString(innodbLockWaitTimeout)).append("\n");
    sb.append("    waitTimeout: ").append(toIndentedString(waitTimeout)).append("\n");
    sb.append("    innodbRollbackOnTimeout: ").append(toIndentedString(innodbRollbackOnTimeout)).append("\n");
    sb.append("    groupConcatMaxLen: ").append(toIndentedString(groupConcatMaxLen)).append("\n");
    sb.append("    netBufferLength: ").append(toIndentedString(netBufferLength)).append("\n");
    sb.append("    innodbPrintAllDeadlocks: ").append(toIndentedString(innodbPrintAllDeadlocks)).append("\n");
    sb.append("    innodbOnlineAlterLogMaxSize: ").append(toIndentedString(innodbOnlineAlterLogMaxSize)).append("\n");
    sb.append("    interactiveTimeout: ").append(toIndentedString(interactiveTimeout)).append("\n");
    sb.append("    innodbLogBufferSize: ").append(toIndentedString(innodbLogBufferSize)).append("\n");
    sb.append("    maxAllowedPacket: ").append(toIndentedString(maxAllowedPacket)).append("\n");
    sb.append("    maxHeapTableSize: ").append(toIndentedString(maxHeapTableSize)).append("\n");
    sb.append("    innodbFtServerStopwordTable: ").append(toIndentedString(innodbFtServerStopwordTable)).append("\n");
    sb.append("    innodbReadIoThreads: ").append(toIndentedString(innodbReadIoThreads)).append("\n");
    sb.append("    sqlRequirePrimaryKey: ").append(toIndentedString(sqlRequirePrimaryKey)).append("\n");
    sb.append("    defaultTimeZone: ").append(toIndentedString(defaultTimeZone)).append("\n");
    sb.append("    longQueryTime: ").append(toIndentedString(longQueryTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `net_write_timeout` to the URL query string
    if (getNetWriteTimeout() != null) {
      joiner.add(String.format("%snet_write_timeout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNetWriteTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `internal_tmp_mem_storage_engine` to the URL query string
    if (getInternalTmpMemStorageEngine() != null) {
      joiner.add(String.format("%sinternal_tmp_mem_storage_engine%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInternalTmpMemStorageEngine()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sql_mode` to the URL query string
    if (getSqlMode() != null) {
      joiner.add(String.format("%ssql_mode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSqlMode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `information_schema_stats_expiry` to the URL query string
    if (getInformationSchemaStatsExpiry() != null) {
      joiner.add(String.format("%sinformation_schema_stats_expiry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInformationSchemaStatsExpiry()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sort_buffer_size` to the URL query string
    if (getSortBufferSize() != null) {
      joiner.add(String.format("%ssort_buffer_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSortBufferSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_thread_concurrency` to the URL query string
    if (getInnodbThreadConcurrency() != null) {
      joiner.add(String.format("%sinnodb_thread_concurrency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbThreadConcurrency()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_write_io_threads` to the URL query string
    if (getInnodbWriteIoThreads() != null) {
      joiner.add(String.format("%sinnodb_write_io_threads%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbWriteIoThreads()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_ft_min_token_size` to the URL query string
    if (getInnodbFtMinTokenSize() != null) {
      joiner.add(String.format("%sinnodb_ft_min_token_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbFtMinTokenSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_change_buffer_max_size` to the URL query string
    if (getInnodbChangeBufferMaxSize() != null) {
      joiner.add(String.format("%sinnodb_change_buffer_max_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbChangeBufferMaxSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_flush_neighbors` to the URL query string
    if (getInnodbFlushNeighbors() != null) {
      joiner.add(String.format("%sinnodb_flush_neighbors%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbFlushNeighbors()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tmp_table_size` to the URL query string
    if (getTmpTableSize() != null) {
      joiner.add(String.format("%stmp_table_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTmpTableSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `slow_query_log` to the URL query string
    if (getSlowQueryLog() != null) {
      joiner.add(String.format("%sslow_query_log%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSlowQueryLog()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `connect_timeout` to the URL query string
    if (getConnectTimeout() != null) {
      joiner.add(String.format("%sconnect_timeout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConnectTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `net_read_timeout` to the URL query string
    if (getNetReadTimeout() != null) {
      joiner.add(String.format("%snet_read_timeout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNetReadTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_lock_wait_timeout` to the URL query string
    if (getInnodbLockWaitTimeout() != null) {
      joiner.add(String.format("%sinnodb_lock_wait_timeout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbLockWaitTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `wait_timeout` to the URL query string
    if (getWaitTimeout() != null) {
      joiner.add(String.format("%swait_timeout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWaitTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_rollback_on_timeout` to the URL query string
    if (getInnodbRollbackOnTimeout() != null) {
      joiner.add(String.format("%sinnodb_rollback_on_timeout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbRollbackOnTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `group_concat_max_len` to the URL query string
    if (getGroupConcatMaxLen() != null) {
      joiner.add(String.format("%sgroup_concat_max_len%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGroupConcatMaxLen()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `net_buffer_length` to the URL query string
    if (getNetBufferLength() != null) {
      joiner.add(String.format("%snet_buffer_length%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNetBufferLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_print_all_deadlocks` to the URL query string
    if (getInnodbPrintAllDeadlocks() != null) {
      joiner.add(String.format("%sinnodb_print_all_deadlocks%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbPrintAllDeadlocks()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_online_alter_log_max_size` to the URL query string
    if (getInnodbOnlineAlterLogMaxSize() != null) {
      joiner.add(String.format("%sinnodb_online_alter_log_max_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbOnlineAlterLogMaxSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `interactive_timeout` to the URL query string
    if (getInteractiveTimeout() != null) {
      joiner.add(String.format("%sinteractive_timeout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInteractiveTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_log_buffer_size` to the URL query string
    if (getInnodbLogBufferSize() != null) {
      joiner.add(String.format("%sinnodb_log_buffer_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbLogBufferSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `max_allowed_packet` to the URL query string
    if (getMaxAllowedPacket() != null) {
      joiner.add(String.format("%smax_allowed_packet%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxAllowedPacket()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `max_heap_table_size` to the URL query string
    if (getMaxHeapTableSize() != null) {
      joiner.add(String.format("%smax_heap_table_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxHeapTableSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_ft_server_stopword_table` to the URL query string
    if (getInnodbFtServerStopwordTable() != null) {
      joiner.add(String.format("%sinnodb_ft_server_stopword_table%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbFtServerStopwordTable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `innodb_read_io_threads` to the URL query string
    if (getInnodbReadIoThreads() != null) {
      joiner.add(String.format("%sinnodb_read_io_threads%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInnodbReadIoThreads()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sql_require_primary_key` to the URL query string
    if (getSqlRequirePrimaryKey() != null) {
      joiner.add(String.format("%ssql_require_primary_key%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSqlRequirePrimaryKey()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `default_time_zone` to the URL query string
    if (getDefaultTimeZone() != null) {
      joiner.add(String.format("%sdefault_time_zone%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultTimeZone()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `long_query_time` to the URL query string
    if (getLongQueryTime() != null) {
      joiner.add(String.format("%slong_query_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLongQueryTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

