/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class JsonSchemaKafkaConnect {

    /**
     * The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("producer_buffer_memory")
    private Optional<? extends Long> producerBufferMemory;

    /**
     * The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_max_poll_interval_ms")
    private Optional<? extends Long> consumerMaxPollIntervalMs;

    /**
     * Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("producer_compression_type")
    private Optional<? extends TheDefaultCompressionTypeForProducers> producerCompressionType;

    /**
     * Defines what client configurations can be overridden by the connector. Default is None
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connector_client_config_override_policy")
    private Optional<? extends ClientConfigOverridePolicy> connectorClientConfigOverridePolicy;

    /**
     * The interval at which to try committing offsets for tasks (defaults to 60000).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset_flush_interval_ms")
    private Optional<? extends Long> offsetFlushIntervalMs;

    /**
     * The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned.  Defaults to 5 minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduled_rebalance_max_delay_ms")
    private Optional<? extends Long> scheduledRebalanceMaxDelayMs;

    /**
     * Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_fetch_max_bytes")
    private Optional<? extends Long> consumerFetchMaxBytes;

    /**
     * Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_max_partition_fetch_bytes")
    private Optional<? extends Long> consumerMaxPartitionFetchBytes;

    /**
     * Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset_flush_timeout_ms")
    private Optional<? extends Long> offsetFlushTimeoutMs;

    /**
     * What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_auto_offset_reset")
    private Optional<? extends ConsumerAutoOffsetReset> consumerAutoOffsetReset;

    /**
     * This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("producer_max_request_size")
    private Optional<? extends Long> producerMaxRequestSize;

    /**
     * This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("producer_batch_size")
    private Optional<? extends Long> producerBatchSize;

    /**
     * The timeout in milliseconds used to detect failures when using Kafkaâ€™s group management facilities (defaults to 10000).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("session_timeout_ms")
    private Optional<? extends Long> sessionTimeoutMs;

    /**
     * This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will 'linger' for the specified time waiting for more records to show up. Defaults to 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("producer_linger_ms")
    private Optional<? extends Long> producerLingerMs;

    /**
     * Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_isolation_level")
    private Optional<? extends ConsumerIsolationLevel> consumerIsolationLevel;

    /**
     * The maximum number of records returned in a single call to poll() (defaults to 500).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_max_poll_records")
    private Optional<? extends Long> consumerMaxPollRecords;

    public JsonSchemaKafkaConnect(
            @JsonProperty("producer_buffer_memory") Optional<? extends Long> producerBufferMemory,
            @JsonProperty("consumer_max_poll_interval_ms") Optional<? extends Long> consumerMaxPollIntervalMs,
            @JsonProperty("producer_compression_type") Optional<? extends TheDefaultCompressionTypeForProducers> producerCompressionType,
            @JsonProperty("connector_client_config_override_policy") Optional<? extends ClientConfigOverridePolicy> connectorClientConfigOverridePolicy,
            @JsonProperty("offset_flush_interval_ms") Optional<? extends Long> offsetFlushIntervalMs,
            @JsonProperty("scheduled_rebalance_max_delay_ms") Optional<? extends Long> scheduledRebalanceMaxDelayMs,
            @JsonProperty("consumer_fetch_max_bytes") Optional<? extends Long> consumerFetchMaxBytes,
            @JsonProperty("consumer_max_partition_fetch_bytes") Optional<? extends Long> consumerMaxPartitionFetchBytes,
            @JsonProperty("offset_flush_timeout_ms") Optional<? extends Long> offsetFlushTimeoutMs,
            @JsonProperty("consumer_auto_offset_reset") Optional<? extends ConsumerAutoOffsetReset> consumerAutoOffsetReset,
            @JsonProperty("producer_max_request_size") Optional<? extends Long> producerMaxRequestSize,
            @JsonProperty("producer_batch_size") Optional<? extends Long> producerBatchSize,
            @JsonProperty("session_timeout_ms") Optional<? extends Long> sessionTimeoutMs,
            @JsonProperty("producer_linger_ms") Optional<? extends Long> producerLingerMs,
            @JsonProperty("consumer_isolation_level") Optional<? extends ConsumerIsolationLevel> consumerIsolationLevel,
            @JsonProperty("consumer_max_poll_records") Optional<? extends Long> consumerMaxPollRecords) {
        Utils.checkNotNull(producerBufferMemory, "producerBufferMemory");
        Utils.checkNotNull(consumerMaxPollIntervalMs, "consumerMaxPollIntervalMs");
        Utils.checkNotNull(producerCompressionType, "producerCompressionType");
        Utils.checkNotNull(connectorClientConfigOverridePolicy, "connectorClientConfigOverridePolicy");
        Utils.checkNotNull(offsetFlushIntervalMs, "offsetFlushIntervalMs");
        Utils.checkNotNull(scheduledRebalanceMaxDelayMs, "scheduledRebalanceMaxDelayMs");
        Utils.checkNotNull(consumerFetchMaxBytes, "consumerFetchMaxBytes");
        Utils.checkNotNull(consumerMaxPartitionFetchBytes, "consumerMaxPartitionFetchBytes");
        Utils.checkNotNull(offsetFlushTimeoutMs, "offsetFlushTimeoutMs");
        Utils.checkNotNull(consumerAutoOffsetReset, "consumerAutoOffsetReset");
        Utils.checkNotNull(producerMaxRequestSize, "producerMaxRequestSize");
        Utils.checkNotNull(producerBatchSize, "producerBatchSize");
        Utils.checkNotNull(sessionTimeoutMs, "sessionTimeoutMs");
        Utils.checkNotNull(producerLingerMs, "producerLingerMs");
        Utils.checkNotNull(consumerIsolationLevel, "consumerIsolationLevel");
        Utils.checkNotNull(consumerMaxPollRecords, "consumerMaxPollRecords");
        this.producerBufferMemory = producerBufferMemory;
        this.consumerMaxPollIntervalMs = consumerMaxPollIntervalMs;
        this.producerCompressionType = producerCompressionType;
        this.connectorClientConfigOverridePolicy = connectorClientConfigOverridePolicy;
        this.offsetFlushIntervalMs = offsetFlushIntervalMs;
        this.scheduledRebalanceMaxDelayMs = scheduledRebalanceMaxDelayMs;
        this.consumerFetchMaxBytes = consumerFetchMaxBytes;
        this.consumerMaxPartitionFetchBytes = consumerMaxPartitionFetchBytes;
        this.offsetFlushTimeoutMs = offsetFlushTimeoutMs;
        this.consumerAutoOffsetReset = consumerAutoOffsetReset;
        this.producerMaxRequestSize = producerMaxRequestSize;
        this.producerBatchSize = producerBatchSize;
        this.sessionTimeoutMs = sessionTimeoutMs;
        this.producerLingerMs = producerLingerMs;
        this.consumerIsolationLevel = consumerIsolationLevel;
        this.consumerMaxPollRecords = consumerMaxPollRecords;
    }

    /**
     * The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
     */
    public Optional<? extends Long> producerBufferMemory() {
        return producerBufferMemory;
    }

    /**
     * The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
     */
    public Optional<? extends Long> consumerMaxPollIntervalMs() {
        return consumerMaxPollIntervalMs;
    }

    /**
     * Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.
     */
    public Optional<? extends TheDefaultCompressionTypeForProducers> producerCompressionType() {
        return producerCompressionType;
    }

    /**
     * Defines what client configurations can be overridden by the connector. Default is None
     */
    public Optional<? extends ClientConfigOverridePolicy> connectorClientConfigOverridePolicy() {
        return connectorClientConfigOverridePolicy;
    }

    /**
     * The interval at which to try committing offsets for tasks (defaults to 60000).
     */
    public Optional<? extends Long> offsetFlushIntervalMs() {
        return offsetFlushIntervalMs;
    }

    /**
     * The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned.  Defaults to 5 minutes.
     */
    public Optional<? extends Long> scheduledRebalanceMaxDelayMs() {
        return scheduledRebalanceMaxDelayMs;
    }

    /**
     * Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
     */
    public Optional<? extends Long> consumerFetchMaxBytes() {
        return consumerFetchMaxBytes;
    }

    /**
     * Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. 
     */
    public Optional<? extends Long> consumerMaxPartitionFetchBytes() {
        return consumerMaxPartitionFetchBytes;
    }

    /**
     * Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
     */
    public Optional<? extends Long> offsetFlushTimeoutMs() {
        return offsetFlushTimeoutMs;
    }

    /**
     * What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest
     */
    public Optional<? extends ConsumerAutoOffsetReset> consumerAutoOffsetReset() {
        return consumerAutoOffsetReset;
    }

    /**
     * This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
     */
    public Optional<? extends Long> producerMaxRequestSize() {
        return producerMaxRequestSize;
    }

    /**
     * This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
     */
    public Optional<? extends Long> producerBatchSize() {
        return producerBatchSize;
    }

    /**
     * The timeout in milliseconds used to detect failures when using Kafkaâ€™s group management facilities (defaults to 10000).
     */
    public Optional<? extends Long> sessionTimeoutMs() {
        return sessionTimeoutMs;
    }

    /**
     * This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will 'linger' for the specified time waiting for more records to show up. Defaults to 0.
     */
    public Optional<? extends Long> producerLingerMs() {
        return producerLingerMs;
    }

    /**
     * Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.
     */
    public Optional<? extends ConsumerIsolationLevel> consumerIsolationLevel() {
        return consumerIsolationLevel;
    }

    /**
     * The maximum number of records returned in a single call to poll() (defaults to 500).
     */
    public Optional<? extends Long> consumerMaxPollRecords() {
        return consumerMaxPollRecords;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
     */
    public JsonSchemaKafkaConnect withProducerBufferMemory(long producerBufferMemory) {
        Utils.checkNotNull(producerBufferMemory, "producerBufferMemory");
        this.producerBufferMemory = Optional.ofNullable(producerBufferMemory);
        return this;
    }

    /**
     * The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
     */
    public JsonSchemaKafkaConnect withProducerBufferMemory(Optional<? extends Long> producerBufferMemory) {
        Utils.checkNotNull(producerBufferMemory, "producerBufferMemory");
        this.producerBufferMemory = producerBufferMemory;
        return this;
    }

    /**
     * The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
     */
    public JsonSchemaKafkaConnect withConsumerMaxPollIntervalMs(long consumerMaxPollIntervalMs) {
        Utils.checkNotNull(consumerMaxPollIntervalMs, "consumerMaxPollIntervalMs");
        this.consumerMaxPollIntervalMs = Optional.ofNullable(consumerMaxPollIntervalMs);
        return this;
    }

    /**
     * The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
     */
    public JsonSchemaKafkaConnect withConsumerMaxPollIntervalMs(Optional<? extends Long> consumerMaxPollIntervalMs) {
        Utils.checkNotNull(consumerMaxPollIntervalMs, "consumerMaxPollIntervalMs");
        this.consumerMaxPollIntervalMs = consumerMaxPollIntervalMs;
        return this;
    }

    /**
     * Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.
     */
    public JsonSchemaKafkaConnect withProducerCompressionType(TheDefaultCompressionTypeForProducers producerCompressionType) {
        Utils.checkNotNull(producerCompressionType, "producerCompressionType");
        this.producerCompressionType = Optional.ofNullable(producerCompressionType);
        return this;
    }

    /**
     * Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.
     */
    public JsonSchemaKafkaConnect withProducerCompressionType(Optional<? extends TheDefaultCompressionTypeForProducers> producerCompressionType) {
        Utils.checkNotNull(producerCompressionType, "producerCompressionType");
        this.producerCompressionType = producerCompressionType;
        return this;
    }

    /**
     * Defines what client configurations can be overridden by the connector. Default is None
     */
    public JsonSchemaKafkaConnect withConnectorClientConfigOverridePolicy(ClientConfigOverridePolicy connectorClientConfigOverridePolicy) {
        Utils.checkNotNull(connectorClientConfigOverridePolicy, "connectorClientConfigOverridePolicy");
        this.connectorClientConfigOverridePolicy = Optional.ofNullable(connectorClientConfigOverridePolicy);
        return this;
    }

    /**
     * Defines what client configurations can be overridden by the connector. Default is None
     */
    public JsonSchemaKafkaConnect withConnectorClientConfigOverridePolicy(Optional<? extends ClientConfigOverridePolicy> connectorClientConfigOverridePolicy) {
        Utils.checkNotNull(connectorClientConfigOverridePolicy, "connectorClientConfigOverridePolicy");
        this.connectorClientConfigOverridePolicy = connectorClientConfigOverridePolicy;
        return this;
    }

    /**
     * The interval at which to try committing offsets for tasks (defaults to 60000).
     */
    public JsonSchemaKafkaConnect withOffsetFlushIntervalMs(long offsetFlushIntervalMs) {
        Utils.checkNotNull(offsetFlushIntervalMs, "offsetFlushIntervalMs");
        this.offsetFlushIntervalMs = Optional.ofNullable(offsetFlushIntervalMs);
        return this;
    }

    /**
     * The interval at which to try committing offsets for tasks (defaults to 60000).
     */
    public JsonSchemaKafkaConnect withOffsetFlushIntervalMs(Optional<? extends Long> offsetFlushIntervalMs) {
        Utils.checkNotNull(offsetFlushIntervalMs, "offsetFlushIntervalMs");
        this.offsetFlushIntervalMs = offsetFlushIntervalMs;
        return this;
    }

    /**
     * The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned.  Defaults to 5 minutes.
     */
    public JsonSchemaKafkaConnect withScheduledRebalanceMaxDelayMs(long scheduledRebalanceMaxDelayMs) {
        Utils.checkNotNull(scheduledRebalanceMaxDelayMs, "scheduledRebalanceMaxDelayMs");
        this.scheduledRebalanceMaxDelayMs = Optional.ofNullable(scheduledRebalanceMaxDelayMs);
        return this;
    }

    /**
     * The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned.  Defaults to 5 minutes.
     */
    public JsonSchemaKafkaConnect withScheduledRebalanceMaxDelayMs(Optional<? extends Long> scheduledRebalanceMaxDelayMs) {
        Utils.checkNotNull(scheduledRebalanceMaxDelayMs, "scheduledRebalanceMaxDelayMs");
        this.scheduledRebalanceMaxDelayMs = scheduledRebalanceMaxDelayMs;
        return this;
    }

    /**
     * Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
     */
    public JsonSchemaKafkaConnect withConsumerFetchMaxBytes(long consumerFetchMaxBytes) {
        Utils.checkNotNull(consumerFetchMaxBytes, "consumerFetchMaxBytes");
        this.consumerFetchMaxBytes = Optional.ofNullable(consumerFetchMaxBytes);
        return this;
    }

    /**
     * Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
     */
    public JsonSchemaKafkaConnect withConsumerFetchMaxBytes(Optional<? extends Long> consumerFetchMaxBytes) {
        Utils.checkNotNull(consumerFetchMaxBytes, "consumerFetchMaxBytes");
        this.consumerFetchMaxBytes = consumerFetchMaxBytes;
        return this;
    }

    /**
     * Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. 
     */
    public JsonSchemaKafkaConnect withConsumerMaxPartitionFetchBytes(long consumerMaxPartitionFetchBytes) {
        Utils.checkNotNull(consumerMaxPartitionFetchBytes, "consumerMaxPartitionFetchBytes");
        this.consumerMaxPartitionFetchBytes = Optional.ofNullable(consumerMaxPartitionFetchBytes);
        return this;
    }

    /**
     * Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. 
     */
    public JsonSchemaKafkaConnect withConsumerMaxPartitionFetchBytes(Optional<? extends Long> consumerMaxPartitionFetchBytes) {
        Utils.checkNotNull(consumerMaxPartitionFetchBytes, "consumerMaxPartitionFetchBytes");
        this.consumerMaxPartitionFetchBytes = consumerMaxPartitionFetchBytes;
        return this;
    }

    /**
     * Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
     */
    public JsonSchemaKafkaConnect withOffsetFlushTimeoutMs(long offsetFlushTimeoutMs) {
        Utils.checkNotNull(offsetFlushTimeoutMs, "offsetFlushTimeoutMs");
        this.offsetFlushTimeoutMs = Optional.ofNullable(offsetFlushTimeoutMs);
        return this;
    }

    /**
     * Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
     */
    public JsonSchemaKafkaConnect withOffsetFlushTimeoutMs(Optional<? extends Long> offsetFlushTimeoutMs) {
        Utils.checkNotNull(offsetFlushTimeoutMs, "offsetFlushTimeoutMs");
        this.offsetFlushTimeoutMs = offsetFlushTimeoutMs;
        return this;
    }

    /**
     * What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest
     */
    public JsonSchemaKafkaConnect withConsumerAutoOffsetReset(ConsumerAutoOffsetReset consumerAutoOffsetReset) {
        Utils.checkNotNull(consumerAutoOffsetReset, "consumerAutoOffsetReset");
        this.consumerAutoOffsetReset = Optional.ofNullable(consumerAutoOffsetReset);
        return this;
    }

    /**
     * What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest
     */
    public JsonSchemaKafkaConnect withConsumerAutoOffsetReset(Optional<? extends ConsumerAutoOffsetReset> consumerAutoOffsetReset) {
        Utils.checkNotNull(consumerAutoOffsetReset, "consumerAutoOffsetReset");
        this.consumerAutoOffsetReset = consumerAutoOffsetReset;
        return this;
    }

    /**
     * This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
     */
    public JsonSchemaKafkaConnect withProducerMaxRequestSize(long producerMaxRequestSize) {
        Utils.checkNotNull(producerMaxRequestSize, "producerMaxRequestSize");
        this.producerMaxRequestSize = Optional.ofNullable(producerMaxRequestSize);
        return this;
    }

    /**
     * This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
     */
    public JsonSchemaKafkaConnect withProducerMaxRequestSize(Optional<? extends Long> producerMaxRequestSize) {
        Utils.checkNotNull(producerMaxRequestSize, "producerMaxRequestSize");
        this.producerMaxRequestSize = producerMaxRequestSize;
        return this;
    }

    /**
     * This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
     */
    public JsonSchemaKafkaConnect withProducerBatchSize(long producerBatchSize) {
        Utils.checkNotNull(producerBatchSize, "producerBatchSize");
        this.producerBatchSize = Optional.ofNullable(producerBatchSize);
        return this;
    }

    /**
     * This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
     */
    public JsonSchemaKafkaConnect withProducerBatchSize(Optional<? extends Long> producerBatchSize) {
        Utils.checkNotNull(producerBatchSize, "producerBatchSize");
        this.producerBatchSize = producerBatchSize;
        return this;
    }

    /**
     * The timeout in milliseconds used to detect failures when using Kafkaâ€™s group management facilities (defaults to 10000).
     */
    public JsonSchemaKafkaConnect withSessionTimeoutMs(long sessionTimeoutMs) {
        Utils.checkNotNull(sessionTimeoutMs, "sessionTimeoutMs");
        this.sessionTimeoutMs = Optional.ofNullable(sessionTimeoutMs);
        return this;
    }

    /**
     * The timeout in milliseconds used to detect failures when using Kafkaâ€™s group management facilities (defaults to 10000).
     */
    public JsonSchemaKafkaConnect withSessionTimeoutMs(Optional<? extends Long> sessionTimeoutMs) {
        Utils.checkNotNull(sessionTimeoutMs, "sessionTimeoutMs");
        this.sessionTimeoutMs = sessionTimeoutMs;
        return this;
    }

    /**
     * This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will 'linger' for the specified time waiting for more records to show up. Defaults to 0.
     */
    public JsonSchemaKafkaConnect withProducerLingerMs(long producerLingerMs) {
        Utils.checkNotNull(producerLingerMs, "producerLingerMs");
        this.producerLingerMs = Optional.ofNullable(producerLingerMs);
        return this;
    }

    /**
     * This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will 'linger' for the specified time waiting for more records to show up. Defaults to 0.
     */
    public JsonSchemaKafkaConnect withProducerLingerMs(Optional<? extends Long> producerLingerMs) {
        Utils.checkNotNull(producerLingerMs, "producerLingerMs");
        this.producerLingerMs = producerLingerMs;
        return this;
    }

    /**
     * Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.
     */
    public JsonSchemaKafkaConnect withConsumerIsolationLevel(ConsumerIsolationLevel consumerIsolationLevel) {
        Utils.checkNotNull(consumerIsolationLevel, "consumerIsolationLevel");
        this.consumerIsolationLevel = Optional.ofNullable(consumerIsolationLevel);
        return this;
    }

    /**
     * Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.
     */
    public JsonSchemaKafkaConnect withConsumerIsolationLevel(Optional<? extends ConsumerIsolationLevel> consumerIsolationLevel) {
        Utils.checkNotNull(consumerIsolationLevel, "consumerIsolationLevel");
        this.consumerIsolationLevel = consumerIsolationLevel;
        return this;
    }

    /**
     * The maximum number of records returned in a single call to poll() (defaults to 500).
     */
    public JsonSchemaKafkaConnect withConsumerMaxPollRecords(long consumerMaxPollRecords) {
        Utils.checkNotNull(consumerMaxPollRecords, "consumerMaxPollRecords");
        this.consumerMaxPollRecords = Optional.ofNullable(consumerMaxPollRecords);
        return this;
    }

    /**
     * The maximum number of records returned in a single call to poll() (defaults to 500).
     */
    public JsonSchemaKafkaConnect withConsumerMaxPollRecords(Optional<? extends Long> consumerMaxPollRecords) {
        Utils.checkNotNull(consumerMaxPollRecords, "consumerMaxPollRecords");
        this.consumerMaxPollRecords = consumerMaxPollRecords;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JsonSchemaKafkaConnect other = (JsonSchemaKafkaConnect) o;
        return 
            java.util.Objects.deepEquals(this.producerBufferMemory, other.producerBufferMemory) &&
            java.util.Objects.deepEquals(this.consumerMaxPollIntervalMs, other.consumerMaxPollIntervalMs) &&
            java.util.Objects.deepEquals(this.producerCompressionType, other.producerCompressionType) &&
            java.util.Objects.deepEquals(this.connectorClientConfigOverridePolicy, other.connectorClientConfigOverridePolicy) &&
            java.util.Objects.deepEquals(this.offsetFlushIntervalMs, other.offsetFlushIntervalMs) &&
            java.util.Objects.deepEquals(this.scheduledRebalanceMaxDelayMs, other.scheduledRebalanceMaxDelayMs) &&
            java.util.Objects.deepEquals(this.consumerFetchMaxBytes, other.consumerFetchMaxBytes) &&
            java.util.Objects.deepEquals(this.consumerMaxPartitionFetchBytes, other.consumerMaxPartitionFetchBytes) &&
            java.util.Objects.deepEquals(this.offsetFlushTimeoutMs, other.offsetFlushTimeoutMs) &&
            java.util.Objects.deepEquals(this.consumerAutoOffsetReset, other.consumerAutoOffsetReset) &&
            java.util.Objects.deepEquals(this.producerMaxRequestSize, other.producerMaxRequestSize) &&
            java.util.Objects.deepEquals(this.producerBatchSize, other.producerBatchSize) &&
            java.util.Objects.deepEquals(this.sessionTimeoutMs, other.sessionTimeoutMs) &&
            java.util.Objects.deepEquals(this.producerLingerMs, other.producerLingerMs) &&
            java.util.Objects.deepEquals(this.consumerIsolationLevel, other.consumerIsolationLevel) &&
            java.util.Objects.deepEquals(this.consumerMaxPollRecords, other.consumerMaxPollRecords);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            producerBufferMemory,
            consumerMaxPollIntervalMs,
            producerCompressionType,
            connectorClientConfigOverridePolicy,
            offsetFlushIntervalMs,
            scheduledRebalanceMaxDelayMs,
            consumerFetchMaxBytes,
            consumerMaxPartitionFetchBytes,
            offsetFlushTimeoutMs,
            consumerAutoOffsetReset,
            producerMaxRequestSize,
            producerBatchSize,
            sessionTimeoutMs,
            producerLingerMs,
            consumerIsolationLevel,
            consumerMaxPollRecords);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JsonSchemaKafkaConnect.class,
                "producerBufferMemory", producerBufferMemory,
                "consumerMaxPollIntervalMs", consumerMaxPollIntervalMs,
                "producerCompressionType", producerCompressionType,
                "connectorClientConfigOverridePolicy", connectorClientConfigOverridePolicy,
                "offsetFlushIntervalMs", offsetFlushIntervalMs,
                "scheduledRebalanceMaxDelayMs", scheduledRebalanceMaxDelayMs,
                "consumerFetchMaxBytes", consumerFetchMaxBytes,
                "consumerMaxPartitionFetchBytes", consumerMaxPartitionFetchBytes,
                "offsetFlushTimeoutMs", offsetFlushTimeoutMs,
                "consumerAutoOffsetReset", consumerAutoOffsetReset,
                "producerMaxRequestSize", producerMaxRequestSize,
                "producerBatchSize", producerBatchSize,
                "sessionTimeoutMs", sessionTimeoutMs,
                "producerLingerMs", producerLingerMs,
                "consumerIsolationLevel", consumerIsolationLevel,
                "consumerMaxPollRecords", consumerMaxPollRecords);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> producerBufferMemory = Optional.empty();
 
        private Optional<? extends Long> consumerMaxPollIntervalMs = Optional.empty();
 
        private Optional<? extends TheDefaultCompressionTypeForProducers> producerCompressionType = Optional.empty();
 
        private Optional<? extends ClientConfigOverridePolicy> connectorClientConfigOverridePolicy = Optional.empty();
 
        private Optional<? extends Long> offsetFlushIntervalMs = Optional.empty();
 
        private Optional<? extends Long> scheduledRebalanceMaxDelayMs = Optional.empty();
 
        private Optional<? extends Long> consumerFetchMaxBytes = Optional.empty();
 
        private Optional<? extends Long> consumerMaxPartitionFetchBytes = Optional.empty();
 
        private Optional<? extends Long> offsetFlushTimeoutMs = Optional.empty();
 
        private Optional<? extends ConsumerAutoOffsetReset> consumerAutoOffsetReset = Optional.empty();
 
        private Optional<? extends Long> producerMaxRequestSize = Optional.empty();
 
        private Optional<? extends Long> producerBatchSize = Optional.empty();
 
        private Optional<? extends Long> sessionTimeoutMs = Optional.empty();
 
        private Optional<? extends Long> producerLingerMs = Optional.empty();
 
        private Optional<? extends ConsumerIsolationLevel> consumerIsolationLevel = Optional.empty();
 
        private Optional<? extends Long> consumerMaxPollRecords = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
         */
        public Builder producerBufferMemory(long producerBufferMemory) {
            Utils.checkNotNull(producerBufferMemory, "producerBufferMemory");
            this.producerBufferMemory = Optional.ofNullable(producerBufferMemory);
            return this;
        }

        /**
         * The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).
         */
        public Builder producerBufferMemory(Optional<? extends Long> producerBufferMemory) {
            Utils.checkNotNull(producerBufferMemory, "producerBufferMemory");
            this.producerBufferMemory = producerBufferMemory;
            return this;
        }

        /**
         * The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
         */
        public Builder consumerMaxPollIntervalMs(long consumerMaxPollIntervalMs) {
            Utils.checkNotNull(consumerMaxPollIntervalMs, "consumerMaxPollIntervalMs");
            this.consumerMaxPollIntervalMs = Optional.ofNullable(consumerMaxPollIntervalMs);
            return this;
        }

        /**
         * The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).
         */
        public Builder consumerMaxPollIntervalMs(Optional<? extends Long> consumerMaxPollIntervalMs) {
            Utils.checkNotNull(consumerMaxPollIntervalMs, "consumerMaxPollIntervalMs");
            this.consumerMaxPollIntervalMs = consumerMaxPollIntervalMs;
            return this;
        }

        /**
         * Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.
         */
        public Builder producerCompressionType(TheDefaultCompressionTypeForProducers producerCompressionType) {
            Utils.checkNotNull(producerCompressionType, "producerCompressionType");
            this.producerCompressionType = Optional.ofNullable(producerCompressionType);
            return this;
        }

        /**
         * Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.
         */
        public Builder producerCompressionType(Optional<? extends TheDefaultCompressionTypeForProducers> producerCompressionType) {
            Utils.checkNotNull(producerCompressionType, "producerCompressionType");
            this.producerCompressionType = producerCompressionType;
            return this;
        }

        /**
         * Defines what client configurations can be overridden by the connector. Default is None
         */
        public Builder connectorClientConfigOverridePolicy(ClientConfigOverridePolicy connectorClientConfigOverridePolicy) {
            Utils.checkNotNull(connectorClientConfigOverridePolicy, "connectorClientConfigOverridePolicy");
            this.connectorClientConfigOverridePolicy = Optional.ofNullable(connectorClientConfigOverridePolicy);
            return this;
        }

        /**
         * Defines what client configurations can be overridden by the connector. Default is None
         */
        public Builder connectorClientConfigOverridePolicy(Optional<? extends ClientConfigOverridePolicy> connectorClientConfigOverridePolicy) {
            Utils.checkNotNull(connectorClientConfigOverridePolicy, "connectorClientConfigOverridePolicy");
            this.connectorClientConfigOverridePolicy = connectorClientConfigOverridePolicy;
            return this;
        }

        /**
         * The interval at which to try committing offsets for tasks (defaults to 60000).
         */
        public Builder offsetFlushIntervalMs(long offsetFlushIntervalMs) {
            Utils.checkNotNull(offsetFlushIntervalMs, "offsetFlushIntervalMs");
            this.offsetFlushIntervalMs = Optional.ofNullable(offsetFlushIntervalMs);
            return this;
        }

        /**
         * The interval at which to try committing offsets for tasks (defaults to 60000).
         */
        public Builder offsetFlushIntervalMs(Optional<? extends Long> offsetFlushIntervalMs) {
            Utils.checkNotNull(offsetFlushIntervalMs, "offsetFlushIntervalMs");
            this.offsetFlushIntervalMs = offsetFlushIntervalMs;
            return this;
        }

        /**
         * The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned.  Defaults to 5 minutes.
         */
        public Builder scheduledRebalanceMaxDelayMs(long scheduledRebalanceMaxDelayMs) {
            Utils.checkNotNull(scheduledRebalanceMaxDelayMs, "scheduledRebalanceMaxDelayMs");
            this.scheduledRebalanceMaxDelayMs = Optional.ofNullable(scheduledRebalanceMaxDelayMs);
            return this;
        }

        /**
         * The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned.  Defaults to 5 minutes.
         */
        public Builder scheduledRebalanceMaxDelayMs(Optional<? extends Long> scheduledRebalanceMaxDelayMs) {
            Utils.checkNotNull(scheduledRebalanceMaxDelayMs, "scheduledRebalanceMaxDelayMs");
            this.scheduledRebalanceMaxDelayMs = scheduledRebalanceMaxDelayMs;
            return this;
        }

        /**
         * Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
         */
        public Builder consumerFetchMaxBytes(long consumerFetchMaxBytes) {
            Utils.checkNotNull(consumerFetchMaxBytes, "consumerFetchMaxBytes");
            this.consumerFetchMaxBytes = Optional.ofNullable(consumerFetchMaxBytes);
            return this;
        }

        /**
         * Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.
         */
        public Builder consumerFetchMaxBytes(Optional<? extends Long> consumerFetchMaxBytes) {
            Utils.checkNotNull(consumerFetchMaxBytes, "consumerFetchMaxBytes");
            this.consumerFetchMaxBytes = consumerFetchMaxBytes;
            return this;
        }

        /**
         * Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. 
         */
        public Builder consumerMaxPartitionFetchBytes(long consumerMaxPartitionFetchBytes) {
            Utils.checkNotNull(consumerMaxPartitionFetchBytes, "consumerMaxPartitionFetchBytes");
            this.consumerMaxPartitionFetchBytes = Optional.ofNullable(consumerMaxPartitionFetchBytes);
            return this;
        }

        /**
         * Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. 
         */
        public Builder consumerMaxPartitionFetchBytes(Optional<? extends Long> consumerMaxPartitionFetchBytes) {
            Utils.checkNotNull(consumerMaxPartitionFetchBytes, "consumerMaxPartitionFetchBytes");
            this.consumerMaxPartitionFetchBytes = consumerMaxPartitionFetchBytes;
            return this;
        }

        /**
         * Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
         */
        public Builder offsetFlushTimeoutMs(long offsetFlushTimeoutMs) {
            Utils.checkNotNull(offsetFlushTimeoutMs, "offsetFlushTimeoutMs");
            this.offsetFlushTimeoutMs = Optional.ofNullable(offsetFlushTimeoutMs);
            return this;
        }

        /**
         * Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).
         */
        public Builder offsetFlushTimeoutMs(Optional<? extends Long> offsetFlushTimeoutMs) {
            Utils.checkNotNull(offsetFlushTimeoutMs, "offsetFlushTimeoutMs");
            this.offsetFlushTimeoutMs = offsetFlushTimeoutMs;
            return this;
        }

        /**
         * What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest
         */
        public Builder consumerAutoOffsetReset(ConsumerAutoOffsetReset consumerAutoOffsetReset) {
            Utils.checkNotNull(consumerAutoOffsetReset, "consumerAutoOffsetReset");
            this.consumerAutoOffsetReset = Optional.ofNullable(consumerAutoOffsetReset);
            return this;
        }

        /**
         * What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest
         */
        public Builder consumerAutoOffsetReset(Optional<? extends ConsumerAutoOffsetReset> consumerAutoOffsetReset) {
            Utils.checkNotNull(consumerAutoOffsetReset, "consumerAutoOffsetReset");
            this.consumerAutoOffsetReset = consumerAutoOffsetReset;
            return this;
        }

        /**
         * This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
         */
        public Builder producerMaxRequestSize(long producerMaxRequestSize) {
            Utils.checkNotNull(producerMaxRequestSize, "producerMaxRequestSize");
            this.producerMaxRequestSize = Optional.ofNullable(producerMaxRequestSize);
            return this;
        }

        /**
         * This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
         */
        public Builder producerMaxRequestSize(Optional<? extends Long> producerMaxRequestSize) {
            Utils.checkNotNull(producerMaxRequestSize, "producerMaxRequestSize");
            this.producerMaxRequestSize = producerMaxRequestSize;
            return this;
        }

        /**
         * This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
         */
        public Builder producerBatchSize(long producerBatchSize) {
            Utils.checkNotNull(producerBatchSize, "producerBatchSize");
            this.producerBatchSize = Optional.ofNullable(producerBatchSize);
            return this;
        }

        /**
         * This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).
         */
        public Builder producerBatchSize(Optional<? extends Long> producerBatchSize) {
            Utils.checkNotNull(producerBatchSize, "producerBatchSize");
            this.producerBatchSize = producerBatchSize;
            return this;
        }

        /**
         * The timeout in milliseconds used to detect failures when using Kafkaâ€™s group management facilities (defaults to 10000).
         */
        public Builder sessionTimeoutMs(long sessionTimeoutMs) {
            Utils.checkNotNull(sessionTimeoutMs, "sessionTimeoutMs");
            this.sessionTimeoutMs = Optional.ofNullable(sessionTimeoutMs);
            return this;
        }

        /**
         * The timeout in milliseconds used to detect failures when using Kafkaâ€™s group management facilities (defaults to 10000).
         */
        public Builder sessionTimeoutMs(Optional<? extends Long> sessionTimeoutMs) {
            Utils.checkNotNull(sessionTimeoutMs, "sessionTimeoutMs");
            this.sessionTimeoutMs = sessionTimeoutMs;
            return this;
        }

        /**
         * This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will 'linger' for the specified time waiting for more records to show up. Defaults to 0.
         */
        public Builder producerLingerMs(long producerLingerMs) {
            Utils.checkNotNull(producerLingerMs, "producerLingerMs");
            this.producerLingerMs = Optional.ofNullable(producerLingerMs);
            return this;
        }

        /**
         * This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will 'linger' for the specified time waiting for more records to show up. Defaults to 0.
         */
        public Builder producerLingerMs(Optional<? extends Long> producerLingerMs) {
            Utils.checkNotNull(producerLingerMs, "producerLingerMs");
            this.producerLingerMs = producerLingerMs;
            return this;
        }

        /**
         * Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.
         */
        public Builder consumerIsolationLevel(ConsumerIsolationLevel consumerIsolationLevel) {
            Utils.checkNotNull(consumerIsolationLevel, "consumerIsolationLevel");
            this.consumerIsolationLevel = Optional.ofNullable(consumerIsolationLevel);
            return this;
        }

        /**
         * Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.
         */
        public Builder consumerIsolationLevel(Optional<? extends ConsumerIsolationLevel> consumerIsolationLevel) {
            Utils.checkNotNull(consumerIsolationLevel, "consumerIsolationLevel");
            this.consumerIsolationLevel = consumerIsolationLevel;
            return this;
        }

        /**
         * The maximum number of records returned in a single call to poll() (defaults to 500).
         */
        public Builder consumerMaxPollRecords(long consumerMaxPollRecords) {
            Utils.checkNotNull(consumerMaxPollRecords, "consumerMaxPollRecords");
            this.consumerMaxPollRecords = Optional.ofNullable(consumerMaxPollRecords);
            return this;
        }

        /**
         * The maximum number of records returned in a single call to poll() (defaults to 500).
         */
        public Builder consumerMaxPollRecords(Optional<? extends Long> consumerMaxPollRecords) {
            Utils.checkNotNull(consumerMaxPollRecords, "consumerMaxPollRecords");
            this.consumerMaxPollRecords = consumerMaxPollRecords;
            return this;
        }
        
        public JsonSchemaKafkaConnect build() {
            return new JsonSchemaKafkaConnect(
                producerBufferMemory,
                consumerMaxPollIntervalMs,
                producerCompressionType,
                connectorClientConfigOverridePolicy,
                offsetFlushIntervalMs,
                scheduledRebalanceMaxDelayMs,
                consumerFetchMaxBytes,
                consumerMaxPartitionFetchBytes,
                offsetFlushTimeoutMs,
                consumerAutoOffsetReset,
                producerMaxRequestSize,
                producerBatchSize,
                sessionTimeoutMs,
                producerLingerMs,
                consumerIsolationLevel,
                consumerMaxPollRecords);
        }
    }
}

