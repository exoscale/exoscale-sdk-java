/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DbaasIntegrationTypeSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DbaasIntegrationType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasIntegrationType {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_SOURCE_DESCRIPTION = "source-description";
  @SerializedName(SERIALIZED_NAME_SOURCE_DESCRIPTION)
  private String sourceDescription;

  public static final String SERIALIZED_NAME_SOURCE_SERVICE_TYPES = "source-service-types";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVICE_TYPES)
  private List<String> sourceServiceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEST_DESCRIPTION = "dest-description";
  @SerializedName(SERIALIZED_NAME_DEST_DESCRIPTION)
  private String destDescription;

  public static final String SERIALIZED_NAME_DEST_SERVICE_TYPES = "dest-service-types";
  @SerializedName(SERIALIZED_NAME_DEST_SERVICE_TYPES)
  private List<String> destServiceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private DbaasIntegrationTypeSettings settings;

  public DbaasIntegrationType() {
  }

  public DbaasIntegrationType type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the integration.
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public DbaasIntegrationType sourceDescription(String sourceDescription) {
    this.sourceDescription = sourceDescription;
    return this;
  }

   /**
   * The description of the source service types.
   * @return sourceDescription
  **/
  @javax.annotation.Nullable
  public String getSourceDescription() {
    return sourceDescription;
  }

  public void setSourceDescription(String sourceDescription) {
    this.sourceDescription = sourceDescription;
  }


  public DbaasIntegrationType sourceServiceTypes(List<String> sourceServiceTypes) {
    this.sourceServiceTypes = sourceServiceTypes;
    return this;
  }

  public DbaasIntegrationType addSourceServiceTypesItem(String sourceServiceTypesItem) {
    if (this.sourceServiceTypes == null) {
      this.sourceServiceTypes = new ArrayList<>();
    }
    this.sourceServiceTypes.add(sourceServiceTypesItem);
    return this;
  }

   /**
   * A list of the source service types the integration supports.
   * @return sourceServiceTypes
  **/
  @javax.annotation.Nullable
  public List<String> getSourceServiceTypes() {
    return sourceServiceTypes;
  }

  public void setSourceServiceTypes(List<String> sourceServiceTypes) {
    this.sourceServiceTypes = sourceServiceTypes;
  }


  public DbaasIntegrationType destDescription(String destDescription) {
    this.destDescription = destDescription;
    return this;
  }

   /**
   * The description of the destination service types.
   * @return destDescription
  **/
  @javax.annotation.Nullable
  public String getDestDescription() {
    return destDescription;
  }

  public void setDestDescription(String destDescription) {
    this.destDescription = destDescription;
  }


  public DbaasIntegrationType destServiceTypes(List<String> destServiceTypes) {
    this.destServiceTypes = destServiceTypes;
    return this;
  }

  public DbaasIntegrationType addDestServiceTypesItem(String destServiceTypesItem) {
    if (this.destServiceTypes == null) {
      this.destServiceTypes = new ArrayList<>();
    }
    this.destServiceTypes.add(destServiceTypesItem);
    return this;
  }

   /**
   * A list of the destination service types the integration supports.
   * @return destServiceTypes
  **/
  @javax.annotation.Nullable
  public List<String> getDestServiceTypes() {
    return destServiceTypes;
  }

  public void setDestServiceTypes(List<String> destServiceTypes) {
    this.destServiceTypes = destServiceTypes;
  }


  public DbaasIntegrationType settings(DbaasIntegrationTypeSettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  public DbaasIntegrationTypeSettings getSettings() {
    return settings;
  }

  public void setSettings(DbaasIntegrationTypeSettings settings) {
    this.settings = settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasIntegrationType dbaasIntegrationType = (DbaasIntegrationType) o;
    return Objects.equals(this.type, dbaasIntegrationType.type) &&
        Objects.equals(this.sourceDescription, dbaasIntegrationType.sourceDescription) &&
        Objects.equals(this.sourceServiceTypes, dbaasIntegrationType.sourceServiceTypes) &&
        Objects.equals(this.destDescription, dbaasIntegrationType.destDescription) &&
        Objects.equals(this.destServiceTypes, dbaasIntegrationType.destServiceTypes) &&
        Objects.equals(this.settings, dbaasIntegrationType.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, sourceDescription, sourceServiceTypes, destDescription, destServiceTypes, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasIntegrationType {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sourceDescription: ").append(toIndentedString(sourceDescription)).append("\n");
    sb.append("    sourceServiceTypes: ").append(toIndentedString(sourceServiceTypes)).append("\n");
    sb.append("    destDescription: ").append(toIndentedString(destDescription)).append("\n");
    sb.append("    destServiceTypes: ").append(toIndentedString(destServiceTypes)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("source-description");
    openapiFields.add("source-service-types");
    openapiFields.add("dest-description");
    openapiFields.add("dest-service-types");
    openapiFields.add("settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasIntegrationType
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasIntegrationType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasIntegrationType is not found in the empty JSON string", DbaasIntegrationType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasIntegrationType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasIntegrationType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("source-description") != null && !jsonObj.get("source-description").isJsonNull()) && !jsonObj.get("source-description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source-description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source-description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("source-service-types") != null && !jsonObj.get("source-service-types").isJsonNull() && !jsonObj.get("source-service-types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `source-service-types` to be an array in the JSON string but got `%s`", jsonObj.get("source-service-types").toString()));
      }
      if ((jsonObj.get("dest-description") != null && !jsonObj.get("dest-description").isJsonNull()) && !jsonObj.get("dest-description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dest-description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dest-description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dest-service-types") != null && !jsonObj.get("dest-service-types").isJsonNull() && !jsonObj.get("dest-service-types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dest-service-types` to be an array in the JSON string but got `%s`", jsonObj.get("dest-service-types").toString()));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        DbaasIntegrationTypeSettings.validateJsonElement(jsonObj.get("settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasIntegrationType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasIntegrationType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasIntegrationType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasIntegrationType.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasIntegrationType>() {
           @Override
           public void write(JsonWriter out, DbaasIntegrationType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasIntegrationType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasIntegrationType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasIntegrationType
  * @throws IOException if the JSON string is invalid with respect to DbaasIntegrationType
  */
  public static DbaasIntegrationType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasIntegrationType.class);
  }

 /**
  * Convert an instance of DbaasIntegrationType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

