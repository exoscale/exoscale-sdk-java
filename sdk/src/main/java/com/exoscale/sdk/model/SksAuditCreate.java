/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Kubernetes Audit parameters
 */
@JsonPropertyOrder({
  SksAuditCreate.JSON_PROPERTY_ENDPOINT,
  SksAuditCreate.JSON_PROPERTY_BEARER_TOKEN,
  SksAuditCreate.JSON_PROPERTY_INITIAL_BACKOFF
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class SksAuditCreate {
  public static final String JSON_PROPERTY_ENDPOINT = "endpoint";
  private String endpoint;

  public static final String JSON_PROPERTY_BEARER_TOKEN = "bearer-token";
  private String bearerToken;

  public static final String JSON_PROPERTY_INITIAL_BACKOFF = "initial-backoff";
  private String initialBackoff;

  public SksAuditCreate() { 
  }

  public SksAuditCreate endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

   /**
   * Get endpoint
   * @return endpoint
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENDPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEndpoint() {
    return endpoint;
  }


  @JsonProperty(JSON_PROPERTY_ENDPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public SksAuditCreate bearerToken(String bearerToken) {
    this.bearerToken = bearerToken;
    return this;
  }

   /**
   * Get bearerToken
   * @return bearerToken
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BEARER_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBearerToken() {
    return bearerToken;
  }


  @JsonProperty(JSON_PROPERTY_BEARER_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBearerToken(String bearerToken) {
    this.bearerToken = bearerToken;
  }


  public SksAuditCreate initialBackoff(String initialBackoff) {
    this.initialBackoff = initialBackoff;
    return this;
  }

   /**
   * Get initialBackoff
   * @return initialBackoff
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INITIAL_BACKOFF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInitialBackoff() {
    return initialBackoff;
  }


  @JsonProperty(JSON_PROPERTY_INITIAL_BACKOFF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitialBackoff(String initialBackoff) {
    this.initialBackoff = initialBackoff;
  }


  /**
   * Return true if this sks-audit-create object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SksAuditCreate sksAuditCreate = (SksAuditCreate) o;
    return Objects.equals(this.endpoint, sksAuditCreate.endpoint) &&
        Objects.equals(this.bearerToken, sksAuditCreate.bearerToken) &&
        Objects.equals(this.initialBackoff, sksAuditCreate.initialBackoff);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpoint, bearerToken, initialBackoff);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SksAuditCreate {\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    bearerToken: ").append(toIndentedString(bearerToken)).append("\n");
    sb.append("    initialBackoff: ").append(toIndentedString(initialBackoff)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `endpoint` to the URL query string
    if (getEndpoint() != null) {
      joiner.add(String.format("%sendpoint%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEndpoint()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `bearer-token` to the URL query string
    if (getBearerToken() != null) {
      joiner.add(String.format("%sbearer-token%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBearerToken()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `initial-backoff` to the URL query string
    if (getInitialBackoff() != null) {
      joiner.add(String.format("%sinitial-backoff%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInitialBackoff()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

