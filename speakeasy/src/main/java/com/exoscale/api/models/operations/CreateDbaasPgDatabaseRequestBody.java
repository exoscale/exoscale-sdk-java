/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateDbaasPgDatabaseRequestBody {

    @JsonProperty("database-name")
    private String databaseName;

    /**
     * Default string sort order (LC_COLLATE) for PostgreSQL database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lc-collate")
    private Optional<? extends String> lcCollate;

    /**
     * Default character classification (LC_CTYPE) for PostgreSQL database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lc-ctype")
    private Optional<? extends String> lcCtype;

    public CreateDbaasPgDatabaseRequestBody(
            @JsonProperty("database-name") String databaseName,
            @JsonProperty("lc-collate") Optional<? extends String> lcCollate,
            @JsonProperty("lc-ctype") Optional<? extends String> lcCtype) {
        Utils.checkNotNull(databaseName, "databaseName");
        Utils.checkNotNull(lcCollate, "lcCollate");
        Utils.checkNotNull(lcCtype, "lcCtype");
        this.databaseName = databaseName;
        this.lcCollate = lcCollate;
        this.lcCtype = lcCtype;
    }

    public String databaseName() {
        return databaseName;
    }

    /**
     * Default string sort order (LC_COLLATE) for PostgreSQL database
     */
    public Optional<? extends String> lcCollate() {
        return lcCollate;
    }

    /**
     * Default character classification (LC_CTYPE) for PostgreSQL database
     */
    public Optional<? extends String> lcCtype() {
        return lcCtype;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateDbaasPgDatabaseRequestBody withDatabaseName(String databaseName) {
        Utils.checkNotNull(databaseName, "databaseName");
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Default string sort order (LC_COLLATE) for PostgreSQL database
     */
    public CreateDbaasPgDatabaseRequestBody withLcCollate(String lcCollate) {
        Utils.checkNotNull(lcCollate, "lcCollate");
        this.lcCollate = Optional.ofNullable(lcCollate);
        return this;
    }

    /**
     * Default string sort order (LC_COLLATE) for PostgreSQL database
     */
    public CreateDbaasPgDatabaseRequestBody withLcCollate(Optional<? extends String> lcCollate) {
        Utils.checkNotNull(lcCollate, "lcCollate");
        this.lcCollate = lcCollate;
        return this;
    }

    /**
     * Default character classification (LC_CTYPE) for PostgreSQL database
     */
    public CreateDbaasPgDatabaseRequestBody withLcCtype(String lcCtype) {
        Utils.checkNotNull(lcCtype, "lcCtype");
        this.lcCtype = Optional.ofNullable(lcCtype);
        return this;
    }

    /**
     * Default character classification (LC_CTYPE) for PostgreSQL database
     */
    public CreateDbaasPgDatabaseRequestBody withLcCtype(Optional<? extends String> lcCtype) {
        Utils.checkNotNull(lcCtype, "lcCtype");
        this.lcCtype = lcCtype;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDbaasPgDatabaseRequestBody other = (CreateDbaasPgDatabaseRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.databaseName, other.databaseName) &&
            java.util.Objects.deepEquals(this.lcCollate, other.lcCollate) &&
            java.util.Objects.deepEquals(this.lcCtype, other.lcCtype);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            databaseName,
            lcCollate,
            lcCtype);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDbaasPgDatabaseRequestBody.class,
                "databaseName", databaseName,
                "lcCollate", lcCollate,
                "lcCtype", lcCtype);
    }
    
    public final static class Builder {
 
        private String databaseName;
 
        private Optional<? extends String> lcCollate = Optional.empty();
 
        private Optional<? extends String> lcCtype = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder databaseName(String databaseName) {
            Utils.checkNotNull(databaseName, "databaseName");
            this.databaseName = databaseName;
            return this;
        }

        /**
         * Default string sort order (LC_COLLATE) for PostgreSQL database
         */
        public Builder lcCollate(String lcCollate) {
            Utils.checkNotNull(lcCollate, "lcCollate");
            this.lcCollate = Optional.ofNullable(lcCollate);
            return this;
        }

        /**
         * Default string sort order (LC_COLLATE) for PostgreSQL database
         */
        public Builder lcCollate(Optional<? extends String> lcCollate) {
            Utils.checkNotNull(lcCollate, "lcCollate");
            this.lcCollate = lcCollate;
            return this;
        }

        /**
         * Default character classification (LC_CTYPE) for PostgreSQL database
         */
        public Builder lcCtype(String lcCtype) {
            Utils.checkNotNull(lcCtype, "lcCtype");
            this.lcCtype = Optional.ofNullable(lcCtype);
            return this;
        }

        /**
         * Default character classification (LC_CTYPE) for PostgreSQL database
         */
        public Builder lcCtype(Optional<? extends String> lcCtype) {
            Utils.checkNotNull(lcCtype, "lcCtype");
            this.lcCtype = lcCtype;
            return this;
        }
        
        public CreateDbaasPgDatabaseRequestBody build() {
            return new CreateDbaasPgDatabaseRequestBody(
                databaseName,
                lcCollate,
                lcCtype);
        }
    }
}

