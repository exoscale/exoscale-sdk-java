/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * InstancePool - Instance Pool
 */

public class InstancePool {

    /**
     * Instance Pool Anti-affinity Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anti-affinity-groups")
    private Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups;

    /**
     * Instance Pool description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public-ip-assignment")
    private Optional<? extends PublicIpAssignment> publicIpAssignment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    /**
     * Instance Pool Security Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security-groups")
    private Optional<? extends java.util.List<SecurityGroup>> securityGroups;

    /**
     * Instances Elastic IPs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("elastic-ips")
    private Optional<? extends java.util.List<ElasticIp>> elasticIps;

    /**
     * Instance Pool name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Compute instance type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance-type")
    private Optional<? extends InstanceType> instanceType;

    /**
     * Minimum number of running instances
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min-available")
    private Optional<? extends Long> minAvailable;

    /**
     * Instance Pool Private Networks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private-networks")
    private Optional<? extends java.util.List<PrivateNetwork>> privateNetworks;

    /**
     * Instance template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends Template> template;

    /**
     * Instance Pool state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends InstancePoolState> state;

    /**
     * Number of instances
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Long> size;

    /**
     * SSH key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh-key")
    private Optional<? extends SshKey> sshKey;

    /**
     * The instances created by the Instance Pool will be prefixed with this value (default: pool)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance-prefix")
    private Optional<? extends String> instancePrefix;

    /**
     * Instances Cloud-init user-data
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user-data")
    private Optional<? extends String> userData;

    /**
     * Resource manager
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager")
    private Optional<? extends Manager> manager;

    /**
     * Instances
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instances")
    private Optional<? extends java.util.List<InstanceOutput>> instances;

    /**
     * Deploy target
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deploy-target")
    private Optional<? extends DeployTarget> deployTarget;

    /**
     * Enable IPv6 for instances
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv6-enabled")
    private Optional<? extends Boolean> ipv6Enabled;

    /**
     * Instance Pool ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Instances disk size in GB
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disk-size")
    private Optional<? extends Long> diskSize;

    /**
     * Instances SSH keys
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh-keys")
    private Optional<? extends java.util.List<SshKey>> sshKeys;

    public InstancePool(
            @JsonProperty("anti-affinity-groups") Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("public-ip-assignment") Optional<? extends PublicIpAssignment> publicIpAssignment,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("security-groups") Optional<? extends java.util.List<SecurityGroup>> securityGroups,
            @JsonProperty("elastic-ips") Optional<? extends java.util.List<ElasticIp>> elasticIps,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("instance-type") Optional<? extends InstanceType> instanceType,
            @JsonProperty("min-available") Optional<? extends Long> minAvailable,
            @JsonProperty("private-networks") Optional<? extends java.util.List<PrivateNetwork>> privateNetworks,
            @JsonProperty("template") Optional<? extends Template> template,
            @JsonProperty("state") Optional<? extends InstancePoolState> state,
            @JsonProperty("size") Optional<? extends Long> size,
            @JsonProperty("ssh-key") Optional<? extends SshKey> sshKey,
            @JsonProperty("instance-prefix") Optional<? extends String> instancePrefix,
            @JsonProperty("user-data") Optional<? extends String> userData,
            @JsonProperty("manager") Optional<? extends Manager> manager,
            @JsonProperty("instances") Optional<? extends java.util.List<InstanceOutput>> instances,
            @JsonProperty("deploy-target") Optional<? extends DeployTarget> deployTarget,
            @JsonProperty("ipv6-enabled") Optional<? extends Boolean> ipv6Enabled,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("disk-size") Optional<? extends Long> diskSize,
            @JsonProperty("ssh-keys") Optional<? extends java.util.List<SshKey>> sshKeys) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(securityGroups, "securityGroups");
        Utils.checkNotNull(elasticIps, "elasticIps");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(instanceType, "instanceType");
        Utils.checkNotNull(minAvailable, "minAvailable");
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(sshKey, "sshKey");
        Utils.checkNotNull(instancePrefix, "instancePrefix");
        Utils.checkNotNull(userData, "userData");
        Utils.checkNotNull(manager, "manager");
        Utils.checkNotNull(instances, "instances");
        Utils.checkNotNull(deployTarget, "deployTarget");
        Utils.checkNotNull(ipv6Enabled, "ipv6Enabled");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(diskSize, "diskSize");
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.antiAffinityGroups = antiAffinityGroups;
        this.description = description;
        this.publicIpAssignment = publicIpAssignment;
        this.labels = labels;
        this.securityGroups = securityGroups;
        this.elasticIps = elasticIps;
        this.name = name;
        this.instanceType = instanceType;
        this.minAvailable = minAvailable;
        this.privateNetworks = privateNetworks;
        this.template = template;
        this.state = state;
        this.size = size;
        this.sshKey = sshKey;
        this.instancePrefix = instancePrefix;
        this.userData = userData;
        this.manager = manager;
        this.instances = instances;
        this.deployTarget = deployTarget;
        this.ipv6Enabled = ipv6Enabled;
        this.id = id;
        this.diskSize = diskSize;
        this.sshKeys = sshKeys;
    }

    /**
     * Instance Pool Anti-affinity Groups
     */
    public Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups() {
        return antiAffinityGroups;
    }

    /**
     * Instance Pool description
     */
    public Optional<? extends String> description() {
        return description;
    }

    public Optional<? extends PublicIpAssignment> publicIpAssignment() {
        return publicIpAssignment;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    /**
     * Instance Pool Security Groups
     */
    public Optional<? extends java.util.List<SecurityGroup>> securityGroups() {
        return securityGroups;
    }

    /**
     * Instances Elastic IPs
     */
    public Optional<? extends java.util.List<ElasticIp>> elasticIps() {
        return elasticIps;
    }

    /**
     * Instance Pool name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Compute instance type
     */
    public Optional<? extends InstanceType> instanceType() {
        return instanceType;
    }

    /**
     * Minimum number of running instances
     */
    public Optional<? extends Long> minAvailable() {
        return minAvailable;
    }

    /**
     * Instance Pool Private Networks
     */
    public Optional<? extends java.util.List<PrivateNetwork>> privateNetworks() {
        return privateNetworks;
    }

    /**
     * Instance template
     */
    public Optional<? extends Template> template() {
        return template;
    }

    /**
     * Instance Pool state
     */
    public Optional<? extends InstancePoolState> state() {
        return state;
    }

    /**
     * Number of instances
     */
    public Optional<? extends Long> size() {
        return size;
    }

    /**
     * SSH key
     */
    public Optional<? extends SshKey> sshKey() {
        return sshKey;
    }

    /**
     * The instances created by the Instance Pool will be prefixed with this value (default: pool)
     */
    public Optional<? extends String> instancePrefix() {
        return instancePrefix;
    }

    /**
     * Instances Cloud-init user-data
     */
    public Optional<? extends String> userData() {
        return userData;
    }

    /**
     * Resource manager
     */
    public Optional<? extends Manager> manager() {
        return manager;
    }

    /**
     * Instances
     */
    public Optional<? extends java.util.List<InstanceOutput>> instances() {
        return instances;
    }

    /**
     * Deploy target
     */
    public Optional<? extends DeployTarget> deployTarget() {
        return deployTarget;
    }

    /**
     * Enable IPv6 for instances
     */
    public Optional<? extends Boolean> ipv6Enabled() {
        return ipv6Enabled;
    }

    /**
     * Instance Pool ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Instances disk size in GB
     */
    public Optional<? extends Long> diskSize() {
        return diskSize;
    }

    /**
     * Instances SSH keys
     */
    public Optional<? extends java.util.List<SshKey>> sshKeys() {
        return sshKeys;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Instance Pool Anti-affinity Groups
     */
    public InstancePool withAntiAffinityGroups(java.util.List<AntiAffinityGroupOutput> antiAffinityGroups) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        this.antiAffinityGroups = Optional.ofNullable(antiAffinityGroups);
        return this;
    }

    /**
     * Instance Pool Anti-affinity Groups
     */
    public InstancePool withAntiAffinityGroups(Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        this.antiAffinityGroups = antiAffinityGroups;
        return this;
    }

    /**
     * Instance Pool description
     */
    public InstancePool withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Instance Pool description
     */
    public InstancePool withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public InstancePool withPublicIpAssignment(PublicIpAssignment publicIpAssignment) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        this.publicIpAssignment = Optional.ofNullable(publicIpAssignment);
        return this;
    }

    public InstancePool withPublicIpAssignment(Optional<? extends PublicIpAssignment> publicIpAssignment) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        this.publicIpAssignment = publicIpAssignment;
        return this;
    }

    public InstancePool withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public InstancePool withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    /**
     * Instance Pool Security Groups
     */
    public InstancePool withSecurityGroups(java.util.List<SecurityGroup> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = Optional.ofNullable(securityGroups);
        return this;
    }

    /**
     * Instance Pool Security Groups
     */
    public InstancePool withSecurityGroups(Optional<? extends java.util.List<SecurityGroup>> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Instances Elastic IPs
     */
    public InstancePool withElasticIps(java.util.List<ElasticIp> elasticIps) {
        Utils.checkNotNull(elasticIps, "elasticIps");
        this.elasticIps = Optional.ofNullable(elasticIps);
        return this;
    }

    /**
     * Instances Elastic IPs
     */
    public InstancePool withElasticIps(Optional<? extends java.util.List<ElasticIp>> elasticIps) {
        Utils.checkNotNull(elasticIps, "elasticIps");
        this.elasticIps = elasticIps;
        return this;
    }

    /**
     * Instance Pool name
     */
    public InstancePool withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Instance Pool name
     */
    public InstancePool withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Compute instance type
     */
    public InstancePool withInstanceType(InstanceType instanceType) {
        Utils.checkNotNull(instanceType, "instanceType");
        this.instanceType = Optional.ofNullable(instanceType);
        return this;
    }

    /**
     * Compute instance type
     */
    public InstancePool withInstanceType(Optional<? extends InstanceType> instanceType) {
        Utils.checkNotNull(instanceType, "instanceType");
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Minimum number of running instances
     */
    public InstancePool withMinAvailable(long minAvailable) {
        Utils.checkNotNull(minAvailable, "minAvailable");
        this.minAvailable = Optional.ofNullable(minAvailable);
        return this;
    }

    /**
     * Minimum number of running instances
     */
    public InstancePool withMinAvailable(Optional<? extends Long> minAvailable) {
        Utils.checkNotNull(minAvailable, "minAvailable");
        this.minAvailable = minAvailable;
        return this;
    }

    /**
     * Instance Pool Private Networks
     */
    public InstancePool withPrivateNetworks(java.util.List<PrivateNetwork> privateNetworks) {
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        this.privateNetworks = Optional.ofNullable(privateNetworks);
        return this;
    }

    /**
     * Instance Pool Private Networks
     */
    public InstancePool withPrivateNetworks(Optional<? extends java.util.List<PrivateNetwork>> privateNetworks) {
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        this.privateNetworks = privateNetworks;
        return this;
    }

    /**
     * Instance template
     */
    public InstancePool withTemplate(Template template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    /**
     * Instance template
     */
    public InstancePool withTemplate(Optional<? extends Template> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    /**
     * Instance Pool state
     */
    public InstancePool withState(InstancePoolState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * Instance Pool state
     */
    public InstancePool withState(Optional<? extends InstancePoolState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Number of instances
     */
    public InstancePool withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Number of instances
     */
    public InstancePool withSize(Optional<? extends Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * SSH key
     */
    public InstancePool withSshKey(SshKey sshKey) {
        Utils.checkNotNull(sshKey, "sshKey");
        this.sshKey = Optional.ofNullable(sshKey);
        return this;
    }

    /**
     * SSH key
     */
    public InstancePool withSshKey(Optional<? extends SshKey> sshKey) {
        Utils.checkNotNull(sshKey, "sshKey");
        this.sshKey = sshKey;
        return this;
    }

    /**
     * The instances created by the Instance Pool will be prefixed with this value (default: pool)
     */
    public InstancePool withInstancePrefix(String instancePrefix) {
        Utils.checkNotNull(instancePrefix, "instancePrefix");
        this.instancePrefix = Optional.ofNullable(instancePrefix);
        return this;
    }

    /**
     * The instances created by the Instance Pool will be prefixed with this value (default: pool)
     */
    public InstancePool withInstancePrefix(Optional<? extends String> instancePrefix) {
        Utils.checkNotNull(instancePrefix, "instancePrefix");
        this.instancePrefix = instancePrefix;
        return this;
    }

    /**
     * Instances Cloud-init user-data
     */
    public InstancePool withUserData(String userData) {
        Utils.checkNotNull(userData, "userData");
        this.userData = Optional.ofNullable(userData);
        return this;
    }

    /**
     * Instances Cloud-init user-data
     */
    public InstancePool withUserData(Optional<? extends String> userData) {
        Utils.checkNotNull(userData, "userData");
        this.userData = userData;
        return this;
    }

    /**
     * Resource manager
     */
    public InstancePool withManager(Manager manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = Optional.ofNullable(manager);
        return this;
    }

    /**
     * Resource manager
     */
    public InstancePool withManager(Optional<? extends Manager> manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = manager;
        return this;
    }

    /**
     * Instances
     */
    public InstancePool withInstances(java.util.List<InstanceOutput> instances) {
        Utils.checkNotNull(instances, "instances");
        this.instances = Optional.ofNullable(instances);
        return this;
    }

    /**
     * Instances
     */
    public InstancePool withInstances(Optional<? extends java.util.List<InstanceOutput>> instances) {
        Utils.checkNotNull(instances, "instances");
        this.instances = instances;
        return this;
    }

    /**
     * Deploy target
     */
    public InstancePool withDeployTarget(DeployTarget deployTarget) {
        Utils.checkNotNull(deployTarget, "deployTarget");
        this.deployTarget = Optional.ofNullable(deployTarget);
        return this;
    }

    /**
     * Deploy target
     */
    public InstancePool withDeployTarget(Optional<? extends DeployTarget> deployTarget) {
        Utils.checkNotNull(deployTarget, "deployTarget");
        this.deployTarget = deployTarget;
        return this;
    }

    /**
     * Enable IPv6 for instances
     */
    public InstancePool withIpv6Enabled(boolean ipv6Enabled) {
        Utils.checkNotNull(ipv6Enabled, "ipv6Enabled");
        this.ipv6Enabled = Optional.ofNullable(ipv6Enabled);
        return this;
    }

    /**
     * Enable IPv6 for instances
     */
    public InstancePool withIpv6Enabled(Optional<? extends Boolean> ipv6Enabled) {
        Utils.checkNotNull(ipv6Enabled, "ipv6Enabled");
        this.ipv6Enabled = ipv6Enabled;
        return this;
    }

    /**
     * Instance Pool ID
     */
    public InstancePool withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Instance Pool ID
     */
    public InstancePool withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Instances disk size in GB
     */
    public InstancePool withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = Optional.ofNullable(diskSize);
        return this;
    }

    /**
     * Instances disk size in GB
     */
    public InstancePool withDiskSize(Optional<? extends Long> diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }

    /**
     * Instances SSH keys
     */
    public InstancePool withSshKeys(java.util.List<SshKey> sshKeys) {
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.sshKeys = Optional.ofNullable(sshKeys);
        return this;
    }

    /**
     * Instances SSH keys
     */
    public InstancePool withSshKeys(Optional<? extends java.util.List<SshKey>> sshKeys) {
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.sshKeys = sshKeys;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InstancePool other = (InstancePool) o;
        return 
            java.util.Objects.deepEquals(this.antiAffinityGroups, other.antiAffinityGroups) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.publicIpAssignment, other.publicIpAssignment) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.securityGroups, other.securityGroups) &&
            java.util.Objects.deepEquals(this.elasticIps, other.elasticIps) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.instanceType, other.instanceType) &&
            java.util.Objects.deepEquals(this.minAvailable, other.minAvailable) &&
            java.util.Objects.deepEquals(this.privateNetworks, other.privateNetworks) &&
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.sshKey, other.sshKey) &&
            java.util.Objects.deepEquals(this.instancePrefix, other.instancePrefix) &&
            java.util.Objects.deepEquals(this.userData, other.userData) &&
            java.util.Objects.deepEquals(this.manager, other.manager) &&
            java.util.Objects.deepEquals(this.instances, other.instances) &&
            java.util.Objects.deepEquals(this.deployTarget, other.deployTarget) &&
            java.util.Objects.deepEquals(this.ipv6Enabled, other.ipv6Enabled) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize) &&
            java.util.Objects.deepEquals(this.sshKeys, other.sshKeys);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            antiAffinityGroups,
            description,
            publicIpAssignment,
            labels,
            securityGroups,
            elasticIps,
            name,
            instanceType,
            minAvailable,
            privateNetworks,
            template,
            state,
            size,
            sshKey,
            instancePrefix,
            userData,
            manager,
            instances,
            deployTarget,
            ipv6Enabled,
            id,
            diskSize,
            sshKeys);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InstancePool.class,
                "antiAffinityGroups", antiAffinityGroups,
                "description", description,
                "publicIpAssignment", publicIpAssignment,
                "labels", labels,
                "securityGroups", securityGroups,
                "elasticIps", elasticIps,
                "name", name,
                "instanceType", instanceType,
                "minAvailable", minAvailable,
                "privateNetworks", privateNetworks,
                "template", template,
                "state", state,
                "size", size,
                "sshKey", sshKey,
                "instancePrefix", instancePrefix,
                "userData", userData,
                "manager", manager,
                "instances", instances,
                "deployTarget", deployTarget,
                "ipv6Enabled", ipv6Enabled,
                "id", id,
                "diskSize", diskSize,
                "sshKeys", sshKeys);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends PublicIpAssignment> publicIpAssignment = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends java.util.List<SecurityGroup>> securityGroups = Optional.empty();
 
        private Optional<? extends java.util.List<ElasticIp>> elasticIps = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends InstanceType> instanceType = Optional.empty();
 
        private Optional<? extends Long> minAvailable = Optional.empty();
 
        private Optional<? extends java.util.List<PrivateNetwork>> privateNetworks = Optional.empty();
 
        private Optional<? extends Template> template = Optional.empty();
 
        private Optional<? extends InstancePoolState> state = Optional.empty();
 
        private Optional<? extends Long> size = Optional.empty();
 
        private Optional<? extends SshKey> sshKey = Optional.empty();
 
        private Optional<? extends String> instancePrefix = Optional.empty();
 
        private Optional<? extends String> userData = Optional.empty();
 
        private Optional<? extends Manager> manager = Optional.empty();
 
        private Optional<? extends java.util.List<InstanceOutput>> instances = Optional.empty();
 
        private Optional<? extends DeployTarget> deployTarget = Optional.empty();
 
        private Optional<? extends Boolean> ipv6Enabled = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends Long> diskSize = Optional.empty();
 
        private Optional<? extends java.util.List<SshKey>> sshKeys = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Instance Pool Anti-affinity Groups
         */
        public Builder antiAffinityGroups(java.util.List<AntiAffinityGroupOutput> antiAffinityGroups) {
            Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
            this.antiAffinityGroups = Optional.ofNullable(antiAffinityGroups);
            return this;
        }

        /**
         * Instance Pool Anti-affinity Groups
         */
        public Builder antiAffinityGroups(Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups) {
            Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
            this.antiAffinityGroups = antiAffinityGroups;
            return this;
        }

        /**
         * Instance Pool description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Instance Pool description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder publicIpAssignment(PublicIpAssignment publicIpAssignment) {
            Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
            this.publicIpAssignment = Optional.ofNullable(publicIpAssignment);
            return this;
        }

        public Builder publicIpAssignment(Optional<? extends PublicIpAssignment> publicIpAssignment) {
            Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
            this.publicIpAssignment = publicIpAssignment;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        /**
         * Instance Pool Security Groups
         */
        public Builder securityGroups(java.util.List<SecurityGroup> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = Optional.ofNullable(securityGroups);
            return this;
        }

        /**
         * Instance Pool Security Groups
         */
        public Builder securityGroups(Optional<? extends java.util.List<SecurityGroup>> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = securityGroups;
            return this;
        }

        /**
         * Instances Elastic IPs
         */
        public Builder elasticIps(java.util.List<ElasticIp> elasticIps) {
            Utils.checkNotNull(elasticIps, "elasticIps");
            this.elasticIps = Optional.ofNullable(elasticIps);
            return this;
        }

        /**
         * Instances Elastic IPs
         */
        public Builder elasticIps(Optional<? extends java.util.List<ElasticIp>> elasticIps) {
            Utils.checkNotNull(elasticIps, "elasticIps");
            this.elasticIps = elasticIps;
            return this;
        }

        /**
         * Instance Pool name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Instance Pool name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Compute instance type
         */
        public Builder instanceType(InstanceType instanceType) {
            Utils.checkNotNull(instanceType, "instanceType");
            this.instanceType = Optional.ofNullable(instanceType);
            return this;
        }

        /**
         * Compute instance type
         */
        public Builder instanceType(Optional<? extends InstanceType> instanceType) {
            Utils.checkNotNull(instanceType, "instanceType");
            this.instanceType = instanceType;
            return this;
        }

        /**
         * Minimum number of running instances
         */
        public Builder minAvailable(long minAvailable) {
            Utils.checkNotNull(minAvailable, "minAvailable");
            this.minAvailable = Optional.ofNullable(minAvailable);
            return this;
        }

        /**
         * Minimum number of running instances
         */
        public Builder minAvailable(Optional<? extends Long> minAvailable) {
            Utils.checkNotNull(minAvailable, "minAvailable");
            this.minAvailable = minAvailable;
            return this;
        }

        /**
         * Instance Pool Private Networks
         */
        public Builder privateNetworks(java.util.List<PrivateNetwork> privateNetworks) {
            Utils.checkNotNull(privateNetworks, "privateNetworks");
            this.privateNetworks = Optional.ofNullable(privateNetworks);
            return this;
        }

        /**
         * Instance Pool Private Networks
         */
        public Builder privateNetworks(Optional<? extends java.util.List<PrivateNetwork>> privateNetworks) {
            Utils.checkNotNull(privateNetworks, "privateNetworks");
            this.privateNetworks = privateNetworks;
            return this;
        }

        /**
         * Instance template
         */
        public Builder template(Template template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        /**
         * Instance template
         */
        public Builder template(Optional<? extends Template> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        /**
         * Instance Pool state
         */
        public Builder state(InstancePoolState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Instance Pool state
         */
        public Builder state(Optional<? extends InstancePoolState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Number of instances
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Number of instances
         */
        public Builder size(Optional<? extends Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * SSH key
         */
        public Builder sshKey(SshKey sshKey) {
            Utils.checkNotNull(sshKey, "sshKey");
            this.sshKey = Optional.ofNullable(sshKey);
            return this;
        }

        /**
         * SSH key
         */
        public Builder sshKey(Optional<? extends SshKey> sshKey) {
            Utils.checkNotNull(sshKey, "sshKey");
            this.sshKey = sshKey;
            return this;
        }

        /**
         * The instances created by the Instance Pool will be prefixed with this value (default: pool)
         */
        public Builder instancePrefix(String instancePrefix) {
            Utils.checkNotNull(instancePrefix, "instancePrefix");
            this.instancePrefix = Optional.ofNullable(instancePrefix);
            return this;
        }

        /**
         * The instances created by the Instance Pool will be prefixed with this value (default: pool)
         */
        public Builder instancePrefix(Optional<? extends String> instancePrefix) {
            Utils.checkNotNull(instancePrefix, "instancePrefix");
            this.instancePrefix = instancePrefix;
            return this;
        }

        /**
         * Instances Cloud-init user-data
         */
        public Builder userData(String userData) {
            Utils.checkNotNull(userData, "userData");
            this.userData = Optional.ofNullable(userData);
            return this;
        }

        /**
         * Instances Cloud-init user-data
         */
        public Builder userData(Optional<? extends String> userData) {
            Utils.checkNotNull(userData, "userData");
            this.userData = userData;
            return this;
        }

        /**
         * Resource manager
         */
        public Builder manager(Manager manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = Optional.ofNullable(manager);
            return this;
        }

        /**
         * Resource manager
         */
        public Builder manager(Optional<? extends Manager> manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = manager;
            return this;
        }

        /**
         * Instances
         */
        public Builder instances(java.util.List<InstanceOutput> instances) {
            Utils.checkNotNull(instances, "instances");
            this.instances = Optional.ofNullable(instances);
            return this;
        }

        /**
         * Instances
         */
        public Builder instances(Optional<? extends java.util.List<InstanceOutput>> instances) {
            Utils.checkNotNull(instances, "instances");
            this.instances = instances;
            return this;
        }

        /**
         * Deploy target
         */
        public Builder deployTarget(DeployTarget deployTarget) {
            Utils.checkNotNull(deployTarget, "deployTarget");
            this.deployTarget = Optional.ofNullable(deployTarget);
            return this;
        }

        /**
         * Deploy target
         */
        public Builder deployTarget(Optional<? extends DeployTarget> deployTarget) {
            Utils.checkNotNull(deployTarget, "deployTarget");
            this.deployTarget = deployTarget;
            return this;
        }

        /**
         * Enable IPv6 for instances
         */
        public Builder ipv6Enabled(boolean ipv6Enabled) {
            Utils.checkNotNull(ipv6Enabled, "ipv6Enabled");
            this.ipv6Enabled = Optional.ofNullable(ipv6Enabled);
            return this;
        }

        /**
         * Enable IPv6 for instances
         */
        public Builder ipv6Enabled(Optional<? extends Boolean> ipv6Enabled) {
            Utils.checkNotNull(ipv6Enabled, "ipv6Enabled");
            this.ipv6Enabled = ipv6Enabled;
            return this;
        }

        /**
         * Instance Pool ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Instance Pool ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Instances disk size in GB
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = Optional.ofNullable(diskSize);
            return this;
        }

        /**
         * Instances disk size in GB
         */
        public Builder diskSize(Optional<? extends Long> diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }

        /**
         * Instances SSH keys
         */
        public Builder sshKeys(java.util.List<SshKey> sshKeys) {
            Utils.checkNotNull(sshKeys, "sshKeys");
            this.sshKeys = Optional.ofNullable(sshKeys);
            return this;
        }

        /**
         * Instances SSH keys
         */
        public Builder sshKeys(Optional<? extends java.util.List<SshKey>> sshKeys) {
            Utils.checkNotNull(sshKeys, "sshKeys");
            this.sshKeys = sshKeys;
            return this;
        }
        
        public InstancePool build() {
            return new InstancePool(
                antiAffinityGroups,
                description,
                publicIpAssignment,
                labels,
                securityGroups,
                elasticIps,
                name,
                instanceType,
                minAvailable,
                privateNetworks,
                template,
                state,
                size,
                sshKey,
                instancePrefix,
                userData,
                manager,
                instances,
                deployTarget,
                ipv6Enabled,
                id,
                diskSize,
                sshKeys);
        }
    }
}

