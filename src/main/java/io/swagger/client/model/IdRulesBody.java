/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.SecurityGroupResource;
import io.swagger.client.model.SecuritygroupidrulesIcmp;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * IdRulesBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class IdRulesBody {
  /**
   * Network flow direction to match
   */
  public enum FlowDirectionEnum {
    INGRESS("ingress"),
    EGRESS("egress");

    private String value;

    FlowDirectionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static FlowDirectionEnum fromValue(String input) {
      for (FlowDirectionEnum b : FlowDirectionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("flow-direction")
  private FlowDirectionEnum flowDirection = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("network")
  private String network = null;

  @JsonProperty("security-group")
  private SecurityGroupResource securityGroup = null;

  /**
   * Network protocol
   */
  public enum ProtocolEnum {
    TCP("tcp"),
    ESP("esp"),
    ICMP("icmp"),
    UDP("udp"),
    GRE("gre"),
    AH("ah"),
    IPIP("ipip"),
    ICMPV6("icmpv6");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ProtocolEnum fromValue(String input) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("protocol")
  private ProtocolEnum protocol = null;

  @JsonProperty("icmp")
  private SecuritygroupidrulesIcmp icmp = null;

  @JsonProperty("start-port")
  private Long startPort = null;

  @JsonProperty("end-port")
  private Long endPort = null;

  public IdRulesBody flowDirection(FlowDirectionEnum flowDirection) {
    this.flowDirection = flowDirection;
    return this;
  }

   /**
   * Network flow direction to match
   * @return flowDirection
  **/
  @Schema(required = true, description = "Network flow direction to match")
  public FlowDirectionEnum getFlowDirection() {
    return flowDirection;
  }

  public void setFlowDirection(FlowDirectionEnum flowDirection) {
    this.flowDirection = flowDirection;
  }

  public IdRulesBody description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Security Group rule description
   * @return description
  **/
  @Schema(description = "Security Group rule description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public IdRulesBody network(String network) {
    this.network = network;
    return this;
  }

   /**
   * CIDR-formatted network allowed
   * @return network
  **/
  @Schema(description = "CIDR-formatted network allowed")
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }

  public IdRulesBody securityGroup(SecurityGroupResource securityGroup) {
    this.securityGroup = securityGroup;
    return this;
  }

   /**
   * Get securityGroup
   * @return securityGroup
  **/
  @Schema(description = "")
  public SecurityGroupResource getSecurityGroup() {
    return securityGroup;
  }

  public void setSecurityGroup(SecurityGroupResource securityGroup) {
    this.securityGroup = securityGroup;
  }

  public IdRulesBody protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Network protocol
   * @return protocol
  **/
  @Schema(required = true, description = "Network protocol")
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }

  public IdRulesBody icmp(SecuritygroupidrulesIcmp icmp) {
    this.icmp = icmp;
    return this;
  }

   /**
   * Get icmp
   * @return icmp
  **/
  @Schema(description = "")
  public SecuritygroupidrulesIcmp getIcmp() {
    return icmp;
  }

  public void setIcmp(SecuritygroupidrulesIcmp icmp) {
    this.icmp = icmp;
  }

  public IdRulesBody startPort(Long startPort) {
    this.startPort = startPort;
    return this;
  }

   /**
   * Start port of the range
   * minimum: 1
   * maximum: 65535
   * @return startPort
  **/
  @Schema(description = "Start port of the range")
  public Long getStartPort() {
    return startPort;
  }

  public void setStartPort(Long startPort) {
    this.startPort = startPort;
  }

  public IdRulesBody endPort(Long endPort) {
    this.endPort = endPort;
    return this;
  }

   /**
   * End port of the range
   * minimum: 1
   * maximum: 65535
   * @return endPort
  **/
  @Schema(description = "End port of the range")
  public Long getEndPort() {
    return endPort;
  }

  public void setEndPort(Long endPort) {
    this.endPort = endPort;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdRulesBody idRulesBody = (IdRulesBody) o;
    return Objects.equals(this.flowDirection, idRulesBody.flowDirection) &&
        Objects.equals(this.description, idRulesBody.description) &&
        Objects.equals(this.network, idRulesBody.network) &&
        Objects.equals(this.securityGroup, idRulesBody.securityGroup) &&
        Objects.equals(this.protocol, idRulesBody.protocol) &&
        Objects.equals(this.icmp, idRulesBody.icmp) &&
        Objects.equals(this.startPort, idRulesBody.startPort) &&
        Objects.equals(this.endPort, idRulesBody.endPort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flowDirection, description, network, securityGroup, protocol, icmp, startPort, endPort);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdRulesBody {\n");
    
    sb.append("    flowDirection: ").append(toIndentedString(flowDirection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    securityGroup: ").append(toIndentedString(securityGroup)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    icmp: ").append(toIndentedString(icmp)).append("\n");
    sb.append("    startPort: ").append(toIndentedString(startPort)).append("\n");
    sb.append("    endPort: ").append(toIndentedString(endPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
