/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DbaasNodeStateProgressUpdate - Extra information regarding the progress for current state
 */

public class DbaasNodeStateProgressUpdate {

    /**
     * Indicates whether this phase has been completed or not
     */
    @JsonProperty("completed")
    private boolean completed;

    /**
     * Current progress for this phase. May be missing or null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current")
    private Optional<? extends Long> current;

    /**
     * Maximum progress value for this phase. May be missing or null. May change.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max")
    private Optional<? extends Long> max;

    /**
     * Minimum progress value for this phase. May be missing or null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min")
    private Optional<? extends Long> min;

    /**
     * Key identifying this phase
     */
    @JsonProperty("phase")
    private Phase phase;

    /**
     * Unit for current/min/max values. New units may be added.
     *                         If null should be treated as generic unit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit")
    private Optional<? extends String> unit;

    public DbaasNodeStateProgressUpdate(
            @JsonProperty("completed") boolean completed,
            @JsonProperty("current") Optional<? extends Long> current,
            @JsonProperty("max") Optional<? extends Long> max,
            @JsonProperty("min") Optional<? extends Long> min,
            @JsonProperty("phase") Phase phase,
            @JsonProperty("unit") Optional<? extends String> unit) {
        Utils.checkNotNull(completed, "completed");
        Utils.checkNotNull(current, "current");
        Utils.checkNotNull(max, "max");
        Utils.checkNotNull(min, "min");
        Utils.checkNotNull(phase, "phase");
        Utils.checkNotNull(unit, "unit");
        this.completed = completed;
        this.current = current;
        this.max = max;
        this.min = min;
        this.phase = phase;
        this.unit = unit;
    }

    /**
     * Indicates whether this phase has been completed or not
     */
    public boolean completed() {
        return completed;
    }

    /**
     * Current progress for this phase. May be missing or null.
     */
    public Optional<? extends Long> current() {
        return current;
    }

    /**
     * Maximum progress value for this phase. May be missing or null. May change.
     */
    public Optional<? extends Long> max() {
        return max;
    }

    /**
     * Minimum progress value for this phase. May be missing or null.
     */
    public Optional<? extends Long> min() {
        return min;
    }

    /**
     * Key identifying this phase
     */
    public Phase phase() {
        return phase;
    }

    /**
     * Unit for current/min/max values. New units may be added.
     *                         If null should be treated as generic unit
     */
    public Optional<? extends String> unit() {
        return unit;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates whether this phase has been completed or not
     */
    public DbaasNodeStateProgressUpdate withCompleted(boolean completed) {
        Utils.checkNotNull(completed, "completed");
        this.completed = completed;
        return this;
    }

    /**
     * Current progress for this phase. May be missing or null.
     */
    public DbaasNodeStateProgressUpdate withCurrent(long current) {
        Utils.checkNotNull(current, "current");
        this.current = Optional.ofNullable(current);
        return this;
    }

    /**
     * Current progress for this phase. May be missing or null.
     */
    public DbaasNodeStateProgressUpdate withCurrent(Optional<? extends Long> current) {
        Utils.checkNotNull(current, "current");
        this.current = current;
        return this;
    }

    /**
     * Maximum progress value for this phase. May be missing or null. May change.
     */
    public DbaasNodeStateProgressUpdate withMax(long max) {
        Utils.checkNotNull(max, "max");
        this.max = Optional.ofNullable(max);
        return this;
    }

    /**
     * Maximum progress value for this phase. May be missing or null. May change.
     */
    public DbaasNodeStateProgressUpdate withMax(Optional<? extends Long> max) {
        Utils.checkNotNull(max, "max");
        this.max = max;
        return this;
    }

    /**
     * Minimum progress value for this phase. May be missing or null.
     */
    public DbaasNodeStateProgressUpdate withMin(long min) {
        Utils.checkNotNull(min, "min");
        this.min = Optional.ofNullable(min);
        return this;
    }

    /**
     * Minimum progress value for this phase. May be missing or null.
     */
    public DbaasNodeStateProgressUpdate withMin(Optional<? extends Long> min) {
        Utils.checkNotNull(min, "min");
        this.min = min;
        return this;
    }

    /**
     * Key identifying this phase
     */
    public DbaasNodeStateProgressUpdate withPhase(Phase phase) {
        Utils.checkNotNull(phase, "phase");
        this.phase = phase;
        return this;
    }

    /**
     * Unit for current/min/max values. New units may be added.
     *                         If null should be treated as generic unit
     */
    public DbaasNodeStateProgressUpdate withUnit(String unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = Optional.ofNullable(unit);
        return this;
    }

    /**
     * Unit for current/min/max values. New units may be added.
     *                         If null should be treated as generic unit
     */
    public DbaasNodeStateProgressUpdate withUnit(Optional<? extends String> unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = unit;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasNodeStateProgressUpdate other = (DbaasNodeStateProgressUpdate) o;
        return 
            java.util.Objects.deepEquals(this.completed, other.completed) &&
            java.util.Objects.deepEquals(this.current, other.current) &&
            java.util.Objects.deepEquals(this.max, other.max) &&
            java.util.Objects.deepEquals(this.min, other.min) &&
            java.util.Objects.deepEquals(this.phase, other.phase) &&
            java.util.Objects.deepEquals(this.unit, other.unit);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            completed,
            current,
            max,
            min,
            phase,
            unit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasNodeStateProgressUpdate.class,
                "completed", completed,
                "current", current,
                "max", max,
                "min", min,
                "phase", phase,
                "unit", unit);
    }
    
    public final static class Builder {
 
        private Boolean completed;
 
        private Optional<? extends Long> current = Optional.empty();
 
        private Optional<? extends Long> max = Optional.empty();
 
        private Optional<? extends Long> min = Optional.empty();
 
        private Phase phase;
 
        private Optional<? extends String> unit = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates whether this phase has been completed or not
         */
        public Builder completed(boolean completed) {
            Utils.checkNotNull(completed, "completed");
            this.completed = completed;
            return this;
        }

        /**
         * Current progress for this phase. May be missing or null.
         */
        public Builder current(long current) {
            Utils.checkNotNull(current, "current");
            this.current = Optional.ofNullable(current);
            return this;
        }

        /**
         * Current progress for this phase. May be missing or null.
         */
        public Builder current(Optional<? extends Long> current) {
            Utils.checkNotNull(current, "current");
            this.current = current;
            return this;
        }

        /**
         * Maximum progress value for this phase. May be missing or null. May change.
         */
        public Builder max(long max) {
            Utils.checkNotNull(max, "max");
            this.max = Optional.ofNullable(max);
            return this;
        }

        /**
         * Maximum progress value for this phase. May be missing or null. May change.
         */
        public Builder max(Optional<? extends Long> max) {
            Utils.checkNotNull(max, "max");
            this.max = max;
            return this;
        }

        /**
         * Minimum progress value for this phase. May be missing or null.
         */
        public Builder min(long min) {
            Utils.checkNotNull(min, "min");
            this.min = Optional.ofNullable(min);
            return this;
        }

        /**
         * Minimum progress value for this phase. May be missing or null.
         */
        public Builder min(Optional<? extends Long> min) {
            Utils.checkNotNull(min, "min");
            this.min = min;
            return this;
        }

        /**
         * Key identifying this phase
         */
        public Builder phase(Phase phase) {
            Utils.checkNotNull(phase, "phase");
            this.phase = phase;
            return this;
        }

        /**
         * Unit for current/min/max values. New units may be added.
         *                         If null should be treated as generic unit
         */
        public Builder unit(String unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = Optional.ofNullable(unit);
            return this;
        }

        /**
         * Unit for current/min/max values. New units may be added.
         *                         If null should be treated as generic unit
         */
        public Builder unit(Optional<? extends String> unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = unit;
            return this;
        }
        
        public DbaasNodeStateProgressUpdate build() {
            return new DbaasNodeStateProgressUpdate(
                completed,
                current,
                max,
                min,
                phase,
                unit);
        }
    }
}

