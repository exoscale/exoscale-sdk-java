/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.SpeakeasyMetadata;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class UpdateDnsDomainRecordRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=domain-id")
    private String domainId;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=record-id")
    private String recordId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private UpdateDnsDomainRecordRequestBody requestBody;

    public UpdateDnsDomainRecordRequest(
            String domainId,
            String recordId,
            UpdateDnsDomainRecordRequestBody requestBody) {
        Utils.checkNotNull(domainId, "domainId");
        Utils.checkNotNull(recordId, "recordId");
        Utils.checkNotNull(requestBody, "requestBody");
        this.domainId = domainId;
        this.recordId = recordId;
        this.requestBody = requestBody;
    }

    public String domainId() {
        return domainId;
    }

    public String recordId() {
        return recordId;
    }

    public UpdateDnsDomainRecordRequestBody requestBody() {
        return requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateDnsDomainRecordRequest withDomainId(String domainId) {
        Utils.checkNotNull(domainId, "domainId");
        this.domainId = domainId;
        return this;
    }

    public UpdateDnsDomainRecordRequest withRecordId(String recordId) {
        Utils.checkNotNull(recordId, "recordId");
        this.recordId = recordId;
        return this;
    }

    public UpdateDnsDomainRecordRequest withRequestBody(UpdateDnsDomainRecordRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDnsDomainRecordRequest other = (UpdateDnsDomainRecordRequest) o;
        return 
            java.util.Objects.deepEquals(this.domainId, other.domainId) &&
            java.util.Objects.deepEquals(this.recordId, other.recordId) &&
            java.util.Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            domainId,
            recordId,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateDnsDomainRecordRequest.class,
                "domainId", domainId,
                "recordId", recordId,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private String domainId;
 
        private String recordId;
 
        private UpdateDnsDomainRecordRequestBody requestBody;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder domainId(String domainId) {
            Utils.checkNotNull(domainId, "domainId");
            this.domainId = domainId;
            return this;
        }

        public Builder recordId(String recordId) {
            Utils.checkNotNull(recordId, "recordId");
            this.recordId = recordId;
            return this;
        }

        public Builder requestBody(UpdateDnsDomainRecordRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public UpdateDnsDomainRecordRequest build() {
            return new UpdateDnsDomainRecordRequest(
                domainId,
                recordId,
                requestBody);
        }
    }
}

