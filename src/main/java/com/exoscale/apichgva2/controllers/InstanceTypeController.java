/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.InstanceType;
import com.exoscale.apichgva2.models.InstanceTypeResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class InstanceTypeController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public InstanceTypeController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the InstanceType response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InstanceType getInstanceType(
            final UUID id) throws ApiException, IOException {
        return prepareGetInstanceTypeRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the InstanceType response from the API call
     */
    public CompletableFuture<InstanceType> getInstanceTypeAsync(
            final UUID id) {
        try { 
            return prepareGetInstanceTypeRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getInstanceType.
     */
    private ApiCall<InstanceType, ApiException> prepareGetInstanceTypeRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<InstanceType, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance-type/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, InstanceType.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the InstanceTypeResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InstanceTypeResponse listInstanceTypes() throws ApiException, IOException {
        return prepareListInstanceTypesRequest().execute();
    }

    /**
     * @return    Returns the InstanceTypeResponse response from the API call
     */
    public CompletableFuture<InstanceTypeResponse> listInstanceTypesAsync() {
        try { 
            return prepareListInstanceTypesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listInstanceTypes.
     */
    private ApiCall<InstanceTypeResponse, ApiException> prepareListInstanceTypesRequest() throws IOException {
        return new ApiCall.Builder<InstanceTypeResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance-type")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, InstanceTypeResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}