/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api;

import com.exoscale.api.models.errors.SDKError;
import com.exoscale.api.models.operations.SDKMethodInterfaces.*;
import com.exoscale.api.utils.HTTPClient;
import com.exoscale.api.utils.HTTPRequest;
import com.exoscale.api.utils.JSON;
import com.exoscale.api.utils.SerializedBody;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

public class Instance implements
            MethodCallCreateSnapshot,
            MethodCallRevealInstancePassword,
            MethodCallResizeInstanceDisk,
            MethodCallResetInstancePassword,
            MethodCallStartInstance,
            MethodCallScaleInstance,
            MethodCallStopInstance,
            MethodCallAddInstanceProtection,
            MethodCallResetInstanceField,
            MethodCallRemoveInstanceProtection,
            MethodCallResetInstance,
            MethodCallDeleteInstance,
            MethodCallUpdateInstance,
            MethodCallGetInstance,
            MethodCallRebootInstance,
            MethodCallCreateInstance,
            MethodCallListInstances,
            MethodCallRevertInstanceToSnapshot {

    private final SDKConfiguration sdkConfiguration;

    Instance(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.exoscale.api.models.operations.CreateSnapshotRequestBuilder createSnapshot() {
        return new com.exoscale.api.models.operations.CreateSnapshotRequestBuilder(this);
    }

    /**
     * Create a Snapshot of a Compute instance
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateSnapshotResponse createSnapshot(
            String id) throws Exception {
        com.exoscale.api.models.operations.CreateSnapshotRequest request =
            com.exoscale.api.models.operations.CreateSnapshotRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateSnapshotRequest.class,
                baseUrl,
                "/instance/{id}:create-snapshot",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateSnapshotResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateSnapshotResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateSnapshotResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.RevealInstancePasswordRequestBuilder revealInstancePassword() {
        return new com.exoscale.api.models.operations.RevealInstancePasswordRequestBuilder(this);
    }

    /**
     * Reveal the password used during instance creation or the latest password reset.
     * Reveal the password used during instance creation or the latest password reset.
     *             This is only available for VMs created against templates having the `password-enabled`
     *             property set to `true`.
     * 
     *             Passwords are transiently stored for at most 24 hours and intended to be retrieved shortly after
     *             creation or resets.
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.RevealInstancePasswordResponse revealInstancePassword(
            String id) throws Exception {
        com.exoscale.api.models.operations.RevealInstancePasswordRequest request =
            com.exoscale.api.models.operations.RevealInstancePasswordRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.RevealInstancePasswordRequest.class,
                baseUrl,
                "/instance/{id}:password",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.RevealInstancePasswordResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.RevealInstancePasswordResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.RevealInstancePasswordResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.InstancePassword out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.InstancePassword>() {});
                res.withInstancePassword(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ResizeInstanceDiskRequestBuilder resizeInstanceDisk() {
        return new com.exoscale.api.models.operations.ResizeInstanceDiskRequestBuilder(this);
    }

    /**
     * Resize a Compute instance disk
     * This operation resizes a Compute instance's disk volume. Note: the disk can only grow, cannot be shrunk.
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResizeInstanceDiskResponse resizeInstanceDisk(
            String id,
            com.exoscale.api.models.operations.ResizeInstanceDiskRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.ResizeInstanceDiskRequest request =
            com.exoscale.api.models.operations.ResizeInstanceDiskRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResizeInstanceDiskRequest.class,
                baseUrl,
                "/instance/{id}:resize-disk",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResizeInstanceDiskResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResizeInstanceDiskResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResizeInstanceDiskResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ResetInstancePasswordRequestBuilder resetInstancePassword() {
        return new com.exoscale.api.models.operations.ResetInstancePasswordRequestBuilder(this);
    }

    /**
     * Reset a compute instance password
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResetInstancePasswordResponse resetInstancePassword(
            String id) throws Exception {
        com.exoscale.api.models.operations.ResetInstancePasswordRequest request =
            com.exoscale.api.models.operations.ResetInstancePasswordRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResetInstancePasswordRequest.class,
                baseUrl,
                "/instance/{id}:reset-password",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResetInstancePasswordResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResetInstancePasswordResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResetInstancePasswordResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StartInstanceRequestBuilder startInstance() {
        return new com.exoscale.api.models.operations.StartInstanceRequestBuilder(this);
    }

    /**
     * Start a Compute instance
     * This operation starts a virtual machine, potentially using a rescue profile if specified
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StartInstanceResponse startInstance(
            String id,
            com.exoscale.api.models.operations.StartInstanceRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.StartInstanceRequest request =
            com.exoscale.api.models.operations.StartInstanceRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StartInstanceRequest.class,
                baseUrl,
                "/instance/{id}:start",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StartInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StartInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StartInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ScaleInstanceRequestBuilder scaleInstance() {
        return new com.exoscale.api.models.operations.ScaleInstanceRequestBuilder(this);
    }

    /**
     * Scale a Compute instance to a new Instance Type
     * This operation changes the Compute instance's type. Note: the new Instance Type must be within the same family (e.g. a standard instance cannot be scaled to gpu2 or storage).
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ScaleInstanceResponse scaleInstance(
            String id,
            com.exoscale.api.models.operations.ScaleInstanceRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.ScaleInstanceRequest request =
            com.exoscale.api.models.operations.ScaleInstanceRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ScaleInstanceRequest.class,
                baseUrl,
                "/instance/{id}:scale",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ScaleInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ScaleInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ScaleInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StopInstanceRequestBuilder stopInstance() {
        return new com.exoscale.api.models.operations.StopInstanceRequestBuilder(this);
    }

    /**
     * Stop a Compute instance
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StopInstanceResponse stopInstance(
            String id) throws Exception {
        com.exoscale.api.models.operations.StopInstanceRequest request =
            com.exoscale.api.models.operations.StopInstanceRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StopInstanceRequest.class,
                baseUrl,
                "/instance/{id}:stop",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StopInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StopInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StopInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.AddInstanceProtectionRequestBuilder addInstanceProtection() {
        return new com.exoscale.api.models.operations.AddInstanceProtectionRequestBuilder(this);
    }

    /**
     * Set instance destruction protection
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.AddInstanceProtectionResponse addInstanceProtection(
            String id) throws Exception {
        com.exoscale.api.models.operations.AddInstanceProtectionRequest request =
            com.exoscale.api.models.operations.AddInstanceProtectionRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.AddInstanceProtectionRequest.class,
                baseUrl,
                "/instance/{id}:add-protection",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.AddInstanceProtectionResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.AddInstanceProtectionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.AddInstanceProtectionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.AddInstanceProtectionResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.AddInstanceProtectionResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ResetInstanceFieldRequestBuilder resetInstanceField() {
        return new com.exoscale.api.models.operations.ResetInstanceFieldRequestBuilder(this);
    }

    /**
     * Reset Instance field
     * @param id
     * @param field
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResetInstanceFieldResponse resetInstanceField(
            String id,
            com.exoscale.api.models.operations.ResetInstanceFieldPathParamField field) throws Exception {
        com.exoscale.api.models.operations.ResetInstanceFieldRequest request =
            com.exoscale.api.models.operations.ResetInstanceFieldRequest
                .builder()
                .id(id)
                .field(field)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResetInstanceFieldRequest.class,
                baseUrl,
                "/instance/{id}/{field}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResetInstanceFieldResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResetInstanceFieldResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResetInstanceFieldResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.RemoveInstanceProtectionRequestBuilder removeInstanceProtection() {
        return new com.exoscale.api.models.operations.RemoveInstanceProtectionRequestBuilder(this);
    }

    /**
     * Remove instance destruction protection
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.RemoveInstanceProtectionResponse removeInstanceProtection(
            String id) throws Exception {
        com.exoscale.api.models.operations.RemoveInstanceProtectionRequest request =
            com.exoscale.api.models.operations.RemoveInstanceProtectionRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.RemoveInstanceProtectionRequest.class,
                baseUrl,
                "/instance/{id}:remove-protection",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.RemoveInstanceProtectionResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.RemoveInstanceProtectionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.RemoveInstanceProtectionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.RemoveInstanceProtectionResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.RemoveInstanceProtectionResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ResetInstanceRequestBuilder resetInstance() {
        return new com.exoscale.api.models.operations.ResetInstanceRequestBuilder(this);
    }

    /**
     * Reset a Compute instance to a base/target template
     * This operation re-installs a Compute instance to a base template. If target template is provided it will be used to recreated instance from. Warning: the operation wipes all data stored on the disk.
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResetInstanceResponse resetInstance(
            String id,
            com.exoscale.api.models.operations.ResetInstanceRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.ResetInstanceRequest request =
            com.exoscale.api.models.operations.ResetInstanceRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResetInstanceRequest.class,
                baseUrl,
                "/instance/{id}:reset",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResetInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResetInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResetInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteInstanceRequestBuilder deleteInstance() {
        return new com.exoscale.api.models.operations.DeleteInstanceRequestBuilder(this);
    }

    /**
     * Delete a Compute instance
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteInstanceResponse deleteInstance(
            String id) throws Exception {
        com.exoscale.api.models.operations.DeleteInstanceRequest request =
            com.exoscale.api.models.operations.DeleteInstanceRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteInstanceRequest.class,
                baseUrl,
                "/instance/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateInstanceRequestBuilder updateInstance() {
        return new com.exoscale.api.models.operations.UpdateInstanceRequestBuilder(this);
    }

    /**
     * Update a Compute instance
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateInstanceResponse updateInstance(
            String id,
            com.exoscale.api.models.operations.UpdateInstanceRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateInstanceRequest request =
            com.exoscale.api.models.operations.UpdateInstanceRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateInstanceRequest.class,
                baseUrl,
                "/instance/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetInstanceRequestBuilder getInstance() {
        return new com.exoscale.api.models.operations.GetInstanceRequestBuilder(this);
    }

    /**
     * Retrieve Compute instance details
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetInstanceResponse getInstance(
            String id) throws Exception {
        com.exoscale.api.models.operations.GetInstanceRequest request =
            com.exoscale.api.models.operations.GetInstanceRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetInstanceRequest.class,
                baseUrl,
                "/instance/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.InstanceOutput out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.InstanceOutput>() {});
                res.withInstance(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.RebootInstanceRequestBuilder rebootInstance() {
        return new com.exoscale.api.models.operations.RebootInstanceRequestBuilder(this);
    }

    /**
     * Reboot a Compute instance
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.RebootInstanceResponse rebootInstance(
            String id) throws Exception {
        com.exoscale.api.models.operations.RebootInstanceRequest request =
            com.exoscale.api.models.operations.RebootInstanceRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.RebootInstanceRequest.class,
                baseUrl,
                "/instance/{id}:reboot",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.RebootInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.RebootInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.RebootInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateInstanceRequestBuilder createInstance() {
        return new com.exoscale.api.models.operations.CreateInstanceRequestBuilder(this);
    }

    /**
     * Create a Compute instance
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateInstanceResponse createInstance(
            com.exoscale.api.models.operations.CreateInstanceRequestBody request) throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/instance");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.exoscale.api.models.operations.CreateInstanceRequestBody>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ListInstancesRequestBuilder listInstances() {
        return new com.exoscale.api.models.operations.ListInstancesRequestBuilder(this);
    }

    /**
     * List Compute instances
     * @param managerId
     * @param managerType
     * @param ipAddress
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ListInstancesResponse listInstances(
            Optional<? extends String> managerId,
            Optional<? extends com.exoscale.api.models.operations.ManagerType> managerType,
            Optional<? extends String> ipAddress) throws Exception {
        com.exoscale.api.models.operations.ListInstancesRequest request =
            com.exoscale.api.models.operations.ListInstancesRequest
                .builder()
                .managerId(managerId)
                .managerType(managerType)
                .ipAddress(ipAddress)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/instance");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.exoscale.api.utils.Utils.getQueryParams(
                com.exoscale.api.models.operations.ListInstancesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ListInstancesResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ListInstancesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ListInstancesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.ListInstancesResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.ListInstancesResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.RevertInstanceToSnapshotRequestBuilder revertInstanceToSnapshot() {
        return new com.exoscale.api.models.operations.RevertInstanceToSnapshotRequestBuilder(this);
    }

    /**
     * Revert a snapshot for an instance
     * This operation reverts the snapshot to the Compute instance volume, restoring stored data as it was at the time of the snapshot.
     * The Compute instance must be previously stopped.
     * @param instanceId
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.RevertInstanceToSnapshotResponse revertInstanceToSnapshot(
            String instanceId,
            com.exoscale.api.models.operations.RevertInstanceToSnapshotRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.RevertInstanceToSnapshotRequest request =
            com.exoscale.api.models.operations.RevertInstanceToSnapshotRequest
                .builder()
                .instanceId(instanceId)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.RevertInstanceToSnapshotRequest.class,
                baseUrl,
                "/instance/{instance-id}:revert-snapshot",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.RevertInstanceToSnapshotResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.RevertInstanceToSnapshotResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.RevertInstanceToSnapshotResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
