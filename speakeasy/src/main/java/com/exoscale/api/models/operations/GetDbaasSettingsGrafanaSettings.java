/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GetDbaasSettingsGrafanaSettings {

    /**
     * Grafana configuration values
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grafana")
    private Optional<? extends Grafana> grafana;

    public GetDbaasSettingsGrafanaSettings(
            @JsonProperty("grafana") Optional<? extends Grafana> grafana) {
        Utils.checkNotNull(grafana, "grafana");
        this.grafana = grafana;
    }

    /**
     * Grafana configuration values
     */
    public Optional<? extends Grafana> grafana() {
        return grafana;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Grafana configuration values
     */
    public GetDbaasSettingsGrafanaSettings withGrafana(Grafana grafana) {
        Utils.checkNotNull(grafana, "grafana");
        this.grafana = Optional.ofNullable(grafana);
        return this;
    }

    /**
     * Grafana configuration values
     */
    public GetDbaasSettingsGrafanaSettings withGrafana(Optional<? extends Grafana> grafana) {
        Utils.checkNotNull(grafana, "grafana");
        this.grafana = grafana;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDbaasSettingsGrafanaSettings other = (GetDbaasSettingsGrafanaSettings) o;
        return 
            java.util.Objects.deepEquals(this.grafana, other.grafana);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            grafana);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDbaasSettingsGrafanaSettings.class,
                "grafana", grafana);
    }
    
    public final static class Builder {
 
        private Optional<? extends Grafana> grafana = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Grafana configuration values
         */
        public Builder grafana(Grafana grafana) {
            Utils.checkNotNull(grafana, "grafana");
            this.grafana = Optional.ofNullable(grafana);
            return this;
        }

        /**
         * Grafana configuration values
         */
        public Builder grafana(Optional<? extends Grafana> grafana) {
            Utils.checkNotNull(grafana, "grafana");
            this.grafana = grafana;
            return this;
        }
        
        public GetDbaasSettingsGrafanaSettings build() {
            return new GetDbaasSettingsGrafanaSettings(
                grafana);
        }
    }
}

