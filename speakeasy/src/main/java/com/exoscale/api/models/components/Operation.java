/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Operation - Operation
 */

public class Operation {

    /**
     * Operation ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Operation failure reason
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private Optional<? extends Reason> reason;

    /**
     * Related resource reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private Optional<? extends Reference> reference;

    /**
     * Operation message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<? extends String> message;

    /**
     * Operation status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends State> state;

    public Operation(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("reason") Optional<? extends Reason> reason,
            @JsonProperty("reference") Optional<? extends Reference> reference,
            @JsonProperty("message") Optional<? extends String> message,
            @JsonProperty("state") Optional<? extends State> state) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(reason, "reason");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(state, "state");
        this.id = id;
        this.reason = reason;
        this.reference = reference;
        this.message = message;
        this.state = state;
    }

    /**
     * Operation ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Operation failure reason
     */
    public Optional<? extends Reason> reason() {
        return reason;
    }

    /**
     * Related resource reference
     */
    public Optional<? extends Reference> reference() {
        return reference;
    }

    /**
     * Operation message
     */
    public Optional<? extends String> message() {
        return message;
    }

    /**
     * Operation status
     */
    public Optional<? extends State> state() {
        return state;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Operation ID
     */
    public Operation withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Operation ID
     */
    public Operation withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Operation failure reason
     */
    public Operation withReason(Reason reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = Optional.ofNullable(reason);
        return this;
    }

    /**
     * Operation failure reason
     */
    public Operation withReason(Optional<? extends Reason> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    /**
     * Related resource reference
     */
    public Operation withReference(Reference reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = Optional.ofNullable(reference);
        return this;
    }

    /**
     * Related resource reference
     */
    public Operation withReference(Optional<? extends Reference> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * Operation message
     */
    public Operation withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    /**
     * Operation message
     */
    public Operation withMessage(Optional<? extends String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * Operation status
     */
    public Operation withState(State state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * Operation status
     */
    public Operation withState(Optional<? extends State> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Operation other = (Operation) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.reason, other.reason) &&
            java.util.Objects.deepEquals(this.reference, other.reference) &&
            java.util.Objects.deepEquals(this.message, other.message) &&
            java.util.Objects.deepEquals(this.state, other.state);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            reason,
            reference,
            message,
            state);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Operation.class,
                "id", id,
                "reason", reason,
                "reference", reference,
                "message", message,
                "state", state);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends Reason> reason = Optional.empty();
 
        private Optional<? extends Reference> reference = Optional.empty();
 
        private Optional<? extends String> message = Optional.empty();
 
        private Optional<? extends State> state = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Operation ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Operation ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Operation failure reason
         */
        public Builder reason(Reason reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        /**
         * Operation failure reason
         */
        public Builder reason(Optional<? extends Reason> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }

        /**
         * Related resource reference
         */
        public Builder reference(Reference reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = Optional.ofNullable(reference);
            return this;
        }

        /**
         * Related resource reference
         */
        public Builder reference(Optional<? extends Reference> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        /**
         * Operation message
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        /**
         * Operation message
         */
        public Builder message(Optional<? extends String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        /**
         * Operation status
         */
        public Builder state(State state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Operation status
         */
        public Builder state(Optional<? extends State> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }
        
        public Operation build() {
            return new Operation(
                id,
                reason,
                reference,
                message,
                state);
        }
    }
}

