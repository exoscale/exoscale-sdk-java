/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * Template - Instance template
 */

public class Template {

    /**
     * Template maintainer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintainer")
    private Optional<? extends String> maintainer;

    /**
     * Template description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Enable SSH key-based login
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh-key-enabled")
    private Optional<? extends Boolean> sshKeyEnabled;

    /**
     * Template family
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("family")
    private Optional<? extends String> family;

    /**
     * Template name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Template default user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default-user")
    private Optional<? extends String> defaultUser;

    /**
     * Template size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Long> size;

    /**
     * Enable password-based login
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password-enabled")
    private Optional<? extends Boolean> passwordEnabled;

    /**
     * Template build
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("build")
    private Optional<? extends String> build;

    /**
     * Template MD5 checksum
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checksum")
    private Optional<? extends String> checksum;

    /**
     * Boot mode (default: legacy)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boot-mode")
    private Optional<? extends BootMode> bootMode;

    /**
     * Template ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Zones availability
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zones")
    private Optional<? extends java.util.List<ZoneName>> zones;

    /**
     * Template source URL
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<? extends String> url;

    /**
     * Template version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    /**
     * Template creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * Template visibility
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    private Optional<? extends Visibility> visibility;

    public Template(
            @JsonProperty("maintainer") Optional<? extends String> maintainer,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("ssh-key-enabled") Optional<? extends Boolean> sshKeyEnabled,
            @JsonProperty("family") Optional<? extends String> family,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("default-user") Optional<? extends String> defaultUser,
            @JsonProperty("size") Optional<? extends Long> size,
            @JsonProperty("password-enabled") Optional<? extends Boolean> passwordEnabled,
            @JsonProperty("build") Optional<? extends String> build,
            @JsonProperty("checksum") Optional<? extends String> checksum,
            @JsonProperty("boot-mode") Optional<? extends BootMode> bootMode,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("zones") Optional<? extends java.util.List<ZoneName>> zones,
            @JsonProperty("url") Optional<? extends String> url,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("visibility") Optional<? extends Visibility> visibility) {
        Utils.checkNotNull(maintainer, "maintainer");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
        Utils.checkNotNull(family, "family");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(defaultUser, "defaultUser");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        Utils.checkNotNull(build, "build");
        Utils.checkNotNull(checksum, "checksum");
        Utils.checkNotNull(bootMode, "bootMode");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(zones, "zones");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(visibility, "visibility");
        this.maintainer = maintainer;
        this.description = description;
        this.sshKeyEnabled = sshKeyEnabled;
        this.family = family;
        this.name = name;
        this.defaultUser = defaultUser;
        this.size = size;
        this.passwordEnabled = passwordEnabled;
        this.build = build;
        this.checksum = checksum;
        this.bootMode = bootMode;
        this.id = id;
        this.zones = zones;
        this.url = url;
        this.version = version;
        this.createdAt = createdAt;
        this.visibility = visibility;
    }

    /**
     * Template maintainer
     */
    public Optional<? extends String> maintainer() {
        return maintainer;
    }

    /**
     * Template description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Enable SSH key-based login
     */
    public Optional<? extends Boolean> sshKeyEnabled() {
        return sshKeyEnabled;
    }

    /**
     * Template family
     */
    public Optional<? extends String> family() {
        return family;
    }

    /**
     * Template name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Template default user
     */
    public Optional<? extends String> defaultUser() {
        return defaultUser;
    }

    /**
     * Template size
     */
    public Optional<? extends Long> size() {
        return size;
    }

    /**
     * Enable password-based login
     */
    public Optional<? extends Boolean> passwordEnabled() {
        return passwordEnabled;
    }

    /**
     * Template build
     */
    public Optional<? extends String> build() {
        return build;
    }

    /**
     * Template MD5 checksum
     */
    public Optional<? extends String> checksum() {
        return checksum;
    }

    /**
     * Boot mode (default: legacy)
     */
    public Optional<? extends BootMode> bootMode() {
        return bootMode;
    }

    /**
     * Template ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Zones availability
     */
    public Optional<? extends java.util.List<ZoneName>> zones() {
        return zones;
    }

    /**
     * Template source URL
     */
    public Optional<? extends String> url() {
        return url;
    }

    /**
     * Template version
     */
    public Optional<? extends String> version() {
        return version;
    }

    /**
     * Template creation date
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Template visibility
     */
    public Optional<? extends Visibility> visibility() {
        return visibility;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Template maintainer
     */
    public Template withMaintainer(String maintainer) {
        Utils.checkNotNull(maintainer, "maintainer");
        this.maintainer = Optional.ofNullable(maintainer);
        return this;
    }

    /**
     * Template maintainer
     */
    public Template withMaintainer(Optional<? extends String> maintainer) {
        Utils.checkNotNull(maintainer, "maintainer");
        this.maintainer = maintainer;
        return this;
    }

    /**
     * Template description
     */
    public Template withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Template description
     */
    public Template withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Enable SSH key-based login
     */
    public Template withSshKeyEnabled(boolean sshKeyEnabled) {
        Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
        this.sshKeyEnabled = Optional.ofNullable(sshKeyEnabled);
        return this;
    }

    /**
     * Enable SSH key-based login
     */
    public Template withSshKeyEnabled(Optional<? extends Boolean> sshKeyEnabled) {
        Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
        this.sshKeyEnabled = sshKeyEnabled;
        return this;
    }

    /**
     * Template family
     */
    public Template withFamily(String family) {
        Utils.checkNotNull(family, "family");
        this.family = Optional.ofNullable(family);
        return this;
    }

    /**
     * Template family
     */
    public Template withFamily(Optional<? extends String> family) {
        Utils.checkNotNull(family, "family");
        this.family = family;
        return this;
    }

    /**
     * Template name
     */
    public Template withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Template name
     */
    public Template withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Template default user
     */
    public Template withDefaultUser(String defaultUser) {
        Utils.checkNotNull(defaultUser, "defaultUser");
        this.defaultUser = Optional.ofNullable(defaultUser);
        return this;
    }

    /**
     * Template default user
     */
    public Template withDefaultUser(Optional<? extends String> defaultUser) {
        Utils.checkNotNull(defaultUser, "defaultUser");
        this.defaultUser = defaultUser;
        return this;
    }

    /**
     * Template size
     */
    public Template withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Template size
     */
    public Template withSize(Optional<? extends Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Enable password-based login
     */
    public Template withPasswordEnabled(boolean passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = Optional.ofNullable(passwordEnabled);
        return this;
    }

    /**
     * Enable password-based login
     */
    public Template withPasswordEnabled(Optional<? extends Boolean> passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = passwordEnabled;
        return this;
    }

    /**
     * Template build
     */
    public Template withBuild(String build) {
        Utils.checkNotNull(build, "build");
        this.build = Optional.ofNullable(build);
        return this;
    }

    /**
     * Template build
     */
    public Template withBuild(Optional<? extends String> build) {
        Utils.checkNotNull(build, "build");
        this.build = build;
        return this;
    }

    /**
     * Template MD5 checksum
     */
    public Template withChecksum(String checksum) {
        Utils.checkNotNull(checksum, "checksum");
        this.checksum = Optional.ofNullable(checksum);
        return this;
    }

    /**
     * Template MD5 checksum
     */
    public Template withChecksum(Optional<? extends String> checksum) {
        Utils.checkNotNull(checksum, "checksum");
        this.checksum = checksum;
        return this;
    }

    /**
     * Boot mode (default: legacy)
     */
    public Template withBootMode(BootMode bootMode) {
        Utils.checkNotNull(bootMode, "bootMode");
        this.bootMode = Optional.ofNullable(bootMode);
        return this;
    }

    /**
     * Boot mode (default: legacy)
     */
    public Template withBootMode(Optional<? extends BootMode> bootMode) {
        Utils.checkNotNull(bootMode, "bootMode");
        this.bootMode = bootMode;
        return this;
    }

    /**
     * Template ID
     */
    public Template withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Template ID
     */
    public Template withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Zones availability
     */
    public Template withZones(java.util.List<ZoneName> zones) {
        Utils.checkNotNull(zones, "zones");
        this.zones = Optional.ofNullable(zones);
        return this;
    }

    /**
     * Zones availability
     */
    public Template withZones(Optional<? extends java.util.List<ZoneName>> zones) {
        Utils.checkNotNull(zones, "zones");
        this.zones = zones;
        return this;
    }

    /**
     * Template source URL
     */
    public Template withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * Template source URL
     */
    public Template withUrl(Optional<? extends String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Template version
     */
    public Template withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * Template version
     */
    public Template withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Template creation date
     */
    public Template withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Template creation date
     */
    public Template withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Template visibility
     */
    public Template withVisibility(Visibility visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = Optional.ofNullable(visibility);
        return this;
    }

    /**
     * Template visibility
     */
    public Template withVisibility(Optional<? extends Visibility> visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = visibility;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Template other = (Template) o;
        return 
            java.util.Objects.deepEquals(this.maintainer, other.maintainer) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.sshKeyEnabled, other.sshKeyEnabled) &&
            java.util.Objects.deepEquals(this.family, other.family) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.defaultUser, other.defaultUser) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.passwordEnabled, other.passwordEnabled) &&
            java.util.Objects.deepEquals(this.build, other.build) &&
            java.util.Objects.deepEquals(this.checksum, other.checksum) &&
            java.util.Objects.deepEquals(this.bootMode, other.bootMode) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.zones, other.zones) &&
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.visibility, other.visibility);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            maintainer,
            description,
            sshKeyEnabled,
            family,
            name,
            defaultUser,
            size,
            passwordEnabled,
            build,
            checksum,
            bootMode,
            id,
            zones,
            url,
            version,
            createdAt,
            visibility);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Template.class,
                "maintainer", maintainer,
                "description", description,
                "sshKeyEnabled", sshKeyEnabled,
                "family", family,
                "name", name,
                "defaultUser", defaultUser,
                "size", size,
                "passwordEnabled", passwordEnabled,
                "build", build,
                "checksum", checksum,
                "bootMode", bootMode,
                "id", id,
                "zones", zones,
                "url", url,
                "version", version,
                "createdAt", createdAt,
                "visibility", visibility);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> maintainer = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends Boolean> sshKeyEnabled = Optional.empty();
 
        private Optional<? extends String> family = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> defaultUser = Optional.empty();
 
        private Optional<? extends Long> size = Optional.empty();
 
        private Optional<? extends Boolean> passwordEnabled = Optional.empty();
 
        private Optional<? extends String> build = Optional.empty();
 
        private Optional<? extends String> checksum = Optional.empty();
 
        private Optional<? extends BootMode> bootMode = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends java.util.List<ZoneName>> zones = Optional.empty();
 
        private Optional<? extends String> url = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends Visibility> visibility = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Template maintainer
         */
        public Builder maintainer(String maintainer) {
            Utils.checkNotNull(maintainer, "maintainer");
            this.maintainer = Optional.ofNullable(maintainer);
            return this;
        }

        /**
         * Template maintainer
         */
        public Builder maintainer(Optional<? extends String> maintainer) {
            Utils.checkNotNull(maintainer, "maintainer");
            this.maintainer = maintainer;
            return this;
        }

        /**
         * Template description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Template description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Enable SSH key-based login
         */
        public Builder sshKeyEnabled(boolean sshKeyEnabled) {
            Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
            this.sshKeyEnabled = Optional.ofNullable(sshKeyEnabled);
            return this;
        }

        /**
         * Enable SSH key-based login
         */
        public Builder sshKeyEnabled(Optional<? extends Boolean> sshKeyEnabled) {
            Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
            this.sshKeyEnabled = sshKeyEnabled;
            return this;
        }

        /**
         * Template family
         */
        public Builder family(String family) {
            Utils.checkNotNull(family, "family");
            this.family = Optional.ofNullable(family);
            return this;
        }

        /**
         * Template family
         */
        public Builder family(Optional<? extends String> family) {
            Utils.checkNotNull(family, "family");
            this.family = family;
            return this;
        }

        /**
         * Template name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Template name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Template default user
         */
        public Builder defaultUser(String defaultUser) {
            Utils.checkNotNull(defaultUser, "defaultUser");
            this.defaultUser = Optional.ofNullable(defaultUser);
            return this;
        }

        /**
         * Template default user
         */
        public Builder defaultUser(Optional<? extends String> defaultUser) {
            Utils.checkNotNull(defaultUser, "defaultUser");
            this.defaultUser = defaultUser;
            return this;
        }

        /**
         * Template size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Template size
         */
        public Builder size(Optional<? extends Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * Enable password-based login
         */
        public Builder passwordEnabled(boolean passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = Optional.ofNullable(passwordEnabled);
            return this;
        }

        /**
         * Enable password-based login
         */
        public Builder passwordEnabled(Optional<? extends Boolean> passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = passwordEnabled;
            return this;
        }

        /**
         * Template build
         */
        public Builder build(String build) {
            Utils.checkNotNull(build, "build");
            this.build = Optional.ofNullable(build);
            return this;
        }

        /**
         * Template build
         */
        public Builder build(Optional<? extends String> build) {
            Utils.checkNotNull(build, "build");
            this.build = build;
            return this;
        }

        /**
         * Template MD5 checksum
         */
        public Builder checksum(String checksum) {
            Utils.checkNotNull(checksum, "checksum");
            this.checksum = Optional.ofNullable(checksum);
            return this;
        }

        /**
         * Template MD5 checksum
         */
        public Builder checksum(Optional<? extends String> checksum) {
            Utils.checkNotNull(checksum, "checksum");
            this.checksum = checksum;
            return this;
        }

        /**
         * Boot mode (default: legacy)
         */
        public Builder bootMode(BootMode bootMode) {
            Utils.checkNotNull(bootMode, "bootMode");
            this.bootMode = Optional.ofNullable(bootMode);
            return this;
        }

        /**
         * Boot mode (default: legacy)
         */
        public Builder bootMode(Optional<? extends BootMode> bootMode) {
            Utils.checkNotNull(bootMode, "bootMode");
            this.bootMode = bootMode;
            return this;
        }

        /**
         * Template ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Template ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Zones availability
         */
        public Builder zones(java.util.List<ZoneName> zones) {
            Utils.checkNotNull(zones, "zones");
            this.zones = Optional.ofNullable(zones);
            return this;
        }

        /**
         * Zones availability
         */
        public Builder zones(Optional<? extends java.util.List<ZoneName>> zones) {
            Utils.checkNotNull(zones, "zones");
            this.zones = zones;
            return this;
        }

        /**
         * Template source URL
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * Template source URL
         */
        public Builder url(Optional<? extends String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Template version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * Template version
         */
        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Template creation date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Template creation date
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Template visibility
         */
        public Builder visibility(Visibility visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = Optional.ofNullable(visibility);
            return this;
        }

        /**
         * Template visibility
         */
        public Builder visibility(Optional<? extends Visibility> visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = visibility;
            return this;
        }
        
        public Template build() {
            return new Template(
                maintainer,
                description,
                sshKeyEnabled,
                family,
                name,
                defaultUser,
                size,
                passwordEnabled,
                build,
                checksum,
                bootMode,
                id,
                zones,
                url,
                version,
                createdAt,
                visibility);
        }
    }
}

