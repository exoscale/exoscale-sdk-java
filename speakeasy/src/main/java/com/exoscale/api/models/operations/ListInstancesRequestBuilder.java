/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.models.errors.SDKError;
import com.exoscale.api.utils.LazySingletonValue;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import java.util.stream.Stream;
import org.openapitools.jackson.nullable.JsonNullable;


public class ListInstancesRequestBuilder {

    private Optional<? extends String> managerId = Optional.empty();
    private Optional<? extends ManagerType> managerType = Optional.empty();
    private Optional<? extends String> ipAddress = Optional.empty();
    private final SDKMethodInterfaces.MethodCallListInstances sdk;

    public ListInstancesRequestBuilder(SDKMethodInterfaces.MethodCallListInstances sdk) {
        this.sdk = sdk;
    }
                
    public ListInstancesRequestBuilder managerId(String managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = Optional.of(managerId);
        return this;
    }

    public ListInstancesRequestBuilder managerId(Optional<? extends String> managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = managerId;
        return this;
    }
                
    public ListInstancesRequestBuilder managerType(ManagerType managerType) {
        Utils.checkNotNull(managerType, "managerType");
        this.managerType = Optional.of(managerType);
        return this;
    }

    public ListInstancesRequestBuilder managerType(Optional<? extends ManagerType> managerType) {
        Utils.checkNotNull(managerType, "managerType");
        this.managerType = managerType;
        return this;
    }
                
    public ListInstancesRequestBuilder ipAddress(String ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = Optional.of(ipAddress);
        return this;
    }

    public ListInstancesRequestBuilder ipAddress(Optional<? extends String> ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
        return this;
    }

    public ListInstancesResponse call() throws Exception {

        return sdk.listInstances(
            managerId,
            managerType,
            ipAddress);
    }
}
