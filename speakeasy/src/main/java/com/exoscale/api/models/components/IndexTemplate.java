/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * IndexTemplate - Template settings for all new indexes
 */

public class IndexTemplate {

    /**
     * The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mapping-nested-objects-limit")
    private Optional<? extends Long> mappingNestedObjectsLimit;

    /**
     * The number of replicas each primary shard has.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number-of-replicas")
    private Optional<? extends Long> numberOfReplicas;

    /**
     * The number of primary shards that an index should have.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number-of-shards")
    private Optional<? extends Long> numberOfShards;

    public IndexTemplate(
            @JsonProperty("mapping-nested-objects-limit") Optional<? extends Long> mappingNestedObjectsLimit,
            @JsonProperty("number-of-replicas") Optional<? extends Long> numberOfReplicas,
            @JsonProperty("number-of-shards") Optional<? extends Long> numberOfShards) {
        Utils.checkNotNull(mappingNestedObjectsLimit, "mappingNestedObjectsLimit");
        Utils.checkNotNull(numberOfReplicas, "numberOfReplicas");
        Utils.checkNotNull(numberOfShards, "numberOfShards");
        this.mappingNestedObjectsLimit = mappingNestedObjectsLimit;
        this.numberOfReplicas = numberOfReplicas;
        this.numberOfShards = numberOfShards;
    }

    /**
     * The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.
     */
    public Optional<? extends Long> mappingNestedObjectsLimit() {
        return mappingNestedObjectsLimit;
    }

    /**
     * The number of replicas each primary shard has.
     */
    public Optional<? extends Long> numberOfReplicas() {
        return numberOfReplicas;
    }

    /**
     * The number of primary shards that an index should have.
     */
    public Optional<? extends Long> numberOfShards() {
        return numberOfShards;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.
     */
    public IndexTemplate withMappingNestedObjectsLimit(long mappingNestedObjectsLimit) {
        Utils.checkNotNull(mappingNestedObjectsLimit, "mappingNestedObjectsLimit");
        this.mappingNestedObjectsLimit = Optional.ofNullable(mappingNestedObjectsLimit);
        return this;
    }

    /**
     * The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.
     */
    public IndexTemplate withMappingNestedObjectsLimit(Optional<? extends Long> mappingNestedObjectsLimit) {
        Utils.checkNotNull(mappingNestedObjectsLimit, "mappingNestedObjectsLimit");
        this.mappingNestedObjectsLimit = mappingNestedObjectsLimit;
        return this;
    }

    /**
     * The number of replicas each primary shard has.
     */
    public IndexTemplate withNumberOfReplicas(long numberOfReplicas) {
        Utils.checkNotNull(numberOfReplicas, "numberOfReplicas");
        this.numberOfReplicas = Optional.ofNullable(numberOfReplicas);
        return this;
    }

    /**
     * The number of replicas each primary shard has.
     */
    public IndexTemplate withNumberOfReplicas(Optional<? extends Long> numberOfReplicas) {
        Utils.checkNotNull(numberOfReplicas, "numberOfReplicas");
        this.numberOfReplicas = numberOfReplicas;
        return this;
    }

    /**
     * The number of primary shards that an index should have.
     */
    public IndexTemplate withNumberOfShards(long numberOfShards) {
        Utils.checkNotNull(numberOfShards, "numberOfShards");
        this.numberOfShards = Optional.ofNullable(numberOfShards);
        return this;
    }

    /**
     * The number of primary shards that an index should have.
     */
    public IndexTemplate withNumberOfShards(Optional<? extends Long> numberOfShards) {
        Utils.checkNotNull(numberOfShards, "numberOfShards");
        this.numberOfShards = numberOfShards;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IndexTemplate other = (IndexTemplate) o;
        return 
            java.util.Objects.deepEquals(this.mappingNestedObjectsLimit, other.mappingNestedObjectsLimit) &&
            java.util.Objects.deepEquals(this.numberOfReplicas, other.numberOfReplicas) &&
            java.util.Objects.deepEquals(this.numberOfShards, other.numberOfShards);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            mappingNestedObjectsLimit,
            numberOfReplicas,
            numberOfShards);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IndexTemplate.class,
                "mappingNestedObjectsLimit", mappingNestedObjectsLimit,
                "numberOfReplicas", numberOfReplicas,
                "numberOfShards", numberOfShards);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> mappingNestedObjectsLimit = Optional.empty();
 
        private Optional<? extends Long> numberOfReplicas = Optional.empty();
 
        private Optional<? extends Long> numberOfShards = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.
         */
        public Builder mappingNestedObjectsLimit(long mappingNestedObjectsLimit) {
            Utils.checkNotNull(mappingNestedObjectsLimit, "mappingNestedObjectsLimit");
            this.mappingNestedObjectsLimit = Optional.ofNullable(mappingNestedObjectsLimit);
            return this;
        }

        /**
         * The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.
         */
        public Builder mappingNestedObjectsLimit(Optional<? extends Long> mappingNestedObjectsLimit) {
            Utils.checkNotNull(mappingNestedObjectsLimit, "mappingNestedObjectsLimit");
            this.mappingNestedObjectsLimit = mappingNestedObjectsLimit;
            return this;
        }

        /**
         * The number of replicas each primary shard has.
         */
        public Builder numberOfReplicas(long numberOfReplicas) {
            Utils.checkNotNull(numberOfReplicas, "numberOfReplicas");
            this.numberOfReplicas = Optional.ofNullable(numberOfReplicas);
            return this;
        }

        /**
         * The number of replicas each primary shard has.
         */
        public Builder numberOfReplicas(Optional<? extends Long> numberOfReplicas) {
            Utils.checkNotNull(numberOfReplicas, "numberOfReplicas");
            this.numberOfReplicas = numberOfReplicas;
            return this;
        }

        /**
         * The number of primary shards that an index should have.
         */
        public Builder numberOfShards(long numberOfShards) {
            Utils.checkNotNull(numberOfShards, "numberOfShards");
            this.numberOfShards = Optional.ofNullable(numberOfShards);
            return this;
        }

        /**
         * The number of primary shards that an index should have.
         */
        public Builder numberOfShards(Optional<? extends Long> numberOfShards) {
            Utils.checkNotNull(numberOfShards, "numberOfShards");
            this.numberOfShards = numberOfShards;
            return this;
        }
        
        public IndexTemplate build() {
            return new IndexTemplate(
                mappingNestedObjectsLimit,
                numberOfReplicas,
                numberOfShards);
        }
    }
}

