/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class WriteAheadLogWALSettings {

    /**
     * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wal_writer_delay")
    private Optional<? extends Long> walWriterDelay;

    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wal_sender_timeout")
    private Optional<? extends java.lang.Object> walSenderTimeout;

    /**
     * PostgreSQL maximum WAL senders
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_wal_senders")
    private Optional<? extends Long> maxWalSenders;

    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_slot_wal_keep_size")
    private Optional<? extends Long> maxSlotWalKeepSize;

    public WriteAheadLogWALSettings(
            @JsonProperty("wal_writer_delay") Optional<? extends Long> walWriterDelay,
            @JsonProperty("wal_sender_timeout") Optional<? extends java.lang.Object> walSenderTimeout,
            @JsonProperty("max_wal_senders") Optional<? extends Long> maxWalSenders,
            @JsonProperty("max_slot_wal_keep_size") Optional<? extends Long> maxSlotWalKeepSize) {
        Utils.checkNotNull(walWriterDelay, "walWriterDelay");
        Utils.checkNotNull(walSenderTimeout, "walSenderTimeout");
        Utils.checkNotNull(maxWalSenders, "maxWalSenders");
        Utils.checkNotNull(maxSlotWalKeepSize, "maxSlotWalKeepSize");
        this.walWriterDelay = walWriterDelay;
        this.walSenderTimeout = walSenderTimeout;
        this.maxWalSenders = maxWalSenders;
        this.maxSlotWalKeepSize = maxSlotWalKeepSize;
    }

    /**
     * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
     */
    public Optional<? extends Long> walWriterDelay() {
        return walWriterDelay;
    }

    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     */
    public Optional<? extends java.lang.Object> walSenderTimeout() {
        return walSenderTimeout;
    }

    /**
     * PostgreSQL maximum WAL senders
     */
    public Optional<? extends Long> maxWalSenders() {
        return maxWalSenders;
    }

    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
     */
    public Optional<? extends Long> maxSlotWalKeepSize() {
        return maxSlotWalKeepSize;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
     */
    public WriteAheadLogWALSettings withWalWriterDelay(long walWriterDelay) {
        Utils.checkNotNull(walWriterDelay, "walWriterDelay");
        this.walWriterDelay = Optional.ofNullable(walWriterDelay);
        return this;
    }

    /**
     * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
     */
    public WriteAheadLogWALSettings withWalWriterDelay(Optional<? extends Long> walWriterDelay) {
        Utils.checkNotNull(walWriterDelay, "walWriterDelay");
        this.walWriterDelay = walWriterDelay;
        return this;
    }

    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     */
    public WriteAheadLogWALSettings withWalSenderTimeout(java.lang.Object walSenderTimeout) {
        Utils.checkNotNull(walSenderTimeout, "walSenderTimeout");
        this.walSenderTimeout = Optional.ofNullable(walSenderTimeout);
        return this;
    }

    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     */
    public WriteAheadLogWALSettings withWalSenderTimeout(Optional<? extends java.lang.Object> walSenderTimeout) {
        Utils.checkNotNull(walSenderTimeout, "walSenderTimeout");
        this.walSenderTimeout = walSenderTimeout;
        return this;
    }

    /**
     * PostgreSQL maximum WAL senders
     */
    public WriteAheadLogWALSettings withMaxWalSenders(long maxWalSenders) {
        Utils.checkNotNull(maxWalSenders, "maxWalSenders");
        this.maxWalSenders = Optional.ofNullable(maxWalSenders);
        return this;
    }

    /**
     * PostgreSQL maximum WAL senders
     */
    public WriteAheadLogWALSettings withMaxWalSenders(Optional<? extends Long> maxWalSenders) {
        Utils.checkNotNull(maxWalSenders, "maxWalSenders");
        this.maxWalSenders = maxWalSenders;
        return this;
    }

    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
     */
    public WriteAheadLogWALSettings withMaxSlotWalKeepSize(long maxSlotWalKeepSize) {
        Utils.checkNotNull(maxSlotWalKeepSize, "maxSlotWalKeepSize");
        this.maxSlotWalKeepSize = Optional.ofNullable(maxSlotWalKeepSize);
        return this;
    }

    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
     */
    public WriteAheadLogWALSettings withMaxSlotWalKeepSize(Optional<? extends Long> maxSlotWalKeepSize) {
        Utils.checkNotNull(maxSlotWalKeepSize, "maxSlotWalKeepSize");
        this.maxSlotWalKeepSize = maxSlotWalKeepSize;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WriteAheadLogWALSettings other = (WriteAheadLogWALSettings) o;
        return 
            java.util.Objects.deepEquals(this.walWriterDelay, other.walWriterDelay) &&
            java.util.Objects.deepEquals(this.walSenderTimeout, other.walSenderTimeout) &&
            java.util.Objects.deepEquals(this.maxWalSenders, other.maxWalSenders) &&
            java.util.Objects.deepEquals(this.maxSlotWalKeepSize, other.maxSlotWalKeepSize);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            walWriterDelay,
            walSenderTimeout,
            maxWalSenders,
            maxSlotWalKeepSize);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WriteAheadLogWALSettings.class,
                "walWriterDelay", walWriterDelay,
                "walSenderTimeout", walSenderTimeout,
                "maxWalSenders", maxWalSenders,
                "maxSlotWalKeepSize", maxSlotWalKeepSize);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> walWriterDelay = Optional.empty();
 
        private Optional<? extends java.lang.Object> walSenderTimeout = Optional.empty();
 
        private Optional<? extends Long> maxWalSenders = Optional.empty();
 
        private Optional<? extends Long> maxSlotWalKeepSize = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
         */
        public Builder walWriterDelay(long walWriterDelay) {
            Utils.checkNotNull(walWriterDelay, "walWriterDelay");
            this.walWriterDelay = Optional.ofNullable(walWriterDelay);
            return this;
        }

        /**
         * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
         */
        public Builder walWriterDelay(Optional<? extends Long> walWriterDelay) {
            Utils.checkNotNull(walWriterDelay, "walWriterDelay");
            this.walWriterDelay = walWriterDelay;
            return this;
        }

        /**
         * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
         */
        public Builder walSenderTimeout(java.lang.Object walSenderTimeout) {
            Utils.checkNotNull(walSenderTimeout, "walSenderTimeout");
            this.walSenderTimeout = Optional.ofNullable(walSenderTimeout);
            return this;
        }

        /**
         * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
         */
        public Builder walSenderTimeout(Optional<? extends java.lang.Object> walSenderTimeout) {
            Utils.checkNotNull(walSenderTimeout, "walSenderTimeout");
            this.walSenderTimeout = walSenderTimeout;
            return this;
        }

        /**
         * PostgreSQL maximum WAL senders
         */
        public Builder maxWalSenders(long maxWalSenders) {
            Utils.checkNotNull(maxWalSenders, "maxWalSenders");
            this.maxWalSenders = Optional.ofNullable(maxWalSenders);
            return this;
        }

        /**
         * PostgreSQL maximum WAL senders
         */
        public Builder maxWalSenders(Optional<? extends Long> maxWalSenders) {
            Utils.checkNotNull(maxWalSenders, "maxWalSenders");
            this.maxWalSenders = maxWalSenders;
            return this;
        }

        /**
         * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
         */
        public Builder maxSlotWalKeepSize(long maxSlotWalKeepSize) {
            Utils.checkNotNull(maxSlotWalKeepSize, "maxSlotWalKeepSize");
            this.maxSlotWalKeepSize = Optional.ofNullable(maxSlotWalKeepSize);
            return this;
        }

        /**
         * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
         */
        public Builder maxSlotWalKeepSize(Optional<? extends Long> maxSlotWalKeepSize) {
            Utils.checkNotNull(maxSlotWalKeepSize, "maxSlotWalKeepSize");
            this.maxSlotWalKeepSize = maxSlotWalKeepSize;
            return this;
        }
        
        public WriteAheadLogWALSettings build() {
            return new WriteAheadLogWALSettings(
                walWriterDelay,
                walSenderTimeout,
                maxWalSenders,
                maxSlotWalKeepSize);
        }
    }
}

