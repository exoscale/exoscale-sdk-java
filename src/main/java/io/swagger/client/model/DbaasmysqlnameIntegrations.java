/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * DbaasmysqlnameIntegrations
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class DbaasmysqlnameIntegrations {
  /**
   * Integration type
   */
  public enum TypeEnum {
    READ_REPLICA("read_replica");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("source-service")
  private String sourceService = null;

  @JsonProperty("dest-service")
  private String destService = null;

  @JsonProperty("settings")
  private Object settings = null;

  public DbaasmysqlnameIntegrations type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Integration type
   * @return type
  **/
  @Schema(required = true, description = "Integration type")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public DbaasmysqlnameIntegrations sourceService(String sourceService) {
    this.sourceService = sourceService;
    return this;
  }

   /**
   * Get sourceService
   * @return sourceService
  **/
  @Schema(description = "")
  public String getSourceService() {
    return sourceService;
  }

  public void setSourceService(String sourceService) {
    this.sourceService = sourceService;
  }

  public DbaasmysqlnameIntegrations destService(String destService) {
    this.destService = destService;
    return this;
  }

   /**
   * Get destService
   * @return destService
  **/
  @Schema(description = "")
  public String getDestService() {
    return destService;
  }

  public void setDestService(String destService) {
    this.destService = destService;
  }

  public DbaasmysqlnameIntegrations settings(Object settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Integration settings
   * @return settings
  **/
  @Schema(description = "Integration settings")
  public Object getSettings() {
    return settings;
  }

  public void setSettings(Object settings) {
    this.settings = settings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasmysqlnameIntegrations dbaasmysqlnameIntegrations = (DbaasmysqlnameIntegrations) o;
    return Objects.equals(this.type, dbaasmysqlnameIntegrations.type) &&
        Objects.equals(this.sourceService, dbaasmysqlnameIntegrations.sourceService) &&
        Objects.equals(this.destService, dbaasmysqlnameIntegrations.destService) &&
        Objects.equals(this.settings, dbaasmysqlnameIntegrations.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, sourceService, destService, settings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasmysqlnameIntegrations {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sourceService: ").append(toIndentedString(sourceService)).append("\n");
    sb.append("    destService: ").append(toIndentedString(destService)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
