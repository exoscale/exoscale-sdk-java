/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class UpdateIamRoleRequestBody {

    /**
     * IAM Role description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * IAM Role permissions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends java.util.List<Permissions>> permissions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    public UpdateIamRoleRequestBody(
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("permissions") Optional<? extends java.util.List<Permissions>> permissions,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(labels, "labels");
        this.description = description;
        this.permissions = permissions;
        this.labels = labels;
    }

    /**
     * IAM Role description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * IAM Role permissions
     */
    public Optional<? extends java.util.List<Permissions>> permissions() {
        return permissions;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * IAM Role description
     */
    public UpdateIamRoleRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * IAM Role description
     */
    public UpdateIamRoleRequestBody withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * IAM Role permissions
     */
    public UpdateIamRoleRequestBody withPermissions(java.util.List<Permissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    /**
     * IAM Role permissions
     */
    public UpdateIamRoleRequestBody withPermissions(Optional<? extends java.util.List<Permissions>> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    public UpdateIamRoleRequestBody withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public UpdateIamRoleRequestBody withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateIamRoleRequestBody other = (UpdateIamRoleRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.permissions, other.permissions) &&
            java.util.Objects.deepEquals(this.labels, other.labels);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            permissions,
            labels);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateIamRoleRequestBody.class,
                "description", description,
                "permissions", permissions,
                "labels", labels);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends java.util.List<Permissions>> permissions = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * IAM Role description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * IAM Role description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * IAM Role permissions
         */
        public Builder permissions(java.util.List<Permissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        /**
         * IAM Role permissions
         */
        public Builder permissions(Optional<? extends java.util.List<Permissions>> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }
        
        public UpdateIamRoleRequestBody build() {
            return new UpdateIamRoleRequestBody(
                description,
                permissions,
                labels);
        }
    }
}

