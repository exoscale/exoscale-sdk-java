/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class BackgroundBGWriterSettings {

    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bgwriter_delay")
    private Optional<? extends Long> bgwriterDelay;

    /**
     * Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bgwriter_flush_after")
    private Optional<? extends Long> bgwriterFlushAfter;

    /**
     * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bgwriter_lru_multiplier")
    private Optional<? extends Double> bgwriterLruMultiplier;

    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bgwriter_lru_maxpages")
    private Optional<? extends Long> bgwriterLruMaxpages;

    public BackgroundBGWriterSettings(
            @JsonProperty("bgwriter_delay") Optional<? extends Long> bgwriterDelay,
            @JsonProperty("bgwriter_flush_after") Optional<? extends Long> bgwriterFlushAfter,
            @JsonProperty("bgwriter_lru_multiplier") Optional<? extends Double> bgwriterLruMultiplier,
            @JsonProperty("bgwriter_lru_maxpages") Optional<? extends Long> bgwriterLruMaxpages) {
        Utils.checkNotNull(bgwriterDelay, "bgwriterDelay");
        Utils.checkNotNull(bgwriterFlushAfter, "bgwriterFlushAfter");
        Utils.checkNotNull(bgwriterLruMultiplier, "bgwriterLruMultiplier");
        Utils.checkNotNull(bgwriterLruMaxpages, "bgwriterLruMaxpages");
        this.bgwriterDelay = bgwriterDelay;
        this.bgwriterFlushAfter = bgwriterFlushAfter;
        this.bgwriterLruMultiplier = bgwriterLruMultiplier;
        this.bgwriterLruMaxpages = bgwriterLruMaxpages;
    }

    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     */
    public Optional<? extends Long> bgwriterDelay() {
        return bgwriterDelay;
    }

    /**
     * Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     */
    public Optional<? extends Long> bgwriterFlushAfter() {
        return bgwriterFlushAfter;
    }

    /**
     * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     */
    public Optional<? extends Double> bgwriterLruMultiplier() {
        return bgwriterLruMultiplier;
    }

    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     */
    public Optional<? extends Long> bgwriterLruMaxpages() {
        return bgwriterLruMaxpages;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     */
    public BackgroundBGWriterSettings withBgwriterDelay(long bgwriterDelay) {
        Utils.checkNotNull(bgwriterDelay, "bgwriterDelay");
        this.bgwriterDelay = Optional.ofNullable(bgwriterDelay);
        return this;
    }

    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     */
    public BackgroundBGWriterSettings withBgwriterDelay(Optional<? extends Long> bgwriterDelay) {
        Utils.checkNotNull(bgwriterDelay, "bgwriterDelay");
        this.bgwriterDelay = bgwriterDelay;
        return this;
    }

    /**
     * Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     */
    public BackgroundBGWriterSettings withBgwriterFlushAfter(long bgwriterFlushAfter) {
        Utils.checkNotNull(bgwriterFlushAfter, "bgwriterFlushAfter");
        this.bgwriterFlushAfter = Optional.ofNullable(bgwriterFlushAfter);
        return this;
    }

    /**
     * Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     */
    public BackgroundBGWriterSettings withBgwriterFlushAfter(Optional<? extends Long> bgwriterFlushAfter) {
        Utils.checkNotNull(bgwriterFlushAfter, "bgwriterFlushAfter");
        this.bgwriterFlushAfter = bgwriterFlushAfter;
        return this;
    }

    /**
     * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     */
    public BackgroundBGWriterSettings withBgwriterLruMultiplier(double bgwriterLruMultiplier) {
        Utils.checkNotNull(bgwriterLruMultiplier, "bgwriterLruMultiplier");
        this.bgwriterLruMultiplier = Optional.ofNullable(bgwriterLruMultiplier);
        return this;
    }

    /**
     * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     */
    public BackgroundBGWriterSettings withBgwriterLruMultiplier(Optional<? extends Double> bgwriterLruMultiplier) {
        Utils.checkNotNull(bgwriterLruMultiplier, "bgwriterLruMultiplier");
        this.bgwriterLruMultiplier = bgwriterLruMultiplier;
        return this;
    }

    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     */
    public BackgroundBGWriterSettings withBgwriterLruMaxpages(long bgwriterLruMaxpages) {
        Utils.checkNotNull(bgwriterLruMaxpages, "bgwriterLruMaxpages");
        this.bgwriterLruMaxpages = Optional.ofNullable(bgwriterLruMaxpages);
        return this;
    }

    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     */
    public BackgroundBGWriterSettings withBgwriterLruMaxpages(Optional<? extends Long> bgwriterLruMaxpages) {
        Utils.checkNotNull(bgwriterLruMaxpages, "bgwriterLruMaxpages");
        this.bgwriterLruMaxpages = bgwriterLruMaxpages;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BackgroundBGWriterSettings other = (BackgroundBGWriterSettings) o;
        return 
            java.util.Objects.deepEquals(this.bgwriterDelay, other.bgwriterDelay) &&
            java.util.Objects.deepEquals(this.bgwriterFlushAfter, other.bgwriterFlushAfter) &&
            java.util.Objects.deepEquals(this.bgwriterLruMultiplier, other.bgwriterLruMultiplier) &&
            java.util.Objects.deepEquals(this.bgwriterLruMaxpages, other.bgwriterLruMaxpages);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bgwriterDelay,
            bgwriterFlushAfter,
            bgwriterLruMultiplier,
            bgwriterLruMaxpages);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BackgroundBGWriterSettings.class,
                "bgwriterDelay", bgwriterDelay,
                "bgwriterFlushAfter", bgwriterFlushAfter,
                "bgwriterLruMultiplier", bgwriterLruMultiplier,
                "bgwriterLruMaxpages", bgwriterLruMaxpages);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> bgwriterDelay = Optional.empty();
 
        private Optional<? extends Long> bgwriterFlushAfter = Optional.empty();
 
        private Optional<? extends Double> bgwriterLruMultiplier = Optional.empty();
 
        private Optional<? extends Long> bgwriterLruMaxpages = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
         */
        public Builder bgwriterDelay(long bgwriterDelay) {
            Utils.checkNotNull(bgwriterDelay, "bgwriterDelay");
            this.bgwriterDelay = Optional.ofNullable(bgwriterDelay);
            return this;
        }

        /**
         * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
         */
        public Builder bgwriterDelay(Optional<? extends Long> bgwriterDelay) {
            Utils.checkNotNull(bgwriterDelay, "bgwriterDelay");
            this.bgwriterDelay = bgwriterDelay;
            return this;
        }

        /**
         * Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
         */
        public Builder bgwriterFlushAfter(long bgwriterFlushAfter) {
            Utils.checkNotNull(bgwriterFlushAfter, "bgwriterFlushAfter");
            this.bgwriterFlushAfter = Optional.ofNullable(bgwriterFlushAfter);
            return this;
        }

        /**
         * Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
         */
        public Builder bgwriterFlushAfter(Optional<? extends Long> bgwriterFlushAfter) {
            Utils.checkNotNull(bgwriterFlushAfter, "bgwriterFlushAfter");
            this.bgwriterFlushAfter = bgwriterFlushAfter;
            return this;
        }

        /**
         * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
         */
        public Builder bgwriterLruMultiplier(double bgwriterLruMultiplier) {
            Utils.checkNotNull(bgwriterLruMultiplier, "bgwriterLruMultiplier");
            this.bgwriterLruMultiplier = Optional.ofNullable(bgwriterLruMultiplier);
            return this;
        }

        /**
         * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
         */
        public Builder bgwriterLruMultiplier(Optional<? extends Double> bgwriterLruMultiplier) {
            Utils.checkNotNull(bgwriterLruMultiplier, "bgwriterLruMultiplier");
            this.bgwriterLruMultiplier = bgwriterLruMultiplier;
            return this;
        }

        /**
         * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
         */
        public Builder bgwriterLruMaxpages(long bgwriterLruMaxpages) {
            Utils.checkNotNull(bgwriterLruMaxpages, "bgwriterLruMaxpages");
            this.bgwriterLruMaxpages = Optional.ofNullable(bgwriterLruMaxpages);
            return this;
        }

        /**
         * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
         */
        public Builder bgwriterLruMaxpages(Optional<? extends Long> bgwriterLruMaxpages) {
            Utils.checkNotNull(bgwriterLruMaxpages, "bgwriterLruMaxpages");
            this.bgwriterLruMaxpages = bgwriterLruMaxpages;
            return this;
        }
        
        public BackgroundBGWriterSettings build() {
            return new BackgroundBGWriterSettings(
                bgwriterDelay,
                bgwriterFlushAfter,
                bgwriterLruMultiplier,
                bgwriterLruMaxpages);
        }
    }
}

