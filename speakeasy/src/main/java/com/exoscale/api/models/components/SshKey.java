/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * SshKey - SSH key
 */

public class SshKey {

    /**
     * SSH key name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * SSH key fingerprint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    private Optional<? extends String> fingerprint;

    public SshKey(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("fingerprint") Optional<? extends String> fingerprint) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(fingerprint, "fingerprint");
        this.name = name;
        this.fingerprint = fingerprint;
    }

    /**
     * SSH key name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * SSH key fingerprint
     */
    public Optional<? extends String> fingerprint() {
        return fingerprint;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * SSH key name
     */
    public SshKey withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * SSH key name
     */
    public SshKey withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * SSH key fingerprint
     */
    public SshKey withFingerprint(String fingerprint) {
        Utils.checkNotNull(fingerprint, "fingerprint");
        this.fingerprint = Optional.ofNullable(fingerprint);
        return this;
    }

    /**
     * SSH key fingerprint
     */
    public SshKey withFingerprint(Optional<? extends String> fingerprint) {
        Utils.checkNotNull(fingerprint, "fingerprint");
        this.fingerprint = fingerprint;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SshKey other = (SshKey) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.fingerprint, other.fingerprint);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            fingerprint);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SshKey.class,
                "name", name,
                "fingerprint", fingerprint);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> fingerprint = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * SSH key name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * SSH key name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * SSH key fingerprint
         */
        public Builder fingerprint(String fingerprint) {
            Utils.checkNotNull(fingerprint, "fingerprint");
            this.fingerprint = Optional.ofNullable(fingerprint);
            return this;
        }

        /**
         * SSH key fingerprint
         */
        public Builder fingerprint(Optional<? extends String> fingerprint) {
            Utils.checkNotNull(fingerprint, "fingerprint");
            this.fingerprint = fingerprint;
            return this;
        }
        
        public SshKey build() {
            return new SshKey(
                name,
                fingerprint);
        }
    }
}

