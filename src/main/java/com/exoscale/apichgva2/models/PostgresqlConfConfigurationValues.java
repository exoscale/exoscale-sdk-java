/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for PostgresqlConfConfigurationValues type.
 */
public class PostgresqlConfConfigurationValues {
    private Integer trackActivityQuerySize;
    private String timezone;
    private TrackIoTimingEnum trackIoTiming;
    private Boolean pgStatMonitorPgsmEnableQueryPlan;
    private Integer maxFilesPerProcess;
    private Integer pgStatMonitorPgsmMaxBuckets;
    private WriteAheadLogWALSettings wal;
    private DefaultToastCompressionEnum defaultToastCompression;
    private Integer deadlockTimeout;
    private Integer idleInTransactionSessionTimeout;
    private Integer maxPredLocksPerTransaction;
    private Integer maxReplicationSlots;
    private AutovacuumSettings autovacuum;
    private Integer maxParallelWorkersPerGather;
    private Integer pgPartmanBgwInterval;
    private LogLinePrefixEnum logLinePrefix;
    private Integer logTempFiles;
    private Integer maxLocksPerTransaction;
    private TrackCommitTimestampEnum trackCommitTimestamp;
    private TrackFunctionsEnum trackFunctions;
    private Integer maxStackDepth;
    private Integer maxParallelWorkers;
    private String pgPartmanBgwRole;
    private Integer maxLogicalReplicationWorkers;
    private Integer maxPreparedTransactions;
    private Integer maxWorkerProcesses;
    private PgStatStatementsTrackEnum pgStatStatementsTrack;
    private Integer tempFileLimit;
    private LogErrorVerbosityEnum logErrorVerbosity;
    private Integer logMinDurationStatement;
    private Integer maxStandbyStreamingDelay;
    private Boolean jit;
    private Integer maxStandbyArchiveDelay;
    private BackgroundBGWriterSettings bgWriter;

    /**
     * Default constructor.
     */
    public PostgresqlConfConfigurationValues() {
    }

    /**
     * Initialization constructor.
     * @param  trackActivityQuerySize  Integer value for trackActivityQuerySize.
     * @param  timezone  String value for timezone.
     * @param  trackIoTiming  TrackIoTimingEnum value for trackIoTiming.
     * @param  pgStatMonitorPgsmEnableQueryPlan  Boolean value for pgStatMonitorPgsmEnableQueryPlan.
     * @param  maxFilesPerProcess  Integer value for maxFilesPerProcess.
     * @param  pgStatMonitorPgsmMaxBuckets  Integer value for pgStatMonitorPgsmMaxBuckets.
     * @param  wal  WriteAheadLogWALSettings value for wal.
     * @param  defaultToastCompression  DefaultToastCompressionEnum value for
     *         defaultToastCompression.
     * @param  deadlockTimeout  Integer value for deadlockTimeout.
     * @param  idleInTransactionSessionTimeout  Integer value for idleInTransactionSessionTimeout.
     * @param  maxPredLocksPerTransaction  Integer value for maxPredLocksPerTransaction.
     * @param  maxReplicationSlots  Integer value for maxReplicationSlots.
     * @param  autovacuum  AutovacuumSettings value for autovacuum.
     * @param  maxParallelWorkersPerGather  Integer value for maxParallelWorkersPerGather.
     * @param  pgPartmanBgwInterval  Integer value for pgPartmanBgwInterval.
     * @param  logLinePrefix  LogLinePrefixEnum value for logLinePrefix.
     * @param  logTempFiles  Integer value for logTempFiles.
     * @param  maxLocksPerTransaction  Integer value for maxLocksPerTransaction.
     * @param  trackCommitTimestamp  TrackCommitTimestampEnum value for trackCommitTimestamp.
     * @param  trackFunctions  TrackFunctionsEnum value for trackFunctions.
     * @param  maxStackDepth  Integer value for maxStackDepth.
     * @param  maxParallelWorkers  Integer value for maxParallelWorkers.
     * @param  pgPartmanBgwRole  String value for pgPartmanBgwRole.
     * @param  maxLogicalReplicationWorkers  Integer value for maxLogicalReplicationWorkers.
     * @param  maxPreparedTransactions  Integer value for maxPreparedTransactions.
     * @param  maxWorkerProcesses  Integer value for maxWorkerProcesses.
     * @param  pgStatStatementsTrack  PgStatStatementsTrackEnum value for pgStatStatementsTrack.
     * @param  tempFileLimit  Integer value for tempFileLimit.
     * @param  logErrorVerbosity  LogErrorVerbosityEnum value for logErrorVerbosity.
     * @param  logMinDurationStatement  Integer value for logMinDurationStatement.
     * @param  maxStandbyStreamingDelay  Integer value for maxStandbyStreamingDelay.
     * @param  jit  Boolean value for jit.
     * @param  maxStandbyArchiveDelay  Integer value for maxStandbyArchiveDelay.
     * @param  bgWriter  BackgroundBGWriterSettings value for bgWriter.
     */
    public PostgresqlConfConfigurationValues(
            Integer trackActivityQuerySize,
            String timezone,
            TrackIoTimingEnum trackIoTiming,
            Boolean pgStatMonitorPgsmEnableQueryPlan,
            Integer maxFilesPerProcess,
            Integer pgStatMonitorPgsmMaxBuckets,
            WriteAheadLogWALSettings wal,
            DefaultToastCompressionEnum defaultToastCompression,
            Integer deadlockTimeout,
            Integer idleInTransactionSessionTimeout,
            Integer maxPredLocksPerTransaction,
            Integer maxReplicationSlots,
            AutovacuumSettings autovacuum,
            Integer maxParallelWorkersPerGather,
            Integer pgPartmanBgwInterval,
            LogLinePrefixEnum logLinePrefix,
            Integer logTempFiles,
            Integer maxLocksPerTransaction,
            TrackCommitTimestampEnum trackCommitTimestamp,
            TrackFunctionsEnum trackFunctions,
            Integer maxStackDepth,
            Integer maxParallelWorkers,
            String pgPartmanBgwRole,
            Integer maxLogicalReplicationWorkers,
            Integer maxPreparedTransactions,
            Integer maxWorkerProcesses,
            PgStatStatementsTrackEnum pgStatStatementsTrack,
            Integer tempFileLimit,
            LogErrorVerbosityEnum logErrorVerbosity,
            Integer logMinDurationStatement,
            Integer maxStandbyStreamingDelay,
            Boolean jit,
            Integer maxStandbyArchiveDelay,
            BackgroundBGWriterSettings bgWriter) {
        this.trackActivityQuerySize = trackActivityQuerySize;
        this.timezone = timezone;
        this.trackIoTiming = trackIoTiming;
        this.pgStatMonitorPgsmEnableQueryPlan = pgStatMonitorPgsmEnableQueryPlan;
        this.maxFilesPerProcess = maxFilesPerProcess;
        this.pgStatMonitorPgsmMaxBuckets = pgStatMonitorPgsmMaxBuckets;
        this.wal = wal;
        this.defaultToastCompression = defaultToastCompression;
        this.deadlockTimeout = deadlockTimeout;
        this.idleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
        this.maxPredLocksPerTransaction = maxPredLocksPerTransaction;
        this.maxReplicationSlots = maxReplicationSlots;
        this.autovacuum = autovacuum;
        this.maxParallelWorkersPerGather = maxParallelWorkersPerGather;
        this.pgPartmanBgwInterval = pgPartmanBgwInterval;
        this.logLinePrefix = logLinePrefix;
        this.logTempFiles = logTempFiles;
        this.maxLocksPerTransaction = maxLocksPerTransaction;
        this.trackCommitTimestamp = trackCommitTimestamp;
        this.trackFunctions = trackFunctions;
        this.maxStackDepth = maxStackDepth;
        this.maxParallelWorkers = maxParallelWorkers;
        this.pgPartmanBgwRole = pgPartmanBgwRole;
        this.maxLogicalReplicationWorkers = maxLogicalReplicationWorkers;
        this.maxPreparedTransactions = maxPreparedTransactions;
        this.maxWorkerProcesses = maxWorkerProcesses;
        this.pgStatStatementsTrack = pgStatStatementsTrack;
        this.tempFileLimit = tempFileLimit;
        this.logErrorVerbosity = logErrorVerbosity;
        this.logMinDurationStatement = logMinDurationStatement;
        this.maxStandbyStreamingDelay = maxStandbyStreamingDelay;
        this.jit = jit;
        this.maxStandbyArchiveDelay = maxStandbyArchiveDelay;
        this.bgWriter = bgWriter;
    }

    /**
     * Getter for TrackActivityQuerySize.
     * Specifies the number of bytes reserved to track the currently executing command for each
     * active session.
     * @return Returns the Integer
     */
    @JsonGetter("track_activity_query_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTrackActivityQuerySize() {
        return trackActivityQuerySize;
    }

    /**
     * Setter for TrackActivityQuerySize.
     * Specifies the number of bytes reserved to track the currently executing command for each
     * active session.
     * @param trackActivityQuerySize Value for Integer
     */
    @JsonSetter("track_activity_query_size")
    public void setTrackActivityQuerySize(Integer trackActivityQuerySize) {
        this.trackActivityQuerySize = trackActivityQuerySize;
    }

    /**
     * Getter for Timezone.
     * PostgreSQL service timezone
     * @return Returns the String
     */
    @JsonGetter("timezone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTimezone() {
        return timezone;
    }

    /**
     * Setter for Timezone.
     * PostgreSQL service timezone
     * @param timezone Value for String
     */
    @JsonSetter("timezone")
    public void setTimezone(String timezone) {
        this.timezone = timezone;
    }

    /**
     * Getter for TrackIoTiming.
     * Enables timing of database I/O calls. This parameter is off by default, because it will
     * repeatedly query the operating system for the current time, which may cause significant
     * overhead on some platforms.
     * @return Returns the TrackIoTimingEnum
     */
    @JsonGetter("track_io_timing")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TrackIoTimingEnum getTrackIoTiming() {
        return trackIoTiming;
    }

    /**
     * Setter for TrackIoTiming.
     * Enables timing of database I/O calls. This parameter is off by default, because it will
     * repeatedly query the operating system for the current time, which may cause significant
     * overhead on some platforms.
     * @param trackIoTiming Value for TrackIoTimingEnum
     */
    @JsonSetter("track_io_timing")
    public void setTrackIoTiming(TrackIoTimingEnum trackIoTiming) {
        this.trackIoTiming = trackIoTiming;
    }

    /**
     * Getter for PgStatMonitorPgsmEnableQueryPlan.
     * Enables or disables query plan monitoring
     * @return Returns the Boolean
     */
    @JsonGetter("pg_stat_monitor.pgsm_enable_query_plan")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPgStatMonitorPgsmEnableQueryPlan() {
        return pgStatMonitorPgsmEnableQueryPlan;
    }

    /**
     * Setter for PgStatMonitorPgsmEnableQueryPlan.
     * Enables or disables query plan monitoring
     * @param pgStatMonitorPgsmEnableQueryPlan Value for Boolean
     */
    @JsonSetter("pg_stat_monitor.pgsm_enable_query_plan")
    public void setPgStatMonitorPgsmEnableQueryPlan(Boolean pgStatMonitorPgsmEnableQueryPlan) {
        this.pgStatMonitorPgsmEnableQueryPlan = pgStatMonitorPgsmEnableQueryPlan;
    }

    /**
     * Getter for MaxFilesPerProcess.
     * PostgreSQL maximum number of files that can be open per process
     * @return Returns the Integer
     */
    @JsonGetter("max_files_per_process")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxFilesPerProcess() {
        return maxFilesPerProcess;
    }

    /**
     * Setter for MaxFilesPerProcess.
     * PostgreSQL maximum number of files that can be open per process
     * @param maxFilesPerProcess Value for Integer
     */
    @JsonSetter("max_files_per_process")
    public void setMaxFilesPerProcess(Integer maxFilesPerProcess) {
        this.maxFilesPerProcess = maxFilesPerProcess;
    }

    /**
     * Getter for PgStatMonitorPgsmMaxBuckets.
     * Sets the maximum number of buckets
     * @return Returns the Integer
     */
    @JsonGetter("pg_stat_monitor.pgsm_max_buckets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPgStatMonitorPgsmMaxBuckets() {
        return pgStatMonitorPgsmMaxBuckets;
    }

    /**
     * Setter for PgStatMonitorPgsmMaxBuckets.
     * Sets the maximum number of buckets
     * @param pgStatMonitorPgsmMaxBuckets Value for Integer
     */
    @JsonSetter("pg_stat_monitor.pgsm_max_buckets")
    public void setPgStatMonitorPgsmMaxBuckets(Integer pgStatMonitorPgsmMaxBuckets) {
        this.pgStatMonitorPgsmMaxBuckets = pgStatMonitorPgsmMaxBuckets;
    }

    /**
     * Getter for Wal.
     * @return Returns the WriteAheadLogWALSettings
     */
    @JsonGetter("wal")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public WriteAheadLogWALSettings getWal() {
        return wal;
    }

    /**
     * Setter for Wal.
     * @param wal Value for WriteAheadLogWALSettings
     */
    @JsonSetter("wal")
    public void setWal(WriteAheadLogWALSettings wal) {
        this.wal = wal;
    }

    /**
     * Getter for DefaultToastCompression.
     * Specifies the default TOAST compression method for values of compressible columns (the
     * default is lz4).
     * @return Returns the DefaultToastCompressionEnum
     */
    @JsonGetter("default_toast_compression")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DefaultToastCompressionEnum getDefaultToastCompression() {
        return defaultToastCompression;
    }

    /**
     * Setter for DefaultToastCompression.
     * Specifies the default TOAST compression method for values of compressible columns (the
     * default is lz4).
     * @param defaultToastCompression Value for DefaultToastCompressionEnum
     */
    @JsonSetter("default_toast_compression")
    public void setDefaultToastCompression(DefaultToastCompressionEnum defaultToastCompression) {
        this.defaultToastCompression = defaultToastCompression;
    }

    /**
     * Getter for DeadlockTimeout.
     * This is the amount of time, in milliseconds, to wait on a lock before checking to see if
     * there is a deadlock condition.
     * @return Returns the Integer
     */
    @JsonGetter("deadlock_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getDeadlockTimeout() {
        return deadlockTimeout;
    }

    /**
     * Setter for DeadlockTimeout.
     * This is the amount of time, in milliseconds, to wait on a lock before checking to see if
     * there is a deadlock condition.
     * @param deadlockTimeout Value for Integer
     */
    @JsonSetter("deadlock_timeout")
    public void setDeadlockTimeout(Integer deadlockTimeout) {
        this.deadlockTimeout = deadlockTimeout;
    }

    /**
     * Getter for IdleInTransactionSessionTimeout.
     * Time out sessions with open transactions after this number of milliseconds
     * @return Returns the Integer
     */
    @JsonGetter("idle_in_transaction_session_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getIdleInTransactionSessionTimeout() {
        return idleInTransactionSessionTimeout;
    }

    /**
     * Setter for IdleInTransactionSessionTimeout.
     * Time out sessions with open transactions after this number of milliseconds
     * @param idleInTransactionSessionTimeout Value for Integer
     */
    @JsonSetter("idle_in_transaction_session_timeout")
    public void setIdleInTransactionSessionTimeout(Integer idleInTransactionSessionTimeout) {
        this.idleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
    }

    /**
     * Getter for MaxPredLocksPerTransaction.
     * PostgreSQL maximum predicate locks per transaction
     * @return Returns the Integer
     */
    @JsonGetter("max_pred_locks_per_transaction")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxPredLocksPerTransaction() {
        return maxPredLocksPerTransaction;
    }

    /**
     * Setter for MaxPredLocksPerTransaction.
     * PostgreSQL maximum predicate locks per transaction
     * @param maxPredLocksPerTransaction Value for Integer
     */
    @JsonSetter("max_pred_locks_per_transaction")
    public void setMaxPredLocksPerTransaction(Integer maxPredLocksPerTransaction) {
        this.maxPredLocksPerTransaction = maxPredLocksPerTransaction;
    }

    /**
     * Getter for MaxReplicationSlots.
     * PostgreSQL maximum replication slots
     * @return Returns the Integer
     */
    @JsonGetter("max_replication_slots")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxReplicationSlots() {
        return maxReplicationSlots;
    }

    /**
     * Setter for MaxReplicationSlots.
     * PostgreSQL maximum replication slots
     * @param maxReplicationSlots Value for Integer
     */
    @JsonSetter("max_replication_slots")
    public void setMaxReplicationSlots(Integer maxReplicationSlots) {
        this.maxReplicationSlots = maxReplicationSlots;
    }

    /**
     * Getter for Autovacuum.
     * @return Returns the AutovacuumSettings
     */
    @JsonGetter("autovacuum")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AutovacuumSettings getAutovacuum() {
        return autovacuum;
    }

    /**
     * Setter for Autovacuum.
     * @param autovacuum Value for AutovacuumSettings
     */
    @JsonSetter("autovacuum")
    public void setAutovacuum(AutovacuumSettings autovacuum) {
        this.autovacuum = autovacuum;
    }

    /**
     * Getter for MaxParallelWorkersPerGather.
     * Sets the maximum number of workers that can be started by a single Gather or Gather Merge
     * node
     * @return Returns the Integer
     */
    @JsonGetter("max_parallel_workers_per_gather")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxParallelWorkersPerGather() {
        return maxParallelWorkersPerGather;
    }

    /**
     * Setter for MaxParallelWorkersPerGather.
     * Sets the maximum number of workers that can be started by a single Gather or Gather Merge
     * node
     * @param maxParallelWorkersPerGather Value for Integer
     */
    @JsonSetter("max_parallel_workers_per_gather")
    public void setMaxParallelWorkersPerGather(Integer maxParallelWorkersPerGather) {
        this.maxParallelWorkersPerGather = maxParallelWorkersPerGather;
    }

    /**
     * Getter for PgPartmanBgwInterval.
     * Sets the time interval to run pg_partman's scheduled tasks
     * @return Returns the Integer
     */
    @JsonGetter("pg_partman_bgw.interval")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPgPartmanBgwInterval() {
        return pgPartmanBgwInterval;
    }

    /**
     * Setter for PgPartmanBgwInterval.
     * Sets the time interval to run pg_partman's scheduled tasks
     * @param pgPartmanBgwInterval Value for Integer
     */
    @JsonSetter("pg_partman_bgw.interval")
    public void setPgPartmanBgwInterval(Integer pgPartmanBgwInterval) {
        this.pgPartmanBgwInterval = pgPartmanBgwInterval;
    }

    /**
     * Getter for LogLinePrefix.
     * Choose from one of the available log-formats. These can support popular log analyzers like
     * pgbadger, pganalyze etc.
     * @return Returns the LogLinePrefixEnum
     */
    @JsonGetter("log_line_prefix")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public LogLinePrefixEnum getLogLinePrefix() {
        return logLinePrefix;
    }

    /**
     * Setter for LogLinePrefix.
     * Choose from one of the available log-formats. These can support popular log analyzers like
     * pgbadger, pganalyze etc.
     * @param logLinePrefix Value for LogLinePrefixEnum
     */
    @JsonSetter("log_line_prefix")
    public void setLogLinePrefix(LogLinePrefixEnum logLinePrefix) {
        this.logLinePrefix = logLinePrefix;
    }

    /**
     * Getter for LogTempFiles.
     * Log statements for each temporary file created larger than this number of kilobytes, -1
     * disables
     * @return Returns the Integer
     */
    @JsonGetter("log_temp_files")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getLogTempFiles() {
        return logTempFiles;
    }

    /**
     * Setter for LogTempFiles.
     * Log statements for each temporary file created larger than this number of kilobytes, -1
     * disables
     * @param logTempFiles Value for Integer
     */
    @JsonSetter("log_temp_files")
    public void setLogTempFiles(Integer logTempFiles) {
        this.logTempFiles = logTempFiles;
    }

    /**
     * Getter for MaxLocksPerTransaction.
     * PostgreSQL maximum locks per transaction
     * @return Returns the Integer
     */
    @JsonGetter("max_locks_per_transaction")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxLocksPerTransaction() {
        return maxLocksPerTransaction;
    }

    /**
     * Setter for MaxLocksPerTransaction.
     * PostgreSQL maximum locks per transaction
     * @param maxLocksPerTransaction Value for Integer
     */
    @JsonSetter("max_locks_per_transaction")
    public void setMaxLocksPerTransaction(Integer maxLocksPerTransaction) {
        this.maxLocksPerTransaction = maxLocksPerTransaction;
    }

    /**
     * Getter for TrackCommitTimestamp.
     * Record commit time of transactions.
     * @return Returns the TrackCommitTimestampEnum
     */
    @JsonGetter("track_commit_timestamp")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TrackCommitTimestampEnum getTrackCommitTimestamp() {
        return trackCommitTimestamp;
    }

    /**
     * Setter for TrackCommitTimestamp.
     * Record commit time of transactions.
     * @param trackCommitTimestamp Value for TrackCommitTimestampEnum
     */
    @JsonSetter("track_commit_timestamp")
    public void setTrackCommitTimestamp(TrackCommitTimestampEnum trackCommitTimestamp) {
        this.trackCommitTimestamp = trackCommitTimestamp;
    }

    /**
     * Getter for TrackFunctions.
     * Enables tracking of function call counts and time used.
     * @return Returns the TrackFunctionsEnum
     */
    @JsonGetter("track_functions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TrackFunctionsEnum getTrackFunctions() {
        return trackFunctions;
    }

    /**
     * Setter for TrackFunctions.
     * Enables tracking of function call counts and time used.
     * @param trackFunctions Value for TrackFunctionsEnum
     */
    @JsonSetter("track_functions")
    public void setTrackFunctions(TrackFunctionsEnum trackFunctions) {
        this.trackFunctions = trackFunctions;
    }

    /**
     * Getter for MaxStackDepth.
     * Maximum depth of the stack in bytes
     * @return Returns the Integer
     */
    @JsonGetter("max_stack_depth")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxStackDepth() {
        return maxStackDepth;
    }

    /**
     * Setter for MaxStackDepth.
     * Maximum depth of the stack in bytes
     * @param maxStackDepth Value for Integer
     */
    @JsonSetter("max_stack_depth")
    public void setMaxStackDepth(Integer maxStackDepth) {
        this.maxStackDepth = maxStackDepth;
    }

    /**
     * Getter for MaxParallelWorkers.
     * Sets the maximum number of workers that the system can support for parallel queries
     * @return Returns the Integer
     */
    @JsonGetter("max_parallel_workers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxParallelWorkers() {
        return maxParallelWorkers;
    }

    /**
     * Setter for MaxParallelWorkers.
     * Sets the maximum number of workers that the system can support for parallel queries
     * @param maxParallelWorkers Value for Integer
     */
    @JsonSetter("max_parallel_workers")
    public void setMaxParallelWorkers(Integer maxParallelWorkers) {
        this.maxParallelWorkers = maxParallelWorkers;
    }

    /**
     * Getter for PgPartmanBgwRole.
     * Controls which role to use for pg_partman's scheduled background tasks.
     * @return Returns the String
     */
    @JsonGetter("pg_partman_bgw.role")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPgPartmanBgwRole() {
        return pgPartmanBgwRole;
    }

    /**
     * Setter for PgPartmanBgwRole.
     * Controls which role to use for pg_partman's scheduled background tasks.
     * @param pgPartmanBgwRole Value for String
     */
    @JsonSetter("pg_partman_bgw.role")
    public void setPgPartmanBgwRole(String pgPartmanBgwRole) {
        this.pgPartmanBgwRole = pgPartmanBgwRole;
    }

    /**
     * Getter for MaxLogicalReplicationWorkers.
     * PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers)
     * @return Returns the Integer
     */
    @JsonGetter("max_logical_replication_workers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxLogicalReplicationWorkers() {
        return maxLogicalReplicationWorkers;
    }

    /**
     * Setter for MaxLogicalReplicationWorkers.
     * PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers)
     * @param maxLogicalReplicationWorkers Value for Integer
     */
    @JsonSetter("max_logical_replication_workers")
    public void setMaxLogicalReplicationWorkers(Integer maxLogicalReplicationWorkers) {
        this.maxLogicalReplicationWorkers = maxLogicalReplicationWorkers;
    }

    /**
     * Getter for MaxPreparedTransactions.
     * PostgreSQL maximum prepared transactions
     * @return Returns the Integer
     */
    @JsonGetter("max_prepared_transactions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxPreparedTransactions() {
        return maxPreparedTransactions;
    }

    /**
     * Setter for MaxPreparedTransactions.
     * PostgreSQL maximum prepared transactions
     * @param maxPreparedTransactions Value for Integer
     */
    @JsonSetter("max_prepared_transactions")
    public void setMaxPreparedTransactions(Integer maxPreparedTransactions) {
        this.maxPreparedTransactions = maxPreparedTransactions;
    }

    /**
     * Getter for MaxWorkerProcesses.
     * Sets the maximum number of background processes that the system can support
     * @return Returns the Integer
     */
    @JsonGetter("max_worker_processes")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxWorkerProcesses() {
        return maxWorkerProcesses;
    }

    /**
     * Setter for MaxWorkerProcesses.
     * Sets the maximum number of background processes that the system can support
     * @param maxWorkerProcesses Value for Integer
     */
    @JsonSetter("max_worker_processes")
    public void setMaxWorkerProcesses(Integer maxWorkerProcesses) {
        this.maxWorkerProcesses = maxWorkerProcesses;
    }

    /**
     * Getter for PgStatStatementsTrack.
     * Controls which statements are counted. Specify top to track top-level statements (those
     * issued directly by clients), all to also track nested statements (such as statements invoked
     * within functions), or none to disable statement statistics collection. The default value is
     * top.
     * @return Returns the PgStatStatementsTrackEnum
     */
    @JsonGetter("pg_stat_statements.track")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PgStatStatementsTrackEnum getPgStatStatementsTrack() {
        return pgStatStatementsTrack;
    }

    /**
     * Setter for PgStatStatementsTrack.
     * Controls which statements are counted. Specify top to track top-level statements (those
     * issued directly by clients), all to also track nested statements (such as statements invoked
     * within functions), or none to disable statement statistics collection. The default value is
     * top.
     * @param pgStatStatementsTrack Value for PgStatStatementsTrackEnum
     */
    @JsonSetter("pg_stat_statements.track")
    public void setPgStatStatementsTrack(PgStatStatementsTrackEnum pgStatStatementsTrack) {
        this.pgStatStatementsTrack = pgStatStatementsTrack;
    }

    /**
     * Getter for TempFileLimit.
     * PostgreSQL temporary file limit in KiB, -1 for unlimited
     * @return Returns the Integer
     */
    @JsonGetter("temp_file_limit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTempFileLimit() {
        return tempFileLimit;
    }

    /**
     * Setter for TempFileLimit.
     * PostgreSQL temporary file limit in KiB, -1 for unlimited
     * @param tempFileLimit Value for Integer
     */
    @JsonSetter("temp_file_limit")
    public void setTempFileLimit(Integer tempFileLimit) {
        this.tempFileLimit = tempFileLimit;
    }

    /**
     * Getter for LogErrorVerbosity.
     * Controls the amount of detail written in the server log for each message that is logged.
     * @return Returns the LogErrorVerbosityEnum
     */
    @JsonGetter("log_error_verbosity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public LogErrorVerbosityEnum getLogErrorVerbosity() {
        return logErrorVerbosity;
    }

    /**
     * Setter for LogErrorVerbosity.
     * Controls the amount of detail written in the server log for each message that is logged.
     * @param logErrorVerbosity Value for LogErrorVerbosityEnum
     */
    @JsonSetter("log_error_verbosity")
    public void setLogErrorVerbosity(LogErrorVerbosityEnum logErrorVerbosity) {
        this.logErrorVerbosity = logErrorVerbosity;
    }

    /**
     * Getter for LogMinDurationStatement.
     * Log statements that take more than this number of milliseconds to run, -1 disables
     * @return Returns the Integer
     */
    @JsonGetter("log_min_duration_statement")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getLogMinDurationStatement() {
        return logMinDurationStatement;
    }

    /**
     * Setter for LogMinDurationStatement.
     * Log statements that take more than this number of milliseconds to run, -1 disables
     * @param logMinDurationStatement Value for Integer
     */
    @JsonSetter("log_min_duration_statement")
    public void setLogMinDurationStatement(Integer logMinDurationStatement) {
        this.logMinDurationStatement = logMinDurationStatement;
    }

    /**
     * Getter for MaxStandbyStreamingDelay.
     * Max standby streaming delay in milliseconds
     * @return Returns the Integer
     */
    @JsonGetter("max_standby_streaming_delay")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxStandbyStreamingDelay() {
        return maxStandbyStreamingDelay;
    }

    /**
     * Setter for MaxStandbyStreamingDelay.
     * Max standby streaming delay in milliseconds
     * @param maxStandbyStreamingDelay Value for Integer
     */
    @JsonSetter("max_standby_streaming_delay")
    public void setMaxStandbyStreamingDelay(Integer maxStandbyStreamingDelay) {
        this.maxStandbyStreamingDelay = maxStandbyStreamingDelay;
    }

    /**
     * Getter for Jit.
     * Controls system-wide use of Just-in-Time Compilation (JIT).
     * @return Returns the Boolean
     */
    @JsonGetter("jit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getJit() {
        return jit;
    }

    /**
     * Setter for Jit.
     * Controls system-wide use of Just-in-Time Compilation (JIT).
     * @param jit Value for Boolean
     */
    @JsonSetter("jit")
    public void setJit(Boolean jit) {
        this.jit = jit;
    }

    /**
     * Getter for MaxStandbyArchiveDelay.
     * Max standby archive delay in milliseconds
     * @return Returns the Integer
     */
    @JsonGetter("max_standby_archive_delay")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxStandbyArchiveDelay() {
        return maxStandbyArchiveDelay;
    }

    /**
     * Setter for MaxStandbyArchiveDelay.
     * Max standby archive delay in milliseconds
     * @param maxStandbyArchiveDelay Value for Integer
     */
    @JsonSetter("max_standby_archive_delay")
    public void setMaxStandbyArchiveDelay(Integer maxStandbyArchiveDelay) {
        this.maxStandbyArchiveDelay = maxStandbyArchiveDelay;
    }

    /**
     * Getter for BgWriter.
     * @return Returns the BackgroundBGWriterSettings
     */
    @JsonGetter("bg-writer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public BackgroundBGWriterSettings getBgWriter() {
        return bgWriter;
    }

    /**
     * Setter for BgWriter.
     * @param bgWriter Value for BackgroundBGWriterSettings
     */
    @JsonSetter("bg-writer")
    public void setBgWriter(BackgroundBGWriterSettings bgWriter) {
        this.bgWriter = bgWriter;
    }

    /**
     * Converts this PostgresqlConfConfigurationValues into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PostgresqlConfConfigurationValues [" + "trackActivityQuerySize="
                + trackActivityQuerySize + ", timezone=" + timezone + ", trackIoTiming="
                + trackIoTiming + ", pgStatMonitorPgsmEnableQueryPlan="
                + pgStatMonitorPgsmEnableQueryPlan + ", maxFilesPerProcess=" + maxFilesPerProcess
                + ", pgStatMonitorPgsmMaxBuckets=" + pgStatMonitorPgsmMaxBuckets + ", wal=" + wal
                + ", defaultToastCompression=" + defaultToastCompression + ", deadlockTimeout="
                + deadlockTimeout + ", idleInTransactionSessionTimeout="
                + idleInTransactionSessionTimeout + ", maxPredLocksPerTransaction="
                + maxPredLocksPerTransaction + ", maxReplicationSlots=" + maxReplicationSlots
                + ", autovacuum=" + autovacuum + ", maxParallelWorkersPerGather="
                + maxParallelWorkersPerGather + ", pgPartmanBgwInterval=" + pgPartmanBgwInterval
                + ", logLinePrefix=" + logLinePrefix + ", logTempFiles=" + logTempFiles
                + ", maxLocksPerTransaction=" + maxLocksPerTransaction + ", trackCommitTimestamp="
                + trackCommitTimestamp + ", trackFunctions=" + trackFunctions + ", maxStackDepth="
                + maxStackDepth + ", maxParallelWorkers=" + maxParallelWorkers
                + ", pgPartmanBgwRole=" + pgPartmanBgwRole + ", maxLogicalReplicationWorkers="
                + maxLogicalReplicationWorkers + ", maxPreparedTransactions="
                + maxPreparedTransactions + ", maxWorkerProcesses=" + maxWorkerProcesses
                + ", pgStatStatementsTrack=" + pgStatStatementsTrack + ", tempFileLimit="
                + tempFileLimit + ", logErrorVerbosity=" + logErrorVerbosity
                + ", logMinDurationStatement=" + logMinDurationStatement
                + ", maxStandbyStreamingDelay=" + maxStandbyStreamingDelay + ", jit=" + jit
                + ", maxStandbyArchiveDelay=" + maxStandbyArchiveDelay + ", bgWriter=" + bgWriter
                + "]";
    }

    /**
     * Builds a new {@link PostgresqlConfConfigurationValues.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PostgresqlConfConfigurationValues.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .trackActivityQuerySize(getTrackActivityQuerySize())
                .timezone(getTimezone())
                .trackIoTiming(getTrackIoTiming())
                .pgStatMonitorPgsmEnableQueryPlan(getPgStatMonitorPgsmEnableQueryPlan())
                .maxFilesPerProcess(getMaxFilesPerProcess())
                .pgStatMonitorPgsmMaxBuckets(getPgStatMonitorPgsmMaxBuckets())
                .wal(getWal())
                .defaultToastCompression(getDefaultToastCompression())
                .deadlockTimeout(getDeadlockTimeout())
                .idleInTransactionSessionTimeout(getIdleInTransactionSessionTimeout())
                .maxPredLocksPerTransaction(getMaxPredLocksPerTransaction())
                .maxReplicationSlots(getMaxReplicationSlots())
                .autovacuum(getAutovacuum())
                .maxParallelWorkersPerGather(getMaxParallelWorkersPerGather())
                .pgPartmanBgwInterval(getPgPartmanBgwInterval())
                .logLinePrefix(getLogLinePrefix())
                .logTempFiles(getLogTempFiles())
                .maxLocksPerTransaction(getMaxLocksPerTransaction())
                .trackCommitTimestamp(getTrackCommitTimestamp())
                .trackFunctions(getTrackFunctions())
                .maxStackDepth(getMaxStackDepth())
                .maxParallelWorkers(getMaxParallelWorkers())
                .pgPartmanBgwRole(getPgPartmanBgwRole())
                .maxLogicalReplicationWorkers(getMaxLogicalReplicationWorkers())
                .maxPreparedTransactions(getMaxPreparedTransactions())
                .maxWorkerProcesses(getMaxWorkerProcesses())
                .pgStatStatementsTrack(getPgStatStatementsTrack())
                .tempFileLimit(getTempFileLimit())
                .logErrorVerbosity(getLogErrorVerbosity())
                .logMinDurationStatement(getLogMinDurationStatement())
                .maxStandbyStreamingDelay(getMaxStandbyStreamingDelay())
                .jit(getJit())
                .maxStandbyArchiveDelay(getMaxStandbyArchiveDelay())
                .bgWriter(getBgWriter());
        return builder;
    }

    /**
     * Class to build instances of {@link PostgresqlConfConfigurationValues}.
     */
    public static class Builder {
        private Integer trackActivityQuerySize;
        private String timezone;
        private TrackIoTimingEnum trackIoTiming;
        private Boolean pgStatMonitorPgsmEnableQueryPlan;
        private Integer maxFilesPerProcess;
        private Integer pgStatMonitorPgsmMaxBuckets;
        private WriteAheadLogWALSettings wal;
        private DefaultToastCompressionEnum defaultToastCompression;
        private Integer deadlockTimeout;
        private Integer idleInTransactionSessionTimeout;
        private Integer maxPredLocksPerTransaction;
        private Integer maxReplicationSlots;
        private AutovacuumSettings autovacuum;
        private Integer maxParallelWorkersPerGather;
        private Integer pgPartmanBgwInterval;
        private LogLinePrefixEnum logLinePrefix;
        private Integer logTempFiles;
        private Integer maxLocksPerTransaction;
        private TrackCommitTimestampEnum trackCommitTimestamp;
        private TrackFunctionsEnum trackFunctions;
        private Integer maxStackDepth;
        private Integer maxParallelWorkers;
        private String pgPartmanBgwRole;
        private Integer maxLogicalReplicationWorkers;
        private Integer maxPreparedTransactions;
        private Integer maxWorkerProcesses;
        private PgStatStatementsTrackEnum pgStatStatementsTrack;
        private Integer tempFileLimit;
        private LogErrorVerbosityEnum logErrorVerbosity;
        private Integer logMinDurationStatement;
        private Integer maxStandbyStreamingDelay;
        private Boolean jit;
        private Integer maxStandbyArchiveDelay;
        private BackgroundBGWriterSettings bgWriter;



        /**
         * Setter for trackActivityQuerySize.
         * @param  trackActivityQuerySize  Integer value for trackActivityQuerySize.
         * @return Builder
         */
        public Builder trackActivityQuerySize(Integer trackActivityQuerySize) {
            this.trackActivityQuerySize = trackActivityQuerySize;
            return this;
        }

        /**
         * Setter for timezone.
         * @param  timezone  String value for timezone.
         * @return Builder
         */
        public Builder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }

        /**
         * Setter for trackIoTiming.
         * @param  trackIoTiming  TrackIoTimingEnum value for trackIoTiming.
         * @return Builder
         */
        public Builder trackIoTiming(TrackIoTimingEnum trackIoTiming) {
            this.trackIoTiming = trackIoTiming;
            return this;
        }

        /**
         * Setter for pgStatMonitorPgsmEnableQueryPlan.
         * @param  pgStatMonitorPgsmEnableQueryPlan  Boolean value for
         *         pgStatMonitorPgsmEnableQueryPlan.
         * @return Builder
         */
        public Builder pgStatMonitorPgsmEnableQueryPlan(
                Boolean pgStatMonitorPgsmEnableQueryPlan) {
            this.pgStatMonitorPgsmEnableQueryPlan = pgStatMonitorPgsmEnableQueryPlan;
            return this;
        }

        /**
         * Setter for maxFilesPerProcess.
         * @param  maxFilesPerProcess  Integer value for maxFilesPerProcess.
         * @return Builder
         */
        public Builder maxFilesPerProcess(Integer maxFilesPerProcess) {
            this.maxFilesPerProcess = maxFilesPerProcess;
            return this;
        }

        /**
         * Setter for pgStatMonitorPgsmMaxBuckets.
         * @param  pgStatMonitorPgsmMaxBuckets  Integer value for pgStatMonitorPgsmMaxBuckets.
         * @return Builder
         */
        public Builder pgStatMonitorPgsmMaxBuckets(Integer pgStatMonitorPgsmMaxBuckets) {
            this.pgStatMonitorPgsmMaxBuckets = pgStatMonitorPgsmMaxBuckets;
            return this;
        }

        /**
         * Setter for wal.
         * @param  wal  WriteAheadLogWALSettings value for wal.
         * @return Builder
         */
        public Builder wal(WriteAheadLogWALSettings wal) {
            this.wal = wal;
            return this;
        }

        /**
         * Setter for defaultToastCompression.
         * @param  defaultToastCompression  DefaultToastCompressionEnum value for
         *         defaultToastCompression.
         * @return Builder
         */
        public Builder defaultToastCompression(
                DefaultToastCompressionEnum defaultToastCompression) {
            this.defaultToastCompression = defaultToastCompression;
            return this;
        }

        /**
         * Setter for deadlockTimeout.
         * @param  deadlockTimeout  Integer value for deadlockTimeout.
         * @return Builder
         */
        public Builder deadlockTimeout(Integer deadlockTimeout) {
            this.deadlockTimeout = deadlockTimeout;
            return this;
        }

        /**
         * Setter for idleInTransactionSessionTimeout.
         * @param  idleInTransactionSessionTimeout  Integer value for
         *         idleInTransactionSessionTimeout.
         * @return Builder
         */
        public Builder idleInTransactionSessionTimeout(Integer idleInTransactionSessionTimeout) {
            this.idleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
            return this;
        }

        /**
         * Setter for maxPredLocksPerTransaction.
         * @param  maxPredLocksPerTransaction  Integer value for maxPredLocksPerTransaction.
         * @return Builder
         */
        public Builder maxPredLocksPerTransaction(Integer maxPredLocksPerTransaction) {
            this.maxPredLocksPerTransaction = maxPredLocksPerTransaction;
            return this;
        }

        /**
         * Setter for maxReplicationSlots.
         * @param  maxReplicationSlots  Integer value for maxReplicationSlots.
         * @return Builder
         */
        public Builder maxReplicationSlots(Integer maxReplicationSlots) {
            this.maxReplicationSlots = maxReplicationSlots;
            return this;
        }

        /**
         * Setter for autovacuum.
         * @param  autovacuum  AutovacuumSettings value for autovacuum.
         * @return Builder
         */
        public Builder autovacuum(AutovacuumSettings autovacuum) {
            this.autovacuum = autovacuum;
            return this;
        }

        /**
         * Setter for maxParallelWorkersPerGather.
         * @param  maxParallelWorkersPerGather  Integer value for maxParallelWorkersPerGather.
         * @return Builder
         */
        public Builder maxParallelWorkersPerGather(Integer maxParallelWorkersPerGather) {
            this.maxParallelWorkersPerGather = maxParallelWorkersPerGather;
            return this;
        }

        /**
         * Setter for pgPartmanBgwInterval.
         * @param  pgPartmanBgwInterval  Integer value for pgPartmanBgwInterval.
         * @return Builder
         */
        public Builder pgPartmanBgwInterval(Integer pgPartmanBgwInterval) {
            this.pgPartmanBgwInterval = pgPartmanBgwInterval;
            return this;
        }

        /**
         * Setter for logLinePrefix.
         * @param  logLinePrefix  LogLinePrefixEnum value for logLinePrefix.
         * @return Builder
         */
        public Builder logLinePrefix(LogLinePrefixEnum logLinePrefix) {
            this.logLinePrefix = logLinePrefix;
            return this;
        }

        /**
         * Setter for logTempFiles.
         * @param  logTempFiles  Integer value for logTempFiles.
         * @return Builder
         */
        public Builder logTempFiles(Integer logTempFiles) {
            this.logTempFiles = logTempFiles;
            return this;
        }

        /**
         * Setter for maxLocksPerTransaction.
         * @param  maxLocksPerTransaction  Integer value for maxLocksPerTransaction.
         * @return Builder
         */
        public Builder maxLocksPerTransaction(Integer maxLocksPerTransaction) {
            this.maxLocksPerTransaction = maxLocksPerTransaction;
            return this;
        }

        /**
         * Setter for trackCommitTimestamp.
         * @param  trackCommitTimestamp  TrackCommitTimestampEnum value for trackCommitTimestamp.
         * @return Builder
         */
        public Builder trackCommitTimestamp(TrackCommitTimestampEnum trackCommitTimestamp) {
            this.trackCommitTimestamp = trackCommitTimestamp;
            return this;
        }

        /**
         * Setter for trackFunctions.
         * @param  trackFunctions  TrackFunctionsEnum value for trackFunctions.
         * @return Builder
         */
        public Builder trackFunctions(TrackFunctionsEnum trackFunctions) {
            this.trackFunctions = trackFunctions;
            return this;
        }

        /**
         * Setter for maxStackDepth.
         * @param  maxStackDepth  Integer value for maxStackDepth.
         * @return Builder
         */
        public Builder maxStackDepth(Integer maxStackDepth) {
            this.maxStackDepth = maxStackDepth;
            return this;
        }

        /**
         * Setter for maxParallelWorkers.
         * @param  maxParallelWorkers  Integer value for maxParallelWorkers.
         * @return Builder
         */
        public Builder maxParallelWorkers(Integer maxParallelWorkers) {
            this.maxParallelWorkers = maxParallelWorkers;
            return this;
        }

        /**
         * Setter for pgPartmanBgwRole.
         * @param  pgPartmanBgwRole  String value for pgPartmanBgwRole.
         * @return Builder
         */
        public Builder pgPartmanBgwRole(String pgPartmanBgwRole) {
            this.pgPartmanBgwRole = pgPartmanBgwRole;
            return this;
        }

        /**
         * Setter for maxLogicalReplicationWorkers.
         * @param  maxLogicalReplicationWorkers  Integer value for maxLogicalReplicationWorkers.
         * @return Builder
         */
        public Builder maxLogicalReplicationWorkers(Integer maxLogicalReplicationWorkers) {
            this.maxLogicalReplicationWorkers = maxLogicalReplicationWorkers;
            return this;
        }

        /**
         * Setter for maxPreparedTransactions.
         * @param  maxPreparedTransactions  Integer value for maxPreparedTransactions.
         * @return Builder
         */
        public Builder maxPreparedTransactions(Integer maxPreparedTransactions) {
            this.maxPreparedTransactions = maxPreparedTransactions;
            return this;
        }

        /**
         * Setter for maxWorkerProcesses.
         * @param  maxWorkerProcesses  Integer value for maxWorkerProcesses.
         * @return Builder
         */
        public Builder maxWorkerProcesses(Integer maxWorkerProcesses) {
            this.maxWorkerProcesses = maxWorkerProcesses;
            return this;
        }

        /**
         * Setter for pgStatStatementsTrack.
         * @param  pgStatStatementsTrack  PgStatStatementsTrackEnum value for pgStatStatementsTrack.
         * @return Builder
         */
        public Builder pgStatStatementsTrack(PgStatStatementsTrackEnum pgStatStatementsTrack) {
            this.pgStatStatementsTrack = pgStatStatementsTrack;
            return this;
        }

        /**
         * Setter for tempFileLimit.
         * @param  tempFileLimit  Integer value for tempFileLimit.
         * @return Builder
         */
        public Builder tempFileLimit(Integer tempFileLimit) {
            this.tempFileLimit = tempFileLimit;
            return this;
        }

        /**
         * Setter for logErrorVerbosity.
         * @param  logErrorVerbosity  LogErrorVerbosityEnum value for logErrorVerbosity.
         * @return Builder
         */
        public Builder logErrorVerbosity(LogErrorVerbosityEnum logErrorVerbosity) {
            this.logErrorVerbosity = logErrorVerbosity;
            return this;
        }

        /**
         * Setter for logMinDurationStatement.
         * @param  logMinDurationStatement  Integer value for logMinDurationStatement.
         * @return Builder
         */
        public Builder logMinDurationStatement(Integer logMinDurationStatement) {
            this.logMinDurationStatement = logMinDurationStatement;
            return this;
        }

        /**
         * Setter for maxStandbyStreamingDelay.
         * @param  maxStandbyStreamingDelay  Integer value for maxStandbyStreamingDelay.
         * @return Builder
         */
        public Builder maxStandbyStreamingDelay(Integer maxStandbyStreamingDelay) {
            this.maxStandbyStreamingDelay = maxStandbyStreamingDelay;
            return this;
        }

        /**
         * Setter for jit.
         * @param  jit  Boolean value for jit.
         * @return Builder
         */
        public Builder jit(Boolean jit) {
            this.jit = jit;
            return this;
        }

        /**
         * Setter for maxStandbyArchiveDelay.
         * @param  maxStandbyArchiveDelay  Integer value for maxStandbyArchiveDelay.
         * @return Builder
         */
        public Builder maxStandbyArchiveDelay(Integer maxStandbyArchiveDelay) {
            this.maxStandbyArchiveDelay = maxStandbyArchiveDelay;
            return this;
        }

        /**
         * Setter for bgWriter.
         * @param  bgWriter  BackgroundBGWriterSettings value for bgWriter.
         * @return Builder
         */
        public Builder bgWriter(BackgroundBGWriterSettings bgWriter) {
            this.bgWriter = bgWriter;
            return this;
        }

        /**
         * Builds a new {@link PostgresqlConfConfigurationValues} object using the set fields.
         * @return {@link PostgresqlConfConfigurationValues}
         */
        public PostgresqlConfConfigurationValues build() {
            return new PostgresqlConfConfigurationValues(trackActivityQuerySize, timezone,
                    trackIoTiming, pgStatMonitorPgsmEnableQueryPlan, maxFilesPerProcess,
                    pgStatMonitorPgsmMaxBuckets, wal, defaultToastCompression, deadlockTimeout,
                    idleInTransactionSessionTimeout, maxPredLocksPerTransaction,
                    maxReplicationSlots, autovacuum, maxParallelWorkersPerGather,
                    pgPartmanBgwInterval, logLinePrefix, logTempFiles, maxLocksPerTransaction,
                    trackCommitTimestamp, trackFunctions, maxStackDepth, maxParallelWorkers,
                    pgPartmanBgwRole, maxLogicalReplicationWorkers, maxPreparedTransactions,
                    maxWorkerProcesses, pgStatStatementsTrack, tempFileLimit, logErrorVerbosity,
                    logMinDurationStatement, maxStandbyStreamingDelay, jit, maxStandbyArchiveDelay,
                    bgWriter);
        }
    }
}
