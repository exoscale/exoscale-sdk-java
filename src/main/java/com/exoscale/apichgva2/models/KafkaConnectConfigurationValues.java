/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for KafkaConnectConfigurationValues type.
 */
public class KafkaConnectConfigurationValues {
    private Integer producerBufferMemory;
    private Integer consumerMaxPollIntervalMs;
    private TheDefaultCompressionTypeForProducersEnum producerCompressionType;
    private ClientConfigOverridePolicyEnum connectorClientConfigOverridePolicy;
    private Integer offsetFlushIntervalMs;
    private Integer scheduledRebalanceMaxDelayMs;
    private Integer consumerFetchMaxBytes;
    private Integer consumerMaxPartitionFetchBytes;
    private Integer offsetFlushTimeoutMs;
    private ConsumerAutoOffsetResetEnum consumerAutoOffsetReset;
    private Integer producerMaxRequestSize;
    private Integer producerBatchSize;
    private Integer sessionTimeoutMs;
    private Integer producerLingerMs;
    private ConsumerIsolationLevelEnum consumerIsolationLevel;
    private Integer consumerMaxPollRecords;

    /**
     * Default constructor.
     */
    public KafkaConnectConfigurationValues() {
    }

    /**
     * Initialization constructor.
     * @param  producerBufferMemory  Integer value for producerBufferMemory.
     * @param  consumerMaxPollIntervalMs  Integer value for consumerMaxPollIntervalMs.
     * @param  producerCompressionType  TheDefaultCompressionTypeForProducersEnum value for
     *         producerCompressionType.
     * @param  connectorClientConfigOverridePolicy  ClientConfigOverridePolicyEnum value for
     *         connectorClientConfigOverridePolicy.
     * @param  offsetFlushIntervalMs  Integer value for offsetFlushIntervalMs.
     * @param  scheduledRebalanceMaxDelayMs  Integer value for scheduledRebalanceMaxDelayMs.
     * @param  consumerFetchMaxBytes  Integer value for consumerFetchMaxBytes.
     * @param  consumerMaxPartitionFetchBytes  Integer value for consumerMaxPartitionFetchBytes.
     * @param  offsetFlushTimeoutMs  Integer value for offsetFlushTimeoutMs.
     * @param  consumerAutoOffsetReset  ConsumerAutoOffsetResetEnum value for
     *         consumerAutoOffsetReset.
     * @param  producerMaxRequestSize  Integer value for producerMaxRequestSize.
     * @param  producerBatchSize  Integer value for producerBatchSize.
     * @param  sessionTimeoutMs  Integer value for sessionTimeoutMs.
     * @param  producerLingerMs  Integer value for producerLingerMs.
     * @param  consumerIsolationLevel  ConsumerIsolationLevelEnum value for consumerIsolationLevel.
     * @param  consumerMaxPollRecords  Integer value for consumerMaxPollRecords.
     */
    public KafkaConnectConfigurationValues(
            Integer producerBufferMemory,
            Integer consumerMaxPollIntervalMs,
            TheDefaultCompressionTypeForProducersEnum producerCompressionType,
            ClientConfigOverridePolicyEnum connectorClientConfigOverridePolicy,
            Integer offsetFlushIntervalMs,
            Integer scheduledRebalanceMaxDelayMs,
            Integer consumerFetchMaxBytes,
            Integer consumerMaxPartitionFetchBytes,
            Integer offsetFlushTimeoutMs,
            ConsumerAutoOffsetResetEnum consumerAutoOffsetReset,
            Integer producerMaxRequestSize,
            Integer producerBatchSize,
            Integer sessionTimeoutMs,
            Integer producerLingerMs,
            ConsumerIsolationLevelEnum consumerIsolationLevel,
            Integer consumerMaxPollRecords) {
        this.producerBufferMemory = producerBufferMemory;
        this.consumerMaxPollIntervalMs = consumerMaxPollIntervalMs;
        this.producerCompressionType = producerCompressionType;
        this.connectorClientConfigOverridePolicy = connectorClientConfigOverridePolicy;
        this.offsetFlushIntervalMs = offsetFlushIntervalMs;
        this.scheduledRebalanceMaxDelayMs = scheduledRebalanceMaxDelayMs;
        this.consumerFetchMaxBytes = consumerFetchMaxBytes;
        this.consumerMaxPartitionFetchBytes = consumerMaxPartitionFetchBytes;
        this.offsetFlushTimeoutMs = offsetFlushTimeoutMs;
        this.consumerAutoOffsetReset = consumerAutoOffsetReset;
        this.producerMaxRequestSize = producerMaxRequestSize;
        this.producerBatchSize = producerBatchSize;
        this.sessionTimeoutMs = sessionTimeoutMs;
        this.producerLingerMs = producerLingerMs;
        this.consumerIsolationLevel = consumerIsolationLevel;
        this.consumerMaxPollRecords = consumerMaxPollRecords;
    }

    /**
     * Getter for ProducerBufferMemory.
     * The total bytes of memory the producer can use to buffer records waiting to be sent to the
     * broker (defaults to 33554432).
     * @return Returns the Integer
     */
    @JsonGetter("producer_buffer_memory")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getProducerBufferMemory() {
        return producerBufferMemory;
    }

    /**
     * Setter for ProducerBufferMemory.
     * The total bytes of memory the producer can use to buffer records waiting to be sent to the
     * broker (defaults to 33554432).
     * @param producerBufferMemory Value for Integer
     */
    @JsonSetter("producer_buffer_memory")
    public void setProducerBufferMemory(Integer producerBufferMemory) {
        this.producerBufferMemory = producerBufferMemory;
    }

    /**
     * Getter for ConsumerMaxPollIntervalMs.
     * The maximum delay in milliseconds between invocations of poll() when using consumer group
     * management (defaults to 300000).
     * @return Returns the Integer
     */
    @JsonGetter("consumer_max_poll_interval_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getConsumerMaxPollIntervalMs() {
        return consumerMaxPollIntervalMs;
    }

    /**
     * Setter for ConsumerMaxPollIntervalMs.
     * The maximum delay in milliseconds between invocations of poll() when using consumer group
     * management (defaults to 300000).
     * @param consumerMaxPollIntervalMs Value for Integer
     */
    @JsonSetter("consumer_max_poll_interval_ms")
    public void setConsumerMaxPollIntervalMs(Integer consumerMaxPollIntervalMs) {
        this.consumerMaxPollIntervalMs = consumerMaxPollIntervalMs;
    }

    /**
     * Getter for ProducerCompressionType.
     * Specify the default compression type for producers. This configuration accepts the standard
     * compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is
     * the default and equivalent to no compression.
     * @return Returns the TheDefaultCompressionTypeForProducersEnum
     */
    @JsonGetter("producer_compression_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TheDefaultCompressionTypeForProducersEnum getProducerCompressionType() {
        return producerCompressionType;
    }

    /**
     * Setter for ProducerCompressionType.
     * Specify the default compression type for producers. This configuration accepts the standard
     * compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is
     * the default and equivalent to no compression.
     * @param producerCompressionType Value for TheDefaultCompressionTypeForProducersEnum
     */
    @JsonSetter("producer_compression_type")
    public void setProducerCompressionType(TheDefaultCompressionTypeForProducersEnum producerCompressionType) {
        this.producerCompressionType = producerCompressionType;
    }

    /**
     * Getter for ConnectorClientConfigOverridePolicy.
     * Defines what client configurations can be overridden by the connector. Default is None
     * @return Returns the ClientConfigOverridePolicyEnum
     */
    @JsonGetter("connector_client_config_override_policy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ClientConfigOverridePolicyEnum getConnectorClientConfigOverridePolicy() {
        return connectorClientConfigOverridePolicy;
    }

    /**
     * Setter for ConnectorClientConfigOverridePolicy.
     * Defines what client configurations can be overridden by the connector. Default is None
     * @param connectorClientConfigOverridePolicy Value for ClientConfigOverridePolicyEnum
     */
    @JsonSetter("connector_client_config_override_policy")
    public void setConnectorClientConfigOverridePolicy(ClientConfigOverridePolicyEnum connectorClientConfigOverridePolicy) {
        this.connectorClientConfigOverridePolicy = connectorClientConfigOverridePolicy;
    }

    /**
     * Getter for OffsetFlushIntervalMs.
     * The interval at which to try committing offsets for tasks (defaults to 60000).
     * @return Returns the Integer
     */
    @JsonGetter("offset_flush_interval_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getOffsetFlushIntervalMs() {
        return offsetFlushIntervalMs;
    }

    /**
     * Setter for OffsetFlushIntervalMs.
     * The interval at which to try committing offsets for tasks (defaults to 60000).
     * @param offsetFlushIntervalMs Value for Integer
     */
    @JsonSetter("offset_flush_interval_ms")
    public void setOffsetFlushIntervalMs(Integer offsetFlushIntervalMs) {
        this.offsetFlushIntervalMs = offsetFlushIntervalMs;
    }

    /**
     * Getter for ScheduledRebalanceMaxDelayMs.
     * The maximum delay that is scheduled in order to wait for the return of one or more departed
     * workers before rebalancing and reassigning their connectors and tasks to the group. During
     * this period the connectors and tasks of the departed workers remain unassigned. Defaults to 5
     * minutes.
     * @return Returns the Integer
     */
    @JsonGetter("scheduled_rebalance_max_delay_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getScheduledRebalanceMaxDelayMs() {
        return scheduledRebalanceMaxDelayMs;
    }

    /**
     * Setter for ScheduledRebalanceMaxDelayMs.
     * The maximum delay that is scheduled in order to wait for the return of one or more departed
     * workers before rebalancing and reassigning their connectors and tasks to the group. During
     * this period the connectors and tasks of the departed workers remain unassigned. Defaults to 5
     * minutes.
     * @param scheduledRebalanceMaxDelayMs Value for Integer
     */
    @JsonSetter("scheduled_rebalance_max_delay_ms")
    public void setScheduledRebalanceMaxDelayMs(Integer scheduledRebalanceMaxDelayMs) {
        this.scheduledRebalanceMaxDelayMs = scheduledRebalanceMaxDelayMs;
    }

    /**
     * Getter for ConsumerFetchMaxBytes.
     * Records are fetched in batches by the consumer, and if the first record batch in the first
     * non-empty partition of the fetch is larger than this value, the record batch will still be
     * returned to ensure that the consumer can make progress. As such, this is not a absolute
     * maximum.
     * @return Returns the Integer
     */
    @JsonGetter("consumer_fetch_max_bytes")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getConsumerFetchMaxBytes() {
        return consumerFetchMaxBytes;
    }

    /**
     * Setter for ConsumerFetchMaxBytes.
     * Records are fetched in batches by the consumer, and if the first record batch in the first
     * non-empty partition of the fetch is larger than this value, the record batch will still be
     * returned to ensure that the consumer can make progress. As such, this is not a absolute
     * maximum.
     * @param consumerFetchMaxBytes Value for Integer
     */
    @JsonSetter("consumer_fetch_max_bytes")
    public void setConsumerFetchMaxBytes(Integer consumerFetchMaxBytes) {
        this.consumerFetchMaxBytes = consumerFetchMaxBytes;
    }

    /**
     * Getter for ConsumerMaxPartitionFetchBytes.
     * Records are fetched in batches by the consumer.If the first record batch in the first
     * non-empty partition of the fetch is larger than this limit, the batch will still be returned
     * to ensure that the consumer can make progress.
     * @return Returns the Integer
     */
    @JsonGetter("consumer_max_partition_fetch_bytes")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getConsumerMaxPartitionFetchBytes() {
        return consumerMaxPartitionFetchBytes;
    }

    /**
     * Setter for ConsumerMaxPartitionFetchBytes.
     * Records are fetched in batches by the consumer.If the first record batch in the first
     * non-empty partition of the fetch is larger than this limit, the batch will still be returned
     * to ensure that the consumer can make progress.
     * @param consumerMaxPartitionFetchBytes Value for Integer
     */
    @JsonSetter("consumer_max_partition_fetch_bytes")
    public void setConsumerMaxPartitionFetchBytes(Integer consumerMaxPartitionFetchBytes) {
        this.consumerMaxPartitionFetchBytes = consumerMaxPartitionFetchBytes;
    }

    /**
     * Getter for OffsetFlushTimeoutMs.
     * Maximum number of milliseconds to wait for records to flush and partition offset data to be
     * committed to offset storage before cancelling the process and restoring the offset data to be
     * committed in a future attempt (defaults to 5000).
     * @return Returns the Integer
     */
    @JsonGetter("offset_flush_timeout_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getOffsetFlushTimeoutMs() {
        return offsetFlushTimeoutMs;
    }

    /**
     * Setter for OffsetFlushTimeoutMs.
     * Maximum number of milliseconds to wait for records to flush and partition offset data to be
     * committed to offset storage before cancelling the process and restoring the offset data to be
     * committed in a future attempt (defaults to 5000).
     * @param offsetFlushTimeoutMs Value for Integer
     */
    @JsonSetter("offset_flush_timeout_ms")
    public void setOffsetFlushTimeoutMs(Integer offsetFlushTimeoutMs) {
        this.offsetFlushTimeoutMs = offsetFlushTimeoutMs;
    }

    /**
     * Getter for ConsumerAutoOffsetReset.
     * What to do when there is no initial offset in Kafka or if the current offset does not exist
     * any more on the server. Default is earliest
     * @return Returns the ConsumerAutoOffsetResetEnum
     */
    @JsonGetter("consumer_auto_offset_reset")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ConsumerAutoOffsetResetEnum getConsumerAutoOffsetReset() {
        return consumerAutoOffsetReset;
    }

    /**
     * Setter for ConsumerAutoOffsetReset.
     * What to do when there is no initial offset in Kafka or if the current offset does not exist
     * any more on the server. Default is earliest
     * @param consumerAutoOffsetReset Value for ConsumerAutoOffsetResetEnum
     */
    @JsonSetter("consumer_auto_offset_reset")
    public void setConsumerAutoOffsetReset(ConsumerAutoOffsetResetEnum consumerAutoOffsetReset) {
        this.consumerAutoOffsetReset = consumerAutoOffsetReset;
    }

    /**
     * Getter for ProducerMaxRequestSize.
     * This setting will limit the number of record batches the producer will send in a single
     * request to avoid sending huge requests.
     * @return Returns the Integer
     */
    @JsonGetter("producer_max_request_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getProducerMaxRequestSize() {
        return producerMaxRequestSize;
    }

    /**
     * Setter for ProducerMaxRequestSize.
     * This setting will limit the number of record batches the producer will send in a single
     * request to avoid sending huge requests.
     * @param producerMaxRequestSize Value for Integer
     */
    @JsonSetter("producer_max_request_size")
    public void setProducerMaxRequestSize(Integer producerMaxRequestSize) {
        this.producerMaxRequestSize = producerMaxRequestSize;
    }

    /**
     * Getter for ProducerBatchSize.
     * This setting gives the upper bound of the batch size to be sent. If there are fewer than this
     * many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time
     * waiting for more records to show up. A batch size of zero will disable batching entirely
     * (defaults to 16384).
     * @return Returns the Integer
     */
    @JsonGetter("producer_batch_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getProducerBatchSize() {
        return producerBatchSize;
    }

    /**
     * Setter for ProducerBatchSize.
     * This setting gives the upper bound of the batch size to be sent. If there are fewer than this
     * many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time
     * waiting for more records to show up. A batch size of zero will disable batching entirely
     * (defaults to 16384).
     * @param producerBatchSize Value for Integer
     */
    @JsonSetter("producer_batch_size")
    public void setProducerBatchSize(Integer producerBatchSize) {
        this.producerBatchSize = producerBatchSize;
    }

    /**
     * Getter for SessionTimeoutMs.
     * The timeout in milliseconds used to detect failures when using Kafka’s group management
     * facilities (defaults to 10000).
     * @return Returns the Integer
     */
    @JsonGetter("session_timeout_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSessionTimeoutMs() {
        return sessionTimeoutMs;
    }

    /**
     * Setter for SessionTimeoutMs.
     * The timeout in milliseconds used to detect failures when using Kafka’s group management
     * facilities (defaults to 10000).
     * @param sessionTimeoutMs Value for Integer
     */
    @JsonSetter("session_timeout_ms")
    public void setSessionTimeoutMs(Integer sessionTimeoutMs) {
        this.sessionTimeoutMs = sessionTimeoutMs;
    }

    /**
     * Getter for ProducerLingerMs.
     * This setting gives the upper bound on the delay for batching: once there is batch.size worth
     * of records for a partition it will be sent immediately regardless of this setting, however if
     * there are fewer than this many bytes accumulated for this partition the producer will
     * 'linger' for the specified time waiting for more records to show up. Defaults to 0.
     * @return Returns the Integer
     */
    @JsonGetter("producer_linger_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getProducerLingerMs() {
        return producerLingerMs;
    }

    /**
     * Setter for ProducerLingerMs.
     * This setting gives the upper bound on the delay for batching: once there is batch.size worth
     * of records for a partition it will be sent immediately regardless of this setting, however if
     * there are fewer than this many bytes accumulated for this partition the producer will
     * 'linger' for the specified time waiting for more records to show up. Defaults to 0.
     * @param producerLingerMs Value for Integer
     */
    @JsonSetter("producer_linger_ms")
    public void setProducerLingerMs(Integer producerLingerMs) {
        this.producerLingerMs = producerLingerMs;
    }

    /**
     * Getter for ConsumerIsolationLevel.
     * Transaction read isolation level. read_uncommitted is the default, but read_committed can be
     * used if consume-exactly-once behavior is desired.
     * @return Returns the ConsumerIsolationLevelEnum
     */
    @JsonGetter("consumer_isolation_level")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ConsumerIsolationLevelEnum getConsumerIsolationLevel() {
        return consumerIsolationLevel;
    }

    /**
     * Setter for ConsumerIsolationLevel.
     * Transaction read isolation level. read_uncommitted is the default, but read_committed can be
     * used if consume-exactly-once behavior is desired.
     * @param consumerIsolationLevel Value for ConsumerIsolationLevelEnum
     */
    @JsonSetter("consumer_isolation_level")
    public void setConsumerIsolationLevel(ConsumerIsolationLevelEnum consumerIsolationLevel) {
        this.consumerIsolationLevel = consumerIsolationLevel;
    }

    /**
     * Getter for ConsumerMaxPollRecords.
     * The maximum number of records returned in a single call to poll() (defaults to 500).
     * @return Returns the Integer
     */
    @JsonGetter("consumer_max_poll_records")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getConsumerMaxPollRecords() {
        return consumerMaxPollRecords;
    }

    /**
     * Setter for ConsumerMaxPollRecords.
     * The maximum number of records returned in a single call to poll() (defaults to 500).
     * @param consumerMaxPollRecords Value for Integer
     */
    @JsonSetter("consumer_max_poll_records")
    public void setConsumerMaxPollRecords(Integer consumerMaxPollRecords) {
        this.consumerMaxPollRecords = consumerMaxPollRecords;
    }

    /**
     * Converts this KafkaConnectConfigurationValues into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "KafkaConnectConfigurationValues [" + "producerBufferMemory=" + producerBufferMemory
                + ", consumerMaxPollIntervalMs=" + consumerMaxPollIntervalMs
                + ", producerCompressionType=" + producerCompressionType
                + ", connectorClientConfigOverridePolicy=" + connectorClientConfigOverridePolicy
                + ", offsetFlushIntervalMs=" + offsetFlushIntervalMs
                + ", scheduledRebalanceMaxDelayMs=" + scheduledRebalanceMaxDelayMs
                + ", consumerFetchMaxBytes=" + consumerFetchMaxBytes
                + ", consumerMaxPartitionFetchBytes=" + consumerMaxPartitionFetchBytes
                + ", offsetFlushTimeoutMs=" + offsetFlushTimeoutMs + ", consumerAutoOffsetReset="
                + consumerAutoOffsetReset + ", producerMaxRequestSize=" + producerMaxRequestSize
                + ", producerBatchSize=" + producerBatchSize + ", sessionTimeoutMs="
                + sessionTimeoutMs + ", producerLingerMs=" + producerLingerMs
                + ", consumerIsolationLevel=" + consumerIsolationLevel + ", consumerMaxPollRecords="
                + consumerMaxPollRecords + "]";
    }

    /**
     * Builds a new {@link KafkaConnectConfigurationValues.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link KafkaConnectConfigurationValues.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .producerBufferMemory(getProducerBufferMemory())
                .consumerMaxPollIntervalMs(getConsumerMaxPollIntervalMs())
                .producerCompressionType(getProducerCompressionType())
                .connectorClientConfigOverridePolicy(getConnectorClientConfigOverridePolicy())
                .offsetFlushIntervalMs(getOffsetFlushIntervalMs())
                .scheduledRebalanceMaxDelayMs(getScheduledRebalanceMaxDelayMs())
                .consumerFetchMaxBytes(getConsumerFetchMaxBytes())
                .consumerMaxPartitionFetchBytes(getConsumerMaxPartitionFetchBytes())
                .offsetFlushTimeoutMs(getOffsetFlushTimeoutMs())
                .consumerAutoOffsetReset(getConsumerAutoOffsetReset())
                .producerMaxRequestSize(getProducerMaxRequestSize())
                .producerBatchSize(getProducerBatchSize())
                .sessionTimeoutMs(getSessionTimeoutMs())
                .producerLingerMs(getProducerLingerMs())
                .consumerIsolationLevel(getConsumerIsolationLevel())
                .consumerMaxPollRecords(getConsumerMaxPollRecords());
        return builder;
    }

    /**
     * Class to build instances of {@link KafkaConnectConfigurationValues}.
     */
    public static class Builder {
        private Integer producerBufferMemory;
        private Integer consumerMaxPollIntervalMs;
        private TheDefaultCompressionTypeForProducersEnum producerCompressionType;
        private ClientConfigOverridePolicyEnum connectorClientConfigOverridePolicy;
        private Integer offsetFlushIntervalMs;
        private Integer scheduledRebalanceMaxDelayMs;
        private Integer consumerFetchMaxBytes;
        private Integer consumerMaxPartitionFetchBytes;
        private Integer offsetFlushTimeoutMs;
        private ConsumerAutoOffsetResetEnum consumerAutoOffsetReset;
        private Integer producerMaxRequestSize;
        private Integer producerBatchSize;
        private Integer sessionTimeoutMs;
        private Integer producerLingerMs;
        private ConsumerIsolationLevelEnum consumerIsolationLevel;
        private Integer consumerMaxPollRecords;



        /**
         * Setter for producerBufferMemory.
         * @param  producerBufferMemory  Integer value for producerBufferMemory.
         * @return Builder
         */
        public Builder producerBufferMemory(Integer producerBufferMemory) {
            this.producerBufferMemory = producerBufferMemory;
            return this;
        }

        /**
         * Setter for consumerMaxPollIntervalMs.
         * @param  consumerMaxPollIntervalMs  Integer value for consumerMaxPollIntervalMs.
         * @return Builder
         */
        public Builder consumerMaxPollIntervalMs(Integer consumerMaxPollIntervalMs) {
            this.consumerMaxPollIntervalMs = consumerMaxPollIntervalMs;
            return this;
        }

        /**
         * Setter for producerCompressionType.
         * @param  producerCompressionType  TheDefaultCompressionTypeForProducersEnum value for
         *         producerCompressionType.
         * @return Builder
         */
        public Builder producerCompressionType(
                TheDefaultCompressionTypeForProducersEnum producerCompressionType) {
            this.producerCompressionType = producerCompressionType;
            return this;
        }

        /**
         * Setter for connectorClientConfigOverridePolicy.
         * @param  connectorClientConfigOverridePolicy  ClientConfigOverridePolicyEnum value for
         *         connectorClientConfigOverridePolicy.
         * @return Builder
         */
        public Builder connectorClientConfigOverridePolicy(
                ClientConfigOverridePolicyEnum connectorClientConfigOverridePolicy) {
            this.connectorClientConfigOverridePolicy = connectorClientConfigOverridePolicy;
            return this;
        }

        /**
         * Setter for offsetFlushIntervalMs.
         * @param  offsetFlushIntervalMs  Integer value for offsetFlushIntervalMs.
         * @return Builder
         */
        public Builder offsetFlushIntervalMs(Integer offsetFlushIntervalMs) {
            this.offsetFlushIntervalMs = offsetFlushIntervalMs;
            return this;
        }

        /**
         * Setter for scheduledRebalanceMaxDelayMs.
         * @param  scheduledRebalanceMaxDelayMs  Integer value for scheduledRebalanceMaxDelayMs.
         * @return Builder
         */
        public Builder scheduledRebalanceMaxDelayMs(Integer scheduledRebalanceMaxDelayMs) {
            this.scheduledRebalanceMaxDelayMs = scheduledRebalanceMaxDelayMs;
            return this;
        }

        /**
         * Setter for consumerFetchMaxBytes.
         * @param  consumerFetchMaxBytes  Integer value for consumerFetchMaxBytes.
         * @return Builder
         */
        public Builder consumerFetchMaxBytes(Integer consumerFetchMaxBytes) {
            this.consumerFetchMaxBytes = consumerFetchMaxBytes;
            return this;
        }

        /**
         * Setter for consumerMaxPartitionFetchBytes.
         * @param  consumerMaxPartitionFetchBytes  Integer value for consumerMaxPartitionFetchBytes.
         * @return Builder
         */
        public Builder consumerMaxPartitionFetchBytes(Integer consumerMaxPartitionFetchBytes) {
            this.consumerMaxPartitionFetchBytes = consumerMaxPartitionFetchBytes;
            return this;
        }

        /**
         * Setter for offsetFlushTimeoutMs.
         * @param  offsetFlushTimeoutMs  Integer value for offsetFlushTimeoutMs.
         * @return Builder
         */
        public Builder offsetFlushTimeoutMs(Integer offsetFlushTimeoutMs) {
            this.offsetFlushTimeoutMs = offsetFlushTimeoutMs;
            return this;
        }

        /**
         * Setter for consumerAutoOffsetReset.
         * @param  consumerAutoOffsetReset  ConsumerAutoOffsetResetEnum value for
         *         consumerAutoOffsetReset.
         * @return Builder
         */
        public Builder consumerAutoOffsetReset(
                ConsumerAutoOffsetResetEnum consumerAutoOffsetReset) {
            this.consumerAutoOffsetReset = consumerAutoOffsetReset;
            return this;
        }

        /**
         * Setter for producerMaxRequestSize.
         * @param  producerMaxRequestSize  Integer value for producerMaxRequestSize.
         * @return Builder
         */
        public Builder producerMaxRequestSize(Integer producerMaxRequestSize) {
            this.producerMaxRequestSize = producerMaxRequestSize;
            return this;
        }

        /**
         * Setter for producerBatchSize.
         * @param  producerBatchSize  Integer value for producerBatchSize.
         * @return Builder
         */
        public Builder producerBatchSize(Integer producerBatchSize) {
            this.producerBatchSize = producerBatchSize;
            return this;
        }

        /**
         * Setter for sessionTimeoutMs.
         * @param  sessionTimeoutMs  Integer value for sessionTimeoutMs.
         * @return Builder
         */
        public Builder sessionTimeoutMs(Integer sessionTimeoutMs) {
            this.sessionTimeoutMs = sessionTimeoutMs;
            return this;
        }

        /**
         * Setter for producerLingerMs.
         * @param  producerLingerMs  Integer value for producerLingerMs.
         * @return Builder
         */
        public Builder producerLingerMs(Integer producerLingerMs) {
            this.producerLingerMs = producerLingerMs;
            return this;
        }

        /**
         * Setter for consumerIsolationLevel.
         * @param  consumerIsolationLevel  ConsumerIsolationLevelEnum value for
         *         consumerIsolationLevel.
         * @return Builder
         */
        public Builder consumerIsolationLevel(ConsumerIsolationLevelEnum consumerIsolationLevel) {
            this.consumerIsolationLevel = consumerIsolationLevel;
            return this;
        }

        /**
         * Setter for consumerMaxPollRecords.
         * @param  consumerMaxPollRecords  Integer value for consumerMaxPollRecords.
         * @return Builder
         */
        public Builder consumerMaxPollRecords(Integer consumerMaxPollRecords) {
            this.consumerMaxPollRecords = consumerMaxPollRecords;
            return this;
        }

        /**
         * Builds a new {@link KafkaConnectConfigurationValues} object using the set fields.
         * @return {@link KafkaConnectConfigurationValues}
         */
        public KafkaConnectConfigurationValues build() {
            return new KafkaConnectConfigurationValues(producerBufferMemory,
                    consumerMaxPollIntervalMs, producerCompressionType,
                    connectorClientConfigOverridePolicy, offsetFlushIntervalMs,
                    scheduledRebalanceMaxDelayMs, consumerFetchMaxBytes,
                    consumerMaxPartitionFetchBytes, offsetFlushTimeoutMs, consumerAutoOffsetReset,
                    producerMaxRequestSize, producerBatchSize, sessionTimeoutMs, producerLingerMs,
                    consumerIsolationLevel, consumerMaxPollRecords);
        }
    }
}
