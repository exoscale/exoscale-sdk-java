/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * JsonSchemaRedis
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class JsonSchemaRedis {
  @JsonProperty("ssl")
  private Boolean ssl = true;

  @JsonProperty("lfu_log_factor")
  private Integer lfuLogFactor = 10;

  /**
   * Gets or Sets maxmemoryPolicy
   */
  public enum MaxmemoryPolicyEnum {
    NOEVICTION("noeviction"),
    ALLKEYS_LRU("allkeys-lru"),
    VOLATILE_LRU("volatile-lru"),
    ALLKEYS_RANDOM("allkeys-random"),
    VOLATILE_RANDOM("volatile-random"),
    VOLATILE_TTL("volatile-ttl"),
    VOLATILE_LFU("volatile-lfu"),
    ALLKEYS_LFU("allkeys-lfu");

    private String value;

    MaxmemoryPolicyEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static MaxmemoryPolicyEnum fromValue(String input) {
      for (MaxmemoryPolicyEnum b : MaxmemoryPolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("maxmemory_policy")
  private MaxmemoryPolicyEnum maxmemoryPolicy = MaxmemoryPolicyEnum.NOEVICTION;

  @JsonProperty("io_threads")
  private Integer ioThreads = null;

  @JsonProperty("lfu_decay_time")
  private Integer lfuDecayTime = 1;

  @JsonProperty("pubsub_client_output_buffer_limit")
  private Integer pubsubClientOutputBufferLimit = null;

  @JsonProperty("notify_keyspace_events")
  private String notifyKeyspaceEvents = "";

  /**
   * When persistence is &#x27;rdb&#x27;, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#x27;off&#x27;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#x27;t be forked.
   */
  public enum PersistenceEnum {
    OFF("off"),
    RDB("rdb");

    private String value;

    PersistenceEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PersistenceEnum fromValue(String input) {
      for (PersistenceEnum b : PersistenceEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("persistence")
  private PersistenceEnum persistence = null;

  @JsonProperty("timeout")
  private Integer timeout = 300;

  /**
   * Determines default pub/sub channels&#x27; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#x27;t affect Redis configuration acl-pubsub-default.
   */
  public enum AclChannelsDefaultEnum {
    ALLCHANNELS("allchannels"),
    RESETCHANNELS("resetchannels");

    private String value;

    AclChannelsDefaultEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AclChannelsDefaultEnum fromValue(String input) {
      for (AclChannelsDefaultEnum b : AclChannelsDefaultEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("acl_channels_default")
  private AclChannelsDefaultEnum aclChannelsDefault = null;

  @JsonProperty("number_of_databases")
  private Integer numberOfDatabases = null;

  public JsonSchemaRedis ssl(Boolean ssl) {
    this.ssl = ssl;
    return this;
  }

   /**
   * Get ssl
   * @return ssl
  **/
  @Schema(description = "")
  public Boolean isSsl() {
    return ssl;
  }

  public void setSsl(Boolean ssl) {
    this.ssl = ssl;
  }

  public JsonSchemaRedis lfuLogFactor(Integer lfuLogFactor) {
    this.lfuLogFactor = lfuLogFactor;
    return this;
  }

   /**
   * Get lfuLogFactor
   * minimum: 0
   * maximum: 100
   * @return lfuLogFactor
  **/
  @Schema(description = "")
  public Integer getLfuLogFactor() {
    return lfuLogFactor;
  }

  public void setLfuLogFactor(Integer lfuLogFactor) {
    this.lfuLogFactor = lfuLogFactor;
  }

  public JsonSchemaRedis maxmemoryPolicy(MaxmemoryPolicyEnum maxmemoryPolicy) {
    this.maxmemoryPolicy = maxmemoryPolicy;
    return this;
  }

   /**
   * Get maxmemoryPolicy
   * @return maxmemoryPolicy
  **/
  @Schema(description = "")
  public MaxmemoryPolicyEnum getMaxmemoryPolicy() {
    return maxmemoryPolicy;
  }

  public void setMaxmemoryPolicy(MaxmemoryPolicyEnum maxmemoryPolicy) {
    this.maxmemoryPolicy = maxmemoryPolicy;
  }

  public JsonSchemaRedis ioThreads(Integer ioThreads) {
    this.ioThreads = ioThreads;
    return this;
  }

   /**
   * Set Redis IO thread count. Changing this will cause a restart of the Redis service.
   * minimum: 1
   * maximum: 32
   * @return ioThreads
  **/
  @Schema(example = "1", description = "Set Redis IO thread count. Changing this will cause a restart of the Redis service.")
  public Integer getIoThreads() {
    return ioThreads;
  }

  public void setIoThreads(Integer ioThreads) {
    this.ioThreads = ioThreads;
  }

  public JsonSchemaRedis lfuDecayTime(Integer lfuDecayTime) {
    this.lfuDecayTime = lfuDecayTime;
    return this;
  }

   /**
   * Get lfuDecayTime
   * minimum: 1
   * maximum: 120
   * @return lfuDecayTime
  **/
  @Schema(description = "")
  public Integer getLfuDecayTime() {
    return lfuDecayTime;
  }

  public void setLfuDecayTime(Integer lfuDecayTime) {
    this.lfuDecayTime = lfuDecayTime;
  }

  public JsonSchemaRedis pubsubClientOutputBufferLimit(Integer pubsubClientOutputBufferLimit) {
    this.pubsubClientOutputBufferLimit = pubsubClientOutputBufferLimit;
    return this;
  }

   /**
   * Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
   * minimum: 32
   * maximum: 512
   * @return pubsubClientOutputBufferLimit
  **/
  @Schema(example = "64", description = "Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.")
  public Integer getPubsubClientOutputBufferLimit() {
    return pubsubClientOutputBufferLimit;
  }

  public void setPubsubClientOutputBufferLimit(Integer pubsubClientOutputBufferLimit) {
    this.pubsubClientOutputBufferLimit = pubsubClientOutputBufferLimit;
  }

  public JsonSchemaRedis notifyKeyspaceEvents(String notifyKeyspaceEvents) {
    this.notifyKeyspaceEvents = notifyKeyspaceEvents;
    return this;
  }

   /**
   * Get notifyKeyspaceEvents
   * @return notifyKeyspaceEvents
  **/
  @Schema(description = "")
  public String getNotifyKeyspaceEvents() {
    return notifyKeyspaceEvents;
  }

  public void setNotifyKeyspaceEvents(String notifyKeyspaceEvents) {
    this.notifyKeyspaceEvents = notifyKeyspaceEvents;
  }

  public JsonSchemaRedis persistence(PersistenceEnum persistence) {
    this.persistence = persistence;
    return this;
  }

   /**
   * When persistence is &#x27;rdb&#x27;, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#x27;off&#x27;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#x27;t be forked.
   * @return persistence
  **/
  @Schema(description = "When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.")
  public PersistenceEnum getPersistence() {
    return persistence;
  }

  public void setPersistence(PersistenceEnum persistence) {
    this.persistence = persistence;
  }

  public JsonSchemaRedis timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Get timeout
   * minimum: 0
   * maximum: 31536000
   * @return timeout
  **/
  @Schema(description = "")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }

  public JsonSchemaRedis aclChannelsDefault(AclChannelsDefaultEnum aclChannelsDefault) {
    this.aclChannelsDefault = aclChannelsDefault;
    return this;
  }

   /**
   * Determines default pub/sub channels&#x27; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#x27;t affect Redis configuration acl-pubsub-default.
   * @return aclChannelsDefault
  **/
  @Schema(description = "Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.")
  public AclChannelsDefaultEnum getAclChannelsDefault() {
    return aclChannelsDefault;
  }

  public void setAclChannelsDefault(AclChannelsDefaultEnum aclChannelsDefault) {
    this.aclChannelsDefault = aclChannelsDefault;
  }

  public JsonSchemaRedis numberOfDatabases(Integer numberOfDatabases) {
    this.numberOfDatabases = numberOfDatabases;
    return this;
  }

   /**
   * Set number of Redis databases. Changing this will cause a restart of the Redis service.
   * minimum: 1
   * maximum: 128
   * @return numberOfDatabases
  **/
  @Schema(example = "16", description = "Set number of Redis databases. Changing this will cause a restart of the Redis service.")
  public Integer getNumberOfDatabases() {
    return numberOfDatabases;
  }

  public void setNumberOfDatabases(Integer numberOfDatabases) {
    this.numberOfDatabases = numberOfDatabases;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchemaRedis jsonSchemaRedis = (JsonSchemaRedis) o;
    return Objects.equals(this.ssl, jsonSchemaRedis.ssl) &&
        Objects.equals(this.lfuLogFactor, jsonSchemaRedis.lfuLogFactor) &&
        Objects.equals(this.maxmemoryPolicy, jsonSchemaRedis.maxmemoryPolicy) &&
        Objects.equals(this.ioThreads, jsonSchemaRedis.ioThreads) &&
        Objects.equals(this.lfuDecayTime, jsonSchemaRedis.lfuDecayTime) &&
        Objects.equals(this.pubsubClientOutputBufferLimit, jsonSchemaRedis.pubsubClientOutputBufferLimit) &&
        Objects.equals(this.notifyKeyspaceEvents, jsonSchemaRedis.notifyKeyspaceEvents) &&
        Objects.equals(this.persistence, jsonSchemaRedis.persistence) &&
        Objects.equals(this.timeout, jsonSchemaRedis.timeout) &&
        Objects.equals(this.aclChannelsDefault, jsonSchemaRedis.aclChannelsDefault) &&
        Objects.equals(this.numberOfDatabases, jsonSchemaRedis.numberOfDatabases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ssl, lfuLogFactor, maxmemoryPolicy, ioThreads, lfuDecayTime, pubsubClientOutputBufferLimit, notifyKeyspaceEvents, persistence, timeout, aclChannelsDefault, numberOfDatabases);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchemaRedis {\n");
    
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    lfuLogFactor: ").append(toIndentedString(lfuLogFactor)).append("\n");
    sb.append("    maxmemoryPolicy: ").append(toIndentedString(maxmemoryPolicy)).append("\n");
    sb.append("    ioThreads: ").append(toIndentedString(ioThreads)).append("\n");
    sb.append("    lfuDecayTime: ").append(toIndentedString(lfuDecayTime)).append("\n");
    sb.append("    pubsubClientOutputBufferLimit: ").append(toIndentedString(pubsubClientOutputBufferLimit)).append("\n");
    sb.append("    notifyKeyspaceEvents: ").append(toIndentedString(notifyKeyspaceEvents)).append("\n");
    sb.append("    persistence: ").append(toIndentedString(persistence)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    aclChannelsDefault: ").append(toIndentedString(aclChannelsDefault)).append("\n");
    sb.append("    numberOfDatabases: ").append(toIndentedString(numberOfDatabases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
