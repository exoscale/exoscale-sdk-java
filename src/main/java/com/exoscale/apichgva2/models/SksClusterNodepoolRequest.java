/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for SksClusterNodepoolRequest type.
 */
public class SksClusterNodepoolRequest {
    private List<AntiAffinityGroup> antiAffinityGroups;
    private String description;
    private Map<String, String> labels;
    private Map<String, SksNodepoolTaint> taints;
    private List<SecurityGroup> securityGroups;
    private String name;
    private InstanceType instanceType;
    private List<PrivateNetwork> privateNetworks;
    private String instancePrefix;
    private DeployTarget deployTarget;
    private Long diskSize;

    /**
     * Default constructor.
     */
    public SksClusterNodepoolRequest() {
    }

    /**
     * Initialization constructor.
     * @param  antiAffinityGroups  List of AntiAffinityGroup value for antiAffinityGroups.
     * @param  description  String value for description.
     * @param  labels  Map of String, value for labels.
     * @param  taints  Map of String, value for taints.
     * @param  securityGroups  List of SecurityGroup value for securityGroups.
     * @param  name  String value for name.
     * @param  instanceType  InstanceType value for instanceType.
     * @param  privateNetworks  List of PrivateNetwork value for privateNetworks.
     * @param  instancePrefix  String value for instancePrefix.
     * @param  deployTarget  DeployTarget value for deployTarget.
     * @param  diskSize  Long value for diskSize.
     */
    public SksClusterNodepoolRequest(
            List<AntiAffinityGroup> antiAffinityGroups,
            String description,
            Map<String, String> labels,
            Map<String, SksNodepoolTaint> taints,
            List<SecurityGroup> securityGroups,
            String name,
            InstanceType instanceType,
            List<PrivateNetwork> privateNetworks,
            String instancePrefix,
            DeployTarget deployTarget,
            Long diskSize) {
        this.antiAffinityGroups = antiAffinityGroups;
        this.description = description;
        this.labels = labels;
        this.taints = taints;
        this.securityGroups = securityGroups;
        this.name = name;
        this.instanceType = instanceType;
        this.privateNetworks = privateNetworks;
        this.instancePrefix = instancePrefix;
        this.deployTarget = deployTarget;
        this.diskSize = diskSize;
    }

    /**
     * Getter for AntiAffinityGroups.
     * Nodepool Anti-affinity Groups
     * @return Returns the List of AntiAffinityGroup
     */
    @JsonGetter("anti-affinity-groups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<AntiAffinityGroup> getAntiAffinityGroups() {
        return antiAffinityGroups;
    }

    /**
     * Setter for AntiAffinityGroups.
     * Nodepool Anti-affinity Groups
     * @param antiAffinityGroups Value for List of AntiAffinityGroup
     */
    @JsonSetter("anti-affinity-groups")
    public void setAntiAffinityGroups(List<AntiAffinityGroup> antiAffinityGroups) {
        this.antiAffinityGroups = antiAffinityGroups;
    }

    /**
     * Getter for Description.
     * Nodepool description
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * Nodepool description
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Labels.
     * @return Returns the Map of String, String
     */
    @JsonGetter("labels")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getLabels() {
        return labels;
    }

    /**
     * Setter for Labels.
     * @param labels Value for Map of String, String
     */
    @JsonSetter("labels")
    public void setLabels(Map<String, String> labels) {
        this.labels = labels;
    }

    /**
     * Getter for Taints.
     * @return Returns the Map of String, SksNodepoolTaint
     */
    @JsonGetter("taints")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, SksNodepoolTaint> getTaints() {
        return taints;
    }

    /**
     * Setter for Taints.
     * @param taints Value for Map of String, SksNodepoolTaint
     */
    @JsonSetter("taints")
    public void setTaints(Map<String, SksNodepoolTaint> taints) {
        this.taints = taints;
    }

    /**
     * Getter for SecurityGroups.
     * Nodepool Security Groups
     * @return Returns the List of SecurityGroup
     */
    @JsonGetter("security-groups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<SecurityGroup> getSecurityGroups() {
        return securityGroups;
    }

    /**
     * Setter for SecurityGroups.
     * Nodepool Security Groups
     * @param securityGroups Value for List of SecurityGroup
     */
    @JsonSetter("security-groups")
    public void setSecurityGroups(List<SecurityGroup> securityGroups) {
        this.securityGroups = securityGroups;
    }

    /**
     * Getter for Name.
     * Nodepool name
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Nodepool name
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for InstanceType.
     * Compute instance type
     * @return Returns the InstanceType
     */
    @JsonGetter("instance-type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InstanceType getInstanceType() {
        return instanceType;
    }

    /**
     * Setter for InstanceType.
     * Compute instance type
     * @param instanceType Value for InstanceType
     */
    @JsonSetter("instance-type")
    public void setInstanceType(InstanceType instanceType) {
        this.instanceType = instanceType;
    }

    /**
     * Getter for PrivateNetworks.
     * Nodepool Private Networks
     * @return Returns the List of PrivateNetwork
     */
    @JsonGetter("private-networks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<PrivateNetwork> getPrivateNetworks() {
        return privateNetworks;
    }

    /**
     * Setter for PrivateNetworks.
     * Nodepool Private Networks
     * @param privateNetworks Value for List of PrivateNetwork
     */
    @JsonSetter("private-networks")
    public void setPrivateNetworks(List<PrivateNetwork> privateNetworks) {
        this.privateNetworks = privateNetworks;
    }

    /**
     * Getter for InstancePrefix.
     * Prefix to apply to managed instances names (default: pool)
     * @return Returns the String
     */
    @JsonGetter("instance-prefix")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInstancePrefix() {
        return instancePrefix;
    }

    /**
     * Setter for InstancePrefix.
     * Prefix to apply to managed instances names (default: pool)
     * @param instancePrefix Value for String
     */
    @JsonSetter("instance-prefix")
    public void setInstancePrefix(String instancePrefix) {
        this.instancePrefix = instancePrefix;
    }

    /**
     * Getter for DeployTarget.
     * Deploy target
     * @return Returns the DeployTarget
     */
    @JsonGetter("deploy-target")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DeployTarget getDeployTarget() {
        return deployTarget;
    }

    /**
     * Setter for DeployTarget.
     * Deploy target
     * @param deployTarget Value for DeployTarget
     */
    @JsonSetter("deploy-target")
    public void setDeployTarget(DeployTarget deployTarget) {
        this.deployTarget = deployTarget;
    }

    /**
     * Getter for DiskSize.
     * Nodepool instances disk size in GB
     * @return Returns the Long
     */
    @JsonGetter("disk-size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getDiskSize() {
        return diskSize;
    }

    /**
     * Setter for DiskSize.
     * Nodepool instances disk size in GB
     * @param diskSize Value for Long
     */
    @JsonSetter("disk-size")
    public void setDiskSize(Long diskSize) {
        this.diskSize = diskSize;
    }

    /**
     * Converts this SksClusterNodepoolRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SksClusterNodepoolRequest [" + "antiAffinityGroups=" + antiAffinityGroups
                + ", description=" + description + ", labels=" + labels + ", taints=" + taints
                + ", securityGroups=" + securityGroups + ", name=" + name + ", instanceType="
                + instanceType + ", privateNetworks=" + privateNetworks + ", instancePrefix="
                + instancePrefix + ", deployTarget=" + deployTarget + ", diskSize=" + diskSize
                + "]";
    }

    /**
     * Builds a new {@link SksClusterNodepoolRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SksClusterNodepoolRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .antiAffinityGroups(getAntiAffinityGroups())
                .description(getDescription())
                .labels(getLabels())
                .taints(getTaints())
                .securityGroups(getSecurityGroups())
                .name(getName())
                .instanceType(getInstanceType())
                .privateNetworks(getPrivateNetworks())
                .instancePrefix(getInstancePrefix())
                .deployTarget(getDeployTarget())
                .diskSize(getDiskSize());
        return builder;
    }

    /**
     * Class to build instances of {@link SksClusterNodepoolRequest}.
     */
    public static class Builder {
        private List<AntiAffinityGroup> antiAffinityGroups;
        private String description;
        private Map<String, String> labels;
        private Map<String, SksNodepoolTaint> taints;
        private List<SecurityGroup> securityGroups;
        private String name;
        private InstanceType instanceType;
        private List<PrivateNetwork> privateNetworks;
        private String instancePrefix;
        private DeployTarget deployTarget;
        private Long diskSize;



        /**
         * Setter for antiAffinityGroups.
         * @param  antiAffinityGroups  List of AntiAffinityGroup value for antiAffinityGroups.
         * @return Builder
         */
        public Builder antiAffinityGroups(List<AntiAffinityGroup> antiAffinityGroups) {
            this.antiAffinityGroups = antiAffinityGroups;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for labels.
         * @param  labels  Map of String, value for labels.
         * @return Builder
         */
        public Builder labels(Map<String, String> labels) {
            this.labels = labels;
            return this;
        }

        /**
         * Setter for taints.
         * @param  taints  Map of String, value for taints.
         * @return Builder
         */
        public Builder taints(Map<String, SksNodepoolTaint> taints) {
            this.taints = taints;
            return this;
        }

        /**
         * Setter for securityGroups.
         * @param  securityGroups  List of SecurityGroup value for securityGroups.
         * @return Builder
         */
        public Builder securityGroups(List<SecurityGroup> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for instanceType.
         * @param  instanceType  InstanceType value for instanceType.
         * @return Builder
         */
        public Builder instanceType(InstanceType instanceType) {
            this.instanceType = instanceType;
            return this;
        }

        /**
         * Setter for privateNetworks.
         * @param  privateNetworks  List of PrivateNetwork value for privateNetworks.
         * @return Builder
         */
        public Builder privateNetworks(List<PrivateNetwork> privateNetworks) {
            this.privateNetworks = privateNetworks;
            return this;
        }

        /**
         * Setter for instancePrefix.
         * @param  instancePrefix  String value for instancePrefix.
         * @return Builder
         */
        public Builder instancePrefix(String instancePrefix) {
            this.instancePrefix = instancePrefix;
            return this;
        }

        /**
         * Setter for deployTarget.
         * @param  deployTarget  DeployTarget value for deployTarget.
         * @return Builder
         */
        public Builder deployTarget(DeployTarget deployTarget) {
            this.deployTarget = deployTarget;
            return this;
        }

        /**
         * Setter for diskSize.
         * @param  diskSize  Long value for diskSize.
         * @return Builder
         */
        public Builder diskSize(Long diskSize) {
            this.diskSize = diskSize;
            return this;
        }

        /**
         * Builds a new {@link SksClusterNodepoolRequest} object using the set fields.
         * @return {@link SksClusterNodepoolRequest}
         */
        public SksClusterNodepoolRequest build() {
            return new SksClusterNodepoolRequest(antiAffinityGroups, description, labels, taints,
                    securityGroups, name, instanceType, privateNetworks, instancePrefix,
                    deployTarget, diskSize);
        }
    }
}
