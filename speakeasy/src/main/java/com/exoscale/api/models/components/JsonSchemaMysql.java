/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class JsonSchemaMysql {

    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_write_timeout")
    private Optional<? extends Long> netWriteTimeout;

    /**
     * The storage engine for in-memory internal temporary tables.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internal_tmp_mem_storage_engine")
    private Optional<? extends InternalTmpMemStorageEngine> internalTmpMemStorageEngine;

    /**
     * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sql_mode")
    private Optional<? extends String> sqlMode;

    /**
     * The time, in seconds, before cached statistics expire
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("information_schema_stats_expiry")
    private Optional<? extends Long> informationSchemaStatsExpiry;

    /**
     * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort_buffer_size")
    private Optional<? extends Long> sortBufferSize;

    /**
     * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_thread_concurrency")
    private Optional<? extends Long> innodbThreadConcurrency;

    /**
     * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_write_io_threads")
    private Optional<? extends Long> innodbWriteIoThreads;

    /**
     * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_ft_min_token_size")
    private Optional<? extends Long> innodbFtMinTokenSize;

    /**
     * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_change_buffer_max_size")
    private Optional<? extends Long> innodbChangeBufferMaxSize;

    /**
     * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed,  1 - flush contiguous dirty pages in the same extent,  2 - flush dirty pages in the same extent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_flush_neighbors")
    private Optional<? extends Long> innodbFlushNeighbors;

    /**
     * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tmp_table_size")
    private Optional<? extends Long> tmpTableSize;

    /**
     * Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slow_query_log")
    private Optional<? extends Boolean> slowQueryLog;

    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connect_timeout")
    private Optional<? extends Long> connectTimeout;

    /**
     * The number of seconds to wait for more data from a connection before aborting the read.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_read_timeout")
    private Optional<? extends Long> netReadTimeout;

    /**
     * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_lock_wait_timeout")
    private Optional<? extends Long> innodbLockWaitTimeout;

    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wait_timeout")
    private Optional<? extends Long> waitTimeout;

    /**
     * When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_rollback_on_timeout")
    private Optional<? extends Boolean> innodbRollbackOnTimeout;

    /**
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_concat_max_len")
    private Optional<? extends Long> groupConcatMaxLen;

    /**
     * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_buffer_length")
    private Optional<? extends Long> netBufferLength;

    /**
     * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_print_all_deadlocks")
    private Optional<? extends Boolean> innodbPrintAllDeadlocks;

    /**
     * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_online_alter_log_max_size")
    private Optional<? extends Long> innodbOnlineAlterLogMaxSize;

    /**
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interactive_timeout")
    private Optional<? extends Long> interactiveTimeout;

    /**
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_log_buffer_size")
    private Optional<? extends Long> innodbLogBufferSize;

    /**
     * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_allowed_packet")
    private Optional<? extends Long> maxAllowedPacket;

    /**
     * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_heap_table_size")
    private Optional<? extends Long> maxHeapTableSize;

    /**
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_ft_server_stopword_table")
    private JsonNullable<? extends String> innodbFtServerStopwordTable;

    /**
     * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innodb_read_io_threads")
    private Optional<? extends Long> innodbReadIoThreads;

    /**
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sql_require_primary_key")
    private Optional<? extends Boolean> sqlRequirePrimaryKey;

    /**
     * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_time_zone")
    private Optional<? extends String> defaultTimeZone;

    /**
     * The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("long_query_time")
    private Optional<? extends Double> longQueryTime;

    public JsonSchemaMysql(
            @JsonProperty("net_write_timeout") Optional<? extends Long> netWriteTimeout,
            @JsonProperty("internal_tmp_mem_storage_engine") Optional<? extends InternalTmpMemStorageEngine> internalTmpMemStorageEngine,
            @JsonProperty("sql_mode") Optional<? extends String> sqlMode,
            @JsonProperty("information_schema_stats_expiry") Optional<? extends Long> informationSchemaStatsExpiry,
            @JsonProperty("sort_buffer_size") Optional<? extends Long> sortBufferSize,
            @JsonProperty("innodb_thread_concurrency") Optional<? extends Long> innodbThreadConcurrency,
            @JsonProperty("innodb_write_io_threads") Optional<? extends Long> innodbWriteIoThreads,
            @JsonProperty("innodb_ft_min_token_size") Optional<? extends Long> innodbFtMinTokenSize,
            @JsonProperty("innodb_change_buffer_max_size") Optional<? extends Long> innodbChangeBufferMaxSize,
            @JsonProperty("innodb_flush_neighbors") Optional<? extends Long> innodbFlushNeighbors,
            @JsonProperty("tmp_table_size") Optional<? extends Long> tmpTableSize,
            @JsonProperty("slow_query_log") Optional<? extends Boolean> slowQueryLog,
            @JsonProperty("connect_timeout") Optional<? extends Long> connectTimeout,
            @JsonProperty("net_read_timeout") Optional<? extends Long> netReadTimeout,
            @JsonProperty("innodb_lock_wait_timeout") Optional<? extends Long> innodbLockWaitTimeout,
            @JsonProperty("wait_timeout") Optional<? extends Long> waitTimeout,
            @JsonProperty("innodb_rollback_on_timeout") Optional<? extends Boolean> innodbRollbackOnTimeout,
            @JsonProperty("group_concat_max_len") Optional<? extends Long> groupConcatMaxLen,
            @JsonProperty("net_buffer_length") Optional<? extends Long> netBufferLength,
            @JsonProperty("innodb_print_all_deadlocks") Optional<? extends Boolean> innodbPrintAllDeadlocks,
            @JsonProperty("innodb_online_alter_log_max_size") Optional<? extends Long> innodbOnlineAlterLogMaxSize,
            @JsonProperty("interactive_timeout") Optional<? extends Long> interactiveTimeout,
            @JsonProperty("innodb_log_buffer_size") Optional<? extends Long> innodbLogBufferSize,
            @JsonProperty("max_allowed_packet") Optional<? extends Long> maxAllowedPacket,
            @JsonProperty("max_heap_table_size") Optional<? extends Long> maxHeapTableSize,
            @JsonProperty("innodb_ft_server_stopword_table") JsonNullable<? extends String> innodbFtServerStopwordTable,
            @JsonProperty("innodb_read_io_threads") Optional<? extends Long> innodbReadIoThreads,
            @JsonProperty("sql_require_primary_key") Optional<? extends Boolean> sqlRequirePrimaryKey,
            @JsonProperty("default_time_zone") Optional<? extends String> defaultTimeZone,
            @JsonProperty("long_query_time") Optional<? extends Double> longQueryTime) {
        Utils.checkNotNull(netWriteTimeout, "netWriteTimeout");
        Utils.checkNotNull(internalTmpMemStorageEngine, "internalTmpMemStorageEngine");
        Utils.checkNotNull(sqlMode, "sqlMode");
        Utils.checkNotNull(informationSchemaStatsExpiry, "informationSchemaStatsExpiry");
        Utils.checkNotNull(sortBufferSize, "sortBufferSize");
        Utils.checkNotNull(innodbThreadConcurrency, "innodbThreadConcurrency");
        Utils.checkNotNull(innodbWriteIoThreads, "innodbWriteIoThreads");
        Utils.checkNotNull(innodbFtMinTokenSize, "innodbFtMinTokenSize");
        Utils.checkNotNull(innodbChangeBufferMaxSize, "innodbChangeBufferMaxSize");
        Utils.checkNotNull(innodbFlushNeighbors, "innodbFlushNeighbors");
        Utils.checkNotNull(tmpTableSize, "tmpTableSize");
        Utils.checkNotNull(slowQueryLog, "slowQueryLog");
        Utils.checkNotNull(connectTimeout, "connectTimeout");
        Utils.checkNotNull(netReadTimeout, "netReadTimeout");
        Utils.checkNotNull(innodbLockWaitTimeout, "innodbLockWaitTimeout");
        Utils.checkNotNull(waitTimeout, "waitTimeout");
        Utils.checkNotNull(innodbRollbackOnTimeout, "innodbRollbackOnTimeout");
        Utils.checkNotNull(groupConcatMaxLen, "groupConcatMaxLen");
        Utils.checkNotNull(netBufferLength, "netBufferLength");
        Utils.checkNotNull(innodbPrintAllDeadlocks, "innodbPrintAllDeadlocks");
        Utils.checkNotNull(innodbOnlineAlterLogMaxSize, "innodbOnlineAlterLogMaxSize");
        Utils.checkNotNull(interactiveTimeout, "interactiveTimeout");
        Utils.checkNotNull(innodbLogBufferSize, "innodbLogBufferSize");
        Utils.checkNotNull(maxAllowedPacket, "maxAllowedPacket");
        Utils.checkNotNull(maxHeapTableSize, "maxHeapTableSize");
        Utils.checkNotNull(innodbFtServerStopwordTable, "innodbFtServerStopwordTable");
        Utils.checkNotNull(innodbReadIoThreads, "innodbReadIoThreads");
        Utils.checkNotNull(sqlRequirePrimaryKey, "sqlRequirePrimaryKey");
        Utils.checkNotNull(defaultTimeZone, "defaultTimeZone");
        Utils.checkNotNull(longQueryTime, "longQueryTime");
        this.netWriteTimeout = netWriteTimeout;
        this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
        this.sqlMode = sqlMode;
        this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
        this.sortBufferSize = sortBufferSize;
        this.innodbThreadConcurrency = innodbThreadConcurrency;
        this.innodbWriteIoThreads = innodbWriteIoThreads;
        this.innodbFtMinTokenSize = innodbFtMinTokenSize;
        this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
        this.innodbFlushNeighbors = innodbFlushNeighbors;
        this.tmpTableSize = tmpTableSize;
        this.slowQueryLog = slowQueryLog;
        this.connectTimeout = connectTimeout;
        this.netReadTimeout = netReadTimeout;
        this.innodbLockWaitTimeout = innodbLockWaitTimeout;
        this.waitTimeout = waitTimeout;
        this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
        this.groupConcatMaxLen = groupConcatMaxLen;
        this.netBufferLength = netBufferLength;
        this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
        this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
        this.interactiveTimeout = interactiveTimeout;
        this.innodbLogBufferSize = innodbLogBufferSize;
        this.maxAllowedPacket = maxAllowedPacket;
        this.maxHeapTableSize = maxHeapTableSize;
        this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
        this.innodbReadIoThreads = innodbReadIoThreads;
        this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
        this.defaultTimeZone = defaultTimeZone;
        this.longQueryTime = longQueryTime;
    }

    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     */
    public Optional<? extends Long> netWriteTimeout() {
        return netWriteTimeout;
    }

    /**
     * The storage engine for in-memory internal temporary tables.
     */
    public Optional<? extends InternalTmpMemStorageEngine> internalTmpMemStorageEngine() {
        return internalTmpMemStorageEngine;
    }

    /**
     * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
     */
    public Optional<? extends String> sqlMode() {
        return sqlMode;
    }

    /**
     * The time, in seconds, before cached statistics expire
     */
    public Optional<? extends Long> informationSchemaStatsExpiry() {
        return informationSchemaStatsExpiry;
    }

    /**
     * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)
     */
    public Optional<? extends Long> sortBufferSize() {
        return sortBufferSize;
    }

    /**
     * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit)
     */
    public Optional<? extends Long> innodbThreadConcurrency() {
        return innodbThreadConcurrency;
    }

    /**
     * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    public Optional<? extends Long> innodbWriteIoThreads() {
        return innodbWriteIoThreads;
    }

    /**
     * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
     */
    public Optional<? extends Long> innodbFtMinTokenSize() {
        return innodbFtMinTokenSize;
    }

    /**
     * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25
     */
    public Optional<? extends Long> innodbChangeBufferMaxSize() {
        return innodbChangeBufferMaxSize;
    }

    /**
     * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed,  1 - flush contiguous dirty pages in the same extent,  2 - flush dirty pages in the same extent
     */
    public Optional<? extends Long> innodbFlushNeighbors() {
        return innodbFlushNeighbors;
    }

    /**
     * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M)
     */
    public Optional<? extends Long> tmpTableSize() {
        return tmpTableSize;
    }

    /**
     * Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off
     */
    public Optional<? extends Boolean> slowQueryLog() {
        return slowQueryLog;
    }

    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake
     */
    public Optional<? extends Long> connectTimeout() {
        return connectTimeout;
    }

    /**
     * The number of seconds to wait for more data from a connection before aborting the read.
     */
    public Optional<? extends Long> netReadTimeout() {
        return netReadTimeout;
    }

    /**
     * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
     */
    public Optional<? extends Long> innodbLockWaitTimeout() {
        return innodbLockWaitTimeout;
    }

    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     */
    public Optional<? extends Long> waitTimeout() {
        return waitTimeout;
    }

    /**
     * When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
     */
    public Optional<? extends Boolean> innodbRollbackOnTimeout() {
        return innodbRollbackOnTimeout;
    }

    /**
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     */
    public Optional<? extends Long> groupConcatMaxLen() {
        return groupConcatMaxLen;
    }

    /**
     * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
     */
    public Optional<? extends Long> netBufferLength() {
        return netBufferLength;
    }

    /**
     * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
     */
    public Optional<? extends Boolean> innodbPrintAllDeadlocks() {
        return innodbPrintAllDeadlocks;
    }

    /**
     * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
     */
    public Optional<? extends Long> innodbOnlineAlterLogMaxSize() {
        return innodbOnlineAlterLogMaxSize;
    }

    /**
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     */
    public Optional<? extends Long> interactiveTimeout() {
        return interactiveTimeout;
    }

    /**
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     */
    public Optional<? extends Long> innodbLogBufferSize() {
        return innodbLogBufferSize;
    }

    /**
     * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M)
     */
    public Optional<? extends Long> maxAllowedPacket() {
        return maxAllowedPacket;
    }

    /**
     * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
     */
    public Optional<? extends Long> maxHeapTableSize() {
        return maxHeapTableSize;
    }

    /**
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
     */
    public JsonNullable<? extends String> innodbFtServerStopwordTable() {
        return innodbFtServerStopwordTable;
    }

    /**
     * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    public Optional<? extends Long> innodbReadIoThreads() {
        return innodbReadIoThreads;
    }

    /**
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     */
    public Optional<? extends Boolean> sqlRequirePrimaryKey() {
        return sqlRequirePrimaryKey;
    }

    /**
     * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
     */
    public Optional<? extends String> defaultTimeZone() {
        return defaultTimeZone;
    }

    /**
     * The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s
     */
    public Optional<? extends Double> longQueryTime() {
        return longQueryTime;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     */
    public JsonSchemaMysql withNetWriteTimeout(long netWriteTimeout) {
        Utils.checkNotNull(netWriteTimeout, "netWriteTimeout");
        this.netWriteTimeout = Optional.ofNullable(netWriteTimeout);
        return this;
    }

    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     */
    public JsonSchemaMysql withNetWriteTimeout(Optional<? extends Long> netWriteTimeout) {
        Utils.checkNotNull(netWriteTimeout, "netWriteTimeout");
        this.netWriteTimeout = netWriteTimeout;
        return this;
    }

    /**
     * The storage engine for in-memory internal temporary tables.
     */
    public JsonSchemaMysql withInternalTmpMemStorageEngine(InternalTmpMemStorageEngine internalTmpMemStorageEngine) {
        Utils.checkNotNull(internalTmpMemStorageEngine, "internalTmpMemStorageEngine");
        this.internalTmpMemStorageEngine = Optional.ofNullable(internalTmpMemStorageEngine);
        return this;
    }

    /**
     * The storage engine for in-memory internal temporary tables.
     */
    public JsonSchemaMysql withInternalTmpMemStorageEngine(Optional<? extends InternalTmpMemStorageEngine> internalTmpMemStorageEngine) {
        Utils.checkNotNull(internalTmpMemStorageEngine, "internalTmpMemStorageEngine");
        this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
        return this;
    }

    /**
     * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
     */
    public JsonSchemaMysql withSqlMode(String sqlMode) {
        Utils.checkNotNull(sqlMode, "sqlMode");
        this.sqlMode = Optional.ofNullable(sqlMode);
        return this;
    }

    /**
     * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
     */
    public JsonSchemaMysql withSqlMode(Optional<? extends String> sqlMode) {
        Utils.checkNotNull(sqlMode, "sqlMode");
        this.sqlMode = sqlMode;
        return this;
    }

    /**
     * The time, in seconds, before cached statistics expire
     */
    public JsonSchemaMysql withInformationSchemaStatsExpiry(long informationSchemaStatsExpiry) {
        Utils.checkNotNull(informationSchemaStatsExpiry, "informationSchemaStatsExpiry");
        this.informationSchemaStatsExpiry = Optional.ofNullable(informationSchemaStatsExpiry);
        return this;
    }

    /**
     * The time, in seconds, before cached statistics expire
     */
    public JsonSchemaMysql withInformationSchemaStatsExpiry(Optional<? extends Long> informationSchemaStatsExpiry) {
        Utils.checkNotNull(informationSchemaStatsExpiry, "informationSchemaStatsExpiry");
        this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
        return this;
    }

    /**
     * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)
     */
    public JsonSchemaMysql withSortBufferSize(long sortBufferSize) {
        Utils.checkNotNull(sortBufferSize, "sortBufferSize");
        this.sortBufferSize = Optional.ofNullable(sortBufferSize);
        return this;
    }

    /**
     * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)
     */
    public JsonSchemaMysql withSortBufferSize(Optional<? extends Long> sortBufferSize) {
        Utils.checkNotNull(sortBufferSize, "sortBufferSize");
        this.sortBufferSize = sortBufferSize;
        return this;
    }

    /**
     * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit)
     */
    public JsonSchemaMysql withInnodbThreadConcurrency(long innodbThreadConcurrency) {
        Utils.checkNotNull(innodbThreadConcurrency, "innodbThreadConcurrency");
        this.innodbThreadConcurrency = Optional.ofNullable(innodbThreadConcurrency);
        return this;
    }

    /**
     * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit)
     */
    public JsonSchemaMysql withInnodbThreadConcurrency(Optional<? extends Long> innodbThreadConcurrency) {
        Utils.checkNotNull(innodbThreadConcurrency, "innodbThreadConcurrency");
        this.innodbThreadConcurrency = innodbThreadConcurrency;
        return this;
    }

    /**
     * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    public JsonSchemaMysql withInnodbWriteIoThreads(long innodbWriteIoThreads) {
        Utils.checkNotNull(innodbWriteIoThreads, "innodbWriteIoThreads");
        this.innodbWriteIoThreads = Optional.ofNullable(innodbWriteIoThreads);
        return this;
    }

    /**
     * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    public JsonSchemaMysql withInnodbWriteIoThreads(Optional<? extends Long> innodbWriteIoThreads) {
        Utils.checkNotNull(innodbWriteIoThreads, "innodbWriteIoThreads");
        this.innodbWriteIoThreads = innodbWriteIoThreads;
        return this;
    }

    /**
     * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
     */
    public JsonSchemaMysql withInnodbFtMinTokenSize(long innodbFtMinTokenSize) {
        Utils.checkNotNull(innodbFtMinTokenSize, "innodbFtMinTokenSize");
        this.innodbFtMinTokenSize = Optional.ofNullable(innodbFtMinTokenSize);
        return this;
    }

    /**
     * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
     */
    public JsonSchemaMysql withInnodbFtMinTokenSize(Optional<? extends Long> innodbFtMinTokenSize) {
        Utils.checkNotNull(innodbFtMinTokenSize, "innodbFtMinTokenSize");
        this.innodbFtMinTokenSize = innodbFtMinTokenSize;
        return this;
    }

    /**
     * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25
     */
    public JsonSchemaMysql withInnodbChangeBufferMaxSize(long innodbChangeBufferMaxSize) {
        Utils.checkNotNull(innodbChangeBufferMaxSize, "innodbChangeBufferMaxSize");
        this.innodbChangeBufferMaxSize = Optional.ofNullable(innodbChangeBufferMaxSize);
        return this;
    }

    /**
     * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25
     */
    public JsonSchemaMysql withInnodbChangeBufferMaxSize(Optional<? extends Long> innodbChangeBufferMaxSize) {
        Utils.checkNotNull(innodbChangeBufferMaxSize, "innodbChangeBufferMaxSize");
        this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
        return this;
    }

    /**
     * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed,  1 - flush contiguous dirty pages in the same extent,  2 - flush dirty pages in the same extent
     */
    public JsonSchemaMysql withInnodbFlushNeighbors(long innodbFlushNeighbors) {
        Utils.checkNotNull(innodbFlushNeighbors, "innodbFlushNeighbors");
        this.innodbFlushNeighbors = Optional.ofNullable(innodbFlushNeighbors);
        return this;
    }

    /**
     * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed,  1 - flush contiguous dirty pages in the same extent,  2 - flush dirty pages in the same extent
     */
    public JsonSchemaMysql withInnodbFlushNeighbors(Optional<? extends Long> innodbFlushNeighbors) {
        Utils.checkNotNull(innodbFlushNeighbors, "innodbFlushNeighbors");
        this.innodbFlushNeighbors = innodbFlushNeighbors;
        return this;
    }

    /**
     * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M)
     */
    public JsonSchemaMysql withTmpTableSize(long tmpTableSize) {
        Utils.checkNotNull(tmpTableSize, "tmpTableSize");
        this.tmpTableSize = Optional.ofNullable(tmpTableSize);
        return this;
    }

    /**
     * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M)
     */
    public JsonSchemaMysql withTmpTableSize(Optional<? extends Long> tmpTableSize) {
        Utils.checkNotNull(tmpTableSize, "tmpTableSize");
        this.tmpTableSize = tmpTableSize;
        return this;
    }

    /**
     * Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off
     */
    public JsonSchemaMysql withSlowQueryLog(boolean slowQueryLog) {
        Utils.checkNotNull(slowQueryLog, "slowQueryLog");
        this.slowQueryLog = Optional.ofNullable(slowQueryLog);
        return this;
    }

    /**
     * Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off
     */
    public JsonSchemaMysql withSlowQueryLog(Optional<? extends Boolean> slowQueryLog) {
        Utils.checkNotNull(slowQueryLog, "slowQueryLog");
        this.slowQueryLog = slowQueryLog;
        return this;
    }

    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake
     */
    public JsonSchemaMysql withConnectTimeout(long connectTimeout) {
        Utils.checkNotNull(connectTimeout, "connectTimeout");
        this.connectTimeout = Optional.ofNullable(connectTimeout);
        return this;
    }

    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake
     */
    public JsonSchemaMysql withConnectTimeout(Optional<? extends Long> connectTimeout) {
        Utils.checkNotNull(connectTimeout, "connectTimeout");
        this.connectTimeout = connectTimeout;
        return this;
    }

    /**
     * The number of seconds to wait for more data from a connection before aborting the read.
     */
    public JsonSchemaMysql withNetReadTimeout(long netReadTimeout) {
        Utils.checkNotNull(netReadTimeout, "netReadTimeout");
        this.netReadTimeout = Optional.ofNullable(netReadTimeout);
        return this;
    }

    /**
     * The number of seconds to wait for more data from a connection before aborting the read.
     */
    public JsonSchemaMysql withNetReadTimeout(Optional<? extends Long> netReadTimeout) {
        Utils.checkNotNull(netReadTimeout, "netReadTimeout");
        this.netReadTimeout = netReadTimeout;
        return this;
    }

    /**
     * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
     */
    public JsonSchemaMysql withInnodbLockWaitTimeout(long innodbLockWaitTimeout) {
        Utils.checkNotNull(innodbLockWaitTimeout, "innodbLockWaitTimeout");
        this.innodbLockWaitTimeout = Optional.ofNullable(innodbLockWaitTimeout);
        return this;
    }

    /**
     * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
     */
    public JsonSchemaMysql withInnodbLockWaitTimeout(Optional<? extends Long> innodbLockWaitTimeout) {
        Utils.checkNotNull(innodbLockWaitTimeout, "innodbLockWaitTimeout");
        this.innodbLockWaitTimeout = innodbLockWaitTimeout;
        return this;
    }

    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     */
    public JsonSchemaMysql withWaitTimeout(long waitTimeout) {
        Utils.checkNotNull(waitTimeout, "waitTimeout");
        this.waitTimeout = Optional.ofNullable(waitTimeout);
        return this;
    }

    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     */
    public JsonSchemaMysql withWaitTimeout(Optional<? extends Long> waitTimeout) {
        Utils.checkNotNull(waitTimeout, "waitTimeout");
        this.waitTimeout = waitTimeout;
        return this;
    }

    /**
     * When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
     */
    public JsonSchemaMysql withInnodbRollbackOnTimeout(boolean innodbRollbackOnTimeout) {
        Utils.checkNotNull(innodbRollbackOnTimeout, "innodbRollbackOnTimeout");
        this.innodbRollbackOnTimeout = Optional.ofNullable(innodbRollbackOnTimeout);
        return this;
    }

    /**
     * When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
     */
    public JsonSchemaMysql withInnodbRollbackOnTimeout(Optional<? extends Boolean> innodbRollbackOnTimeout) {
        Utils.checkNotNull(innodbRollbackOnTimeout, "innodbRollbackOnTimeout");
        this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
        return this;
    }

    /**
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     */
    public JsonSchemaMysql withGroupConcatMaxLen(long groupConcatMaxLen) {
        Utils.checkNotNull(groupConcatMaxLen, "groupConcatMaxLen");
        this.groupConcatMaxLen = Optional.ofNullable(groupConcatMaxLen);
        return this;
    }

    /**
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     */
    public JsonSchemaMysql withGroupConcatMaxLen(Optional<? extends Long> groupConcatMaxLen) {
        Utils.checkNotNull(groupConcatMaxLen, "groupConcatMaxLen");
        this.groupConcatMaxLen = groupConcatMaxLen;
        return this;
    }

    /**
     * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
     */
    public JsonSchemaMysql withNetBufferLength(long netBufferLength) {
        Utils.checkNotNull(netBufferLength, "netBufferLength");
        this.netBufferLength = Optional.ofNullable(netBufferLength);
        return this;
    }

    /**
     * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
     */
    public JsonSchemaMysql withNetBufferLength(Optional<? extends Long> netBufferLength) {
        Utils.checkNotNull(netBufferLength, "netBufferLength");
        this.netBufferLength = netBufferLength;
        return this;
    }

    /**
     * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
     */
    public JsonSchemaMysql withInnodbPrintAllDeadlocks(boolean innodbPrintAllDeadlocks) {
        Utils.checkNotNull(innodbPrintAllDeadlocks, "innodbPrintAllDeadlocks");
        this.innodbPrintAllDeadlocks = Optional.ofNullable(innodbPrintAllDeadlocks);
        return this;
    }

    /**
     * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
     */
    public JsonSchemaMysql withInnodbPrintAllDeadlocks(Optional<? extends Boolean> innodbPrintAllDeadlocks) {
        Utils.checkNotNull(innodbPrintAllDeadlocks, "innodbPrintAllDeadlocks");
        this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
        return this;
    }

    /**
     * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
     */
    public JsonSchemaMysql withInnodbOnlineAlterLogMaxSize(long innodbOnlineAlterLogMaxSize) {
        Utils.checkNotNull(innodbOnlineAlterLogMaxSize, "innodbOnlineAlterLogMaxSize");
        this.innodbOnlineAlterLogMaxSize = Optional.ofNullable(innodbOnlineAlterLogMaxSize);
        return this;
    }

    /**
     * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
     */
    public JsonSchemaMysql withInnodbOnlineAlterLogMaxSize(Optional<? extends Long> innodbOnlineAlterLogMaxSize) {
        Utils.checkNotNull(innodbOnlineAlterLogMaxSize, "innodbOnlineAlterLogMaxSize");
        this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
        return this;
    }

    /**
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     */
    public JsonSchemaMysql withInteractiveTimeout(long interactiveTimeout) {
        Utils.checkNotNull(interactiveTimeout, "interactiveTimeout");
        this.interactiveTimeout = Optional.ofNullable(interactiveTimeout);
        return this;
    }

    /**
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     */
    public JsonSchemaMysql withInteractiveTimeout(Optional<? extends Long> interactiveTimeout) {
        Utils.checkNotNull(interactiveTimeout, "interactiveTimeout");
        this.interactiveTimeout = interactiveTimeout;
        return this;
    }

    /**
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     */
    public JsonSchemaMysql withInnodbLogBufferSize(long innodbLogBufferSize) {
        Utils.checkNotNull(innodbLogBufferSize, "innodbLogBufferSize");
        this.innodbLogBufferSize = Optional.ofNullable(innodbLogBufferSize);
        return this;
    }

    /**
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     */
    public JsonSchemaMysql withInnodbLogBufferSize(Optional<? extends Long> innodbLogBufferSize) {
        Utils.checkNotNull(innodbLogBufferSize, "innodbLogBufferSize");
        this.innodbLogBufferSize = innodbLogBufferSize;
        return this;
    }

    /**
     * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M)
     */
    public JsonSchemaMysql withMaxAllowedPacket(long maxAllowedPacket) {
        Utils.checkNotNull(maxAllowedPacket, "maxAllowedPacket");
        this.maxAllowedPacket = Optional.ofNullable(maxAllowedPacket);
        return this;
    }

    /**
     * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M)
     */
    public JsonSchemaMysql withMaxAllowedPacket(Optional<? extends Long> maxAllowedPacket) {
        Utils.checkNotNull(maxAllowedPacket, "maxAllowedPacket");
        this.maxAllowedPacket = maxAllowedPacket;
        return this;
    }

    /**
     * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
     */
    public JsonSchemaMysql withMaxHeapTableSize(long maxHeapTableSize) {
        Utils.checkNotNull(maxHeapTableSize, "maxHeapTableSize");
        this.maxHeapTableSize = Optional.ofNullable(maxHeapTableSize);
        return this;
    }

    /**
     * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
     */
    public JsonSchemaMysql withMaxHeapTableSize(Optional<? extends Long> maxHeapTableSize) {
        Utils.checkNotNull(maxHeapTableSize, "maxHeapTableSize");
        this.maxHeapTableSize = maxHeapTableSize;
        return this;
    }

    /**
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
     */
    public JsonSchemaMysql withInnodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
        Utils.checkNotNull(innodbFtServerStopwordTable, "innodbFtServerStopwordTable");
        this.innodbFtServerStopwordTable = JsonNullable.of(innodbFtServerStopwordTable);
        return this;
    }

    /**
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
     */
    public JsonSchemaMysql withInnodbFtServerStopwordTable(JsonNullable<? extends String> innodbFtServerStopwordTable) {
        Utils.checkNotNull(innodbFtServerStopwordTable, "innodbFtServerStopwordTable");
        this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
        return this;
    }

    /**
     * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    public JsonSchemaMysql withInnodbReadIoThreads(long innodbReadIoThreads) {
        Utils.checkNotNull(innodbReadIoThreads, "innodbReadIoThreads");
        this.innodbReadIoThreads = Optional.ofNullable(innodbReadIoThreads);
        return this;
    }

    /**
     * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    public JsonSchemaMysql withInnodbReadIoThreads(Optional<? extends Long> innodbReadIoThreads) {
        Utils.checkNotNull(innodbReadIoThreads, "innodbReadIoThreads");
        this.innodbReadIoThreads = innodbReadIoThreads;
        return this;
    }

    /**
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     */
    public JsonSchemaMysql withSqlRequirePrimaryKey(boolean sqlRequirePrimaryKey) {
        Utils.checkNotNull(sqlRequirePrimaryKey, "sqlRequirePrimaryKey");
        this.sqlRequirePrimaryKey = Optional.ofNullable(sqlRequirePrimaryKey);
        return this;
    }

    /**
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     */
    public JsonSchemaMysql withSqlRequirePrimaryKey(Optional<? extends Boolean> sqlRequirePrimaryKey) {
        Utils.checkNotNull(sqlRequirePrimaryKey, "sqlRequirePrimaryKey");
        this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
        return this;
    }

    /**
     * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
     */
    public JsonSchemaMysql withDefaultTimeZone(String defaultTimeZone) {
        Utils.checkNotNull(defaultTimeZone, "defaultTimeZone");
        this.defaultTimeZone = Optional.ofNullable(defaultTimeZone);
        return this;
    }

    /**
     * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
     */
    public JsonSchemaMysql withDefaultTimeZone(Optional<? extends String> defaultTimeZone) {
        Utils.checkNotNull(defaultTimeZone, "defaultTimeZone");
        this.defaultTimeZone = defaultTimeZone;
        return this;
    }

    /**
     * The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s
     */
    public JsonSchemaMysql withLongQueryTime(double longQueryTime) {
        Utils.checkNotNull(longQueryTime, "longQueryTime");
        this.longQueryTime = Optional.ofNullable(longQueryTime);
        return this;
    }

    /**
     * The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s
     */
    public JsonSchemaMysql withLongQueryTime(Optional<? extends Double> longQueryTime) {
        Utils.checkNotNull(longQueryTime, "longQueryTime");
        this.longQueryTime = longQueryTime;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JsonSchemaMysql other = (JsonSchemaMysql) o;
        return 
            java.util.Objects.deepEquals(this.netWriteTimeout, other.netWriteTimeout) &&
            java.util.Objects.deepEquals(this.internalTmpMemStorageEngine, other.internalTmpMemStorageEngine) &&
            java.util.Objects.deepEquals(this.sqlMode, other.sqlMode) &&
            java.util.Objects.deepEquals(this.informationSchemaStatsExpiry, other.informationSchemaStatsExpiry) &&
            java.util.Objects.deepEquals(this.sortBufferSize, other.sortBufferSize) &&
            java.util.Objects.deepEquals(this.innodbThreadConcurrency, other.innodbThreadConcurrency) &&
            java.util.Objects.deepEquals(this.innodbWriteIoThreads, other.innodbWriteIoThreads) &&
            java.util.Objects.deepEquals(this.innodbFtMinTokenSize, other.innodbFtMinTokenSize) &&
            java.util.Objects.deepEquals(this.innodbChangeBufferMaxSize, other.innodbChangeBufferMaxSize) &&
            java.util.Objects.deepEquals(this.innodbFlushNeighbors, other.innodbFlushNeighbors) &&
            java.util.Objects.deepEquals(this.tmpTableSize, other.tmpTableSize) &&
            java.util.Objects.deepEquals(this.slowQueryLog, other.slowQueryLog) &&
            java.util.Objects.deepEquals(this.connectTimeout, other.connectTimeout) &&
            java.util.Objects.deepEquals(this.netReadTimeout, other.netReadTimeout) &&
            java.util.Objects.deepEquals(this.innodbLockWaitTimeout, other.innodbLockWaitTimeout) &&
            java.util.Objects.deepEquals(this.waitTimeout, other.waitTimeout) &&
            java.util.Objects.deepEquals(this.innodbRollbackOnTimeout, other.innodbRollbackOnTimeout) &&
            java.util.Objects.deepEquals(this.groupConcatMaxLen, other.groupConcatMaxLen) &&
            java.util.Objects.deepEquals(this.netBufferLength, other.netBufferLength) &&
            java.util.Objects.deepEquals(this.innodbPrintAllDeadlocks, other.innodbPrintAllDeadlocks) &&
            java.util.Objects.deepEquals(this.innodbOnlineAlterLogMaxSize, other.innodbOnlineAlterLogMaxSize) &&
            java.util.Objects.deepEquals(this.interactiveTimeout, other.interactiveTimeout) &&
            java.util.Objects.deepEquals(this.innodbLogBufferSize, other.innodbLogBufferSize) &&
            java.util.Objects.deepEquals(this.maxAllowedPacket, other.maxAllowedPacket) &&
            java.util.Objects.deepEquals(this.maxHeapTableSize, other.maxHeapTableSize) &&
            java.util.Objects.deepEquals(this.innodbFtServerStopwordTable, other.innodbFtServerStopwordTable) &&
            java.util.Objects.deepEquals(this.innodbReadIoThreads, other.innodbReadIoThreads) &&
            java.util.Objects.deepEquals(this.sqlRequirePrimaryKey, other.sqlRequirePrimaryKey) &&
            java.util.Objects.deepEquals(this.defaultTimeZone, other.defaultTimeZone) &&
            java.util.Objects.deepEquals(this.longQueryTime, other.longQueryTime);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            netWriteTimeout,
            internalTmpMemStorageEngine,
            sqlMode,
            informationSchemaStatsExpiry,
            sortBufferSize,
            innodbThreadConcurrency,
            innodbWriteIoThreads,
            innodbFtMinTokenSize,
            innodbChangeBufferMaxSize,
            innodbFlushNeighbors,
            tmpTableSize,
            slowQueryLog,
            connectTimeout,
            netReadTimeout,
            innodbLockWaitTimeout,
            waitTimeout,
            innodbRollbackOnTimeout,
            groupConcatMaxLen,
            netBufferLength,
            innodbPrintAllDeadlocks,
            innodbOnlineAlterLogMaxSize,
            interactiveTimeout,
            innodbLogBufferSize,
            maxAllowedPacket,
            maxHeapTableSize,
            innodbFtServerStopwordTable,
            innodbReadIoThreads,
            sqlRequirePrimaryKey,
            defaultTimeZone,
            longQueryTime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JsonSchemaMysql.class,
                "netWriteTimeout", netWriteTimeout,
                "internalTmpMemStorageEngine", internalTmpMemStorageEngine,
                "sqlMode", sqlMode,
                "informationSchemaStatsExpiry", informationSchemaStatsExpiry,
                "sortBufferSize", sortBufferSize,
                "innodbThreadConcurrency", innodbThreadConcurrency,
                "innodbWriteIoThreads", innodbWriteIoThreads,
                "innodbFtMinTokenSize", innodbFtMinTokenSize,
                "innodbChangeBufferMaxSize", innodbChangeBufferMaxSize,
                "innodbFlushNeighbors", innodbFlushNeighbors,
                "tmpTableSize", tmpTableSize,
                "slowQueryLog", slowQueryLog,
                "connectTimeout", connectTimeout,
                "netReadTimeout", netReadTimeout,
                "innodbLockWaitTimeout", innodbLockWaitTimeout,
                "waitTimeout", waitTimeout,
                "innodbRollbackOnTimeout", innodbRollbackOnTimeout,
                "groupConcatMaxLen", groupConcatMaxLen,
                "netBufferLength", netBufferLength,
                "innodbPrintAllDeadlocks", innodbPrintAllDeadlocks,
                "innodbOnlineAlterLogMaxSize", innodbOnlineAlterLogMaxSize,
                "interactiveTimeout", interactiveTimeout,
                "innodbLogBufferSize", innodbLogBufferSize,
                "maxAllowedPacket", maxAllowedPacket,
                "maxHeapTableSize", maxHeapTableSize,
                "innodbFtServerStopwordTable", innodbFtServerStopwordTable,
                "innodbReadIoThreads", innodbReadIoThreads,
                "sqlRequirePrimaryKey", sqlRequirePrimaryKey,
                "defaultTimeZone", defaultTimeZone,
                "longQueryTime", longQueryTime);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> netWriteTimeout = Optional.empty();
 
        private Optional<? extends InternalTmpMemStorageEngine> internalTmpMemStorageEngine = Optional.empty();
 
        private Optional<? extends String> sqlMode = Optional.empty();
 
        private Optional<? extends Long> informationSchemaStatsExpiry = Optional.empty();
 
        private Optional<? extends Long> sortBufferSize = Optional.empty();
 
        private Optional<? extends Long> innodbThreadConcurrency = Optional.empty();
 
        private Optional<? extends Long> innodbWriteIoThreads = Optional.empty();
 
        private Optional<? extends Long> innodbFtMinTokenSize = Optional.empty();
 
        private Optional<? extends Long> innodbChangeBufferMaxSize = Optional.empty();
 
        private Optional<? extends Long> innodbFlushNeighbors = Optional.empty();
 
        private Optional<? extends Long> tmpTableSize = Optional.empty();
 
        private Optional<? extends Boolean> slowQueryLog = Optional.empty();
 
        private Optional<? extends Long> connectTimeout = Optional.empty();
 
        private Optional<? extends Long> netReadTimeout = Optional.empty();
 
        private Optional<? extends Long> innodbLockWaitTimeout = Optional.empty();
 
        private Optional<? extends Long> waitTimeout = Optional.empty();
 
        private Optional<? extends Boolean> innodbRollbackOnTimeout = Optional.empty();
 
        private Optional<? extends Long> groupConcatMaxLen = Optional.empty();
 
        private Optional<? extends Long> netBufferLength = Optional.empty();
 
        private Optional<? extends Boolean> innodbPrintAllDeadlocks = Optional.empty();
 
        private Optional<? extends Long> innodbOnlineAlterLogMaxSize = Optional.empty();
 
        private Optional<? extends Long> interactiveTimeout = Optional.empty();
 
        private Optional<? extends Long> innodbLogBufferSize = Optional.empty();
 
        private Optional<? extends Long> maxAllowedPacket = Optional.empty();
 
        private Optional<? extends Long> maxHeapTableSize = Optional.empty();
 
        private JsonNullable<? extends String> innodbFtServerStopwordTable = JsonNullable.undefined();
 
        private Optional<? extends Long> innodbReadIoThreads = Optional.empty();
 
        private Optional<? extends Boolean> sqlRequirePrimaryKey = Optional.empty();
 
        private Optional<? extends String> defaultTimeZone = Optional.empty();
 
        private Optional<? extends Double> longQueryTime = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The number of seconds to wait for a block to be written to a connection before aborting the write.
         */
        public Builder netWriteTimeout(long netWriteTimeout) {
            Utils.checkNotNull(netWriteTimeout, "netWriteTimeout");
            this.netWriteTimeout = Optional.ofNullable(netWriteTimeout);
            return this;
        }

        /**
         * The number of seconds to wait for a block to be written to a connection before aborting the write.
         */
        public Builder netWriteTimeout(Optional<? extends Long> netWriteTimeout) {
            Utils.checkNotNull(netWriteTimeout, "netWriteTimeout");
            this.netWriteTimeout = netWriteTimeout;
            return this;
        }

        /**
         * The storage engine for in-memory internal temporary tables.
         */
        public Builder internalTmpMemStorageEngine(InternalTmpMemStorageEngine internalTmpMemStorageEngine) {
            Utils.checkNotNull(internalTmpMemStorageEngine, "internalTmpMemStorageEngine");
            this.internalTmpMemStorageEngine = Optional.ofNullable(internalTmpMemStorageEngine);
            return this;
        }

        /**
         * The storage engine for in-memory internal temporary tables.
         */
        public Builder internalTmpMemStorageEngine(Optional<? extends InternalTmpMemStorageEngine> internalTmpMemStorageEngine) {
            Utils.checkNotNull(internalTmpMemStorageEngine, "internalTmpMemStorageEngine");
            this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
            return this;
        }

        /**
         * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
         */
        public Builder sqlMode(String sqlMode) {
            Utils.checkNotNull(sqlMode, "sqlMode");
            this.sqlMode = Optional.ofNullable(sqlMode);
            return this;
        }

        /**
         * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
         */
        public Builder sqlMode(Optional<? extends String> sqlMode) {
            Utils.checkNotNull(sqlMode, "sqlMode");
            this.sqlMode = sqlMode;
            return this;
        }

        /**
         * The time, in seconds, before cached statistics expire
         */
        public Builder informationSchemaStatsExpiry(long informationSchemaStatsExpiry) {
            Utils.checkNotNull(informationSchemaStatsExpiry, "informationSchemaStatsExpiry");
            this.informationSchemaStatsExpiry = Optional.ofNullable(informationSchemaStatsExpiry);
            return this;
        }

        /**
         * The time, in seconds, before cached statistics expire
         */
        public Builder informationSchemaStatsExpiry(Optional<? extends Long> informationSchemaStatsExpiry) {
            Utils.checkNotNull(informationSchemaStatsExpiry, "informationSchemaStatsExpiry");
            this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }

        /**
         * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)
         */
        public Builder sortBufferSize(long sortBufferSize) {
            Utils.checkNotNull(sortBufferSize, "sortBufferSize");
            this.sortBufferSize = Optional.ofNullable(sortBufferSize);
            return this;
        }

        /**
         * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)
         */
        public Builder sortBufferSize(Optional<? extends Long> sortBufferSize) {
            Utils.checkNotNull(sortBufferSize, "sortBufferSize");
            this.sortBufferSize = sortBufferSize;
            return this;
        }

        /**
         * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit)
         */
        public Builder innodbThreadConcurrency(long innodbThreadConcurrency) {
            Utils.checkNotNull(innodbThreadConcurrency, "innodbThreadConcurrency");
            this.innodbThreadConcurrency = Optional.ofNullable(innodbThreadConcurrency);
            return this;
        }

        /**
         * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit)
         */
        public Builder innodbThreadConcurrency(Optional<? extends Long> innodbThreadConcurrency) {
            Utils.checkNotNull(innodbThreadConcurrency, "innodbThreadConcurrency");
            this.innodbThreadConcurrency = innodbThreadConcurrency;
            return this;
        }

        /**
         * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
         */
        public Builder innodbWriteIoThreads(long innodbWriteIoThreads) {
            Utils.checkNotNull(innodbWriteIoThreads, "innodbWriteIoThreads");
            this.innodbWriteIoThreads = Optional.ofNullable(innodbWriteIoThreads);
            return this;
        }

        /**
         * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
         */
        public Builder innodbWriteIoThreads(Optional<? extends Long> innodbWriteIoThreads) {
            Utils.checkNotNull(innodbWriteIoThreads, "innodbWriteIoThreads");
            this.innodbWriteIoThreads = innodbWriteIoThreads;
            return this;
        }

        /**
         * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
         */
        public Builder innodbFtMinTokenSize(long innodbFtMinTokenSize) {
            Utils.checkNotNull(innodbFtMinTokenSize, "innodbFtMinTokenSize");
            this.innodbFtMinTokenSize = Optional.ofNullable(innodbFtMinTokenSize);
            return this;
        }

        /**
         * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
         */
        public Builder innodbFtMinTokenSize(Optional<? extends Long> innodbFtMinTokenSize) {
            Utils.checkNotNull(innodbFtMinTokenSize, "innodbFtMinTokenSize");
            this.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }

        /**
         * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25
         */
        public Builder innodbChangeBufferMaxSize(long innodbChangeBufferMaxSize) {
            Utils.checkNotNull(innodbChangeBufferMaxSize, "innodbChangeBufferMaxSize");
            this.innodbChangeBufferMaxSize = Optional.ofNullable(innodbChangeBufferMaxSize);
            return this;
        }

        /**
         * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25
         */
        public Builder innodbChangeBufferMaxSize(Optional<? extends Long> innodbChangeBufferMaxSize) {
            Utils.checkNotNull(innodbChangeBufferMaxSize, "innodbChangeBufferMaxSize");
            this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
            return this;
        }

        /**
         * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed,  1 - flush contiguous dirty pages in the same extent,  2 - flush dirty pages in the same extent
         */
        public Builder innodbFlushNeighbors(long innodbFlushNeighbors) {
            Utils.checkNotNull(innodbFlushNeighbors, "innodbFlushNeighbors");
            this.innodbFlushNeighbors = Optional.ofNullable(innodbFlushNeighbors);
            return this;
        }

        /**
         * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed,  1 - flush contiguous dirty pages in the same extent,  2 - flush dirty pages in the same extent
         */
        public Builder innodbFlushNeighbors(Optional<? extends Long> innodbFlushNeighbors) {
            Utils.checkNotNull(innodbFlushNeighbors, "innodbFlushNeighbors");
            this.innodbFlushNeighbors = innodbFlushNeighbors;
            return this;
        }

        /**
         * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M)
         */
        public Builder tmpTableSize(long tmpTableSize) {
            Utils.checkNotNull(tmpTableSize, "tmpTableSize");
            this.tmpTableSize = Optional.ofNullable(tmpTableSize);
            return this;
        }

        /**
         * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M)
         */
        public Builder tmpTableSize(Optional<? extends Long> tmpTableSize) {
            Utils.checkNotNull(tmpTableSize, "tmpTableSize");
            this.tmpTableSize = tmpTableSize;
            return this;
        }

        /**
         * Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off
         */
        public Builder slowQueryLog(boolean slowQueryLog) {
            Utils.checkNotNull(slowQueryLog, "slowQueryLog");
            this.slowQueryLog = Optional.ofNullable(slowQueryLog);
            return this;
        }

        /**
         * Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off
         */
        public Builder slowQueryLog(Optional<? extends Boolean> slowQueryLog) {
            Utils.checkNotNull(slowQueryLog, "slowQueryLog");
            this.slowQueryLog = slowQueryLog;
            return this;
        }

        /**
         * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake
         */
        public Builder connectTimeout(long connectTimeout) {
            Utils.checkNotNull(connectTimeout, "connectTimeout");
            this.connectTimeout = Optional.ofNullable(connectTimeout);
            return this;
        }

        /**
         * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake
         */
        public Builder connectTimeout(Optional<? extends Long> connectTimeout) {
            Utils.checkNotNull(connectTimeout, "connectTimeout");
            this.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * The number of seconds to wait for more data from a connection before aborting the read.
         */
        public Builder netReadTimeout(long netReadTimeout) {
            Utils.checkNotNull(netReadTimeout, "netReadTimeout");
            this.netReadTimeout = Optional.ofNullable(netReadTimeout);
            return this;
        }

        /**
         * The number of seconds to wait for more data from a connection before aborting the read.
         */
        public Builder netReadTimeout(Optional<? extends Long> netReadTimeout) {
            Utils.checkNotNull(netReadTimeout, "netReadTimeout");
            this.netReadTimeout = netReadTimeout;
            return this;
        }

        /**
         * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
         */
        public Builder innodbLockWaitTimeout(long innodbLockWaitTimeout) {
            Utils.checkNotNull(innodbLockWaitTimeout, "innodbLockWaitTimeout");
            this.innodbLockWaitTimeout = Optional.ofNullable(innodbLockWaitTimeout);
            return this;
        }

        /**
         * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
         */
        public Builder innodbLockWaitTimeout(Optional<? extends Long> innodbLockWaitTimeout) {
            Utils.checkNotNull(innodbLockWaitTimeout, "innodbLockWaitTimeout");
            this.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }

        /**
         * The number of seconds the server waits for activity on a noninteractive connection before closing it.
         */
        public Builder waitTimeout(long waitTimeout) {
            Utils.checkNotNull(waitTimeout, "waitTimeout");
            this.waitTimeout = Optional.ofNullable(waitTimeout);
            return this;
        }

        /**
         * The number of seconds the server waits for activity on a noninteractive connection before closing it.
         */
        public Builder waitTimeout(Optional<? extends Long> waitTimeout) {
            Utils.checkNotNull(waitTimeout, "waitTimeout");
            this.waitTimeout = waitTimeout;
            return this;
        }

        /**
         * When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
         */
        public Builder innodbRollbackOnTimeout(boolean innodbRollbackOnTimeout) {
            Utils.checkNotNull(innodbRollbackOnTimeout, "innodbRollbackOnTimeout");
            this.innodbRollbackOnTimeout = Optional.ofNullable(innodbRollbackOnTimeout);
            return this;
        }

        /**
         * When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
         */
        public Builder innodbRollbackOnTimeout(Optional<? extends Boolean> innodbRollbackOnTimeout) {
            Utils.checkNotNull(innodbRollbackOnTimeout, "innodbRollbackOnTimeout");
            this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
            return this;
        }

        /**
         * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
         */
        public Builder groupConcatMaxLen(long groupConcatMaxLen) {
            Utils.checkNotNull(groupConcatMaxLen, "groupConcatMaxLen");
            this.groupConcatMaxLen = Optional.ofNullable(groupConcatMaxLen);
            return this;
        }

        /**
         * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
         */
        public Builder groupConcatMaxLen(Optional<? extends Long> groupConcatMaxLen) {
            Utils.checkNotNull(groupConcatMaxLen, "groupConcatMaxLen");
            this.groupConcatMaxLen = groupConcatMaxLen;
            return this;
        }

        /**
         * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
         */
        public Builder netBufferLength(long netBufferLength) {
            Utils.checkNotNull(netBufferLength, "netBufferLength");
            this.netBufferLength = Optional.ofNullable(netBufferLength);
            return this;
        }

        /**
         * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
         */
        public Builder netBufferLength(Optional<? extends Long> netBufferLength) {
            Utils.checkNotNull(netBufferLength, "netBufferLength");
            this.netBufferLength = netBufferLength;
            return this;
        }

        /**
         * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
         */
        public Builder innodbPrintAllDeadlocks(boolean innodbPrintAllDeadlocks) {
            Utils.checkNotNull(innodbPrintAllDeadlocks, "innodbPrintAllDeadlocks");
            this.innodbPrintAllDeadlocks = Optional.ofNullable(innodbPrintAllDeadlocks);
            return this;
        }

        /**
         * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
         */
        public Builder innodbPrintAllDeadlocks(Optional<? extends Boolean> innodbPrintAllDeadlocks) {
            Utils.checkNotNull(innodbPrintAllDeadlocks, "innodbPrintAllDeadlocks");
            this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
            return this;
        }

        /**
         * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
         */
        public Builder innodbOnlineAlterLogMaxSize(long innodbOnlineAlterLogMaxSize) {
            Utils.checkNotNull(innodbOnlineAlterLogMaxSize, "innodbOnlineAlterLogMaxSize");
            this.innodbOnlineAlterLogMaxSize = Optional.ofNullable(innodbOnlineAlterLogMaxSize);
            return this;
        }

        /**
         * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
         */
        public Builder innodbOnlineAlterLogMaxSize(Optional<? extends Long> innodbOnlineAlterLogMaxSize) {
            Utils.checkNotNull(innodbOnlineAlterLogMaxSize, "innodbOnlineAlterLogMaxSize");
            this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            return this;
        }

        /**
         * The number of seconds the server waits for activity on an interactive connection before closing it.
         */
        public Builder interactiveTimeout(long interactiveTimeout) {
            Utils.checkNotNull(interactiveTimeout, "interactiveTimeout");
            this.interactiveTimeout = Optional.ofNullable(interactiveTimeout);
            return this;
        }

        /**
         * The number of seconds the server waits for activity on an interactive connection before closing it.
         */
        public Builder interactiveTimeout(Optional<? extends Long> interactiveTimeout) {
            Utils.checkNotNull(interactiveTimeout, "interactiveTimeout");
            this.interactiveTimeout = interactiveTimeout;
            return this;
        }

        /**
         * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
         */
        public Builder innodbLogBufferSize(long innodbLogBufferSize) {
            Utils.checkNotNull(innodbLogBufferSize, "innodbLogBufferSize");
            this.innodbLogBufferSize = Optional.ofNullable(innodbLogBufferSize);
            return this;
        }

        /**
         * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
         */
        public Builder innodbLogBufferSize(Optional<? extends Long> innodbLogBufferSize) {
            Utils.checkNotNull(innodbLogBufferSize, "innodbLogBufferSize");
            this.innodbLogBufferSize = innodbLogBufferSize;
            return this;
        }

        /**
         * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M)
         */
        public Builder maxAllowedPacket(long maxAllowedPacket) {
            Utils.checkNotNull(maxAllowedPacket, "maxAllowedPacket");
            this.maxAllowedPacket = Optional.ofNullable(maxAllowedPacket);
            return this;
        }

        /**
         * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M)
         */
        public Builder maxAllowedPacket(Optional<? extends Long> maxAllowedPacket) {
            Utils.checkNotNull(maxAllowedPacket, "maxAllowedPacket");
            this.maxAllowedPacket = maxAllowedPacket;
            return this;
        }

        /**
         * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
         */
        public Builder maxHeapTableSize(long maxHeapTableSize) {
            Utils.checkNotNull(maxHeapTableSize, "maxHeapTableSize");
            this.maxHeapTableSize = Optional.ofNullable(maxHeapTableSize);
            return this;
        }

        /**
         * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
         */
        public Builder maxHeapTableSize(Optional<? extends Long> maxHeapTableSize) {
            Utils.checkNotNull(maxHeapTableSize, "maxHeapTableSize");
            this.maxHeapTableSize = maxHeapTableSize;
            return this;
        }

        /**
         * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
         */
        public Builder innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
            Utils.checkNotNull(innodbFtServerStopwordTable, "innodbFtServerStopwordTable");
            this.innodbFtServerStopwordTable = JsonNullable.of(innodbFtServerStopwordTable);
            return this;
        }

        /**
         * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
         */
        public Builder innodbFtServerStopwordTable(JsonNullable<? extends String> innodbFtServerStopwordTable) {
            Utils.checkNotNull(innodbFtServerStopwordTable, "innodbFtServerStopwordTable");
            this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            return this;
        }

        /**
         * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
         */
        public Builder innodbReadIoThreads(long innodbReadIoThreads) {
            Utils.checkNotNull(innodbReadIoThreads, "innodbReadIoThreads");
            this.innodbReadIoThreads = Optional.ofNullable(innodbReadIoThreads);
            return this;
        }

        /**
         * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
         */
        public Builder innodbReadIoThreads(Optional<? extends Long> innodbReadIoThreads) {
            Utils.checkNotNull(innodbReadIoThreads, "innodbReadIoThreads");
            this.innodbReadIoThreads = innodbReadIoThreads;
            return this;
        }

        /**
         * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
         */
        public Builder sqlRequirePrimaryKey(boolean sqlRequirePrimaryKey) {
            Utils.checkNotNull(sqlRequirePrimaryKey, "sqlRequirePrimaryKey");
            this.sqlRequirePrimaryKey = Optional.ofNullable(sqlRequirePrimaryKey);
            return this;
        }

        /**
         * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
         */
        public Builder sqlRequirePrimaryKey(Optional<? extends Boolean> sqlRequirePrimaryKey) {
            Utils.checkNotNull(sqlRequirePrimaryKey, "sqlRequirePrimaryKey");
            this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }

        /**
         * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
         */
        public Builder defaultTimeZone(String defaultTimeZone) {
            Utils.checkNotNull(defaultTimeZone, "defaultTimeZone");
            this.defaultTimeZone = Optional.ofNullable(defaultTimeZone);
            return this;
        }

        /**
         * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
         */
        public Builder defaultTimeZone(Optional<? extends String> defaultTimeZone) {
            Utils.checkNotNull(defaultTimeZone, "defaultTimeZone");
            this.defaultTimeZone = defaultTimeZone;
            return this;
        }

        /**
         * The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s
         */
        public Builder longQueryTime(double longQueryTime) {
            Utils.checkNotNull(longQueryTime, "longQueryTime");
            this.longQueryTime = Optional.ofNullable(longQueryTime);
            return this;
        }

        /**
         * The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s
         */
        public Builder longQueryTime(Optional<? extends Double> longQueryTime) {
            Utils.checkNotNull(longQueryTime, "longQueryTime");
            this.longQueryTime = longQueryTime;
            return this;
        }
        
        public JsonSchemaMysql build() {
            return new JsonSchemaMysql(
                netWriteTimeout,
                internalTmpMemStorageEngine,
                sqlMode,
                informationSchemaStatsExpiry,
                sortBufferSize,
                innodbThreadConcurrency,
                innodbWriteIoThreads,
                innodbFtMinTokenSize,
                innodbChangeBufferMaxSize,
                innodbFlushNeighbors,
                tmpTableSize,
                slowQueryLog,
                connectTimeout,
                netReadTimeout,
                innodbLockWaitTimeout,
                waitTimeout,
                innodbRollbackOnTimeout,
                groupConcatMaxLen,
                netBufferLength,
                innodbPrintAllDeadlocks,
                innodbOnlineAlterLogMaxSize,
                interactiveTimeout,
                innodbLogBufferSize,
                maxAllowedPacket,
                maxHeapTableSize,
                innodbFtServerStopwordTable,
                innodbReadIoThreads,
                sqlRequirePrimaryKey,
                defaultTimeZone,
                longQueryTime);
        }
    }
}

