/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.exoscale.apichgva2.DateTimeHelper;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for DbaasServiceKafka type.
 */
public class DbaasServiceKafka {
    private LocalDateTime updatedAt;
    private AuthenticationMethods authenticationMethods;
    private Long nodeCount;
    private ConnectionInfo1 connectionInfo;
    private Long nodeCpuCount;
    private Boolean kafkaRestEnabled;
    private List<DbaasIntegration> integrations;
    private String zone;
    private List<DbaasNodeState> nodeStates;
    private String name;
    private Boolean kafkaConnectEnabled;
    private String type;
    private EnumServiceStateEnum state;
    private List<String> ipFilter;
    private SchemaRegistryConfiguration schemaRegistrySettings;
    private List<DbaasServiceBackup> backups;
    private KafkaRESTConfiguration kafkaRestSettings;
    private Boolean terminationProtection;
    private List<DbaasServiceNotification> notifications;
    private KafkaConnectConfigurationValues kafkaConnectSettings;
    private List<Component1> components;
    private DbaasServiceMaintenance maintenance;
    private KafkaBrokerConfigurationValues kafkaSettings;
    private Long diskSize;
    private Long nodeMemory;
    private String uri;
    private Object uriParams;
    private Boolean schemaRegistryEnabled;
    private String version;
    private LocalDateTime createdAt;
    private String plan;
    private List<User1> users;

    /**
     * Default constructor.
     */
    public DbaasServiceKafka() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  type  String value for type.
     * @param  plan  String value for plan.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  authenticationMethods  AuthenticationMethods value for authenticationMethods.
     * @param  nodeCount  Long value for nodeCount.
     * @param  connectionInfo  ConnectionInfo1 value for connectionInfo.
     * @param  nodeCpuCount  Long value for nodeCpuCount.
     * @param  kafkaRestEnabled  Boolean value for kafkaRestEnabled.
     * @param  integrations  List of DbaasIntegration value for integrations.
     * @param  zone  String value for zone.
     * @param  nodeStates  List of DbaasNodeState value for nodeStates.
     * @param  kafkaConnectEnabled  Boolean value for kafkaConnectEnabled.
     * @param  state  EnumServiceStateEnum value for state.
     * @param  ipFilter  List of String value for ipFilter.
     * @param  schemaRegistrySettings  SchemaRegistryConfiguration value for schemaRegistrySettings.
     * @param  backups  List of DbaasServiceBackup value for backups.
     * @param  kafkaRestSettings  KafkaRESTConfiguration value for kafkaRestSettings.
     * @param  terminationProtection  Boolean value for terminationProtection.
     * @param  notifications  List of DbaasServiceNotification value for notifications.
     * @param  kafkaConnectSettings  KafkaConnectConfigurationValues value for kafkaConnectSettings.
     * @param  components  List of Component1 value for components.
     * @param  maintenance  DbaasServiceMaintenance value for maintenance.
     * @param  kafkaSettings  KafkaBrokerConfigurationValues value for kafkaSettings.
     * @param  diskSize  Long value for diskSize.
     * @param  nodeMemory  Long value for nodeMemory.
     * @param  uri  String value for uri.
     * @param  uriParams  Object value for uriParams.
     * @param  schemaRegistryEnabled  Boolean value for schemaRegistryEnabled.
     * @param  version  String value for version.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  users  List of User1 value for users.
     */
    public DbaasServiceKafka(
            String name,
            String type,
            String plan,
            LocalDateTime updatedAt,
            AuthenticationMethods authenticationMethods,
            Long nodeCount,
            ConnectionInfo1 connectionInfo,
            Long nodeCpuCount,
            Boolean kafkaRestEnabled,
            List<DbaasIntegration> integrations,
            String zone,
            List<DbaasNodeState> nodeStates,
            Boolean kafkaConnectEnabled,
            EnumServiceStateEnum state,
            List<String> ipFilter,
            SchemaRegistryConfiguration schemaRegistrySettings,
            List<DbaasServiceBackup> backups,
            KafkaRESTConfiguration kafkaRestSettings,
            Boolean terminationProtection,
            List<DbaasServiceNotification> notifications,
            KafkaConnectConfigurationValues kafkaConnectSettings,
            List<Component1> components,
            DbaasServiceMaintenance maintenance,
            KafkaBrokerConfigurationValues kafkaSettings,
            Long diskSize,
            Long nodeMemory,
            String uri,
            Object uriParams,
            Boolean schemaRegistryEnabled,
            String version,
            LocalDateTime createdAt,
            List<User1> users) {
        this.updatedAt = updatedAt;
        this.authenticationMethods = authenticationMethods;
        this.nodeCount = nodeCount;
        this.connectionInfo = connectionInfo;
        this.nodeCpuCount = nodeCpuCount;
        this.kafkaRestEnabled = kafkaRestEnabled;
        this.integrations = integrations;
        this.zone = zone;
        this.nodeStates = nodeStates;
        this.name = name;
        this.kafkaConnectEnabled = kafkaConnectEnabled;
        this.type = type;
        this.state = state;
        this.ipFilter = ipFilter;
        this.schemaRegistrySettings = schemaRegistrySettings;
        this.backups = backups;
        this.kafkaRestSettings = kafkaRestSettings;
        this.terminationProtection = terminationProtection;
        this.notifications = notifications;
        this.kafkaConnectSettings = kafkaConnectSettings;
        this.components = components;
        this.maintenance = maintenance;
        this.kafkaSettings = kafkaSettings;
        this.diskSize = diskSize;
        this.nodeMemory = nodeMemory;
        this.uri = uri;
        this.uriParams = uriParams;
        this.schemaRegistryEnabled = schemaRegistryEnabled;
        this.version = version;
        this.createdAt = createdAt;
        this.plan = plan;
        this.users = users;
    }

    /**
     * Getter for UpdatedAt.
     * Service last update timestamp (ISO 8601)
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated-at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * Service last update timestamp (ISO 8601)
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated-at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for AuthenticationMethods.
     * Kafka authentication methods
     * @return Returns the AuthenticationMethods
     */
    @JsonGetter("authentication-methods")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AuthenticationMethods getAuthenticationMethods() {
        return authenticationMethods;
    }

    /**
     * Setter for AuthenticationMethods.
     * Kafka authentication methods
     * @param authenticationMethods Value for AuthenticationMethods
     */
    @JsonSetter("authentication-methods")
    public void setAuthenticationMethods(AuthenticationMethods authenticationMethods) {
        this.authenticationMethods = authenticationMethods;
    }

    /**
     * Getter for NodeCount.
     * Number of service nodes in the active plan
     * @return Returns the Long
     */
    @JsonGetter("node-count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNodeCount() {
        return nodeCount;
    }

    /**
     * Setter for NodeCount.
     * Number of service nodes in the active plan
     * @param nodeCount Value for Long
     */
    @JsonSetter("node-count")
    public void setNodeCount(Long nodeCount) {
        this.nodeCount = nodeCount;
    }

    /**
     * Getter for ConnectionInfo.
     * Kafka connection information properties
     * @return Returns the ConnectionInfo1
     */
    @JsonGetter("connection-info")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ConnectionInfo1 getConnectionInfo() {
        return connectionInfo;
    }

    /**
     * Setter for ConnectionInfo.
     * Kafka connection information properties
     * @param connectionInfo Value for ConnectionInfo1
     */
    @JsonSetter("connection-info")
    public void setConnectionInfo(ConnectionInfo1 connectionInfo) {
        this.connectionInfo = connectionInfo;
    }

    /**
     * Getter for NodeCpuCount.
     * Number of CPUs for each node
     * @return Returns the Long
     */
    @JsonGetter("node-cpu-count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNodeCpuCount() {
        return nodeCpuCount;
    }

    /**
     * Setter for NodeCpuCount.
     * Number of CPUs for each node
     * @param nodeCpuCount Value for Long
     */
    @JsonSetter("node-cpu-count")
    public void setNodeCpuCount(Long nodeCpuCount) {
        this.nodeCpuCount = nodeCpuCount;
    }

    /**
     * Getter for KafkaRestEnabled.
     * Whether Kafka REST is enabled
     * @return Returns the Boolean
     */
    @JsonGetter("kafka-rest-enabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getKafkaRestEnabled() {
        return kafkaRestEnabled;
    }

    /**
     * Setter for KafkaRestEnabled.
     * Whether Kafka REST is enabled
     * @param kafkaRestEnabled Value for Boolean
     */
    @JsonSetter("kafka-rest-enabled")
    public void setKafkaRestEnabled(Boolean kafkaRestEnabled) {
        this.kafkaRestEnabled = kafkaRestEnabled;
    }

    /**
     * Getter for Integrations.
     * Service integrations
     * @return Returns the List of DbaasIntegration
     */
    @JsonGetter("integrations")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasIntegration> getIntegrations() {
        return integrations;
    }

    /**
     * Setter for Integrations.
     * Service integrations
     * @param integrations Value for List of DbaasIntegration
     */
    @JsonSetter("integrations")
    public void setIntegrations(List<DbaasIntegration> integrations) {
        this.integrations = integrations;
    }

    /**
     * Getter for Zone.
     * The zone where the service is running
     * @return Returns the String
     */
    @JsonGetter("zone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getZone() {
        return zone;
    }

    /**
     * Setter for Zone.
     * The zone where the service is running
     * @param zone Value for String
     */
    @JsonSetter("zone")
    public void setZone(String zone) {
        this.zone = zone;
    }

    /**
     * Getter for NodeStates.
     * State of individual service nodes
     * @return Returns the List of DbaasNodeState
     */
    @JsonGetter("node-states")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasNodeState> getNodeStates() {
        return nodeStates;
    }

    /**
     * Setter for NodeStates.
     * State of individual service nodes
     * @param nodeStates Value for List of DbaasNodeState
     */
    @JsonSetter("node-states")
    public void setNodeStates(List<DbaasNodeState> nodeStates) {
        this.nodeStates = nodeStates;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for KafkaConnectEnabled.
     * Whether Kafka Connect is enabled
     * @return Returns the Boolean
     */
    @JsonGetter("kafka-connect-enabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getKafkaConnectEnabled() {
        return kafkaConnectEnabled;
    }

    /**
     * Setter for KafkaConnectEnabled.
     * Whether Kafka Connect is enabled
     * @param kafkaConnectEnabled Value for Boolean
     */
    @JsonSetter("kafka-connect-enabled")
    public void setKafkaConnectEnabled(Boolean kafkaConnectEnabled) {
        this.kafkaConnectEnabled = kafkaConnectEnabled;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for State.
     * @return Returns the EnumServiceStateEnum
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EnumServiceStateEnum getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for EnumServiceStateEnum
     */
    @JsonSetter("state")
    public void setState(EnumServiceStateEnum state) {
        this.state = state;
    }

    /**
     * Getter for IpFilter.
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     * @return Returns the List of String
     */
    @JsonGetter("ip-filter")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getIpFilter() {
        return ipFilter;
    }

    /**
     * Setter for IpFilter.
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     * @param ipFilter Value for List of String
     */
    @JsonSetter("ip-filter")
    public void setIpFilter(List<String> ipFilter) {
        this.ipFilter = ipFilter;
    }

    /**
     * Getter for SchemaRegistrySettings.
     * @return Returns the SchemaRegistryConfiguration
     */
    @JsonGetter("schema-registry-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SchemaRegistryConfiguration getSchemaRegistrySettings() {
        return schemaRegistrySettings;
    }

    /**
     * Setter for SchemaRegistrySettings.
     * @param schemaRegistrySettings Value for SchemaRegistryConfiguration
     */
    @JsonSetter("schema-registry-settings")
    public void setSchemaRegistrySettings(SchemaRegistryConfiguration schemaRegistrySettings) {
        this.schemaRegistrySettings = schemaRegistrySettings;
    }

    /**
     * Getter for Backups.
     * List of backups for the service
     * @return Returns the List of DbaasServiceBackup
     */
    @JsonGetter("backups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasServiceBackup> getBackups() {
        return backups;
    }

    /**
     * Setter for Backups.
     * List of backups for the service
     * @param backups Value for List of DbaasServiceBackup
     */
    @JsonSetter("backups")
    public void setBackups(List<DbaasServiceBackup> backups) {
        this.backups = backups;
    }

    /**
     * Getter for KafkaRestSettings.
     * @return Returns the KafkaRESTConfiguration
     */
    @JsonGetter("kafka-rest-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public KafkaRESTConfiguration getKafkaRestSettings() {
        return kafkaRestSettings;
    }

    /**
     * Setter for KafkaRestSettings.
     * @param kafkaRestSettings Value for KafkaRESTConfiguration
     */
    @JsonSetter("kafka-rest-settings")
    public void setKafkaRestSettings(KafkaRESTConfiguration kafkaRestSettings) {
        this.kafkaRestSettings = kafkaRestSettings;
    }

    /**
     * Getter for TerminationProtection.
     * Service is protected against termination and powering off
     * @return Returns the Boolean
     */
    @JsonGetter("termination-protection")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTerminationProtection() {
        return terminationProtection;
    }

    /**
     * Setter for TerminationProtection.
     * Service is protected against termination and powering off
     * @param terminationProtection Value for Boolean
     */
    @JsonSetter("termination-protection")
    public void setTerminationProtection(Boolean terminationProtection) {
        this.terminationProtection = terminationProtection;
    }

    /**
     * Getter for Notifications.
     * Service notifications
     * @return Returns the List of DbaasServiceNotification
     */
    @JsonGetter("notifications")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasServiceNotification> getNotifications() {
        return notifications;
    }

    /**
     * Setter for Notifications.
     * Service notifications
     * @param notifications Value for List of DbaasServiceNotification
     */
    @JsonSetter("notifications")
    public void setNotifications(List<DbaasServiceNotification> notifications) {
        this.notifications = notifications;
    }

    /**
     * Getter for KafkaConnectSettings.
     * @return Returns the KafkaConnectConfigurationValues
     */
    @JsonGetter("kafka-connect-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public KafkaConnectConfigurationValues getKafkaConnectSettings() {
        return kafkaConnectSettings;
    }

    /**
     * Setter for KafkaConnectSettings.
     * @param kafkaConnectSettings Value for KafkaConnectConfigurationValues
     */
    @JsonSetter("kafka-connect-settings")
    public void setKafkaConnectSettings(KafkaConnectConfigurationValues kafkaConnectSettings) {
        this.kafkaConnectSettings = kafkaConnectSettings;
    }

    /**
     * Getter for Components.
     * Service component information objects
     * @return Returns the List of Component1
     */
    @JsonGetter("components")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Component1> getComponents() {
        return components;
    }

    /**
     * Setter for Components.
     * Service component information objects
     * @param components Value for List of Component1
     */
    @JsonSetter("components")
    public void setComponents(List<Component1> components) {
        this.components = components;
    }

    /**
     * Getter for Maintenance.
     * Automatic maintenance settings
     * @return Returns the DbaasServiceMaintenance
     */
    @JsonGetter("maintenance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DbaasServiceMaintenance getMaintenance() {
        return maintenance;
    }

    /**
     * Setter for Maintenance.
     * Automatic maintenance settings
     * @param maintenance Value for DbaasServiceMaintenance
     */
    @JsonSetter("maintenance")
    public void setMaintenance(DbaasServiceMaintenance maintenance) {
        this.maintenance = maintenance;
    }

    /**
     * Getter for KafkaSettings.
     * @return Returns the KafkaBrokerConfigurationValues
     */
    @JsonGetter("kafka-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public KafkaBrokerConfigurationValues getKafkaSettings() {
        return kafkaSettings;
    }

    /**
     * Setter for KafkaSettings.
     * @param kafkaSettings Value for KafkaBrokerConfigurationValues
     */
    @JsonSetter("kafka-settings")
    public void setKafkaSettings(KafkaBrokerConfigurationValues kafkaSettings) {
        this.kafkaSettings = kafkaSettings;
    }

    /**
     * Getter for DiskSize.
     * TODO UNIT disk space for data storage
     * @return Returns the Long
     */
    @JsonGetter("disk-size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getDiskSize() {
        return diskSize;
    }

    /**
     * Setter for DiskSize.
     * TODO UNIT disk space for data storage
     * @param diskSize Value for Long
     */
    @JsonSetter("disk-size")
    public void setDiskSize(Long diskSize) {
        this.diskSize = diskSize;
    }

    /**
     * Getter for NodeMemory.
     * TODO UNIT of memory for each node
     * @return Returns the Long
     */
    @JsonGetter("node-memory")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNodeMemory() {
        return nodeMemory;
    }

    /**
     * Setter for NodeMemory.
     * TODO UNIT of memory for each node
     * @param nodeMemory Value for Long
     */
    @JsonSetter("node-memory")
    public void setNodeMemory(Long nodeMemory) {
        this.nodeMemory = nodeMemory;
    }

    /**
     * Getter for Uri.
     * URI for connecting to the service (may be absent)
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * URI for connecting to the service (may be absent)
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for UriParams.
     * service_uri parameterized into key-value pairs
     * @return Returns the Object
     */
    @JsonGetter("uri-params")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getUriParams() {
        return uriParams;
    }

    /**
     * Setter for UriParams.
     * service_uri parameterized into key-value pairs
     * @param uriParams Value for Object
     */
    @JsonSetter("uri-params")
    public void setUriParams(Object uriParams) {
        this.uriParams = uriParams;
    }

    /**
     * Getter for SchemaRegistryEnabled.
     * Whether Schema-Registry is enabled
     * @return Returns the Boolean
     */
    @JsonGetter("schema-registry-enabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSchemaRegistryEnabled() {
        return schemaRegistryEnabled;
    }

    /**
     * Setter for SchemaRegistryEnabled.
     * Whether Schema-Registry is enabled
     * @param schemaRegistryEnabled Value for Boolean
     */
    @JsonSetter("schema-registry-enabled")
    public void setSchemaRegistryEnabled(Boolean schemaRegistryEnabled) {
        this.schemaRegistryEnabled = schemaRegistryEnabled;
    }

    /**
     * Getter for Version.
     * Kafka version
     * @return Returns the String
     */
    @JsonGetter("version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVersion() {
        return version;
    }

    /**
     * Setter for Version.
     * Kafka version
     * @param version Value for String
     */
    @JsonSetter("version")
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Getter for CreatedAt.
     * Service creation timestamp (ISO 8601)
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created-at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * Service creation timestamp (ISO 8601)
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created-at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Plan.
     * Subscription plan
     * @return Returns the String
     */
    @JsonGetter("plan")
    public String getPlan() {
        return plan;
    }

    /**
     * Setter for Plan.
     * Subscription plan
     * @param plan Value for String
     */
    @JsonSetter("plan")
    public void setPlan(String plan) {
        this.plan = plan;
    }

    /**
     * Getter for Users.
     * List of service users
     * @return Returns the List of User1
     */
    @JsonGetter("users")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<User1> getUsers() {
        return users;
    }

    /**
     * Setter for Users.
     * List of service users
     * @param users Value for List of User1
     */
    @JsonSetter("users")
    public void setUsers(List<User1> users) {
        this.users = users;
    }

    /**
     * Converts this DbaasServiceKafka into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DbaasServiceKafka [" + "name=" + name + ", type=" + type + ", plan=" + plan
                + ", updatedAt=" + updatedAt + ", authenticationMethods=" + authenticationMethods
                + ", nodeCount=" + nodeCount + ", connectionInfo=" + connectionInfo
                + ", nodeCpuCount=" + nodeCpuCount + ", kafkaRestEnabled=" + kafkaRestEnabled
                + ", integrations=" + integrations + ", zone=" + zone + ", nodeStates=" + nodeStates
                + ", kafkaConnectEnabled=" + kafkaConnectEnabled + ", state=" + state
                + ", ipFilter=" + ipFilter + ", schemaRegistrySettings=" + schemaRegistrySettings
                + ", backups=" + backups + ", kafkaRestSettings=" + kafkaRestSettings
                + ", terminationProtection=" + terminationProtection + ", notifications="
                + notifications + ", kafkaConnectSettings=" + kafkaConnectSettings + ", components="
                + components + ", maintenance=" + maintenance + ", kafkaSettings=" + kafkaSettings
                + ", diskSize=" + diskSize + ", nodeMemory=" + nodeMemory + ", uri=" + uri
                + ", uriParams=" + uriParams + ", schemaRegistryEnabled=" + schemaRegistryEnabled
                + ", version=" + version + ", createdAt=" + createdAt + ", users=" + users + "]";
    }

    /**
     * Builds a new {@link DbaasServiceKafka.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DbaasServiceKafka.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(name, type, plan)
                .updatedAt(getUpdatedAt())
                .authenticationMethods(getAuthenticationMethods())
                .nodeCount(getNodeCount())
                .connectionInfo(getConnectionInfo())
                .nodeCpuCount(getNodeCpuCount())
                .kafkaRestEnabled(getKafkaRestEnabled())
                .integrations(getIntegrations())
                .zone(getZone())
                .nodeStates(getNodeStates())
                .kafkaConnectEnabled(getKafkaConnectEnabled())
                .state(getState())
                .ipFilter(getIpFilter())
                .schemaRegistrySettings(getSchemaRegistrySettings())
                .backups(getBackups())
                .kafkaRestSettings(getKafkaRestSettings())
                .terminationProtection(getTerminationProtection())
                .notifications(getNotifications())
                .kafkaConnectSettings(getKafkaConnectSettings())
                .components(getComponents())
                .maintenance(getMaintenance())
                .kafkaSettings(getKafkaSettings())
                .diskSize(getDiskSize())
                .nodeMemory(getNodeMemory())
                .uri(getUri())
                .uriParams(getUriParams())
                .schemaRegistryEnabled(getSchemaRegistryEnabled())
                .version(getVersion())
                .createdAt(getCreatedAt())
                .users(getUsers());
        return builder;
    }

    /**
     * Class to build instances of {@link DbaasServiceKafka}.
     */
    public static class Builder {
        private String name;
        private String type;
        private String plan;
        private LocalDateTime updatedAt;
        private AuthenticationMethods authenticationMethods;
        private Long nodeCount;
        private ConnectionInfo1 connectionInfo;
        private Long nodeCpuCount;
        private Boolean kafkaRestEnabled;
        private List<DbaasIntegration> integrations;
        private String zone;
        private List<DbaasNodeState> nodeStates;
        private Boolean kafkaConnectEnabled;
        private EnumServiceStateEnum state;
        private List<String> ipFilter;
        private SchemaRegistryConfiguration schemaRegistrySettings;
        private List<DbaasServiceBackup> backups;
        private KafkaRESTConfiguration kafkaRestSettings;
        private Boolean terminationProtection;
        private List<DbaasServiceNotification> notifications;
        private KafkaConnectConfigurationValues kafkaConnectSettings;
        private List<Component1> components;
        private DbaasServiceMaintenance maintenance;
        private KafkaBrokerConfigurationValues kafkaSettings;
        private Long diskSize;
        private Long nodeMemory;
        private String uri;
        private Object uriParams;
        private Boolean schemaRegistryEnabled;
        private String version;
        private LocalDateTime createdAt;
        private List<User1> users;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  name  String value for name.
         * @param  type  String value for type.
         * @param  plan  String value for plan.
         */
        public Builder(String name, String type, String plan) {
            this.name = name;
            this.type = type;
            this.plan = plan;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for plan.
         * @param  plan  String value for plan.
         * @return Builder
         */
        public Builder plan(String plan) {
            this.plan = plan;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for authenticationMethods.
         * @param  authenticationMethods  AuthenticationMethods value for authenticationMethods.
         * @return Builder
         */
        public Builder authenticationMethods(AuthenticationMethods authenticationMethods) {
            this.authenticationMethods = authenticationMethods;
            return this;
        }

        /**
         * Setter for nodeCount.
         * @param  nodeCount  Long value for nodeCount.
         * @return Builder
         */
        public Builder nodeCount(Long nodeCount) {
            this.nodeCount = nodeCount;
            return this;
        }

        /**
         * Setter for connectionInfo.
         * @param  connectionInfo  ConnectionInfo1 value for connectionInfo.
         * @return Builder
         */
        public Builder connectionInfo(ConnectionInfo1 connectionInfo) {
            this.connectionInfo = connectionInfo;
            return this;
        }

        /**
         * Setter for nodeCpuCount.
         * @param  nodeCpuCount  Long value for nodeCpuCount.
         * @return Builder
         */
        public Builder nodeCpuCount(Long nodeCpuCount) {
            this.nodeCpuCount = nodeCpuCount;
            return this;
        }

        /**
         * Setter for kafkaRestEnabled.
         * @param  kafkaRestEnabled  Boolean value for kafkaRestEnabled.
         * @return Builder
         */
        public Builder kafkaRestEnabled(Boolean kafkaRestEnabled) {
            this.kafkaRestEnabled = kafkaRestEnabled;
            return this;
        }

        /**
         * Setter for integrations.
         * @param  integrations  List of DbaasIntegration value for integrations.
         * @return Builder
         */
        public Builder integrations(List<DbaasIntegration> integrations) {
            this.integrations = integrations;
            return this;
        }

        /**
         * Setter for zone.
         * @param  zone  String value for zone.
         * @return Builder
         */
        public Builder zone(String zone) {
            this.zone = zone;
            return this;
        }

        /**
         * Setter for nodeStates.
         * @param  nodeStates  List of DbaasNodeState value for nodeStates.
         * @return Builder
         */
        public Builder nodeStates(List<DbaasNodeState> nodeStates) {
            this.nodeStates = nodeStates;
            return this;
        }

        /**
         * Setter for kafkaConnectEnabled.
         * @param  kafkaConnectEnabled  Boolean value for kafkaConnectEnabled.
         * @return Builder
         */
        public Builder kafkaConnectEnabled(Boolean kafkaConnectEnabled) {
            this.kafkaConnectEnabled = kafkaConnectEnabled;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  EnumServiceStateEnum value for state.
         * @return Builder
         */
        public Builder state(EnumServiceStateEnum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for ipFilter.
         * @param  ipFilter  List of String value for ipFilter.
         * @return Builder
         */
        public Builder ipFilter(List<String> ipFilter) {
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * Setter for schemaRegistrySettings.
         * @param  schemaRegistrySettings  SchemaRegistryConfiguration value for
         *         schemaRegistrySettings.
         * @return Builder
         */
        public Builder schemaRegistrySettings(
                SchemaRegistryConfiguration schemaRegistrySettings) {
            this.schemaRegistrySettings = schemaRegistrySettings;
            return this;
        }

        /**
         * Setter for backups.
         * @param  backups  List of DbaasServiceBackup value for backups.
         * @return Builder
         */
        public Builder backups(List<DbaasServiceBackup> backups) {
            this.backups = backups;
            return this;
        }

        /**
         * Setter for kafkaRestSettings.
         * @param  kafkaRestSettings  KafkaRESTConfiguration value for kafkaRestSettings.
         * @return Builder
         */
        public Builder kafkaRestSettings(KafkaRESTConfiguration kafkaRestSettings) {
            this.kafkaRestSettings = kafkaRestSettings;
            return this;
        }

        /**
         * Setter for terminationProtection.
         * @param  terminationProtection  Boolean value for terminationProtection.
         * @return Builder
         */
        public Builder terminationProtection(Boolean terminationProtection) {
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Setter for notifications.
         * @param  notifications  List of DbaasServiceNotification value for notifications.
         * @return Builder
         */
        public Builder notifications(List<DbaasServiceNotification> notifications) {
            this.notifications = notifications;
            return this;
        }

        /**
         * Setter for kafkaConnectSettings.
         * @param  kafkaConnectSettings  KafkaConnectConfigurationValues value for
         *         kafkaConnectSettings.
         * @return Builder
         */
        public Builder kafkaConnectSettings(
                KafkaConnectConfigurationValues kafkaConnectSettings) {
            this.kafkaConnectSettings = kafkaConnectSettings;
            return this;
        }

        /**
         * Setter for components.
         * @param  components  List of Component1 value for components.
         * @return Builder
         */
        public Builder components(List<Component1> components) {
            this.components = components;
            return this;
        }

        /**
         * Setter for maintenance.
         * @param  maintenance  DbaasServiceMaintenance value for maintenance.
         * @return Builder
         */
        public Builder maintenance(DbaasServiceMaintenance maintenance) {
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Setter for kafkaSettings.
         * @param  kafkaSettings  KafkaBrokerConfigurationValues value for kafkaSettings.
         * @return Builder
         */
        public Builder kafkaSettings(KafkaBrokerConfigurationValues kafkaSettings) {
            this.kafkaSettings = kafkaSettings;
            return this;
        }

        /**
         * Setter for diskSize.
         * @param  diskSize  Long value for diskSize.
         * @return Builder
         */
        public Builder diskSize(Long diskSize) {
            this.diskSize = diskSize;
            return this;
        }

        /**
         * Setter for nodeMemory.
         * @param  nodeMemory  Long value for nodeMemory.
         * @return Builder
         */
        public Builder nodeMemory(Long nodeMemory) {
            this.nodeMemory = nodeMemory;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for uriParams.
         * @param  uriParams  Object value for uriParams.
         * @return Builder
         */
        public Builder uriParams(Object uriParams) {
            this.uriParams = uriParams;
            return this;
        }

        /**
         * Setter for schemaRegistryEnabled.
         * @param  schemaRegistryEnabled  Boolean value for schemaRegistryEnabled.
         * @return Builder
         */
        public Builder schemaRegistryEnabled(Boolean schemaRegistryEnabled) {
            this.schemaRegistryEnabled = schemaRegistryEnabled;
            return this;
        }

        /**
         * Setter for version.
         * @param  version  String value for version.
         * @return Builder
         */
        public Builder version(String version) {
            this.version = version;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for users.
         * @param  users  List of User1 value for users.
         * @return Builder
         */
        public Builder users(List<User1> users) {
            this.users = users;
            return this;
        }

        /**
         * Builds a new {@link DbaasServiceKafka} object using the set fields.
         * @return {@link DbaasServiceKafka}
         */
        public DbaasServiceKafka build() {
            return new DbaasServiceKafka(name, type, plan, updatedAt, authenticationMethods,
                    nodeCount, connectionInfo, nodeCpuCount, kafkaRestEnabled, integrations, zone,
                    nodeStates, kafkaConnectEnabled, state, ipFilter, schemaRegistrySettings,
                    backups, kafkaRestSettings, terminationProtection, notifications,
                    kafkaConnectSettings, components, maintenance, kafkaSettings, diskSize,
                    nodeMemory, uri, uriParams, schemaRegistryEnabled, version, createdAt, users);
        }
    }
}
