/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * JsonSchemaMysql
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class JsonSchemaMysql {
  @JsonProperty("net_write_timeout")
  private Integer netWriteTimeout = null;

  /**
   * The storage engine for in-memory internal temporary tables.
   */
  public enum InternalTmpMemStorageEngineEnum {
    TEMPTABLE("TempTable"),
    MEMORY("MEMORY");

    private String value;

    InternalTmpMemStorageEngineEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static InternalTmpMemStorageEngineEnum fromValue(String input) {
      for (InternalTmpMemStorageEngineEnum b : InternalTmpMemStorageEngineEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("internal_tmp_mem_storage_engine")
  private InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine = null;

  @JsonProperty("sql_mode")
  private String sqlMode = null;

  @JsonProperty("information_schema_stats_expiry")
  private Integer informationSchemaStatsExpiry = null;

  @JsonProperty("sort_buffer_size")
  private Integer sortBufferSize = null;

  @JsonProperty("innodb_thread_concurrency")
  private Integer innodbThreadConcurrency = null;

  @JsonProperty("innodb_write_io_threads")
  private Integer innodbWriteIoThreads = null;

  @JsonProperty("innodb_ft_min_token_size")
  private Integer innodbFtMinTokenSize = null;

  @JsonProperty("innodb_change_buffer_max_size")
  private Integer innodbChangeBufferMaxSize = null;

  @JsonProperty("innodb_flush_neighbors")
  private Integer innodbFlushNeighbors = null;

  @JsonProperty("tmp_table_size")
  private Integer tmpTableSize = null;

  @JsonProperty("slow_query_log")
  private Boolean slowQueryLog = null;

  @JsonProperty("connect_timeout")
  private Integer connectTimeout = null;

  @JsonProperty("net_read_timeout")
  private Integer netReadTimeout = null;

  @JsonProperty("innodb_lock_wait_timeout")
  private Integer innodbLockWaitTimeout = null;

  @JsonProperty("wait_timeout")
  private Integer waitTimeout = null;

  @JsonProperty("innodb_rollback_on_timeout")
  private Boolean innodbRollbackOnTimeout = null;

  @JsonProperty("group_concat_max_len")
  private Integer groupConcatMaxLen = null;

  @JsonProperty("net_buffer_length")
  private Integer netBufferLength = null;

  @JsonProperty("innodb_print_all_deadlocks")
  private Boolean innodbPrintAllDeadlocks = null;

  @JsonProperty("innodb_online_alter_log_max_size")
  private Integer innodbOnlineAlterLogMaxSize = null;

  @JsonProperty("interactive_timeout")
  private Integer interactiveTimeout = null;

  @JsonProperty("innodb_log_buffer_size")
  private Integer innodbLogBufferSize = null;

  @JsonProperty("max_allowed_packet")
  private Integer maxAllowedPacket = null;

  @JsonProperty("max_heap_table_size")
  private Integer maxHeapTableSize = null;

  @JsonProperty("innodb_ft_server_stopword_table")
  private String innodbFtServerStopwordTable = null;

  @JsonProperty("innodb_read_io_threads")
  private Integer innodbReadIoThreads = null;

  @JsonProperty("sql_require_primary_key")
  private Boolean sqlRequirePrimaryKey = null;

  @JsonProperty("default_time_zone")
  private String defaultTimeZone = null;

  @JsonProperty("long_query_time")
  private BigDecimal longQueryTime = null;

  public JsonSchemaMysql netWriteTimeout(Integer netWriteTimeout) {
    this.netWriteTimeout = netWriteTimeout;
    return this;
  }

   /**
   * The number of seconds to wait for a block to be written to a connection before aborting the write.
   * minimum: 1
   * maximum: 3600
   * @return netWriteTimeout
  **/
  @Schema(example = "30", description = "The number of seconds to wait for a block to be written to a connection before aborting the write.")
  public Integer getNetWriteTimeout() {
    return netWriteTimeout;
  }

  public void setNetWriteTimeout(Integer netWriteTimeout) {
    this.netWriteTimeout = netWriteTimeout;
  }

  public JsonSchemaMysql internalTmpMemStorageEngine(InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine) {
    this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
    return this;
  }

   /**
   * The storage engine for in-memory internal temporary tables.
   * @return internalTmpMemStorageEngine
  **/
  @Schema(example = "TempTable", description = "The storage engine for in-memory internal temporary tables.")
  public InternalTmpMemStorageEngineEnum getInternalTmpMemStorageEngine() {
    return internalTmpMemStorageEngine;
  }

  public void setInternalTmpMemStorageEngine(InternalTmpMemStorageEngineEnum internalTmpMemStorageEngine) {
    this.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
  }

  public JsonSchemaMysql sqlMode(String sqlMode) {
    this.sqlMode = sqlMode;
    return this;
  }

   /**
   * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
   * @return sqlMode
  **/
  @Schema(example = "ANSI,TRADITIONAL", description = "Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.")
  public String getSqlMode() {
    return sqlMode;
  }

  public void setSqlMode(String sqlMode) {
    this.sqlMode = sqlMode;
  }

  public JsonSchemaMysql informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
    this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
    return this;
  }

   /**
   * The time, in seconds, before cached statistics expire
   * minimum: 900
   * maximum: 31536000
   * @return informationSchemaStatsExpiry
  **/
  @Schema(example = "86400", description = "The time, in seconds, before cached statistics expire")
  public Integer getInformationSchemaStatsExpiry() {
    return informationSchemaStatsExpiry;
  }

  public void setInformationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
    this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
  }

  public JsonSchemaMysql sortBufferSize(Integer sortBufferSize) {
    this.sortBufferSize = sortBufferSize;
    return this;
  }

   /**
   * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)
   * minimum: 32768
   * maximum: 1073741824
   * @return sortBufferSize
  **/
  @Schema(example = "262144", description = "Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)")
  public Integer getSortBufferSize() {
    return sortBufferSize;
  }

  public void setSortBufferSize(Integer sortBufferSize) {
    this.sortBufferSize = sortBufferSize;
  }

  public JsonSchemaMysql innodbThreadConcurrency(Integer innodbThreadConcurrency) {
    this.innodbThreadConcurrency = innodbThreadConcurrency;
    return this;
  }

   /**
   * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit)
   * minimum: 0
   * maximum: 1000
   * @return innodbThreadConcurrency
  **/
  @Schema(example = "10", description = "Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit)")
  public Integer getInnodbThreadConcurrency() {
    return innodbThreadConcurrency;
  }

  public void setInnodbThreadConcurrency(Integer innodbThreadConcurrency) {
    this.innodbThreadConcurrency = innodbThreadConcurrency;
  }

  public JsonSchemaMysql innodbWriteIoThreads(Integer innodbWriteIoThreads) {
    this.innodbWriteIoThreads = innodbWriteIoThreads;
    return this;
  }

   /**
   * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
   * minimum: 1
   * maximum: 64
   * @return innodbWriteIoThreads
  **/
  @Schema(example = "10", description = "The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.")
  public Integer getInnodbWriteIoThreads() {
    return innodbWriteIoThreads;
  }

  public void setInnodbWriteIoThreads(Integer innodbWriteIoThreads) {
    this.innodbWriteIoThreads = innodbWriteIoThreads;
  }

  public JsonSchemaMysql innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
    this.innodbFtMinTokenSize = innodbFtMinTokenSize;
    return this;
  }

   /**
   * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
   * minimum: 0
   * maximum: 16
   * @return innodbFtMinTokenSize
  **/
  @Schema(example = "3", description = "Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.")
  public Integer getInnodbFtMinTokenSize() {
    return innodbFtMinTokenSize;
  }

  public void setInnodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
    this.innodbFtMinTokenSize = innodbFtMinTokenSize;
  }

  public JsonSchemaMysql innodbChangeBufferMaxSize(Integer innodbChangeBufferMaxSize) {
    this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
    return this;
  }

   /**
   * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25
   * minimum: 0
   * maximum: 50
   * @return innodbChangeBufferMaxSize
  **/
  @Schema(example = "30", description = "Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25")
  public Integer getInnodbChangeBufferMaxSize() {
    return innodbChangeBufferMaxSize;
  }

  public void setInnodbChangeBufferMaxSize(Integer innodbChangeBufferMaxSize) {
    this.innodbChangeBufferMaxSize = innodbChangeBufferMaxSize;
  }

  public JsonSchemaMysql innodbFlushNeighbors(Integer innodbFlushNeighbors) {
    this.innodbFlushNeighbors = innodbFlushNeighbors;
    return this;
  }

   /**
   * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed,  1 - flush contiguous dirty pages in the same extent,  2 - flush dirty pages in the same extent
   * minimum: 0
   * maximum: 2
   * @return innodbFlushNeighbors
  **/
  @Schema(example = "0", description = "Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed,  1 - flush contiguous dirty pages in the same extent,  2 - flush dirty pages in the same extent")
  public Integer getInnodbFlushNeighbors() {
    return innodbFlushNeighbors;
  }

  public void setInnodbFlushNeighbors(Integer innodbFlushNeighbors) {
    this.innodbFlushNeighbors = innodbFlushNeighbors;
  }

  public JsonSchemaMysql tmpTableSize(Integer tmpTableSize) {
    this.tmpTableSize = tmpTableSize;
    return this;
  }

   /**
   * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M)
   * minimum: 1048576
   * maximum: 1073741824
   * @return tmpTableSize
  **/
  @Schema(example = "16777216", description = "Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M)")
  public Integer getTmpTableSize() {
    return tmpTableSize;
  }

  public void setTmpTableSize(Integer tmpTableSize) {
    this.tmpTableSize = tmpTableSize;
  }

  public JsonSchemaMysql slowQueryLog(Boolean slowQueryLog) {
    this.slowQueryLog = slowQueryLog;
    return this;
  }

   /**
   * Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off
   * @return slowQueryLog
  **/
  @Schema(example = "true", description = "Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off")
  public Boolean isSlowQueryLog() {
    return slowQueryLog;
  }

  public void setSlowQueryLog(Boolean slowQueryLog) {
    this.slowQueryLog = slowQueryLog;
  }

  public JsonSchemaMysql connectTimeout(Integer connectTimeout) {
    this.connectTimeout = connectTimeout;
    return this;
  }

   /**
   * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake
   * minimum: 2
   * maximum: 3600
   * @return connectTimeout
  **/
  @Schema(example = "10", description = "The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake")
  public Integer getConnectTimeout() {
    return connectTimeout;
  }

  public void setConnectTimeout(Integer connectTimeout) {
    this.connectTimeout = connectTimeout;
  }

  public JsonSchemaMysql netReadTimeout(Integer netReadTimeout) {
    this.netReadTimeout = netReadTimeout;
    return this;
  }

   /**
   * The number of seconds to wait for more data from a connection before aborting the read.
   * minimum: 1
   * maximum: 3600
   * @return netReadTimeout
  **/
  @Schema(example = "30", description = "The number of seconds to wait for more data from a connection before aborting the read.")
  public Integer getNetReadTimeout() {
    return netReadTimeout;
  }

  public void setNetReadTimeout(Integer netReadTimeout) {
    this.netReadTimeout = netReadTimeout;
  }

  public JsonSchemaMysql innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
    this.innodbLockWaitTimeout = innodbLockWaitTimeout;
    return this;
  }

   /**
   * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
   * minimum: 1
   * maximum: 3600
   * @return innodbLockWaitTimeout
  **/
  @Schema(example = "50", description = "The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.")
  public Integer getInnodbLockWaitTimeout() {
    return innodbLockWaitTimeout;
  }

  public void setInnodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
    this.innodbLockWaitTimeout = innodbLockWaitTimeout;
  }

  public JsonSchemaMysql waitTimeout(Integer waitTimeout) {
    this.waitTimeout = waitTimeout;
    return this;
  }

   /**
   * The number of seconds the server waits for activity on a noninteractive connection before closing it.
   * minimum: 1
   * maximum: 2147483
   * @return waitTimeout
  **/
  @Schema(example = "28800", description = "The number of seconds the server waits for activity on a noninteractive connection before closing it.")
  public Integer getWaitTimeout() {
    return waitTimeout;
  }

  public void setWaitTimeout(Integer waitTimeout) {
    this.waitTimeout = waitTimeout;
  }

  public JsonSchemaMysql innodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
    this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
    return this;
  }

   /**
   * When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
   * @return innodbRollbackOnTimeout
  **/
  @Schema(example = "true", description = "When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.")
  public Boolean isInnodbRollbackOnTimeout() {
    return innodbRollbackOnTimeout;
  }

  public void setInnodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
    this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
  }

  public JsonSchemaMysql groupConcatMaxLen(Integer groupConcatMaxLen) {
    this.groupConcatMaxLen = groupConcatMaxLen;
    return this;
  }

   /**
   * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
   * minimum: 4
   * maximum: -1
   * @return groupConcatMaxLen
  **/
  @Schema(example = "1024", description = "The maximum permitted result length in bytes for the GROUP_CONCAT() function.")
  public Integer getGroupConcatMaxLen() {
    return groupConcatMaxLen;
  }

  public void setGroupConcatMaxLen(Integer groupConcatMaxLen) {
    this.groupConcatMaxLen = groupConcatMaxLen;
  }

  public JsonSchemaMysql netBufferLength(Integer netBufferLength) {
    this.netBufferLength = netBufferLength;
    return this;
  }

   /**
   * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
   * minimum: 1024
   * maximum: 1048576
   * @return netBufferLength
  **/
  @Schema(example = "16384", description = "Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.")
  public Integer getNetBufferLength() {
    return netBufferLength;
  }

  public void setNetBufferLength(Integer netBufferLength) {
    this.netBufferLength = netBufferLength;
  }

  public JsonSchemaMysql innodbPrintAllDeadlocks(Boolean innodbPrintAllDeadlocks) {
    this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
    return this;
  }

   /**
   * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
   * @return innodbPrintAllDeadlocks
  **/
  @Schema(example = "true", description = "When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.")
  public Boolean isInnodbPrintAllDeadlocks() {
    return innodbPrintAllDeadlocks;
  }

  public void setInnodbPrintAllDeadlocks(Boolean innodbPrintAllDeadlocks) {
    this.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
  }

  public JsonSchemaMysql innodbOnlineAlterLogMaxSize(Integer innodbOnlineAlterLogMaxSize) {
    this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
    return this;
  }

   /**
   * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
   * minimum: 65536
   * maximum: 1099511627776
   * @return innodbOnlineAlterLogMaxSize
  **/
  @Schema(example = "134217728", description = "The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.")
  public Integer getInnodbOnlineAlterLogMaxSize() {
    return innodbOnlineAlterLogMaxSize;
  }

  public void setInnodbOnlineAlterLogMaxSize(Integer innodbOnlineAlterLogMaxSize) {
    this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
  }

  public JsonSchemaMysql interactiveTimeout(Integer interactiveTimeout) {
    this.interactiveTimeout = interactiveTimeout;
    return this;
  }

   /**
   * The number of seconds the server waits for activity on an interactive connection before closing it.
   * minimum: 30
   * maximum: 604800
   * @return interactiveTimeout
  **/
  @Schema(example = "3600", description = "The number of seconds the server waits for activity on an interactive connection before closing it.")
  public Integer getInteractiveTimeout() {
    return interactiveTimeout;
  }

  public void setInteractiveTimeout(Integer interactiveTimeout) {
    this.interactiveTimeout = interactiveTimeout;
  }

  public JsonSchemaMysql innodbLogBufferSize(Integer innodbLogBufferSize) {
    this.innodbLogBufferSize = innodbLogBufferSize;
    return this;
  }

   /**
   * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
   * minimum: 1048576
   * maximum: 4294967295
   * @return innodbLogBufferSize
  **/
  @Schema(example = "16777216", description = "The size in bytes of the buffer that InnoDB uses to write to the log files on disk.")
  public Integer getInnodbLogBufferSize() {
    return innodbLogBufferSize;
  }

  public void setInnodbLogBufferSize(Integer innodbLogBufferSize) {
    this.innodbLogBufferSize = innodbLogBufferSize;
  }

  public JsonSchemaMysql maxAllowedPacket(Integer maxAllowedPacket) {
    this.maxAllowedPacket = maxAllowedPacket;
    return this;
  }

   /**
   * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M)
   * minimum: 102400
   * maximum: 1073741824
   * @return maxAllowedPacket
  **/
  @Schema(example = "67108864", description = "Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M)")
  public Integer getMaxAllowedPacket() {
    return maxAllowedPacket;
  }

  public void setMaxAllowedPacket(Integer maxAllowedPacket) {
    this.maxAllowedPacket = maxAllowedPacket;
  }

  public JsonSchemaMysql maxHeapTableSize(Integer maxHeapTableSize) {
    this.maxHeapTableSize = maxHeapTableSize;
    return this;
  }

   /**
   * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
   * minimum: 1048576
   * maximum: 1073741824
   * @return maxHeapTableSize
  **/
  @Schema(example = "16777216", description = "Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)")
  public Integer getMaxHeapTableSize() {
    return maxHeapTableSize;
  }

  public void setMaxHeapTableSize(Integer maxHeapTableSize) {
    this.maxHeapTableSize = maxHeapTableSize;
  }

  public JsonSchemaMysql innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
    this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
    return this;
  }

   /**
   * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
   * @return innodbFtServerStopwordTable
  **/
  @Schema(example = "db_name/table_name", description = "This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.")
  public String getInnodbFtServerStopwordTable() {
    return innodbFtServerStopwordTable;
  }

  public void setInnodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
    this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
  }

  public JsonSchemaMysql innodbReadIoThreads(Integer innodbReadIoThreads) {
    this.innodbReadIoThreads = innodbReadIoThreads;
    return this;
  }

   /**
   * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
   * minimum: 1
   * maximum: 64
   * @return innodbReadIoThreads
  **/
  @Schema(example = "10", description = "The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.")
  public Integer getInnodbReadIoThreads() {
    return innodbReadIoThreads;
  }

  public void setInnodbReadIoThreads(Integer innodbReadIoThreads) {
    this.innodbReadIoThreads = innodbReadIoThreads;
  }

  public JsonSchemaMysql sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
    this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
    return this;
  }

   /**
   * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
   * @return sqlRequirePrimaryKey
  **/
  @Schema(example = "true", description = "Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.")
  public Boolean isSqlRequirePrimaryKey() {
    return sqlRequirePrimaryKey;
  }

  public void setSqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
    this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
  }

  public JsonSchemaMysql defaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
    return this;
  }

   /**
   * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or &#x27;SYSTEM&#x27; to use the MySQL server default.
   * @return defaultTimeZone
  **/
  @Schema(example = "+03:00", description = "Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.")
  public String getDefaultTimeZone() {
    return defaultTimeZone;
  }

  public void setDefaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
  }

  public JsonSchemaMysql longQueryTime(BigDecimal longQueryTime) {
    this.longQueryTime = longQueryTime;
    return this;
  }

   /**
   * The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s
   * minimum: 0
   * maximum: 3600
   * @return longQueryTime
  **/
  @Schema(example = "10", description = "The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s")
  public BigDecimal getLongQueryTime() {
    return longQueryTime;
  }

  public void setLongQueryTime(BigDecimal longQueryTime) {
    this.longQueryTime = longQueryTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchemaMysql jsonSchemaMysql = (JsonSchemaMysql) o;
    return Objects.equals(this.netWriteTimeout, jsonSchemaMysql.netWriteTimeout) &&
        Objects.equals(this.internalTmpMemStorageEngine, jsonSchemaMysql.internalTmpMemStorageEngine) &&
        Objects.equals(this.sqlMode, jsonSchemaMysql.sqlMode) &&
        Objects.equals(this.informationSchemaStatsExpiry, jsonSchemaMysql.informationSchemaStatsExpiry) &&
        Objects.equals(this.sortBufferSize, jsonSchemaMysql.sortBufferSize) &&
        Objects.equals(this.innodbThreadConcurrency, jsonSchemaMysql.innodbThreadConcurrency) &&
        Objects.equals(this.innodbWriteIoThreads, jsonSchemaMysql.innodbWriteIoThreads) &&
        Objects.equals(this.innodbFtMinTokenSize, jsonSchemaMysql.innodbFtMinTokenSize) &&
        Objects.equals(this.innodbChangeBufferMaxSize, jsonSchemaMysql.innodbChangeBufferMaxSize) &&
        Objects.equals(this.innodbFlushNeighbors, jsonSchemaMysql.innodbFlushNeighbors) &&
        Objects.equals(this.tmpTableSize, jsonSchemaMysql.tmpTableSize) &&
        Objects.equals(this.slowQueryLog, jsonSchemaMysql.slowQueryLog) &&
        Objects.equals(this.connectTimeout, jsonSchemaMysql.connectTimeout) &&
        Objects.equals(this.netReadTimeout, jsonSchemaMysql.netReadTimeout) &&
        Objects.equals(this.innodbLockWaitTimeout, jsonSchemaMysql.innodbLockWaitTimeout) &&
        Objects.equals(this.waitTimeout, jsonSchemaMysql.waitTimeout) &&
        Objects.equals(this.innodbRollbackOnTimeout, jsonSchemaMysql.innodbRollbackOnTimeout) &&
        Objects.equals(this.groupConcatMaxLen, jsonSchemaMysql.groupConcatMaxLen) &&
        Objects.equals(this.netBufferLength, jsonSchemaMysql.netBufferLength) &&
        Objects.equals(this.innodbPrintAllDeadlocks, jsonSchemaMysql.innodbPrintAllDeadlocks) &&
        Objects.equals(this.innodbOnlineAlterLogMaxSize, jsonSchemaMysql.innodbOnlineAlterLogMaxSize) &&
        Objects.equals(this.interactiveTimeout, jsonSchemaMysql.interactiveTimeout) &&
        Objects.equals(this.innodbLogBufferSize, jsonSchemaMysql.innodbLogBufferSize) &&
        Objects.equals(this.maxAllowedPacket, jsonSchemaMysql.maxAllowedPacket) &&
        Objects.equals(this.maxHeapTableSize, jsonSchemaMysql.maxHeapTableSize) &&
        Objects.equals(this.innodbFtServerStopwordTable, jsonSchemaMysql.innodbFtServerStopwordTable) &&
        Objects.equals(this.innodbReadIoThreads, jsonSchemaMysql.innodbReadIoThreads) &&
        Objects.equals(this.sqlRequirePrimaryKey, jsonSchemaMysql.sqlRequirePrimaryKey) &&
        Objects.equals(this.defaultTimeZone, jsonSchemaMysql.defaultTimeZone) &&
        Objects.equals(this.longQueryTime, jsonSchemaMysql.longQueryTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(netWriteTimeout, internalTmpMemStorageEngine, sqlMode, informationSchemaStatsExpiry, sortBufferSize, innodbThreadConcurrency, innodbWriteIoThreads, innodbFtMinTokenSize, innodbChangeBufferMaxSize, innodbFlushNeighbors, tmpTableSize, slowQueryLog, connectTimeout, netReadTimeout, innodbLockWaitTimeout, waitTimeout, innodbRollbackOnTimeout, groupConcatMaxLen, netBufferLength, innodbPrintAllDeadlocks, innodbOnlineAlterLogMaxSize, interactiveTimeout, innodbLogBufferSize, maxAllowedPacket, maxHeapTableSize, innodbFtServerStopwordTable, innodbReadIoThreads, sqlRequirePrimaryKey, defaultTimeZone, longQueryTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchemaMysql {\n");
    
    sb.append("    netWriteTimeout: ").append(toIndentedString(netWriteTimeout)).append("\n");
    sb.append("    internalTmpMemStorageEngine: ").append(toIndentedString(internalTmpMemStorageEngine)).append("\n");
    sb.append("    sqlMode: ").append(toIndentedString(sqlMode)).append("\n");
    sb.append("    informationSchemaStatsExpiry: ").append(toIndentedString(informationSchemaStatsExpiry)).append("\n");
    sb.append("    sortBufferSize: ").append(toIndentedString(sortBufferSize)).append("\n");
    sb.append("    innodbThreadConcurrency: ").append(toIndentedString(innodbThreadConcurrency)).append("\n");
    sb.append("    innodbWriteIoThreads: ").append(toIndentedString(innodbWriteIoThreads)).append("\n");
    sb.append("    innodbFtMinTokenSize: ").append(toIndentedString(innodbFtMinTokenSize)).append("\n");
    sb.append("    innodbChangeBufferMaxSize: ").append(toIndentedString(innodbChangeBufferMaxSize)).append("\n");
    sb.append("    innodbFlushNeighbors: ").append(toIndentedString(innodbFlushNeighbors)).append("\n");
    sb.append("    tmpTableSize: ").append(toIndentedString(tmpTableSize)).append("\n");
    sb.append("    slowQueryLog: ").append(toIndentedString(slowQueryLog)).append("\n");
    sb.append("    connectTimeout: ").append(toIndentedString(connectTimeout)).append("\n");
    sb.append("    netReadTimeout: ").append(toIndentedString(netReadTimeout)).append("\n");
    sb.append("    innodbLockWaitTimeout: ").append(toIndentedString(innodbLockWaitTimeout)).append("\n");
    sb.append("    waitTimeout: ").append(toIndentedString(waitTimeout)).append("\n");
    sb.append("    innodbRollbackOnTimeout: ").append(toIndentedString(innodbRollbackOnTimeout)).append("\n");
    sb.append("    groupConcatMaxLen: ").append(toIndentedString(groupConcatMaxLen)).append("\n");
    sb.append("    netBufferLength: ").append(toIndentedString(netBufferLength)).append("\n");
    sb.append("    innodbPrintAllDeadlocks: ").append(toIndentedString(innodbPrintAllDeadlocks)).append("\n");
    sb.append("    innodbOnlineAlterLogMaxSize: ").append(toIndentedString(innodbOnlineAlterLogMaxSize)).append("\n");
    sb.append("    interactiveTimeout: ").append(toIndentedString(interactiveTimeout)).append("\n");
    sb.append("    innodbLogBufferSize: ").append(toIndentedString(innodbLogBufferSize)).append("\n");
    sb.append("    maxAllowedPacket: ").append(toIndentedString(maxAllowedPacket)).append("\n");
    sb.append("    maxHeapTableSize: ").append(toIndentedString(maxHeapTableSize)).append("\n");
    sb.append("    innodbFtServerStopwordTable: ").append(toIndentedString(innodbFtServerStopwordTable)).append("\n");
    sb.append("    innodbReadIoThreads: ").append(toIndentedString(innodbReadIoThreads)).append("\n");
    sb.append("    sqlRequirePrimaryKey: ").append(toIndentedString(sqlRequirePrimaryKey)).append("\n");
    sb.append("    defaultTimeZone: ").append(toIndentedString(defaultTimeZone)).append("\n");
    sb.append("    longQueryTime: ").append(toIndentedString(longQueryTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
