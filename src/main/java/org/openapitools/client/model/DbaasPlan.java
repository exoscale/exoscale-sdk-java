/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DbaasBackupConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DBaaS plan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasPlan {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_COUNT = "node-count";
  @SerializedName(SERIALIZED_NAME_NODE_COUNT)
  private Long nodeCount;

  public static final String SERIALIZED_NAME_NODE_CPU_COUNT = "node-cpu-count";
  @SerializedName(SERIALIZED_NAME_NODE_CPU_COUNT)
  private Long nodeCpuCount;

  public static final String SERIALIZED_NAME_DISK_SPACE = "disk-space";
  @SerializedName(SERIALIZED_NAME_DISK_SPACE)
  private Long diskSpace;

  public static final String SERIALIZED_NAME_NODE_MEMORY = "node-memory";
  @SerializedName(SERIALIZED_NAME_NODE_MEMORY)
  private Long nodeMemory;

  public static final String SERIALIZED_NAME_MAX_MEMORY_PERCENT = "max-memory-percent";
  @SerializedName(SERIALIZED_NAME_MAX_MEMORY_PERCENT)
  private Long maxMemoryPercent;

  public static final String SERIALIZED_NAME_BACKUP_CONFIG = "backup-config";
  @SerializedName(SERIALIZED_NAME_BACKUP_CONFIG)
  private DbaasBackupConfig backupConfig;

  public static final String SERIALIZED_NAME_AUTHORIZED = "authorized";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED)
  private Boolean authorized;

  public DbaasPlan() {
  }

  public DbaasPlan(
     String name, 
     Long nodeCount, 
     Long nodeCpuCount, 
     Long diskSpace, 
     Long nodeMemory, 
     Long maxMemoryPercent, 
     Boolean authorized
  ) {
    this();
    this.name = name;
    this.nodeCount = nodeCount;
    this.nodeCpuCount = nodeCpuCount;
    this.diskSpace = diskSpace;
    this.nodeMemory = nodeMemory;
    this.maxMemoryPercent = maxMemoryPercent;
    this.authorized = authorized;
  }

   /**
   * DBaaS plan name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



   /**
   * DBaaS plan node count
   * minimum: 0
   * @return nodeCount
  **/
  @javax.annotation.Nullable
  public Long getNodeCount() {
    return nodeCount;
  }



   /**
   * DBaaS plan CPU count per node
   * minimum: 0
   * @return nodeCpuCount
  **/
  @javax.annotation.Nullable
  public Long getNodeCpuCount() {
    return nodeCpuCount;
  }



   /**
   * DBaaS plan disk space
   * @return diskSpace
  **/
  @javax.annotation.Nullable
  public Long getDiskSpace() {
    return diskSpace;
  }



   /**
   * DBaaS plan memory count per node
   * minimum: 0
   * @return nodeMemory
  **/
  @javax.annotation.Nullable
  public Long getNodeMemory() {
    return nodeMemory;
  }



   /**
   * DBaaS plan max memory allocated percentage
   * minimum: 0
   * @return maxMemoryPercent
  **/
  @javax.annotation.Nullable
  public Long getMaxMemoryPercent() {
    return maxMemoryPercent;
  }



  public DbaasPlan backupConfig(DbaasBackupConfig backupConfig) {
    this.backupConfig = backupConfig;
    return this;
  }

   /**
   * Get backupConfig
   * @return backupConfig
  **/
  @javax.annotation.Nullable
  public DbaasBackupConfig getBackupConfig() {
    return backupConfig;
  }

  public void setBackupConfig(DbaasBackupConfig backupConfig) {
    this.backupConfig = backupConfig;
  }


   /**
   * Requires authorization or publicly available
   * @return authorized
  **/
  @javax.annotation.Nullable
  public Boolean getAuthorized() {
    return authorized;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasPlan dbaasPlan = (DbaasPlan) o;
    return Objects.equals(this.name, dbaasPlan.name) &&
        Objects.equals(this.nodeCount, dbaasPlan.nodeCount) &&
        Objects.equals(this.nodeCpuCount, dbaasPlan.nodeCpuCount) &&
        Objects.equals(this.diskSpace, dbaasPlan.diskSpace) &&
        Objects.equals(this.nodeMemory, dbaasPlan.nodeMemory) &&
        Objects.equals(this.maxMemoryPercent, dbaasPlan.maxMemoryPercent) &&
        Objects.equals(this.backupConfig, dbaasPlan.backupConfig) &&
        Objects.equals(this.authorized, dbaasPlan.authorized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, nodeCount, nodeCpuCount, diskSpace, nodeMemory, maxMemoryPercent, backupConfig, authorized);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasPlan {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    nodeCpuCount: ").append(toIndentedString(nodeCpuCount)).append("\n");
    sb.append("    diskSpace: ").append(toIndentedString(diskSpace)).append("\n");
    sb.append("    nodeMemory: ").append(toIndentedString(nodeMemory)).append("\n");
    sb.append("    maxMemoryPercent: ").append(toIndentedString(maxMemoryPercent)).append("\n");
    sb.append("    backupConfig: ").append(toIndentedString(backupConfig)).append("\n");
    sb.append("    authorized: ").append(toIndentedString(authorized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("node-count");
    openapiFields.add("node-cpu-count");
    openapiFields.add("disk-space");
    openapiFields.add("node-memory");
    openapiFields.add("max-memory-percent");
    openapiFields.add("backup-config");
    openapiFields.add("authorized");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasPlan
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasPlan is not found in the empty JSON string", DbaasPlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasPlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `backup-config`
      if (jsonObj.get("backup-config") != null && !jsonObj.get("backup-config").isJsonNull()) {
        DbaasBackupConfig.validateJsonElement(jsonObj.get("backup-config"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasPlan>() {
           @Override
           public void write(JsonWriter out, DbaasPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasPlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasPlan given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasPlan
  * @throws IOException if the JSON string is invalid with respect to DbaasPlan
  */
  public static DbaasPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasPlan.class);
  }

 /**
  * Convert an instance of DbaasPlan to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

