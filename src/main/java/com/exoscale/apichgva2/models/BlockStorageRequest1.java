/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.Map;

/**
 * This is a model class for BlockStorageRequest1 type.
 */
public class BlockStorageRequest1 {
    private String name;
    private Long size;
    private Map<String, String> labels;
    private BlockStorageSnapshotTarget blockStorageSnapshot;

    /**
     * Default constructor.
     */
    public BlockStorageRequest1() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  size  Long value for size.
     * @param  labels  Map of String, value for labels.
     * @param  blockStorageSnapshot  BlockStorageSnapshotTarget value for blockStorageSnapshot.
     */
    public BlockStorageRequest1(
            String name,
            Long size,
            Map<String, String> labels,
            BlockStorageSnapshotTarget blockStorageSnapshot) {
        this.name = name;
        this.size = size;
        this.labels = labels;
        this.blockStorageSnapshot = blockStorageSnapshot;
    }

    /**
     * Getter for Name.
     * Volume name
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Volume name
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Size.
     * Volume size in GB. When a snapshot ID is supplied, this defaults to the size of the source
     * volume, but can be set to a larger value.
     * @return Returns the Long
     */
    @JsonGetter("size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * Volume size in GB. When a snapshot ID is supplied, this defaults to the size of the source
     * volume, but can be set to a larger value.
     * @param size Value for Long
     */
    @JsonSetter("size")
    public void setSize(Long size) {
        this.size = size;
    }

    /**
     * Getter for Labels.
     * @return Returns the Map of String, String
     */
    @JsonGetter("labels")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getLabels() {
        return labels;
    }

    /**
     * Setter for Labels.
     * @param labels Value for Map of String, String
     */
    @JsonSetter("labels")
    public void setLabels(Map<String, String> labels) {
        this.labels = labels;
    }

    /**
     * Getter for BlockStorageSnapshot.
     * Target block storage snapshot
     * @return Returns the BlockStorageSnapshotTarget
     */
    @JsonGetter("block-storage-snapshot")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public BlockStorageSnapshotTarget getBlockStorageSnapshot() {
        return blockStorageSnapshot;
    }

    /**
     * Setter for BlockStorageSnapshot.
     * Target block storage snapshot
     * @param blockStorageSnapshot Value for BlockStorageSnapshotTarget
     */
    @JsonSetter("block-storage-snapshot")
    public void setBlockStorageSnapshot(BlockStorageSnapshotTarget blockStorageSnapshot) {
        this.blockStorageSnapshot = blockStorageSnapshot;
    }

    /**
     * Converts this BlockStorageRequest1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BlockStorageRequest1 [" + "name=" + name + ", size=" + size + ", labels=" + labels
                + ", blockStorageSnapshot=" + blockStorageSnapshot + "]";
    }

    /**
     * Builds a new {@link BlockStorageRequest1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BlockStorageRequest1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .name(getName())
                .size(getSize())
                .labels(getLabels())
                .blockStorageSnapshot(getBlockStorageSnapshot());
        return builder;
    }

    /**
     * Class to build instances of {@link BlockStorageRequest1}.
     */
    public static class Builder {
        private String name;
        private Long size;
        private Map<String, String> labels;
        private BlockStorageSnapshotTarget blockStorageSnapshot;



        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  Long value for size.
         * @return Builder
         */
        public Builder size(Long size) {
            this.size = size;
            return this;
        }

        /**
         * Setter for labels.
         * @param  labels  Map of String, value for labels.
         * @return Builder
         */
        public Builder labels(Map<String, String> labels) {
            this.labels = labels;
            return this;
        }

        /**
         * Setter for blockStorageSnapshot.
         * @param  blockStorageSnapshot  BlockStorageSnapshotTarget value for blockStorageSnapshot.
         * @return Builder
         */
        public Builder blockStorageSnapshot(BlockStorageSnapshotTarget blockStorageSnapshot) {
            this.blockStorageSnapshot = blockStorageSnapshot;
            return this;
        }

        /**
         * Builds a new {@link BlockStorageRequest1} object using the set fields.
         * @return {@link BlockStorageRequest1}
         */
        public BlockStorageRequest1 build() {
            return new BlockStorageRequest1(name, size, labels, blockStorageSnapshot);
        }
    }
}
