/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class AzureADOAuthIntegration {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_sign_up")
    private Optional<? extends Boolean> allowSignUp;

    @JsonProperty("client_id")
    private String clientId;

    @JsonProperty("client_secret")
    private String clientSecret;

    @JsonProperty("auth_url")
    private String authUrl;

    @JsonProperty("token_url")
    private String tokenUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_groups")
    private Optional<? extends java.util.List<String>> allowedGroups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_domains")
    private Optional<? extends java.util.List<String>> allowedDomains;

    public AzureADOAuthIntegration(
            @JsonProperty("allow_sign_up") Optional<? extends Boolean> allowSignUp,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("auth_url") String authUrl,
            @JsonProperty("token_url") String tokenUrl,
            @JsonProperty("allowed_groups") Optional<? extends java.util.List<String>> allowedGroups,
            @JsonProperty("allowed_domains") Optional<? extends java.util.List<String>> allowedDomains) {
        Utils.checkNotNull(allowSignUp, "allowSignUp");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(authUrl, "authUrl");
        Utils.checkNotNull(tokenUrl, "tokenUrl");
        Utils.checkNotNull(allowedGroups, "allowedGroups");
        Utils.checkNotNull(allowedDomains, "allowedDomains");
        this.allowSignUp = allowSignUp;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.authUrl = authUrl;
        this.tokenUrl = tokenUrl;
        this.allowedGroups = allowedGroups;
        this.allowedDomains = allowedDomains;
    }

    public Optional<? extends Boolean> allowSignUp() {
        return allowSignUp;
    }

    public String clientId() {
        return clientId;
    }

    public String clientSecret() {
        return clientSecret;
    }

    public String authUrl() {
        return authUrl;
    }

    public String tokenUrl() {
        return tokenUrl;
    }

    public Optional<? extends java.util.List<String>> allowedGroups() {
        return allowedGroups;
    }

    public Optional<? extends java.util.List<String>> allowedDomains() {
        return allowedDomains;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AzureADOAuthIntegration withAllowSignUp(boolean allowSignUp) {
        Utils.checkNotNull(allowSignUp, "allowSignUp");
        this.allowSignUp = Optional.ofNullable(allowSignUp);
        return this;
    }

    public AzureADOAuthIntegration withAllowSignUp(Optional<? extends Boolean> allowSignUp) {
        Utils.checkNotNull(allowSignUp, "allowSignUp");
        this.allowSignUp = allowSignUp;
        return this;
    }

    public AzureADOAuthIntegration withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public AzureADOAuthIntegration withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    public AzureADOAuthIntegration withAuthUrl(String authUrl) {
        Utils.checkNotNull(authUrl, "authUrl");
        this.authUrl = authUrl;
        return this;
    }

    public AzureADOAuthIntegration withTokenUrl(String tokenUrl) {
        Utils.checkNotNull(tokenUrl, "tokenUrl");
        this.tokenUrl = tokenUrl;
        return this;
    }

    public AzureADOAuthIntegration withAllowedGroups(java.util.List<String> allowedGroups) {
        Utils.checkNotNull(allowedGroups, "allowedGroups");
        this.allowedGroups = Optional.ofNullable(allowedGroups);
        return this;
    }

    public AzureADOAuthIntegration withAllowedGroups(Optional<? extends java.util.List<String>> allowedGroups) {
        Utils.checkNotNull(allowedGroups, "allowedGroups");
        this.allowedGroups = allowedGroups;
        return this;
    }

    public AzureADOAuthIntegration withAllowedDomains(java.util.List<String> allowedDomains) {
        Utils.checkNotNull(allowedDomains, "allowedDomains");
        this.allowedDomains = Optional.ofNullable(allowedDomains);
        return this;
    }

    public AzureADOAuthIntegration withAllowedDomains(Optional<? extends java.util.List<String>> allowedDomains) {
        Utils.checkNotNull(allowedDomains, "allowedDomains");
        this.allowedDomains = allowedDomains;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AzureADOAuthIntegration other = (AzureADOAuthIntegration) o;
        return 
            java.util.Objects.deepEquals(this.allowSignUp, other.allowSignUp) &&
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.authUrl, other.authUrl) &&
            java.util.Objects.deepEquals(this.tokenUrl, other.tokenUrl) &&
            java.util.Objects.deepEquals(this.allowedGroups, other.allowedGroups) &&
            java.util.Objects.deepEquals(this.allowedDomains, other.allowedDomains);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            allowSignUp,
            clientId,
            clientSecret,
            authUrl,
            tokenUrl,
            allowedGroups,
            allowedDomains);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AzureADOAuthIntegration.class,
                "allowSignUp", allowSignUp,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "authUrl", authUrl,
                "tokenUrl", tokenUrl,
                "allowedGroups", allowedGroups,
                "allowedDomains", allowedDomains);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> allowSignUp = Optional.empty();
 
        private String clientId;
 
        private String clientSecret;
 
        private String authUrl;
 
        private String tokenUrl;
 
        private Optional<? extends java.util.List<String>> allowedGroups = Optional.empty();
 
        private Optional<? extends java.util.List<String>> allowedDomains = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder allowSignUp(boolean allowSignUp) {
            Utils.checkNotNull(allowSignUp, "allowSignUp");
            this.allowSignUp = Optional.ofNullable(allowSignUp);
            return this;
        }

        public Builder allowSignUp(Optional<? extends Boolean> allowSignUp) {
            Utils.checkNotNull(allowSignUp, "allowSignUp");
            this.allowSignUp = allowSignUp;
            return this;
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        public Builder authUrl(String authUrl) {
            Utils.checkNotNull(authUrl, "authUrl");
            this.authUrl = authUrl;
            return this;
        }

        public Builder tokenUrl(String tokenUrl) {
            Utils.checkNotNull(tokenUrl, "tokenUrl");
            this.tokenUrl = tokenUrl;
            return this;
        }

        public Builder allowedGroups(java.util.List<String> allowedGroups) {
            Utils.checkNotNull(allowedGroups, "allowedGroups");
            this.allowedGroups = Optional.ofNullable(allowedGroups);
            return this;
        }

        public Builder allowedGroups(Optional<? extends java.util.List<String>> allowedGroups) {
            Utils.checkNotNull(allowedGroups, "allowedGroups");
            this.allowedGroups = allowedGroups;
            return this;
        }

        public Builder allowedDomains(java.util.List<String> allowedDomains) {
            Utils.checkNotNull(allowedDomains, "allowedDomains");
            this.allowedDomains = Optional.ofNullable(allowedDomains);
            return this;
        }

        public Builder allowedDomains(Optional<? extends java.util.List<String>> allowedDomains) {
            Utils.checkNotNull(allowedDomains, "allowedDomains");
            this.allowedDomains = allowedDomains;
            return this;
        }
        
        public AzureADOAuthIntegration build() {
            return new AzureADOAuthIntegration(
                allowSignUp,
                clientId,
                clientSecret,
                authUrl,
                tokenUrl,
                allowedGroups,
                allowedDomains);
        }
    }
}

