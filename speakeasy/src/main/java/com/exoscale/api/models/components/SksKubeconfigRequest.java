/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * SksKubeconfigRequest - Kubeconfig request for a SKS cluster
 */

public class SksKubeconfigRequest {

    /**
     * Validity in seconds of the Kubeconfig user certificate (default: 30 days)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ttl")
    private Optional<? extends Long> ttl;

    /**
     * User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    private Optional<? extends String> user;

    /**
     * List of roles. The certificate present in the Kubeconfig will have these roles set in the Org field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    private Optional<? extends java.util.List<String>> groups;

    public SksKubeconfigRequest(
            @JsonProperty("ttl") Optional<? extends Long> ttl,
            @JsonProperty("user") Optional<? extends String> user,
            @JsonProperty("groups") Optional<? extends java.util.List<String>> groups) {
        Utils.checkNotNull(ttl, "ttl");
        Utils.checkNotNull(user, "user");
        Utils.checkNotNull(groups, "groups");
        this.ttl = ttl;
        this.user = user;
        this.groups = groups;
    }

    /**
     * Validity in seconds of the Kubeconfig user certificate (default: 30 days)
     */
    public Optional<? extends Long> ttl() {
        return ttl;
    }

    /**
     * User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN field.
     */
    public Optional<? extends String> user() {
        return user;
    }

    /**
     * List of roles. The certificate present in the Kubeconfig will have these roles set in the Org field.
     */
    public Optional<? extends java.util.List<String>> groups() {
        return groups;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Validity in seconds of the Kubeconfig user certificate (default: 30 days)
     */
    public SksKubeconfigRequest withTtl(long ttl) {
        Utils.checkNotNull(ttl, "ttl");
        this.ttl = Optional.ofNullable(ttl);
        return this;
    }

    /**
     * Validity in seconds of the Kubeconfig user certificate (default: 30 days)
     */
    public SksKubeconfigRequest withTtl(Optional<? extends Long> ttl) {
        Utils.checkNotNull(ttl, "ttl");
        this.ttl = ttl;
        return this;
    }

    /**
     * User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN field.
     */
    public SksKubeconfigRequest withUser(String user) {
        Utils.checkNotNull(user, "user");
        this.user = Optional.ofNullable(user);
        return this;
    }

    /**
     * User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN field.
     */
    public SksKubeconfigRequest withUser(Optional<? extends String> user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }

    /**
     * List of roles. The certificate present in the Kubeconfig will have these roles set in the Org field.
     */
    public SksKubeconfigRequest withGroups(java.util.List<String> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = Optional.ofNullable(groups);
        return this;
    }

    /**
     * List of roles. The certificate present in the Kubeconfig will have these roles set in the Org field.
     */
    public SksKubeconfigRequest withGroups(Optional<? extends java.util.List<String>> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = groups;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SksKubeconfigRequest other = (SksKubeconfigRequest) o;
        return 
            java.util.Objects.deepEquals(this.ttl, other.ttl) &&
            java.util.Objects.deepEquals(this.user, other.user) &&
            java.util.Objects.deepEquals(this.groups, other.groups);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            ttl,
            user,
            groups);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SksKubeconfigRequest.class,
                "ttl", ttl,
                "user", user,
                "groups", groups);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> ttl = Optional.empty();
 
        private Optional<? extends String> user = Optional.empty();
 
        private Optional<? extends java.util.List<String>> groups = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Validity in seconds of the Kubeconfig user certificate (default: 30 days)
         */
        public Builder ttl(long ttl) {
            Utils.checkNotNull(ttl, "ttl");
            this.ttl = Optional.ofNullable(ttl);
            return this;
        }

        /**
         * Validity in seconds of the Kubeconfig user certificate (default: 30 days)
         */
        public Builder ttl(Optional<? extends Long> ttl) {
            Utils.checkNotNull(ttl, "ttl");
            this.ttl = ttl;
            return this;
        }

        /**
         * User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN field.
         */
        public Builder user(String user) {
            Utils.checkNotNull(user, "user");
            this.user = Optional.ofNullable(user);
            return this;
        }

        /**
         * User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN field.
         */
        public Builder user(Optional<? extends String> user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }

        /**
         * List of roles. The certificate present in the Kubeconfig will have these roles set in the Org field.
         */
        public Builder groups(java.util.List<String> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = Optional.ofNullable(groups);
            return this;
        }

        /**
         * List of roles. The certificate present in the Kubeconfig will have these roles set in the Org field.
         */
        public Builder groups(Optional<? extends java.util.List<String>> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = groups;
            return this;
        }
        
        public SksKubeconfigRequest build() {
            return new SksKubeconfigRequest(
                ttl,
                user,
                groups);
        }
    }
}

