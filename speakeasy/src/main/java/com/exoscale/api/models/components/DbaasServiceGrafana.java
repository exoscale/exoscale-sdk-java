/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class DbaasServiceGrafana {

    /**
     * DbaaS service description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Service last update timestamp (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated-at")
    private Optional<? extends OffsetDateTime> updatedAt;

    /**
     * Number of service nodes in the active plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-count")
    private Optional<? extends Long> nodeCount;

    /**
     * Grafana connection information properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection-info")
    private Optional<? extends DbaasServiceGrafanaConnectionInfo> connectionInfo;

    /**
     * Number of CPUs for each node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-cpu-count")
    private Optional<? extends Long> nodeCpuCount;

    /**
     * Service integrations
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrations")
    private Optional<? extends java.util.List<DbaasIntegration>> integrations;

    /**
     * The zone where the service is running
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    private Optional<? extends String> zone;

    /**
     * State of individual service nodes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-states")
    private Optional<? extends java.util.List<DbaasNodeState>> nodeStates;

    @JsonProperty("name")
    private String name;

    @JsonProperty("type")
    private String type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends EnumServiceState> state;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grafana-settings")
    private Optional<? extends JsonSchemaGrafana> grafanaSettings;

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip-filter")
    private Optional<? extends java.util.List<String>> ipFilter;

    /**
     * List of backups for the service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backups")
    private Optional<? extends java.util.List<DbaasServiceBackup>> backups;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    /**
     * Service notifications
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifications")
    private Optional<? extends java.util.List<DbaasServiceNotification>> notifications;

    /**
     * Service component information objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("components")
    private Optional<? extends java.util.List<DbaasServiceGrafanaComponents>> components;

    /**
     * Automatic maintenance settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenance")
    private Optional<? extends DbaasServiceMaintenance> maintenance;

    /**
     * TODO UNIT disk space for data storage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disk-size")
    private Optional<? extends Long> diskSize;

    /**
     * TODO UNIT of memory for each node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-memory")
    private Optional<? extends Long> nodeMemory;

    /**
     * URI for connecting to the service (may be absent)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    private Optional<? extends String> uri;

    /**
     * service_uri parameterized into key-value pairs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri-params")
    private Optional<? extends DbaasServiceGrafanaUriParams> uriParams;

    /**
     * Grafana version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    /**
     * Service creation timestamp (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * Subscription plan
     */
    @JsonProperty("plan")
    private String plan;

    /**
     * List of service users
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    private Optional<? extends java.util.List<DbaasServiceGrafanaUsers>> users;

    public DbaasServiceGrafana(
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("updated-at") Optional<? extends OffsetDateTime> updatedAt,
            @JsonProperty("node-count") Optional<? extends Long> nodeCount,
            @JsonProperty("connection-info") Optional<? extends DbaasServiceGrafanaConnectionInfo> connectionInfo,
            @JsonProperty("node-cpu-count") Optional<? extends Long> nodeCpuCount,
            @JsonProperty("integrations") Optional<? extends java.util.List<DbaasIntegration>> integrations,
            @JsonProperty("zone") Optional<? extends String> zone,
            @JsonProperty("node-states") Optional<? extends java.util.List<DbaasNodeState>> nodeStates,
            @JsonProperty("name") String name,
            @JsonProperty("type") String type,
            @JsonProperty("state") Optional<? extends EnumServiceState> state,
            @JsonProperty("grafana-settings") Optional<? extends JsonSchemaGrafana> grafanaSettings,
            @JsonProperty("ip-filter") Optional<? extends java.util.List<String>> ipFilter,
            @JsonProperty("backups") Optional<? extends java.util.List<DbaasServiceBackup>> backups,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("notifications") Optional<? extends java.util.List<DbaasServiceNotification>> notifications,
            @JsonProperty("components") Optional<? extends java.util.List<DbaasServiceGrafanaComponents>> components,
            @JsonProperty("maintenance") Optional<? extends DbaasServiceMaintenance> maintenance,
            @JsonProperty("disk-size") Optional<? extends Long> diskSize,
            @JsonProperty("node-memory") Optional<? extends Long> nodeMemory,
            @JsonProperty("uri") Optional<? extends String> uri,
            @JsonProperty("uri-params") Optional<? extends DbaasServiceGrafanaUriParams> uriParams,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("plan") String plan,
            @JsonProperty("users") Optional<? extends java.util.List<DbaasServiceGrafanaUsers>> users) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(nodeCount, "nodeCount");
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        Utils.checkNotNull(integrations, "integrations");
        Utils.checkNotNull(zone, "zone");
        Utils.checkNotNull(nodeStates, "nodeStates");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(grafanaSettings, "grafanaSettings");
        Utils.checkNotNull(ipFilter, "ipFilter");
        Utils.checkNotNull(backups, "backups");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(notifications, "notifications");
        Utils.checkNotNull(components, "components");
        Utils.checkNotNull(maintenance, "maintenance");
        Utils.checkNotNull(diskSize, "diskSize");
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        Utils.checkNotNull(uri, "uri");
        Utils.checkNotNull(uriParams, "uriParams");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(plan, "plan");
        Utils.checkNotNull(users, "users");
        this.description = description;
        this.updatedAt = updatedAt;
        this.nodeCount = nodeCount;
        this.connectionInfo = connectionInfo;
        this.nodeCpuCount = nodeCpuCount;
        this.integrations = integrations;
        this.zone = zone;
        this.nodeStates = nodeStates;
        this.name = name;
        this.type = type;
        this.state = state;
        this.grafanaSettings = grafanaSettings;
        this.ipFilter = ipFilter;
        this.backups = backups;
        this.terminationProtection = terminationProtection;
        this.notifications = notifications;
        this.components = components;
        this.maintenance = maintenance;
        this.diskSize = diskSize;
        this.nodeMemory = nodeMemory;
        this.uri = uri;
        this.uriParams = uriParams;
        this.version = version;
        this.createdAt = createdAt;
        this.plan = plan;
        this.users = users;
    }

    /**
     * DbaaS service description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public Optional<? extends OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * Number of service nodes in the active plan
     */
    public Optional<? extends Long> nodeCount() {
        return nodeCount;
    }

    /**
     * Grafana connection information properties
     */
    public Optional<? extends DbaasServiceGrafanaConnectionInfo> connectionInfo() {
        return connectionInfo;
    }

    /**
     * Number of CPUs for each node
     */
    public Optional<? extends Long> nodeCpuCount() {
        return nodeCpuCount;
    }

    /**
     * Service integrations
     */
    public Optional<? extends java.util.List<DbaasIntegration>> integrations() {
        return integrations;
    }

    /**
     * The zone where the service is running
     */
    public Optional<? extends String> zone() {
        return zone;
    }

    /**
     * State of individual service nodes
     */
    public Optional<? extends java.util.List<DbaasNodeState>> nodeStates() {
        return nodeStates;
    }

    public String name() {
        return name;
    }

    public String type() {
        return type;
    }

    public Optional<? extends EnumServiceState> state() {
        return state;
    }

    public Optional<? extends JsonSchemaGrafana> grafanaSettings() {
        return grafanaSettings;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public Optional<? extends java.util.List<String>> ipFilter() {
        return ipFilter;
    }

    /**
     * List of backups for the service
     */
    public Optional<? extends java.util.List<DbaasServiceBackup>> backups() {
        return backups;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    /**
     * Service notifications
     */
    public Optional<? extends java.util.List<DbaasServiceNotification>> notifications() {
        return notifications;
    }

    /**
     * Service component information objects
     */
    public Optional<? extends java.util.List<DbaasServiceGrafanaComponents>> components() {
        return components;
    }

    /**
     * Automatic maintenance settings
     */
    public Optional<? extends DbaasServiceMaintenance> maintenance() {
        return maintenance;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public Optional<? extends Long> diskSize() {
        return diskSize;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public Optional<? extends Long> nodeMemory() {
        return nodeMemory;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public Optional<? extends String> uri() {
        return uri;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public Optional<? extends DbaasServiceGrafanaUriParams> uriParams() {
        return uriParams;
    }

    /**
     * Grafana version
     */
    public Optional<? extends String> version() {
        return version;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Subscription plan
     */
    public String plan() {
        return plan;
    }

    /**
     * List of service users
     */
    public Optional<? extends java.util.List<DbaasServiceGrafanaUsers>> users() {
        return users;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * DbaaS service description
     */
    public DbaasServiceGrafana withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * DbaaS service description
     */
    public DbaasServiceGrafana withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public DbaasServiceGrafana withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public DbaasServiceGrafana withUpdatedAt(Optional<? extends OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Number of service nodes in the active plan
     */
    public DbaasServiceGrafana withNodeCount(long nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = Optional.ofNullable(nodeCount);
        return this;
    }

    /**
     * Number of service nodes in the active plan
     */
    public DbaasServiceGrafana withNodeCount(Optional<? extends Long> nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * Grafana connection information properties
     */
    public DbaasServiceGrafana withConnectionInfo(DbaasServiceGrafanaConnectionInfo connectionInfo) {
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        this.connectionInfo = Optional.ofNullable(connectionInfo);
        return this;
    }

    /**
     * Grafana connection information properties
     */
    public DbaasServiceGrafana withConnectionInfo(Optional<? extends DbaasServiceGrafanaConnectionInfo> connectionInfo) {
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        this.connectionInfo = connectionInfo;
        return this;
    }

    /**
     * Number of CPUs for each node
     */
    public DbaasServiceGrafana withNodeCpuCount(long nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
        return this;
    }

    /**
     * Number of CPUs for each node
     */
    public DbaasServiceGrafana withNodeCpuCount(Optional<? extends Long> nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = nodeCpuCount;
        return this;
    }

    /**
     * Service integrations
     */
    public DbaasServiceGrafana withIntegrations(java.util.List<DbaasIntegration> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = Optional.ofNullable(integrations);
        return this;
    }

    /**
     * Service integrations
     */
    public DbaasServiceGrafana withIntegrations(Optional<? extends java.util.List<DbaasIntegration>> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = integrations;
        return this;
    }

    /**
     * The zone where the service is running
     */
    public DbaasServiceGrafana withZone(String zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = Optional.ofNullable(zone);
        return this;
    }

    /**
     * The zone where the service is running
     */
    public DbaasServiceGrafana withZone(Optional<? extends String> zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = zone;
        return this;
    }

    /**
     * State of individual service nodes
     */
    public DbaasServiceGrafana withNodeStates(java.util.List<DbaasNodeState> nodeStates) {
        Utils.checkNotNull(nodeStates, "nodeStates");
        this.nodeStates = Optional.ofNullable(nodeStates);
        return this;
    }

    /**
     * State of individual service nodes
     */
    public DbaasServiceGrafana withNodeStates(Optional<? extends java.util.List<DbaasNodeState>> nodeStates) {
        Utils.checkNotNull(nodeStates, "nodeStates");
        this.nodeStates = nodeStates;
        return this;
    }

    public DbaasServiceGrafana withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public DbaasServiceGrafana withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public DbaasServiceGrafana withState(EnumServiceState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public DbaasServiceGrafana withState(Optional<? extends EnumServiceState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public DbaasServiceGrafana withGrafanaSettings(JsonSchemaGrafana grafanaSettings) {
        Utils.checkNotNull(grafanaSettings, "grafanaSettings");
        this.grafanaSettings = Optional.ofNullable(grafanaSettings);
        return this;
    }

    public DbaasServiceGrafana withGrafanaSettings(Optional<? extends JsonSchemaGrafana> grafanaSettings) {
        Utils.checkNotNull(grafanaSettings, "grafanaSettings");
        this.grafanaSettings = grafanaSettings;
        return this;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public DbaasServiceGrafana withIpFilter(java.util.List<String> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = Optional.ofNullable(ipFilter);
        return this;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public DbaasServiceGrafana withIpFilter(Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = ipFilter;
        return this;
    }

    /**
     * List of backups for the service
     */
    public DbaasServiceGrafana withBackups(java.util.List<DbaasServiceBackup> backups) {
        Utils.checkNotNull(backups, "backups");
        this.backups = Optional.ofNullable(backups);
        return this;
    }

    /**
     * List of backups for the service
     */
    public DbaasServiceGrafana withBackups(Optional<? extends java.util.List<DbaasServiceBackup>> backups) {
        Utils.checkNotNull(backups, "backups");
        this.backups = backups;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public DbaasServiceGrafana withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public DbaasServiceGrafana withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    /**
     * Service notifications
     */
    public DbaasServiceGrafana withNotifications(java.util.List<DbaasServiceNotification> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = Optional.ofNullable(notifications);
        return this;
    }

    /**
     * Service notifications
     */
    public DbaasServiceGrafana withNotifications(Optional<? extends java.util.List<DbaasServiceNotification>> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = notifications;
        return this;
    }

    /**
     * Service component information objects
     */
    public DbaasServiceGrafana withComponents(java.util.List<DbaasServiceGrafanaComponents> components) {
        Utils.checkNotNull(components, "components");
        this.components = Optional.ofNullable(components);
        return this;
    }

    /**
     * Service component information objects
     */
    public DbaasServiceGrafana withComponents(Optional<? extends java.util.List<DbaasServiceGrafanaComponents>> components) {
        Utils.checkNotNull(components, "components");
        this.components = components;
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public DbaasServiceGrafana withMaintenance(DbaasServiceMaintenance maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = Optional.ofNullable(maintenance);
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public DbaasServiceGrafana withMaintenance(Optional<? extends DbaasServiceMaintenance> maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = maintenance;
        return this;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public DbaasServiceGrafana withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = Optional.ofNullable(diskSize);
        return this;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public DbaasServiceGrafana withDiskSize(Optional<? extends Long> diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public DbaasServiceGrafana withNodeMemory(long nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = Optional.ofNullable(nodeMemory);
        return this;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public DbaasServiceGrafana withNodeMemory(Optional<? extends Long> nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = nodeMemory;
        return this;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public DbaasServiceGrafana withUri(String uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = Optional.ofNullable(uri);
        return this;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public DbaasServiceGrafana withUri(Optional<? extends String> uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = uri;
        return this;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public DbaasServiceGrafana withUriParams(DbaasServiceGrafanaUriParams uriParams) {
        Utils.checkNotNull(uriParams, "uriParams");
        this.uriParams = Optional.ofNullable(uriParams);
        return this;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public DbaasServiceGrafana withUriParams(Optional<? extends DbaasServiceGrafanaUriParams> uriParams) {
        Utils.checkNotNull(uriParams, "uriParams");
        this.uriParams = uriParams;
        return this;
    }

    /**
     * Grafana version
     */
    public DbaasServiceGrafana withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * Grafana version
     */
    public DbaasServiceGrafana withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public DbaasServiceGrafana withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public DbaasServiceGrafana withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Subscription plan
     */
    public DbaasServiceGrafana withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }

    /**
     * List of service users
     */
    public DbaasServiceGrafana withUsers(java.util.List<DbaasServiceGrafanaUsers> users) {
        Utils.checkNotNull(users, "users");
        this.users = Optional.ofNullable(users);
        return this;
    }

    /**
     * List of service users
     */
    public DbaasServiceGrafana withUsers(Optional<? extends java.util.List<DbaasServiceGrafanaUsers>> users) {
        Utils.checkNotNull(users, "users");
        this.users = users;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceGrafana other = (DbaasServiceGrafana) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.nodeCount, other.nodeCount) &&
            java.util.Objects.deepEquals(this.connectionInfo, other.connectionInfo) &&
            java.util.Objects.deepEquals(this.nodeCpuCount, other.nodeCpuCount) &&
            java.util.Objects.deepEquals(this.integrations, other.integrations) &&
            java.util.Objects.deepEquals(this.zone, other.zone) &&
            java.util.Objects.deepEquals(this.nodeStates, other.nodeStates) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.grafanaSettings, other.grafanaSettings) &&
            java.util.Objects.deepEquals(this.ipFilter, other.ipFilter) &&
            java.util.Objects.deepEquals(this.backups, other.backups) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.notifications, other.notifications) &&
            java.util.Objects.deepEquals(this.components, other.components) &&
            java.util.Objects.deepEquals(this.maintenance, other.maintenance) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize) &&
            java.util.Objects.deepEquals(this.nodeMemory, other.nodeMemory) &&
            java.util.Objects.deepEquals(this.uri, other.uri) &&
            java.util.Objects.deepEquals(this.uriParams, other.uriParams) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.plan, other.plan) &&
            java.util.Objects.deepEquals(this.users, other.users);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            updatedAt,
            nodeCount,
            connectionInfo,
            nodeCpuCount,
            integrations,
            zone,
            nodeStates,
            name,
            type,
            state,
            grafanaSettings,
            ipFilter,
            backups,
            terminationProtection,
            notifications,
            components,
            maintenance,
            diskSize,
            nodeMemory,
            uri,
            uriParams,
            version,
            createdAt,
            plan,
            users);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceGrafana.class,
                "description", description,
                "updatedAt", updatedAt,
                "nodeCount", nodeCount,
                "connectionInfo", connectionInfo,
                "nodeCpuCount", nodeCpuCount,
                "integrations", integrations,
                "zone", zone,
                "nodeStates", nodeStates,
                "name", name,
                "type", type,
                "state", state,
                "grafanaSettings", grafanaSettings,
                "ipFilter", ipFilter,
                "backups", backups,
                "terminationProtection", terminationProtection,
                "notifications", notifications,
                "components", components,
                "maintenance", maintenance,
                "diskSize", diskSize,
                "nodeMemory", nodeMemory,
                "uri", uri,
                "uriParams", uriParams,
                "version", version,
                "createdAt", createdAt,
                "plan", plan,
                "users", users);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<? extends Long> nodeCount = Optional.empty();
 
        private Optional<? extends DbaasServiceGrafanaConnectionInfo> connectionInfo = Optional.empty();
 
        private Optional<? extends Long> nodeCpuCount = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasIntegration>> integrations = Optional.empty();
 
        private Optional<? extends String> zone = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasNodeState>> nodeStates = Optional.empty();
 
        private String name;
 
        private String type;
 
        private Optional<? extends EnumServiceState> state = Optional.empty();
 
        private Optional<? extends JsonSchemaGrafana> grafanaSettings = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ipFilter = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceBackup>> backups = Optional.empty();
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceNotification>> notifications = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceGrafanaComponents>> components = Optional.empty();
 
        private Optional<? extends DbaasServiceMaintenance> maintenance = Optional.empty();
 
        private Optional<? extends Long> diskSize = Optional.empty();
 
        private Optional<? extends Long> nodeMemory = Optional.empty();
 
        private Optional<? extends String> uri = Optional.empty();
 
        private Optional<? extends DbaasServiceGrafanaUriParams> uriParams = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private String plan;
 
        private Optional<? extends java.util.List<DbaasServiceGrafanaUsers>> users = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * DbaaS service description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * DbaaS service description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Service last update timestamp (ISO 8601)
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Service last update timestamp (ISO 8601)
         */
        public Builder updatedAt(Optional<? extends OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Number of service nodes in the active plan
         */
        public Builder nodeCount(long nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = Optional.ofNullable(nodeCount);
            return this;
        }

        /**
         * Number of service nodes in the active plan
         */
        public Builder nodeCount(Optional<? extends Long> nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = nodeCount;
            return this;
        }

        /**
         * Grafana connection information properties
         */
        public Builder connectionInfo(DbaasServiceGrafanaConnectionInfo connectionInfo) {
            Utils.checkNotNull(connectionInfo, "connectionInfo");
            this.connectionInfo = Optional.ofNullable(connectionInfo);
            return this;
        }

        /**
         * Grafana connection information properties
         */
        public Builder connectionInfo(Optional<? extends DbaasServiceGrafanaConnectionInfo> connectionInfo) {
            Utils.checkNotNull(connectionInfo, "connectionInfo");
            this.connectionInfo = connectionInfo;
            return this;
        }

        /**
         * Number of CPUs for each node
         */
        public Builder nodeCpuCount(long nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
            return this;
        }

        /**
         * Number of CPUs for each node
         */
        public Builder nodeCpuCount(Optional<? extends Long> nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = nodeCpuCount;
            return this;
        }

        /**
         * Service integrations
         */
        public Builder integrations(java.util.List<DbaasIntegration> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = Optional.ofNullable(integrations);
            return this;
        }

        /**
         * Service integrations
         */
        public Builder integrations(Optional<? extends java.util.List<DbaasIntegration>> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = integrations;
            return this;
        }

        /**
         * The zone where the service is running
         */
        public Builder zone(String zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = Optional.ofNullable(zone);
            return this;
        }

        /**
         * The zone where the service is running
         */
        public Builder zone(Optional<? extends String> zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = zone;
            return this;
        }

        /**
         * State of individual service nodes
         */
        public Builder nodeStates(java.util.List<DbaasNodeState> nodeStates) {
            Utils.checkNotNull(nodeStates, "nodeStates");
            this.nodeStates = Optional.ofNullable(nodeStates);
            return this;
        }

        /**
         * State of individual service nodes
         */
        public Builder nodeStates(Optional<? extends java.util.List<DbaasNodeState>> nodeStates) {
            Utils.checkNotNull(nodeStates, "nodeStates");
            this.nodeStates = nodeStates;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder state(EnumServiceState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends EnumServiceState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder grafanaSettings(JsonSchemaGrafana grafanaSettings) {
            Utils.checkNotNull(grafanaSettings, "grafanaSettings");
            this.grafanaSettings = Optional.ofNullable(grafanaSettings);
            return this;
        }

        public Builder grafanaSettings(Optional<? extends JsonSchemaGrafana> grafanaSettings) {
            Utils.checkNotNull(grafanaSettings, "grafanaSettings");
            this.grafanaSettings = grafanaSettings;
            return this;
        }

        /**
         * Allowed CIDR address blocks for incoming connections
         */
        public Builder ipFilter(java.util.List<String> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = Optional.ofNullable(ipFilter);
            return this;
        }

        /**
         * Allowed CIDR address blocks for incoming connections
         */
        public Builder ipFilter(Optional<? extends java.util.List<String>> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * List of backups for the service
         */
        public Builder backups(java.util.List<DbaasServiceBackup> backups) {
            Utils.checkNotNull(backups, "backups");
            this.backups = Optional.ofNullable(backups);
            return this;
        }

        /**
         * List of backups for the service
         */
        public Builder backups(Optional<? extends java.util.List<DbaasServiceBackup>> backups) {
            Utils.checkNotNull(backups, "backups");
            this.backups = backups;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Service notifications
         */
        public Builder notifications(java.util.List<DbaasServiceNotification> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = Optional.ofNullable(notifications);
            return this;
        }

        /**
         * Service notifications
         */
        public Builder notifications(Optional<? extends java.util.List<DbaasServiceNotification>> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = notifications;
            return this;
        }

        /**
         * Service component information objects
         */
        public Builder components(java.util.List<DbaasServiceGrafanaComponents> components) {
            Utils.checkNotNull(components, "components");
            this.components = Optional.ofNullable(components);
            return this;
        }

        /**
         * Service component information objects
         */
        public Builder components(Optional<? extends java.util.List<DbaasServiceGrafanaComponents>> components) {
            Utils.checkNotNull(components, "components");
            this.components = components;
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(DbaasServiceMaintenance maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = Optional.ofNullable(maintenance);
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Optional<? extends DbaasServiceMaintenance> maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = maintenance;
            return this;
        }

        /**
         * TODO UNIT disk space for data storage
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = Optional.ofNullable(diskSize);
            return this;
        }

        /**
         * TODO UNIT disk space for data storage
         */
        public Builder diskSize(Optional<? extends Long> diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }

        /**
         * TODO UNIT of memory for each node
         */
        public Builder nodeMemory(long nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = Optional.ofNullable(nodeMemory);
            return this;
        }

        /**
         * TODO UNIT of memory for each node
         */
        public Builder nodeMemory(Optional<? extends Long> nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = nodeMemory;
            return this;
        }

        /**
         * URI for connecting to the service (may be absent)
         */
        public Builder uri(String uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = Optional.ofNullable(uri);
            return this;
        }

        /**
         * URI for connecting to the service (may be absent)
         */
        public Builder uri(Optional<? extends String> uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = uri;
            return this;
        }

        /**
         * service_uri parameterized into key-value pairs
         */
        public Builder uriParams(DbaasServiceGrafanaUriParams uriParams) {
            Utils.checkNotNull(uriParams, "uriParams");
            this.uriParams = Optional.ofNullable(uriParams);
            return this;
        }

        /**
         * service_uri parameterized into key-value pairs
         */
        public Builder uriParams(Optional<? extends DbaasServiceGrafanaUriParams> uriParams) {
            Utils.checkNotNull(uriParams, "uriParams");
            this.uriParams = uriParams;
            return this;
        }

        /**
         * Grafana version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * Grafana version
         */
        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Service creation timestamp (ISO 8601)
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Service creation timestamp (ISO 8601)
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }

        /**
         * List of service users
         */
        public Builder users(java.util.List<DbaasServiceGrafanaUsers> users) {
            Utils.checkNotNull(users, "users");
            this.users = Optional.ofNullable(users);
            return this;
        }

        /**
         * List of service users
         */
        public Builder users(Optional<? extends java.util.List<DbaasServiceGrafanaUsers>> users) {
            Utils.checkNotNull(users, "users");
            this.users = users;
            return this;
        }
        
        public DbaasServiceGrafana build() {
            return new DbaasServiceGrafana(
                description,
                updatedAt,
                nodeCount,
                connectionInfo,
                nodeCpuCount,
                integrations,
                zone,
                nodeStates,
                name,
                type,
                state,
                grafanaSettings,
                ipFilter,
                backups,
                terminationProtection,
                notifications,
                components,
                maintenance,
                diskSize,
                nodeMemory,
                uri,
                uriParams,
                version,
                createdAt,
                plan,
                users);
        }
    }
}

