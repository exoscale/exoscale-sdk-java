/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api;

import com.exoscale.api.models.errors.SDKError;
import com.exoscale.api.models.operations.SDKMethodInterfaces.*;
import com.exoscale.api.utils.HTTPClient;
import com.exoscale.api.utils.HTTPRequest;
import com.exoscale.api.utils.JSON;
import com.exoscale.api.utils.SerializedBody;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Dbaas implements
            MethodCallGetDbaasOpensearchAclConfig,
            MethodCallUpdateDbaasOpensearchAclConfig,
            MethodCallStartDbaasGrafanaMaintenance,
            MethodCallCreateDbaasPgUpgradeCheck,
            MethodCallResetDbaasMysqlUserPassword,
            MethodCallCreateDbaasPgConnectionPool,
            MethodCallUpdateDbaasServiceMysql,
            MethodCallGetDbaasServiceMysql,
            MethodCallCreateDbaasServiceMysql,
            MethodCallDeleteDbaasServiceMysql,
            MethodCallCreateDbaasMysqlUser,
            MethodCallListDbaasServiceTypes,
            MethodCallListDbaasServices,
            MethodCallGetDbaasCaCertificate,
            MethodCallGetDbaasSettingsGrafana,
            MethodCallDeleteDbaasPgDatabase,
            MethodCallStopDbaasPgMigration,
            MethodCallGetDbaasServiceKafka,
            MethodCallCreateDbaasServiceKafka,
            MethodCallUpdateDbaasServiceKafka,
            MethodCallDeleteDbaasServiceKafka,
            MethodCallGetDbaasSettingsRedis,
            MethodCallCreateDbaasKafkaSchemaRegistryAclConfig,
            MethodCallCreateDbaasPostgresUser,
            MethodCallDeleteDbaasOpensearchUser,
            MethodCallCreateDbaasKafkaUser,
            MethodCallGetDbaasSettingsMysql,
            MethodCallCreateDbaasPgDatabase,
            MethodCallCreateDbaasOpensearchUser,
            MethodCallListDbaasIntegrationTypes,
            MethodCallDeleteDbaasPostgresUser,
            MethodCallUpdateDbaasPostgresAllowReplication,
            MethodCallCreateDbaasKafkaTopicAclConfig,
            MethodCallDeleteDbaasMysqlDatabase,
            MethodCallGetDbaasServiceLogs,
            MethodCallStartDbaasPgMaintenance,
            MethodCallDeleteDbaasKafkaSchemaRegistryAclConfig,
            MethodCallDeleteDbaasKafkaUser,
            MethodCallGetDbaasServiceType,
            MethodCallStartDbaasMysqlMaintenance,
            MethodCallResetDbaasOpensearchUserPassword,
            MethodCallGetDbaasServiceMetrics,
            MethodCallCreateDbaasTaskMigrationCheck,
            MethodCallDeleteDbaasIntegration,
            MethodCallUpdateDbaasIntegration,
            MethodCallGetDbaasIntegration,
            MethodCallListDbaasIntegrationSettings,
            MethodCallGetDbaasSettingsPg,
            MethodCallStopDbaasRedisMigration,
            MethodCallStopDbaasMysqlMigration,
            MethodCallStartDbaasKafkaMaintenance,
            MethodCallUpdateDbaasPgConnectionPool,
            MethodCallDeleteDbaasPgConnectionPool,
            MethodCallGetDbaasMigrationStatus,
            MethodCallDeleteDbaasMysqlUser,
            MethodCallDeleteDbaasService,
            MethodCallCreateDbaasMysqlDatabase,
            MethodCallGetDbaasSettingsKafka,
            MethodCallGetDbaasSettingsOpensearch,
            MethodCallDeleteDbaasServiceGrafana,
            MethodCallGetDbaasServiceGrafana,
            MethodCallUpdateDbaasServiceGrafana,
            MethodCallCreateDbaasServiceGrafana,
            MethodCallStartDbaasOpensearchMaintenance,
            MethodCallGetDbaasKafkaAclConfig,
            MethodCallResetDbaasKafkaUserPassword,
            MethodCallCreateDbaasServiceOpensearch,
            MethodCallGetDbaasServiceOpensearch,
            MethodCallDeleteDbaasServiceOpensearch,
            MethodCallUpdateDbaasServiceOpensearch,
            MethodCallDeleteDbaasServiceRedis,
            MethodCallUpdateDbaasServiceRedis,
            MethodCallGetDbaasServiceRedis,
            MethodCallCreateDbaasServiceRedis,
            MethodCallUpdateDbaasServicePg,
            MethodCallGetDbaasServicePg,
            MethodCallCreateDbaasServicePg,
            MethodCallDeleteDbaasServicePg,
            MethodCallCreateDbaasIntegration,
            MethodCallGetDbaasTask,
            MethodCallStartDbaasRedisMaintenance,
            MethodCallDeleteDbaasKafkaTopicAclConfig,
            MethodCallResetDbaasPostgresUserPassword {

    private final SDKConfiguration sdkConfiguration;

    Dbaas(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.exoscale.api.models.operations.GetDbaasOpensearchAclConfigRequestBuilder getDbaasOpensearchAclConfig() {
        return new com.exoscale.api.models.operations.GetDbaasOpensearchAclConfigRequestBuilder(this);
    }

    /**
     * Get DBaaS OpenSearch ACL configuration
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasOpensearchAclConfigResponse getDbaasOpensearchAclConfig(
            String name) throws Exception {
        com.exoscale.api.models.operations.GetDbaasOpensearchAclConfigRequest request =
            com.exoscale.api.models.operations.GetDbaasOpensearchAclConfigRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasOpensearchAclConfigRequest.class,
                baseUrl,
                "/dbaas-opensearch/{name}/acl-config",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasOpensearchAclConfigResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasOpensearchAclConfigResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasOpensearchAclConfigResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasOpensearchAclConfig out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasOpensearchAclConfig>() {});
                res.withDbaasOpensearchAclConfig(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateDbaasOpensearchAclConfigRequestBuilder updateDbaasOpensearchAclConfig() {
        return new com.exoscale.api.models.operations.UpdateDbaasOpensearchAclConfigRequestBuilder(this);
    }

    /**
     * Create a DBaaS OpenSearch ACL configuration
     * @param name
     * @param dbaasOpensearchAclConfig
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateDbaasOpensearchAclConfigResponse updateDbaasOpensearchAclConfig(
            String name,
            com.exoscale.api.models.components.DbaasOpensearchAclConfig dbaasOpensearchAclConfig) throws Exception {
        com.exoscale.api.models.operations.UpdateDbaasOpensearchAclConfigRequest request =
            com.exoscale.api.models.operations.UpdateDbaasOpensearchAclConfigRequest
                .builder()
                .name(name)
                .dbaasOpensearchAclConfig(dbaasOpensearchAclConfig)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateDbaasOpensearchAclConfigRequest.class,
                baseUrl,
                "/dbaas-opensearch/{name}/acl-config",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "dbaasOpensearchAclConfig", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateDbaasOpensearchAclConfigResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateDbaasOpensearchAclConfigResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateDbaasOpensearchAclConfigResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StartDbaasGrafanaMaintenanceRequestBuilder startDbaasGrafanaMaintenance() {
        return new com.exoscale.api.models.operations.StartDbaasGrafanaMaintenanceRequestBuilder(this);
    }

    /**
     * Initiate Grafana maintenance update
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StartDbaasGrafanaMaintenanceResponse startDbaasGrafanaMaintenance(
            String name) throws Exception {
        com.exoscale.api.models.operations.StartDbaasGrafanaMaintenanceRequest request =
            com.exoscale.api.models.operations.StartDbaasGrafanaMaintenanceRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StartDbaasGrafanaMaintenanceRequest.class,
                baseUrl,
                "/dbaas-grafana/{name}/maintenance/start",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StartDbaasGrafanaMaintenanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StartDbaasGrafanaMaintenanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StartDbaasGrafanaMaintenanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasPgUpgradeCheckRequestBuilder createDbaasPgUpgradeCheck() {
        return new com.exoscale.api.models.operations.CreateDbaasPgUpgradeCheckRequestBuilder(this);
    }

    /**
     * Check whether you can upgrade Postgres service to a newer version
     * @param service
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasPgUpgradeCheckResponse createDbaasPgUpgradeCheck(
            String service,
            com.exoscale.api.models.operations.CreateDbaasPgUpgradeCheckRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasPgUpgradeCheckRequest request =
            com.exoscale.api.models.operations.CreateDbaasPgUpgradeCheckRequest
                .builder()
                .service(service)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasPgUpgradeCheckRequest.class,
                baseUrl,
                "/dbaas-postgres/{service}/upgrade-check",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasPgUpgradeCheckResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasPgUpgradeCheckResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasPgUpgradeCheckResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasTask out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasTask>() {});
                res.withDbaasTask(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ResetDbaasMysqlUserPasswordRequestBuilder resetDbaasMysqlUserPassword() {
        return new com.exoscale.api.models.operations.ResetDbaasMysqlUserPasswordRequestBuilder(this);
    }

    /**
     * Reset the credentials of a DBaaS mysql user
     * If no password is provided one will be generated automatically.
     * @param serviceName
     * @param username
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResetDbaasMysqlUserPasswordResponse resetDbaasMysqlUserPassword(
            String serviceName,
            String username,
            com.exoscale.api.models.operations.ResetDbaasMysqlUserPasswordRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.ResetDbaasMysqlUserPasswordRequest request =
            com.exoscale.api.models.operations.ResetDbaasMysqlUserPasswordRequest
                .builder()
                .serviceName(serviceName)
                .username(username)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResetDbaasMysqlUserPasswordRequest.class,
                baseUrl,
                "/dbaas-mysql/{service-name}/user/{username}/password/reset",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResetDbaasMysqlUserPasswordResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResetDbaasMysqlUserPasswordResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResetDbaasMysqlUserPasswordResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasPgConnectionPoolRequestBuilder createDbaasPgConnectionPool() {
        return new com.exoscale.api.models.operations.CreateDbaasPgConnectionPoolRequestBuilder(this);
    }

    /**
     * Create a DBaaS PostgreSQL connection pool
     * @param serviceName
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasPgConnectionPoolResponse createDbaasPgConnectionPool(
            String serviceName,
            com.exoscale.api.models.operations.CreateDbaasPgConnectionPoolRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasPgConnectionPoolRequest request =
            com.exoscale.api.models.operations.CreateDbaasPgConnectionPoolRequest
                .builder()
                .serviceName(serviceName)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasPgConnectionPoolRequest.class,
                baseUrl,
                "/dbaas-postgres/{service-name}/connection-pool",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasPgConnectionPoolResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasPgConnectionPoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasPgConnectionPoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateDbaasServiceMysqlRequestBuilder updateDbaasServiceMysql() {
        return new com.exoscale.api.models.operations.UpdateDbaasServiceMysqlRequestBuilder(this);
    }

    /**
     * Update a DBaaS MySQL service
     * Update a DBaaS MySQL service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateDbaasServiceMysqlResponse updateDbaasServiceMysql(
            String name,
            com.exoscale.api.models.operations.UpdateDbaasServiceMysqlRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateDbaasServiceMysqlRequest request =
            com.exoscale.api.models.operations.UpdateDbaasServiceMysqlRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateDbaasServiceMysqlRequest.class,
                baseUrl,
                "/dbaas-mysql/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateDbaasServiceMysqlResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateDbaasServiceMysqlResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateDbaasServiceMysqlResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasServiceMysqlRequestBuilder getDbaasServiceMysql() {
        return new com.exoscale.api.models.operations.GetDbaasServiceMysqlRequestBuilder(this);
    }

    /**
     * Get a DBaaS MySQL service
     * Get a DBaaS MySQL service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasServiceMysqlResponse getDbaasServiceMysql(
            String name) throws Exception {
        com.exoscale.api.models.operations.GetDbaasServiceMysqlRequest request =
            com.exoscale.api.models.operations.GetDbaasServiceMysqlRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasServiceMysqlRequest.class,
                baseUrl,
                "/dbaas-mysql/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasServiceMysqlResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasServiceMysqlResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasServiceMysqlResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasServiceMysql out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasServiceMysql>() {});
                res.withDbaasServiceMysql(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasServiceMysqlRequestBuilder createDbaasServiceMysql() {
        return new com.exoscale.api.models.operations.CreateDbaasServiceMysqlRequestBuilder(this);
    }

    /**
     * Create a DBaaS MySQL service
     * Create a DBaaS MySQL service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasServiceMysqlResponse createDbaasServiceMysql(
            String name,
            com.exoscale.api.models.operations.CreateDbaasServiceMysqlRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasServiceMysqlRequest request =
            com.exoscale.api.models.operations.CreateDbaasServiceMysqlRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasServiceMysqlRequest.class,
                baseUrl,
                "/dbaas-mysql/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasServiceMysqlResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasServiceMysqlResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasServiceMysqlResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasServiceMysqlRequestBuilder deleteDbaasServiceMysql() {
        return new com.exoscale.api.models.operations.DeleteDbaasServiceMysqlRequestBuilder(this);
    }

    /**
     * Delete a MySQL service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasServiceMysqlResponse deleteDbaasServiceMysql(
            String name) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasServiceMysqlRequest request =
            com.exoscale.api.models.operations.DeleteDbaasServiceMysqlRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasServiceMysqlRequest.class,
                baseUrl,
                "/dbaas-mysql/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasServiceMysqlResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasServiceMysqlResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasServiceMysqlResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasMysqlUserRequestBuilder createDbaasMysqlUser() {
        return new com.exoscale.api.models.operations.CreateDbaasMysqlUserRequestBuilder(this);
    }

    /**
     * Create a DBaaS MySQL user
     * @param serviceName
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasMysqlUserResponse createDbaasMysqlUser(
            String serviceName,
            com.exoscale.api.models.operations.CreateDbaasMysqlUserRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasMysqlUserRequest request =
            com.exoscale.api.models.operations.CreateDbaasMysqlUserRequest
                .builder()
                .serviceName(serviceName)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasMysqlUserRequest.class,
                baseUrl,
                "/dbaas-mysql/{service-name}/user",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasMysqlUserResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasMysqlUserResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasMysqlUserResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ListDbaasServiceTypesRequestBuilder listDbaasServiceTypes() {
        return new com.exoscale.api.models.operations.ListDbaasServiceTypesRequestBuilder(this);
    }

    /**
     * DBaaS Service Types
     * List available service types for DBaaS
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ListDbaasServiceTypesResponse listDbaasServiceTypesDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-service-type");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ListDbaasServiceTypesResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ListDbaasServiceTypesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ListDbaasServiceTypesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.ListDbaasServiceTypesResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.ListDbaasServiceTypesResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ListDbaasServicesRequestBuilder listDbaasServices() {
        return new com.exoscale.api.models.operations.ListDbaasServicesRequestBuilder(this);
    }

    /**
     * List DBaaS services
     * List DBaaS services
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ListDbaasServicesResponse listDbaasServicesDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-service");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ListDbaasServicesResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ListDbaasServicesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ListDbaasServicesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.ListDbaasServicesResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.ListDbaasServicesResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasCaCertificateRequestBuilder getDbaasCaCertificate() {
        return new com.exoscale.api.models.operations.GetDbaasCaCertificateRequestBuilder(this);
    }

    /**
     * Get DBaaS CA Certificate
     * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasCaCertificateResponse getDbaasCaCertificateDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-ca-certificate");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasCaCertificateResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasCaCertificateResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasCaCertificateResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.GetDbaasCaCertificateResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.GetDbaasCaCertificateResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasSettingsGrafanaRequestBuilder getDbaasSettingsGrafana() {
        return new com.exoscale.api.models.operations.GetDbaasSettingsGrafanaRequestBuilder(this);
    }

    /**
     * Get DBaaS Grafana settings
     * Get DBaaS Grafana settings
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasSettingsGrafanaResponse getDbaasSettingsGrafanaDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-settings-grafana");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasSettingsGrafanaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasSettingsGrafanaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasSettingsGrafanaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.GetDbaasSettingsGrafanaResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.GetDbaasSettingsGrafanaResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasPgDatabaseRequestBuilder deleteDbaasPgDatabase() {
        return new com.exoscale.api.models.operations.DeleteDbaasPgDatabaseRequestBuilder(this);
    }

    /**
     * Delete a DBaaS Postgres database
     * @param serviceName
     * @param databaseName
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasPgDatabaseResponse deleteDbaasPgDatabase(
            String serviceName,
            String databaseName) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasPgDatabaseRequest request =
            com.exoscale.api.models.operations.DeleteDbaasPgDatabaseRequest
                .builder()
                .serviceName(serviceName)
                .databaseName(databaseName)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasPgDatabaseRequest.class,
                baseUrl,
                "/dbaas-postgres/{service-name}/database/{database-name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasPgDatabaseResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasPgDatabaseResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasPgDatabaseResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StopDbaasPgMigrationRequestBuilder stopDbaasPgMigration() {
        return new com.exoscale.api.models.operations.StopDbaasPgMigrationRequestBuilder(this);
    }

    /**
     * Stop a DBaaS PostgreSQL migration
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StopDbaasPgMigrationResponse stopDbaasPgMigration(
            String name) throws Exception {
        com.exoscale.api.models.operations.StopDbaasPgMigrationRequest request =
            com.exoscale.api.models.operations.StopDbaasPgMigrationRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StopDbaasPgMigrationRequest.class,
                baseUrl,
                "/dbaas-postgres/{name}/migration/stop",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StopDbaasPgMigrationResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StopDbaasPgMigrationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StopDbaasPgMigrationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasServiceKafkaRequestBuilder getDbaasServiceKafka() {
        return new com.exoscale.api.models.operations.GetDbaasServiceKafkaRequestBuilder(this);
    }

    /**
     * Get a DBaaS Kafka service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasServiceKafkaResponse getDbaasServiceKafka(
            String name) throws Exception {
        com.exoscale.api.models.operations.GetDbaasServiceKafkaRequest request =
            com.exoscale.api.models.operations.GetDbaasServiceKafkaRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasServiceKafkaRequest.class,
                baseUrl,
                "/dbaas-kafka/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasServiceKafkaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasServiceKafkaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasServiceKafkaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasServiceKafka out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasServiceKafka>() {});
                res.withDbaasServiceKafka(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasServiceKafkaRequestBuilder createDbaasServiceKafka() {
        return new com.exoscale.api.models.operations.CreateDbaasServiceKafkaRequestBuilder(this);
    }

    /**
     * Create a DBaaS Kafka service
     * Create a DBaaS Kafka service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasServiceKafkaResponse createDbaasServiceKafka(
            String name,
            com.exoscale.api.models.operations.CreateDbaasServiceKafkaRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasServiceKafkaRequest request =
            com.exoscale.api.models.operations.CreateDbaasServiceKafkaRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasServiceKafkaRequest.class,
                baseUrl,
                "/dbaas-kafka/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasServiceKafkaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasServiceKafkaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasServiceKafkaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateDbaasServiceKafkaRequestBuilder updateDbaasServiceKafka() {
        return new com.exoscale.api.models.operations.UpdateDbaasServiceKafkaRequestBuilder(this);
    }

    /**
     * Update a DBaaS Kafka service
     * Update a DBaaS Kafka service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateDbaasServiceKafkaResponse updateDbaasServiceKafka(
            String name,
            com.exoscale.api.models.operations.UpdateDbaasServiceKafkaRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateDbaasServiceKafkaRequest request =
            com.exoscale.api.models.operations.UpdateDbaasServiceKafkaRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateDbaasServiceKafkaRequest.class,
                baseUrl,
                "/dbaas-kafka/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateDbaasServiceKafkaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateDbaasServiceKafkaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateDbaasServiceKafkaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasServiceKafkaRequestBuilder deleteDbaasServiceKafka() {
        return new com.exoscale.api.models.operations.DeleteDbaasServiceKafkaRequestBuilder(this);
    }

    /**
     * Delete a Kafka service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasServiceKafkaResponse deleteDbaasServiceKafka(
            String name) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasServiceKafkaRequest request =
            com.exoscale.api.models.operations.DeleteDbaasServiceKafkaRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasServiceKafkaRequest.class,
                baseUrl,
                "/dbaas-kafka/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasServiceKafkaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasServiceKafkaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasServiceKafkaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasSettingsRedisRequestBuilder getDbaasSettingsRedis() {
        return new com.exoscale.api.models.operations.GetDbaasSettingsRedisRequestBuilder(this);
    }

    /**
     * Get DBaaS Redis settings
     * Returns the default settings for Redis.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasSettingsRedisResponse getDbaasSettingsRedisDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-settings-redis");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasSettingsRedisResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasSettingsRedisResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasSettingsRedisResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.GetDbaasSettingsRedisResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.GetDbaasSettingsRedisResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasKafkaSchemaRegistryAclConfigRequestBuilder createDbaasKafkaSchemaRegistryAclConfig() {
        return new com.exoscale.api.models.operations.CreateDbaasKafkaSchemaRegistryAclConfigRequestBuilder(this);
    }

    /**
     * Add a Kafka Schema Registry ACL entry
     * @param name
     * @param dbaasKafkaSchemaRegistryAclEntry
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasKafkaSchemaRegistryAclConfigResponse createDbaasKafkaSchemaRegistryAclConfig(
            String name,
            com.exoscale.api.models.components.DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasKafkaSchemaRegistryAclConfigRequest request =
            com.exoscale.api.models.operations.CreateDbaasKafkaSchemaRegistryAclConfigRequest
                .builder()
                .name(name)
                .dbaasKafkaSchemaRegistryAclEntry(dbaasKafkaSchemaRegistryAclEntry)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasKafkaSchemaRegistryAclConfigRequest.class,
                baseUrl,
                "/dbaas-kafka/{name}/schema-registry/acl-config",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "dbaasKafkaSchemaRegistryAclEntry", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasKafkaSchemaRegistryAclConfigResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasKafkaSchemaRegistryAclConfigResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasKafkaSchemaRegistryAclConfigResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasPostgresUserRequestBuilder createDbaasPostgresUser() {
        return new com.exoscale.api.models.operations.CreateDbaasPostgresUserRequestBuilder(this);
    }

    /**
     * Create a DBaaS Postgres user
     * @param serviceName
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasPostgresUserResponse createDbaasPostgresUser(
            String serviceName,
            com.exoscale.api.models.operations.CreateDbaasPostgresUserRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasPostgresUserRequest request =
            com.exoscale.api.models.operations.CreateDbaasPostgresUserRequest
                .builder()
                .serviceName(serviceName)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasPostgresUserRequest.class,
                baseUrl,
                "/dbaas-postgres/{service-name}/user",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasPostgresUserResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasPostgresUserResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasPostgresUserResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasOpensearchUserRequestBuilder deleteDbaasOpensearchUser() {
        return new com.exoscale.api.models.operations.DeleteDbaasOpensearchUserRequestBuilder(this);
    }

    /**
     * Delete a DBaaS OpenSearch user
     * @param serviceName
     * @param username
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasOpensearchUserResponse deleteDbaasOpensearchUser(
            String serviceName,
            String username) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasOpensearchUserRequest request =
            com.exoscale.api.models.operations.DeleteDbaasOpensearchUserRequest
                .builder()
                .serviceName(serviceName)
                .username(username)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasOpensearchUserRequest.class,
                baseUrl,
                "/dbaas-opensearch/{service-name}/user/{username}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasOpensearchUserResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasOpensearchUserResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasOpensearchUserResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasKafkaUserRequestBuilder createDbaasKafkaUser() {
        return new com.exoscale.api.models.operations.CreateDbaasKafkaUserRequestBuilder(this);
    }

    /**
     * Create a DBaaS Kafka user
     * @param serviceName
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasKafkaUserResponse createDbaasKafkaUser(
            String serviceName,
            com.exoscale.api.models.operations.CreateDbaasKafkaUserRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasKafkaUserRequest request =
            com.exoscale.api.models.operations.CreateDbaasKafkaUserRequest
                .builder()
                .serviceName(serviceName)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasKafkaUserRequest.class,
                baseUrl,
                "/dbaas-kafka/{service-name}/user",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasKafkaUserResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasKafkaUserResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasKafkaUserResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasSettingsMysqlRequestBuilder getDbaasSettingsMysql() {
        return new com.exoscale.api.models.operations.GetDbaasSettingsMysqlRequestBuilder(this);
    }

    /**
     * Get DBaaS MySQL settings
     * Get DBaaS MySQL settings
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasSettingsMysqlResponse getDbaasSettingsMysqlDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-settings-mysql");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasSettingsMysqlResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasSettingsMysqlResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasSettingsMysqlResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.GetDbaasSettingsMysqlResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.GetDbaasSettingsMysqlResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasPgDatabaseRequestBuilder createDbaasPgDatabase() {
        return new com.exoscale.api.models.operations.CreateDbaasPgDatabaseRequestBuilder(this);
    }

    /**
     * Create a DBaaS Postgres database
     * @param serviceName
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasPgDatabaseResponse createDbaasPgDatabase(
            String serviceName,
            com.exoscale.api.models.operations.CreateDbaasPgDatabaseRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasPgDatabaseRequest request =
            com.exoscale.api.models.operations.CreateDbaasPgDatabaseRequest
                .builder()
                .serviceName(serviceName)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasPgDatabaseRequest.class,
                baseUrl,
                "/dbaas-postgres/{service-name}/database",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasPgDatabaseResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasPgDatabaseResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasPgDatabaseResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasOpensearchUserRequestBuilder createDbaasOpensearchUser() {
        return new com.exoscale.api.models.operations.CreateDbaasOpensearchUserRequestBuilder(this);
    }

    /**
     * Create a DBaaS OpenSearch user
     * @param serviceName
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasOpensearchUserResponse createDbaasOpensearchUser(
            String serviceName,
            com.exoscale.api.models.operations.CreateDbaasOpensearchUserRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasOpensearchUserRequest request =
            com.exoscale.api.models.operations.CreateDbaasOpensearchUserRequest
                .builder()
                .serviceName(serviceName)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasOpensearchUserRequest.class,
                baseUrl,
                "/dbaas-opensearch/{service-name}/user",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasOpensearchUserResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasOpensearchUserResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasOpensearchUserResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ListDbaasIntegrationTypesRequestBuilder listDbaasIntegrationTypes() {
        return new com.exoscale.api.models.operations.ListDbaasIntegrationTypesRequestBuilder(this);
    }

    /**
     * Get DBaaS integration types
     * Get DBaaS integration types
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ListDbaasIntegrationTypesResponse listDbaasIntegrationTypesDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-integration-types");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ListDbaasIntegrationTypesResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ListDbaasIntegrationTypesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ListDbaasIntegrationTypesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.ListDbaasIntegrationTypesResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.ListDbaasIntegrationTypesResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasPostgresUserRequestBuilder deleteDbaasPostgresUser() {
        return new com.exoscale.api.models.operations.DeleteDbaasPostgresUserRequestBuilder(this);
    }

    /**
     * Delete a DBaaS Postgres user
     * @param serviceName
     * @param username
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasPostgresUserResponse deleteDbaasPostgresUser(
            String serviceName,
            String username) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasPostgresUserRequest request =
            com.exoscale.api.models.operations.DeleteDbaasPostgresUserRequest
                .builder()
                .serviceName(serviceName)
                .username(username)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasPostgresUserRequest.class,
                baseUrl,
                "/dbaas-postgres/{service-name}/user/{username}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasPostgresUserResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasPostgresUserResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasPostgresUserResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateDbaasPostgresAllowReplicationRequestBuilder updateDbaasPostgresAllowReplication() {
        return new com.exoscale.api.models.operations.UpdateDbaasPostgresAllowReplicationRequestBuilder(this);
    }

    /**
     * Update access control for one service user
     * @param serviceName
     * @param username
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateDbaasPostgresAllowReplicationResponse updateDbaasPostgresAllowReplication(
            String serviceName,
            String username,
            com.exoscale.api.models.operations.UpdateDbaasPostgresAllowReplicationRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateDbaasPostgresAllowReplicationRequest request =
            com.exoscale.api.models.operations.UpdateDbaasPostgresAllowReplicationRequest
                .builder()
                .serviceName(serviceName)
                .username(username)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateDbaasPostgresAllowReplicationRequest.class,
                baseUrl,
                "/dbaas-postgres/{service-name}/user/{username}/allow-replication",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateDbaasPostgresAllowReplicationResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateDbaasPostgresAllowReplicationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateDbaasPostgresAllowReplicationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasPostgresUsers out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasPostgresUsers>() {});
                res.withDbaasPostgresUsers(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasKafkaTopicAclConfigRequestBuilder createDbaasKafkaTopicAclConfig() {
        return new com.exoscale.api.models.operations.CreateDbaasKafkaTopicAclConfigRequestBuilder(this);
    }

    /**
     * Add a Kafka topic ACL entry
     * @param name
     * @param dbaasKafkaTopicAclEntry
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasKafkaTopicAclConfigResponse createDbaasKafkaTopicAclConfig(
            String name,
            com.exoscale.api.models.components.DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasKafkaTopicAclConfigRequest request =
            com.exoscale.api.models.operations.CreateDbaasKafkaTopicAclConfigRequest
                .builder()
                .name(name)
                .dbaasKafkaTopicAclEntry(dbaasKafkaTopicAclEntry)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasKafkaTopicAclConfigRequest.class,
                baseUrl,
                "/dbaas-kafka/{name}/topic/acl-config",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "dbaasKafkaTopicAclEntry", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasKafkaTopicAclConfigResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasKafkaTopicAclConfigResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasKafkaTopicAclConfigResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasMysqlDatabaseRequestBuilder deleteDbaasMysqlDatabase() {
        return new com.exoscale.api.models.operations.DeleteDbaasMysqlDatabaseRequestBuilder(this);
    }

    /**
     * Delete a DBaaS MySQL database
     * @param serviceName
     * @param databaseName
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasMysqlDatabaseResponse deleteDbaasMysqlDatabase(
            String serviceName,
            String databaseName) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasMysqlDatabaseRequest request =
            com.exoscale.api.models.operations.DeleteDbaasMysqlDatabaseRequest
                .builder()
                .serviceName(serviceName)
                .databaseName(databaseName)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasMysqlDatabaseRequest.class,
                baseUrl,
                "/dbaas-mysql/{service-name}/database/{database-name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasMysqlDatabaseResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasMysqlDatabaseResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasMysqlDatabaseResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasServiceLogsRequestBuilder getDbaasServiceLogs() {
        return new com.exoscale.api.models.operations.GetDbaasServiceLogsRequestBuilder(this);
    }

    /**
     * Get logs of DBaaS service
     * Get logs of DBaaS service
     * @param serviceName
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasServiceLogsResponse getDbaasServiceLogs(
            String serviceName,
            com.exoscale.api.models.operations.GetDbaasServiceLogsRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.GetDbaasServiceLogsRequest request =
            com.exoscale.api.models.operations.GetDbaasServiceLogsRequest
                .builder()
                .serviceName(serviceName)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasServiceLogsRequest.class,
                baseUrl,
                "/dbaas-service-logs/{service-name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasServiceLogsResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasServiceLogsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasServiceLogsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasServiceLogs out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasServiceLogs>() {});
                res.withDbaasServiceLogs(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StartDbaasPgMaintenanceRequestBuilder startDbaasPgMaintenance() {
        return new com.exoscale.api.models.operations.StartDbaasPgMaintenanceRequestBuilder(this);
    }

    /**
     * Initiate PostgreSQL maintenance update
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StartDbaasPgMaintenanceResponse startDbaasPgMaintenance(
            String name) throws Exception {
        com.exoscale.api.models.operations.StartDbaasPgMaintenanceRequest request =
            com.exoscale.api.models.operations.StartDbaasPgMaintenanceRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StartDbaasPgMaintenanceRequest.class,
                baseUrl,
                "/dbaas-postgres/{name}/maintenance/start",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StartDbaasPgMaintenanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StartDbaasPgMaintenanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StartDbaasPgMaintenanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasKafkaSchemaRegistryAclConfigRequestBuilder deleteDbaasKafkaSchemaRegistryAclConfig() {
        return new com.exoscale.api.models.operations.DeleteDbaasKafkaSchemaRegistryAclConfigRequestBuilder(this);
    }

    /**
     * Delete a Kafka ACL entry
     * @param name
     * @param aclId
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasKafkaSchemaRegistryAclConfigResponse deleteDbaasKafkaSchemaRegistryAclConfig(
            String name,
            String aclId) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasKafkaSchemaRegistryAclConfigRequest request =
            com.exoscale.api.models.operations.DeleteDbaasKafkaSchemaRegistryAclConfigRequest
                .builder()
                .name(name)
                .aclId(aclId)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasKafkaSchemaRegistryAclConfigRequest.class,
                baseUrl,
                "/dbaas-kafka/{name}/schema-registry/acl-config/{acl-id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasKafkaSchemaRegistryAclConfigResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasKafkaSchemaRegistryAclConfigResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasKafkaSchemaRegistryAclConfigResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasKafkaUserRequestBuilder deleteDbaasKafkaUser() {
        return new com.exoscale.api.models.operations.DeleteDbaasKafkaUserRequestBuilder(this);
    }

    /**
     * Delete a DBaaS kafka user
     * @param serviceName
     * @param username
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasKafkaUserResponse deleteDbaasKafkaUser(
            String serviceName,
            String username) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasKafkaUserRequest request =
            com.exoscale.api.models.operations.DeleteDbaasKafkaUserRequest
                .builder()
                .serviceName(serviceName)
                .username(username)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasKafkaUserRequest.class,
                baseUrl,
                "/dbaas-kafka/{service-name}/user/{username}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasKafkaUserResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasKafkaUserResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasKafkaUserResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasServiceTypeRequestBuilder getDbaasServiceType() {
        return new com.exoscale.api.models.operations.GetDbaasServiceTypeRequestBuilder(this);
    }

    /**
     * Get a DBaaS service type
     * Get a DBaaS service type
     * @param serviceTypeName
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasServiceTypeResponse getDbaasServiceType(
            String serviceTypeName) throws Exception {
        com.exoscale.api.models.operations.GetDbaasServiceTypeRequest request =
            com.exoscale.api.models.operations.GetDbaasServiceTypeRequest
                .builder()
                .serviceTypeName(serviceTypeName)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasServiceTypeRequest.class,
                baseUrl,
                "/dbaas-service-type/{service-type-name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasServiceTypeResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasServiceTypeResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasServiceTypeResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasServiceType out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasServiceType>() {});
                res.withDbaasServiceType(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StartDbaasMysqlMaintenanceRequestBuilder startDbaasMysqlMaintenance() {
        return new com.exoscale.api.models.operations.StartDbaasMysqlMaintenanceRequestBuilder(this);
    }

    /**
     * Initiate MySQL maintenance update
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StartDbaasMysqlMaintenanceResponse startDbaasMysqlMaintenance(
            String name) throws Exception {
        com.exoscale.api.models.operations.StartDbaasMysqlMaintenanceRequest request =
            com.exoscale.api.models.operations.StartDbaasMysqlMaintenanceRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StartDbaasMysqlMaintenanceRequest.class,
                baseUrl,
                "/dbaas-mysql/{name}/maintenance/start",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StartDbaasMysqlMaintenanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StartDbaasMysqlMaintenanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StartDbaasMysqlMaintenanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ResetDbaasOpensearchUserPasswordRequestBuilder resetDbaasOpensearchUserPassword() {
        return new com.exoscale.api.models.operations.ResetDbaasOpensearchUserPasswordRequestBuilder(this);
    }

    /**
     * Reset the credentials of a DBaaS OpenSearch user
     * If no password is provided one will be generated automatically.
     * @param serviceName
     * @param username
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResetDbaasOpensearchUserPasswordResponse resetDbaasOpensearchUserPassword(
            String serviceName,
            String username,
            com.exoscale.api.models.operations.ResetDbaasOpensearchUserPasswordRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.ResetDbaasOpensearchUserPasswordRequest request =
            com.exoscale.api.models.operations.ResetDbaasOpensearchUserPasswordRequest
                .builder()
                .serviceName(serviceName)
                .username(username)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResetDbaasOpensearchUserPasswordRequest.class,
                baseUrl,
                "/dbaas-opensearch/{service-name}/user/{username}/password/reset",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResetDbaasOpensearchUserPasswordResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResetDbaasOpensearchUserPasswordResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResetDbaasOpensearchUserPasswordResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasServiceMetricsRequestBuilder getDbaasServiceMetrics() {
        return new com.exoscale.api.models.operations.GetDbaasServiceMetricsRequestBuilder(this);
    }

    /**
     * Get metrics of DBaaS service
     * Get metrics of DBaaS service
     * @param serviceName
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasServiceMetricsResponse getDbaasServiceMetrics(
            String serviceName,
            com.exoscale.api.models.operations.GetDbaasServiceMetricsRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.GetDbaasServiceMetricsRequest request =
            com.exoscale.api.models.operations.GetDbaasServiceMetricsRequest
                .builder()
                .serviceName(serviceName)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasServiceMetricsRequest.class,
                baseUrl,
                "/dbaas-service-metrics/{service-name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasServiceMetricsResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasServiceMetricsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasServiceMetricsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.GetDbaasServiceMetricsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.GetDbaasServiceMetricsResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasTaskMigrationCheckRequestBuilder createDbaasTaskMigrationCheck() {
        return new com.exoscale.api.models.operations.CreateDbaasTaskMigrationCheckRequestBuilder(this);
    }

    /**
     * Create a DBaaS task to check migration
     * @param service
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasTaskMigrationCheckResponse createDbaasTaskMigrationCheck(
            String service,
            com.exoscale.api.models.operations.CreateDbaasTaskMigrationCheckRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasTaskMigrationCheckRequest request =
            com.exoscale.api.models.operations.CreateDbaasTaskMigrationCheckRequest
                .builder()
                .service(service)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasTaskMigrationCheckRequest.class,
                baseUrl,
                "/dbaas-task-migration-check/{service}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasTaskMigrationCheckResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasTaskMigrationCheckResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasTaskMigrationCheckResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasIntegrationRequestBuilder deleteDbaasIntegration() {
        return new com.exoscale.api.models.operations.DeleteDbaasIntegrationRequestBuilder(this);
    }

    /**
     * Delete a DBaaS Integration
     * Delete a DBaaS Integration
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasIntegrationResponse deleteDbaasIntegration(
            String id) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasIntegrationRequest request =
            com.exoscale.api.models.operations.DeleteDbaasIntegrationRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasIntegrationRequest.class,
                baseUrl,
                "/dbaas-integration/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasIntegrationResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasIntegrationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasIntegrationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateDbaasIntegrationRequestBuilder updateDbaasIntegration() {
        return new com.exoscale.api.models.operations.UpdateDbaasIntegrationRequestBuilder(this);
    }

    /**
     * Update a existing DBaaS integration
     * Update a existing DBaaS integration
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateDbaasIntegrationResponse updateDbaasIntegration(
            String id,
            com.exoscale.api.models.operations.UpdateDbaasIntegrationRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateDbaasIntegrationRequest request =
            com.exoscale.api.models.operations.UpdateDbaasIntegrationRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateDbaasIntegrationRequest.class,
                baseUrl,
                "/dbaas-integration/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateDbaasIntegrationResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateDbaasIntegrationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateDbaasIntegrationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasIntegrationRequestBuilder getDbaasIntegration() {
        return new com.exoscale.api.models.operations.GetDbaasIntegrationRequestBuilder(this);
    }

    /**
     * Get a DBaaS Integration
     * Get a DBaaS Integration
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasIntegrationResponse getDbaasIntegration(
            String id) throws Exception {
        com.exoscale.api.models.operations.GetDbaasIntegrationRequest request =
            com.exoscale.api.models.operations.GetDbaasIntegrationRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasIntegrationRequest.class,
                baseUrl,
                "/dbaas-integration/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasIntegrationResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasIntegrationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasIntegrationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasIntegration out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasIntegration>() {});
                res.withDbaasIntegration(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ListDbaasIntegrationSettingsRequestBuilder listDbaasIntegrationSettings() {
        return new com.exoscale.api.models.operations.ListDbaasIntegrationSettingsRequestBuilder(this);
    }

    /**
     * Get DBaaS integration settings
     * Get DBaaS integration settings
     * @param integrationType
     * @param sourceType
     * @param destType
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ListDbaasIntegrationSettingsResponse listDbaasIntegrationSettings(
            String integrationType,
            String sourceType,
            String destType) throws Exception {
        com.exoscale.api.models.operations.ListDbaasIntegrationSettingsRequest request =
            com.exoscale.api.models.operations.ListDbaasIntegrationSettingsRequest
                .builder()
                .integrationType(integrationType)
                .sourceType(sourceType)
                .destType(destType)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ListDbaasIntegrationSettingsRequest.class,
                baseUrl,
                "/dbaas-integration-settings/{integration-type}/{source-type}/{dest-type}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ListDbaasIntegrationSettingsResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ListDbaasIntegrationSettingsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ListDbaasIntegrationSettingsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.ListDbaasIntegrationSettingsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.ListDbaasIntegrationSettingsResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasSettingsPgRequestBuilder getDbaasSettingsPg() {
        return new com.exoscale.api.models.operations.GetDbaasSettingsPgRequestBuilder(this);
    }

    /**
     * Get DBaaS PostgreSQL settings
     * Get DBaaS PostgreSQL settings
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasSettingsPgResponse getDbaasSettingsPgDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-settings-pg");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasSettingsPgResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasSettingsPgResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasSettingsPgResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.GetDbaasSettingsPgResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.GetDbaasSettingsPgResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StopDbaasRedisMigrationRequestBuilder stopDbaasRedisMigration() {
        return new com.exoscale.api.models.operations.StopDbaasRedisMigrationRequestBuilder(this);
    }

    /**
     * Stop a DBaaS Redis migration
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StopDbaasRedisMigrationResponse stopDbaasRedisMigration(
            String name) throws Exception {
        com.exoscale.api.models.operations.StopDbaasRedisMigrationRequest request =
            com.exoscale.api.models.operations.StopDbaasRedisMigrationRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StopDbaasRedisMigrationRequest.class,
                baseUrl,
                "/dbaas-redis/{name}/migration/stop",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StopDbaasRedisMigrationResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StopDbaasRedisMigrationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StopDbaasRedisMigrationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StopDbaasMysqlMigrationRequestBuilder stopDbaasMysqlMigration() {
        return new com.exoscale.api.models.operations.StopDbaasMysqlMigrationRequestBuilder(this);
    }

    /**
     * Stop a DBaaS MySQL migration
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StopDbaasMysqlMigrationResponse stopDbaasMysqlMigration(
            String name) throws Exception {
        com.exoscale.api.models.operations.StopDbaasMysqlMigrationRequest request =
            com.exoscale.api.models.operations.StopDbaasMysqlMigrationRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StopDbaasMysqlMigrationRequest.class,
                baseUrl,
                "/dbaas-mysql/{name}/migration/stop",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StopDbaasMysqlMigrationResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StopDbaasMysqlMigrationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StopDbaasMysqlMigrationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StartDbaasKafkaMaintenanceRequestBuilder startDbaasKafkaMaintenance() {
        return new com.exoscale.api.models.operations.StartDbaasKafkaMaintenanceRequestBuilder(this);
    }

    /**
     * Initiate Kafka maintenance update
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StartDbaasKafkaMaintenanceResponse startDbaasKafkaMaintenance(
            String name) throws Exception {
        com.exoscale.api.models.operations.StartDbaasKafkaMaintenanceRequest request =
            com.exoscale.api.models.operations.StartDbaasKafkaMaintenanceRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StartDbaasKafkaMaintenanceRequest.class,
                baseUrl,
                "/dbaas-kafka/{name}/maintenance/start",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StartDbaasKafkaMaintenanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StartDbaasKafkaMaintenanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StartDbaasKafkaMaintenanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateDbaasPgConnectionPoolRequestBuilder updateDbaasPgConnectionPool() {
        return new com.exoscale.api.models.operations.UpdateDbaasPgConnectionPoolRequestBuilder(this);
    }

    /**
     * Update a DBaaS PostgreSQL connection pool
     * @param serviceName
     * @param connectionPoolName
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateDbaasPgConnectionPoolResponse updateDbaasPgConnectionPool(
            String serviceName,
            String connectionPoolName,
            com.exoscale.api.models.operations.UpdateDbaasPgConnectionPoolRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateDbaasPgConnectionPoolRequest request =
            com.exoscale.api.models.operations.UpdateDbaasPgConnectionPoolRequest
                .builder()
                .serviceName(serviceName)
                .connectionPoolName(connectionPoolName)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateDbaasPgConnectionPoolRequest.class,
                baseUrl,
                "/dbaas-postgres/{service-name}/connection-pool/{connection-pool-name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateDbaasPgConnectionPoolResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateDbaasPgConnectionPoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateDbaasPgConnectionPoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasPgConnectionPoolRequestBuilder deleteDbaasPgConnectionPool() {
        return new com.exoscale.api.models.operations.DeleteDbaasPgConnectionPoolRequestBuilder(this);
    }

    /**
     * Delete a DBaaS PostgreSQL connection pool
     * @param serviceName
     * @param connectionPoolName
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasPgConnectionPoolResponse deleteDbaasPgConnectionPool(
            String serviceName,
            String connectionPoolName) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasPgConnectionPoolRequest request =
            com.exoscale.api.models.operations.DeleteDbaasPgConnectionPoolRequest
                .builder()
                .serviceName(serviceName)
                .connectionPoolName(connectionPoolName)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasPgConnectionPoolRequest.class,
                baseUrl,
                "/dbaas-postgres/{service-name}/connection-pool/{connection-pool-name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasPgConnectionPoolResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasPgConnectionPoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasPgConnectionPoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasMigrationStatusRequestBuilder getDbaasMigrationStatus() {
        return new com.exoscale.api.models.operations.GetDbaasMigrationStatusRequestBuilder(this);
    }

    /**
     * Get a DBaaS migration status
     * Get a DBaaS migration status
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasMigrationStatusResponse getDbaasMigrationStatus(
            String name) throws Exception {
        com.exoscale.api.models.operations.GetDbaasMigrationStatusRequest request =
            com.exoscale.api.models.operations.GetDbaasMigrationStatusRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasMigrationStatusRequest.class,
                baseUrl,
                "/dbaas-migration-status/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasMigrationStatusResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasMigrationStatusResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasMigrationStatusResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasMigrationStatus out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasMigrationStatus>() {});
                res.withDbaasMigrationStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasMysqlUserRequestBuilder deleteDbaasMysqlUser() {
        return new com.exoscale.api.models.operations.DeleteDbaasMysqlUserRequestBuilder(this);
    }

    /**
     * Delete a DBaaS MySQL user
     * @param serviceName
     * @param username
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasMysqlUserResponse deleteDbaasMysqlUser(
            String serviceName,
            String username) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasMysqlUserRequest request =
            com.exoscale.api.models.operations.DeleteDbaasMysqlUserRequest
                .builder()
                .serviceName(serviceName)
                .username(username)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasMysqlUserRequest.class,
                baseUrl,
                "/dbaas-mysql/{service-name}/user/{username}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasMysqlUserResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasMysqlUserResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasMysqlUserResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasServiceRequestBuilder deleteDbaasService() {
        return new com.exoscale.api.models.operations.DeleteDbaasServiceRequestBuilder(this);
    }

    /**
     * Delete a DBaaS service
     * Delete a DBaaS service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasServiceResponse deleteDbaasService(
            String name) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasServiceRequest request =
            com.exoscale.api.models.operations.DeleteDbaasServiceRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasServiceRequest.class,
                baseUrl,
                "/dbaas-service/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasServiceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasServiceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasServiceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasMysqlDatabaseRequestBuilder createDbaasMysqlDatabase() {
        return new com.exoscale.api.models.operations.CreateDbaasMysqlDatabaseRequestBuilder(this);
    }

    /**
     * Create a DBaaS MySQL database
     * @param serviceName
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasMysqlDatabaseResponse createDbaasMysqlDatabase(
            String serviceName,
            com.exoscale.api.models.operations.CreateDbaasMysqlDatabaseRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasMysqlDatabaseRequest request =
            com.exoscale.api.models.operations.CreateDbaasMysqlDatabaseRequest
                .builder()
                .serviceName(serviceName)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasMysqlDatabaseRequest.class,
                baseUrl,
                "/dbaas-mysql/{service-name}/database",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasMysqlDatabaseResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasMysqlDatabaseResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasMysqlDatabaseResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasSettingsKafkaRequestBuilder getDbaasSettingsKafka() {
        return new com.exoscale.api.models.operations.GetDbaasSettingsKafkaRequestBuilder(this);
    }

    /**
     * Get DBaaS Kafka settings
     * Get DBaaS Kafka settings
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasSettingsKafkaResponse getDbaasSettingsKafkaDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-settings-kafka");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasSettingsKafkaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasSettingsKafkaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasSettingsKafkaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.GetDbaasSettingsKafkaResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.GetDbaasSettingsKafkaResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasSettingsOpensearchRequestBuilder getDbaasSettingsOpensearch() {
        return new com.exoscale.api.models.operations.GetDbaasSettingsOpensearchRequestBuilder(this);
    }

    /**
     * Get DBaaS OpenSearch settings
     * Get DBaaS OpenSearch settings
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasSettingsOpensearchResponse getDbaasSettingsOpensearchDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-settings-opensearch");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasSettingsOpensearchResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasSettingsOpensearchResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasSettingsOpensearchResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.GetDbaasSettingsOpensearchResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.GetDbaasSettingsOpensearchResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasServiceGrafanaRequestBuilder deleteDbaasServiceGrafana() {
        return new com.exoscale.api.models.operations.DeleteDbaasServiceGrafanaRequestBuilder(this);
    }

    /**
     * Delete a Grafana service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasServiceGrafanaResponse deleteDbaasServiceGrafana(
            String name) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasServiceGrafanaRequest request =
            com.exoscale.api.models.operations.DeleteDbaasServiceGrafanaRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasServiceGrafanaRequest.class,
                baseUrl,
                "/dbaas-grafana/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasServiceGrafanaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasServiceGrafanaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasServiceGrafanaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasServiceGrafanaRequestBuilder getDbaasServiceGrafana() {
        return new com.exoscale.api.models.operations.GetDbaasServiceGrafanaRequestBuilder(this);
    }

    /**
     * Get a DBaaS Grafana service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasServiceGrafanaResponse getDbaasServiceGrafana(
            String name) throws Exception {
        com.exoscale.api.models.operations.GetDbaasServiceGrafanaRequest request =
            com.exoscale.api.models.operations.GetDbaasServiceGrafanaRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasServiceGrafanaRequest.class,
                baseUrl,
                "/dbaas-grafana/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasServiceGrafanaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasServiceGrafanaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasServiceGrafanaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasServiceGrafana out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasServiceGrafana>() {});
                res.withDbaasServiceGrafana(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateDbaasServiceGrafanaRequestBuilder updateDbaasServiceGrafana() {
        return new com.exoscale.api.models.operations.UpdateDbaasServiceGrafanaRequestBuilder(this);
    }

    /**
     * Update a DBaaS Grafana service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateDbaasServiceGrafanaResponse updateDbaasServiceGrafana(
            String name,
            com.exoscale.api.models.operations.UpdateDbaasServiceGrafanaRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateDbaasServiceGrafanaRequest request =
            com.exoscale.api.models.operations.UpdateDbaasServiceGrafanaRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateDbaasServiceGrafanaRequest.class,
                baseUrl,
                "/dbaas-grafana/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateDbaasServiceGrafanaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateDbaasServiceGrafanaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateDbaasServiceGrafanaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasServiceGrafanaRequestBuilder createDbaasServiceGrafana() {
        return new com.exoscale.api.models.operations.CreateDbaasServiceGrafanaRequestBuilder(this);
    }

    /**
     * Create a DBaaS Grafana service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasServiceGrafanaResponse createDbaasServiceGrafana(
            String name,
            com.exoscale.api.models.operations.CreateDbaasServiceGrafanaRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasServiceGrafanaRequest request =
            com.exoscale.api.models.operations.CreateDbaasServiceGrafanaRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasServiceGrafanaRequest.class,
                baseUrl,
                "/dbaas-grafana/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasServiceGrafanaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasServiceGrafanaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasServiceGrafanaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StartDbaasOpensearchMaintenanceRequestBuilder startDbaasOpensearchMaintenance() {
        return new com.exoscale.api.models.operations.StartDbaasOpensearchMaintenanceRequestBuilder(this);
    }

    /**
     * Initiate OpenSearch maintenance update
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StartDbaasOpensearchMaintenanceResponse startDbaasOpensearchMaintenance(
            String name) throws Exception {
        com.exoscale.api.models.operations.StartDbaasOpensearchMaintenanceRequest request =
            com.exoscale.api.models.operations.StartDbaasOpensearchMaintenanceRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StartDbaasOpensearchMaintenanceRequest.class,
                baseUrl,
                "/dbaas-opensearch/{name}/maintenance/start",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StartDbaasOpensearchMaintenanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StartDbaasOpensearchMaintenanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StartDbaasOpensearchMaintenanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasKafkaAclConfigRequestBuilder getDbaasKafkaAclConfig() {
        return new com.exoscale.api.models.operations.GetDbaasKafkaAclConfigRequestBuilder(this);
    }

    /**
     * Get DBaaS kafka ACL configuration
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasKafkaAclConfigResponse getDbaasKafkaAclConfig(
            String name) throws Exception {
        com.exoscale.api.models.operations.GetDbaasKafkaAclConfigRequest request =
            com.exoscale.api.models.operations.GetDbaasKafkaAclConfigRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasKafkaAclConfigRequest.class,
                baseUrl,
                "/dbaas-kafka/{name}/acl-config",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasKafkaAclConfigResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasKafkaAclConfigResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasKafkaAclConfigResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasKafkaAcls out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasKafkaAcls>() {});
                res.withDbaasKafkaAcls(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ResetDbaasKafkaUserPasswordRequestBuilder resetDbaasKafkaUserPassword() {
        return new com.exoscale.api.models.operations.ResetDbaasKafkaUserPasswordRequestBuilder(this);
    }

    /**
     * Reset the credentials of a DBaaS Kafka user
     * If no password is provided one will be generated automatically.
     * @param serviceName
     * @param username
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResetDbaasKafkaUserPasswordResponse resetDbaasKafkaUserPassword(
            String serviceName,
            String username,
            com.exoscale.api.models.operations.ResetDbaasKafkaUserPasswordRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.ResetDbaasKafkaUserPasswordRequest request =
            com.exoscale.api.models.operations.ResetDbaasKafkaUserPasswordRequest
                .builder()
                .serviceName(serviceName)
                .username(username)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResetDbaasKafkaUserPasswordRequest.class,
                baseUrl,
                "/dbaas-kafka/{service-name}/user/{username}/password/reset",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResetDbaasKafkaUserPasswordResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResetDbaasKafkaUserPasswordResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResetDbaasKafkaUserPasswordResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasServiceOpensearchRequestBuilder createDbaasServiceOpensearch() {
        return new com.exoscale.api.models.operations.CreateDbaasServiceOpensearchRequestBuilder(this);
    }

    /**
     * Create a DBaaS OpenSearch service
     * Create a DBaaS OpenSearch service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasServiceOpensearchResponse createDbaasServiceOpensearch(
            String name,
            com.exoscale.api.models.operations.CreateDbaasServiceOpensearchRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasServiceOpensearchRequest request =
            com.exoscale.api.models.operations.CreateDbaasServiceOpensearchRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasServiceOpensearchRequest.class,
                baseUrl,
                "/dbaas-opensearch/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasServiceOpensearchResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasServiceOpensearchResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasServiceOpensearchResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasServiceOpensearchRequestBuilder getDbaasServiceOpensearch() {
        return new com.exoscale.api.models.operations.GetDbaasServiceOpensearchRequestBuilder(this);
    }

    /**
     * Get a DBaaS OpenSearch service
     * Get a DBaaS OpenSearch service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasServiceOpensearchResponse getDbaasServiceOpensearch(
            String name) throws Exception {
        com.exoscale.api.models.operations.GetDbaasServiceOpensearchRequest request =
            com.exoscale.api.models.operations.GetDbaasServiceOpensearchRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasServiceOpensearchRequest.class,
                baseUrl,
                "/dbaas-opensearch/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasServiceOpensearchResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasServiceOpensearchResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasServiceOpensearchResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasServiceOpensearch out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasServiceOpensearch>() {});
                res.withDbaasServiceOpensearch(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasServiceOpensearchRequestBuilder deleteDbaasServiceOpensearch() {
        return new com.exoscale.api.models.operations.DeleteDbaasServiceOpensearchRequestBuilder(this);
    }

    /**
     * Delete a OpenSearch service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasServiceOpensearchResponse deleteDbaasServiceOpensearch(
            String name) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasServiceOpensearchRequest request =
            com.exoscale.api.models.operations.DeleteDbaasServiceOpensearchRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasServiceOpensearchRequest.class,
                baseUrl,
                "/dbaas-opensearch/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasServiceOpensearchResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasServiceOpensearchResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasServiceOpensearchResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateDbaasServiceOpensearchRequestBuilder updateDbaasServiceOpensearch() {
        return new com.exoscale.api.models.operations.UpdateDbaasServiceOpensearchRequestBuilder(this);
    }

    /**
     * Update a DBaaS OpenSearch service
     * Update a DBaaS OpenSearch service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateDbaasServiceOpensearchResponse updateDbaasServiceOpensearch(
            String name,
            com.exoscale.api.models.operations.UpdateDbaasServiceOpensearchRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateDbaasServiceOpensearchRequest request =
            com.exoscale.api.models.operations.UpdateDbaasServiceOpensearchRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateDbaasServiceOpensearchRequest.class,
                baseUrl,
                "/dbaas-opensearch/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateDbaasServiceOpensearchResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateDbaasServiceOpensearchResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateDbaasServiceOpensearchResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasServiceRedisRequestBuilder deleteDbaasServiceRedis() {
        return new com.exoscale.api.models.operations.DeleteDbaasServiceRedisRequestBuilder(this);
    }

    /**
     * Delete a Redis service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasServiceRedisResponse deleteDbaasServiceRedis(
            String name) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasServiceRedisRequest request =
            com.exoscale.api.models.operations.DeleteDbaasServiceRedisRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasServiceRedisRequest.class,
                baseUrl,
                "/dbaas-redis/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasServiceRedisResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasServiceRedisResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasServiceRedisResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateDbaasServiceRedisRequestBuilder updateDbaasServiceRedis() {
        return new com.exoscale.api.models.operations.UpdateDbaasServiceRedisRequestBuilder(this);
    }

    /**
     * Update a DBaaS Redis service
     * Update a DBaaS Redis service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateDbaasServiceRedisResponse updateDbaasServiceRedis(
            String name,
            com.exoscale.api.models.operations.UpdateDbaasServiceRedisRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateDbaasServiceRedisRequest request =
            com.exoscale.api.models.operations.UpdateDbaasServiceRedisRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateDbaasServiceRedisRequest.class,
                baseUrl,
                "/dbaas-redis/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateDbaasServiceRedisResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateDbaasServiceRedisResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateDbaasServiceRedisResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasServiceRedisRequestBuilder getDbaasServiceRedis() {
        return new com.exoscale.api.models.operations.GetDbaasServiceRedisRequestBuilder(this);
    }

    /**
     * Get a DBaaS Redis service
     * Get a DBaaS Redis service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasServiceRedisResponse getDbaasServiceRedis(
            String name) throws Exception {
        com.exoscale.api.models.operations.GetDbaasServiceRedisRequest request =
            com.exoscale.api.models.operations.GetDbaasServiceRedisRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasServiceRedisRequest.class,
                baseUrl,
                "/dbaas-redis/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasServiceRedisResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasServiceRedisResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasServiceRedisResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasServiceRedis out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasServiceRedis>() {});
                res.withDbaasServiceRedis(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasServiceRedisRequestBuilder createDbaasServiceRedis() {
        return new com.exoscale.api.models.operations.CreateDbaasServiceRedisRequestBuilder(this);
    }

    /**
     * Create a DBaaS Redis service
     * Create a DBaaS Redis service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasServiceRedisResponse createDbaasServiceRedis(
            String name,
            com.exoscale.api.models.operations.CreateDbaasServiceRedisRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasServiceRedisRequest request =
            com.exoscale.api.models.operations.CreateDbaasServiceRedisRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasServiceRedisRequest.class,
                baseUrl,
                "/dbaas-redis/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasServiceRedisResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasServiceRedisResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasServiceRedisResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateDbaasServicePgRequestBuilder updateDbaasServicePg() {
        return new com.exoscale.api.models.operations.UpdateDbaasServicePgRequestBuilder(this);
    }

    /**
     * Update a DBaaS PostgreSQL service
     * Update a DBaaS PostgreSQL service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateDbaasServicePgResponse updateDbaasServicePg(
            String name,
            com.exoscale.api.models.operations.UpdateDbaasServicePgRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateDbaasServicePgRequest request =
            com.exoscale.api.models.operations.UpdateDbaasServicePgRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateDbaasServicePgRequest.class,
                baseUrl,
                "/dbaas-postgres/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateDbaasServicePgResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateDbaasServicePgResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateDbaasServicePgResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasServicePgRequestBuilder getDbaasServicePg() {
        return new com.exoscale.api.models.operations.GetDbaasServicePgRequestBuilder(this);
    }

    /**
     * Get a DBaaS PostgreSQL service
     * Get a DBaaS PostgreSQL service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasServicePgResponse getDbaasServicePg(
            String name) throws Exception {
        com.exoscale.api.models.operations.GetDbaasServicePgRequest request =
            com.exoscale.api.models.operations.GetDbaasServicePgRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasServicePgRequest.class,
                baseUrl,
                "/dbaas-postgres/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasServicePgResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasServicePgResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasServicePgResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasServicePg out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasServicePg>() {});
                res.withDbaasServicePg(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasServicePgRequestBuilder createDbaasServicePg() {
        return new com.exoscale.api.models.operations.CreateDbaasServicePgRequestBuilder(this);
    }

    /**
     * Create a DBaaS PostgreSQL service
     * @param name
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasServicePgResponse createDbaasServicePg(
            String name,
            com.exoscale.api.models.operations.CreateDbaasServicePgRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateDbaasServicePgRequest request =
            com.exoscale.api.models.operations.CreateDbaasServicePgRequest
                .builder()
                .name(name)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateDbaasServicePgRequest.class,
                baseUrl,
                "/dbaas-postgres/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasServicePgResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasServicePgResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasServicePgResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasServicePgRequestBuilder deleteDbaasServicePg() {
        return new com.exoscale.api.models.operations.DeleteDbaasServicePgRequestBuilder(this);
    }

    /**
     * Delete a Postgres service
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasServicePgResponse deleteDbaasServicePg(
            String name) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasServicePgRequest request =
            com.exoscale.api.models.operations.DeleteDbaasServicePgRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasServicePgRequest.class,
                baseUrl,
                "/dbaas-postgres/{name}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasServicePgResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasServicePgResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasServicePgResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateDbaasIntegrationRequestBuilder createDbaasIntegration() {
        return new com.exoscale.api.models.operations.CreateDbaasIntegrationRequestBuilder(this);
    }

    /**
     * Create a new DBaaS integration between two services
     * Create a new DBaaS integration between two services
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateDbaasIntegrationResponse createDbaasIntegration(
            com.exoscale.api.models.operations.CreateDbaasIntegrationRequestBody request) throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/dbaas-integration");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.exoscale.api.models.operations.CreateDbaasIntegrationRequestBody>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateDbaasIntegrationResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateDbaasIntegrationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateDbaasIntegrationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetDbaasTaskRequestBuilder getDbaasTask() {
        return new com.exoscale.api.models.operations.GetDbaasTaskRequestBuilder(this);
    }

    /**
     * Get a DBaaS task
     * Get a DBaaS task
     * @param service
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetDbaasTaskResponse getDbaasTask(
            String service,
            String id) throws Exception {
        com.exoscale.api.models.operations.GetDbaasTaskRequest request =
            com.exoscale.api.models.operations.GetDbaasTaskRequest
                .builder()
                .service(service)
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetDbaasTaskRequest.class,
                baseUrl,
                "/dbaas-task/{service}/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetDbaasTaskResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetDbaasTaskResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetDbaasTaskResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.DbaasTask out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.DbaasTask>() {});
                res.withDbaasTask(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.StartDbaasRedisMaintenanceRequestBuilder startDbaasRedisMaintenance() {
        return new com.exoscale.api.models.operations.StartDbaasRedisMaintenanceRequestBuilder(this);
    }

    /**
     * Initiate Redis maintenance update
     * @param name
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.StartDbaasRedisMaintenanceResponse startDbaasRedisMaintenance(
            String name) throws Exception {
        com.exoscale.api.models.operations.StartDbaasRedisMaintenanceRequest request =
            com.exoscale.api.models.operations.StartDbaasRedisMaintenanceRequest
                .builder()
                .name(name)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.StartDbaasRedisMaintenanceRequest.class,
                baseUrl,
                "/dbaas-redis/{name}/maintenance/start",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.StartDbaasRedisMaintenanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.StartDbaasRedisMaintenanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.StartDbaasRedisMaintenanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteDbaasKafkaTopicAclConfigRequestBuilder deleteDbaasKafkaTopicAclConfig() {
        return new com.exoscale.api.models.operations.DeleteDbaasKafkaTopicAclConfigRequestBuilder(this);
    }

    /**
     * Delete a Kafka ACL entry
     * @param name
     * @param aclId
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteDbaasKafkaTopicAclConfigResponse deleteDbaasKafkaTopicAclConfig(
            String name,
            String aclId) throws Exception {
        com.exoscale.api.models.operations.DeleteDbaasKafkaTopicAclConfigRequest request =
            com.exoscale.api.models.operations.DeleteDbaasKafkaTopicAclConfigRequest
                .builder()
                .name(name)
                .aclId(aclId)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteDbaasKafkaTopicAclConfigRequest.class,
                baseUrl,
                "/dbaas-kafka/{name}/topic/acl-config/{acl-id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteDbaasKafkaTopicAclConfigResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteDbaasKafkaTopicAclConfigResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteDbaasKafkaTopicAclConfigResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ResetDbaasPostgresUserPasswordRequestBuilder resetDbaasPostgresUserPassword() {
        return new com.exoscale.api.models.operations.ResetDbaasPostgresUserPasswordRequestBuilder(this);
    }

    /**
     * Reset the credentials of a DBaaS Postgres user
     * If no password is provided one will be generated automatically.
     * @param serviceName
     * @param username
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResetDbaasPostgresUserPasswordResponse resetDbaasPostgresUserPassword(
            String serviceName,
            String username,
            com.exoscale.api.models.operations.ResetDbaasPostgresUserPasswordRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.ResetDbaasPostgresUserPasswordRequest request =
            com.exoscale.api.models.operations.ResetDbaasPostgresUserPasswordRequest
                .builder()
                .serviceName(serviceName)
                .username(username)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResetDbaasPostgresUserPasswordRequest.class,
                baseUrl,
                "/dbaas-postgres/{service-name}/user/{username}/password/reset",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResetDbaasPostgresUserPasswordResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResetDbaasPostgresUserPasswordResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResetDbaasPostgresUserPasswordResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
