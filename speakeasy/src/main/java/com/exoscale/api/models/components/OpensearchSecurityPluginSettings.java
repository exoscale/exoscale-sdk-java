/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class OpensearchSecurityPluginSettings {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_rate_limiting")
    private Optional<? extends IPAddressRateLimitingSettings> ipRateLimiting;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internal_authentication_backend_limiting")
    private Optional<? extends InternalAuthenticationBackendLimiting> internalAuthenticationBackendLimiting;

    public OpensearchSecurityPluginSettings(
            @JsonProperty("ip_rate_limiting") Optional<? extends IPAddressRateLimitingSettings> ipRateLimiting,
            @JsonProperty("internal_authentication_backend_limiting") Optional<? extends InternalAuthenticationBackendLimiting> internalAuthenticationBackendLimiting) {
        Utils.checkNotNull(ipRateLimiting, "ipRateLimiting");
        Utils.checkNotNull(internalAuthenticationBackendLimiting, "internalAuthenticationBackendLimiting");
        this.ipRateLimiting = ipRateLimiting;
        this.internalAuthenticationBackendLimiting = internalAuthenticationBackendLimiting;
    }

    public Optional<? extends IPAddressRateLimitingSettings> ipRateLimiting() {
        return ipRateLimiting;
    }

    public Optional<? extends InternalAuthenticationBackendLimiting> internalAuthenticationBackendLimiting() {
        return internalAuthenticationBackendLimiting;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OpensearchSecurityPluginSettings withIpRateLimiting(IPAddressRateLimitingSettings ipRateLimiting) {
        Utils.checkNotNull(ipRateLimiting, "ipRateLimiting");
        this.ipRateLimiting = Optional.ofNullable(ipRateLimiting);
        return this;
    }

    public OpensearchSecurityPluginSettings withIpRateLimiting(Optional<? extends IPAddressRateLimitingSettings> ipRateLimiting) {
        Utils.checkNotNull(ipRateLimiting, "ipRateLimiting");
        this.ipRateLimiting = ipRateLimiting;
        return this;
    }

    public OpensearchSecurityPluginSettings withInternalAuthenticationBackendLimiting(InternalAuthenticationBackendLimiting internalAuthenticationBackendLimiting) {
        Utils.checkNotNull(internalAuthenticationBackendLimiting, "internalAuthenticationBackendLimiting");
        this.internalAuthenticationBackendLimiting = Optional.ofNullable(internalAuthenticationBackendLimiting);
        return this;
    }

    public OpensearchSecurityPluginSettings withInternalAuthenticationBackendLimiting(Optional<? extends InternalAuthenticationBackendLimiting> internalAuthenticationBackendLimiting) {
        Utils.checkNotNull(internalAuthenticationBackendLimiting, "internalAuthenticationBackendLimiting");
        this.internalAuthenticationBackendLimiting = internalAuthenticationBackendLimiting;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OpensearchSecurityPluginSettings other = (OpensearchSecurityPluginSettings) o;
        return 
            java.util.Objects.deepEquals(this.ipRateLimiting, other.ipRateLimiting) &&
            java.util.Objects.deepEquals(this.internalAuthenticationBackendLimiting, other.internalAuthenticationBackendLimiting);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            ipRateLimiting,
            internalAuthenticationBackendLimiting);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OpensearchSecurityPluginSettings.class,
                "ipRateLimiting", ipRateLimiting,
                "internalAuthenticationBackendLimiting", internalAuthenticationBackendLimiting);
    }
    
    public final static class Builder {
 
        private Optional<? extends IPAddressRateLimitingSettings> ipRateLimiting = Optional.empty();
 
        private Optional<? extends InternalAuthenticationBackendLimiting> internalAuthenticationBackendLimiting = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ipRateLimiting(IPAddressRateLimitingSettings ipRateLimiting) {
            Utils.checkNotNull(ipRateLimiting, "ipRateLimiting");
            this.ipRateLimiting = Optional.ofNullable(ipRateLimiting);
            return this;
        }

        public Builder ipRateLimiting(Optional<? extends IPAddressRateLimitingSettings> ipRateLimiting) {
            Utils.checkNotNull(ipRateLimiting, "ipRateLimiting");
            this.ipRateLimiting = ipRateLimiting;
            return this;
        }

        public Builder internalAuthenticationBackendLimiting(InternalAuthenticationBackendLimiting internalAuthenticationBackendLimiting) {
            Utils.checkNotNull(internalAuthenticationBackendLimiting, "internalAuthenticationBackendLimiting");
            this.internalAuthenticationBackendLimiting = Optional.ofNullable(internalAuthenticationBackendLimiting);
            return this;
        }

        public Builder internalAuthenticationBackendLimiting(Optional<? extends InternalAuthenticationBackendLimiting> internalAuthenticationBackendLimiting) {
            Utils.checkNotNull(internalAuthenticationBackendLimiting, "internalAuthenticationBackendLimiting");
            this.internalAuthenticationBackendLimiting = internalAuthenticationBackendLimiting;
            return this;
        }
        
        public OpensearchSecurityPluginSettings build() {
            return new OpensearchSecurityPluginSettings(
                ipRateLimiting,
                internalAuthenticationBackendLimiting);
        }
    }
}

