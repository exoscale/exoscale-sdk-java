/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * ListBlockStorageSnapshotsResponseBody - 200
 */

public class ListBlockStorageSnapshotsResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block-storage-snapshots")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.BlockStorageSnapshot>> blockStorageSnapshots;

    public ListBlockStorageSnapshotsResponseBody(
            @JsonProperty("block-storage-snapshots") Optional<? extends java.util.List<com.exoscale.api.models.components.BlockStorageSnapshot>> blockStorageSnapshots) {
        Utils.checkNotNull(blockStorageSnapshots, "blockStorageSnapshots");
        this.blockStorageSnapshots = blockStorageSnapshots;
    }

    public Optional<? extends java.util.List<com.exoscale.api.models.components.BlockStorageSnapshot>> blockStorageSnapshots() {
        return blockStorageSnapshots;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListBlockStorageSnapshotsResponseBody withBlockStorageSnapshots(java.util.List<com.exoscale.api.models.components.BlockStorageSnapshot> blockStorageSnapshots) {
        Utils.checkNotNull(blockStorageSnapshots, "blockStorageSnapshots");
        this.blockStorageSnapshots = Optional.ofNullable(blockStorageSnapshots);
        return this;
    }

    public ListBlockStorageSnapshotsResponseBody withBlockStorageSnapshots(Optional<? extends java.util.List<com.exoscale.api.models.components.BlockStorageSnapshot>> blockStorageSnapshots) {
        Utils.checkNotNull(blockStorageSnapshots, "blockStorageSnapshots");
        this.blockStorageSnapshots = blockStorageSnapshots;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListBlockStorageSnapshotsResponseBody other = (ListBlockStorageSnapshotsResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.blockStorageSnapshots, other.blockStorageSnapshots);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            blockStorageSnapshots);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListBlockStorageSnapshotsResponseBody.class,
                "blockStorageSnapshots", blockStorageSnapshots);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.BlockStorageSnapshot>> blockStorageSnapshots = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder blockStorageSnapshots(java.util.List<com.exoscale.api.models.components.BlockStorageSnapshot> blockStorageSnapshots) {
            Utils.checkNotNull(blockStorageSnapshots, "blockStorageSnapshots");
            this.blockStorageSnapshots = Optional.ofNullable(blockStorageSnapshots);
            return this;
        }

        public Builder blockStorageSnapshots(Optional<? extends java.util.List<com.exoscale.api.models.components.BlockStorageSnapshot>> blockStorageSnapshots) {
            Utils.checkNotNull(blockStorageSnapshots, "blockStorageSnapshots");
            this.blockStorageSnapshots = blockStorageSnapshots;
            return this;
        }
        
        public ListBlockStorageSnapshotsResponseBody build() {
            return new ListBlockStorageSnapshotsResponseBody(
                blockStorageSnapshots);
        }
    }
}

