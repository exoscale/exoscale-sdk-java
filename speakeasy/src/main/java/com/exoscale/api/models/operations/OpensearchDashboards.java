/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * OpensearchDashboards - OpenSearch Dashboards settings
 */

public class OpensearchDashboards {

    /**
     * Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch (default: 30000)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opensearch-request-timeout")
    private Optional<? extends Long> opensearchRequestTimeout;

    /**
     * Enable or disable OpenSearch Dashboards (default: true)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<? extends Boolean> enabled;

    /**
     * Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. (default: 128)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max-old-space-size")
    private Optional<? extends Long> maxOldSpaceSize;

    public OpensearchDashboards(
            @JsonProperty("opensearch-request-timeout") Optional<? extends Long> opensearchRequestTimeout,
            @JsonProperty("enabled") Optional<? extends Boolean> enabled,
            @JsonProperty("max-old-space-size") Optional<? extends Long> maxOldSpaceSize) {
        Utils.checkNotNull(opensearchRequestTimeout, "opensearchRequestTimeout");
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(maxOldSpaceSize, "maxOldSpaceSize");
        this.opensearchRequestTimeout = opensearchRequestTimeout;
        this.enabled = enabled;
        this.maxOldSpaceSize = maxOldSpaceSize;
    }

    /**
     * Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch (default: 30000)
     */
    public Optional<? extends Long> opensearchRequestTimeout() {
        return opensearchRequestTimeout;
    }

    /**
     * Enable or disable OpenSearch Dashboards (default: true)
     */
    public Optional<? extends Boolean> enabled() {
        return enabled;
    }

    /**
     * Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. (default: 128)
     */
    public Optional<? extends Long> maxOldSpaceSize() {
        return maxOldSpaceSize;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch (default: 30000)
     */
    public OpensearchDashboards withOpensearchRequestTimeout(long opensearchRequestTimeout) {
        Utils.checkNotNull(opensearchRequestTimeout, "opensearchRequestTimeout");
        this.opensearchRequestTimeout = Optional.ofNullable(opensearchRequestTimeout);
        return this;
    }

    /**
     * Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch (default: 30000)
     */
    public OpensearchDashboards withOpensearchRequestTimeout(Optional<? extends Long> opensearchRequestTimeout) {
        Utils.checkNotNull(opensearchRequestTimeout, "opensearchRequestTimeout");
        this.opensearchRequestTimeout = opensearchRequestTimeout;
        return this;
    }

    /**
     * Enable or disable OpenSearch Dashboards (default: true)
     */
    public OpensearchDashboards withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    /**
     * Enable or disable OpenSearch Dashboards (default: true)
     */
    public OpensearchDashboards withEnabled(Optional<? extends Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. (default: 128)
     */
    public OpensearchDashboards withMaxOldSpaceSize(long maxOldSpaceSize) {
        Utils.checkNotNull(maxOldSpaceSize, "maxOldSpaceSize");
        this.maxOldSpaceSize = Optional.ofNullable(maxOldSpaceSize);
        return this;
    }

    /**
     * Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. (default: 128)
     */
    public OpensearchDashboards withMaxOldSpaceSize(Optional<? extends Long> maxOldSpaceSize) {
        Utils.checkNotNull(maxOldSpaceSize, "maxOldSpaceSize");
        this.maxOldSpaceSize = maxOldSpaceSize;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OpensearchDashboards other = (OpensearchDashboards) o;
        return 
            java.util.Objects.deepEquals(this.opensearchRequestTimeout, other.opensearchRequestTimeout) &&
            java.util.Objects.deepEquals(this.enabled, other.enabled) &&
            java.util.Objects.deepEquals(this.maxOldSpaceSize, other.maxOldSpaceSize);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            opensearchRequestTimeout,
            enabled,
            maxOldSpaceSize);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OpensearchDashboards.class,
                "opensearchRequestTimeout", opensearchRequestTimeout,
                "enabled", enabled,
                "maxOldSpaceSize", maxOldSpaceSize);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> opensearchRequestTimeout = Optional.empty();
 
        private Optional<? extends Boolean> enabled = Optional.empty();
 
        private Optional<? extends Long> maxOldSpaceSize = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch (default: 30000)
         */
        public Builder opensearchRequestTimeout(long opensearchRequestTimeout) {
            Utils.checkNotNull(opensearchRequestTimeout, "opensearchRequestTimeout");
            this.opensearchRequestTimeout = Optional.ofNullable(opensearchRequestTimeout);
            return this;
        }

        /**
         * Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch (default: 30000)
         */
        public Builder opensearchRequestTimeout(Optional<? extends Long> opensearchRequestTimeout) {
            Utils.checkNotNull(opensearchRequestTimeout, "opensearchRequestTimeout");
            this.opensearchRequestTimeout = opensearchRequestTimeout;
            return this;
        }

        /**
         * Enable or disable OpenSearch Dashboards (default: true)
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * Enable or disable OpenSearch Dashboards (default: true)
         */
        public Builder enabled(Optional<? extends Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        /**
         * Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. (default: 128)
         */
        public Builder maxOldSpaceSize(long maxOldSpaceSize) {
            Utils.checkNotNull(maxOldSpaceSize, "maxOldSpaceSize");
            this.maxOldSpaceSize = Optional.ofNullable(maxOldSpaceSize);
            return this;
        }

        /**
         * Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. (default: 128)
         */
        public Builder maxOldSpaceSize(Optional<? extends Long> maxOldSpaceSize) {
            Utils.checkNotNull(maxOldSpaceSize, "maxOldSpaceSize");
            this.maxOldSpaceSize = maxOldSpaceSize;
            return this;
        }
        
        public OpensearchDashboards build() {
            return new OpensearchDashboards(
                opensearchRequestTimeout,
                enabled,
                maxOldSpaceSize);
        }
    }
}

