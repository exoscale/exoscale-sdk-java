/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateInstanceRequestBody {

    /**
     * Instance Anti-affinity Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anti-affinity-groups")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public-ip-assignment")
    private Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    /**
     * Start Instance on creation (default: true)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto-start")
    private Optional<? extends Boolean> autoStart;

    /**
     * Instance Security Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security-groups")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups;

    /**
     * Instance name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Compute instance type
     */
    @JsonProperty("instance-type")
    private com.exoscale.api.models.components.InstanceTypeInput instanceType;

    /**
     * Instance template
     */
    @JsonProperty("template")
    private com.exoscale.api.models.components.TemplateInput template;

    /**
     * SSH key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh-key")
    private Optional<? extends com.exoscale.api.models.components.SshKeyInput> sshKey;

    /**
     * Instance Cloud-init user-data
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user-data")
    private Optional<? extends String> userData;

    /**
     * Deploy target
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deploy-target")
    private Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget;

    /**
     * Enable IPv6. DEPRECATED: use `public-ip-assignments`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv6-enabled")
    private Optional<? extends Boolean> ipv6Enabled;

    /**
     * Instance disk size in GB
     */
    @JsonProperty("disk-size")
    private long diskSize;

    /**
     * Instance SSH Keys
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh-keys")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.SshKeyInput>> sshKeys;

    public CreateInstanceRequestBody(
            @JsonProperty("anti-affinity-groups") Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups,
            @JsonProperty("public-ip-assignment") Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("auto-start") Optional<? extends Boolean> autoStart,
            @JsonProperty("security-groups") Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("instance-type") com.exoscale.api.models.components.InstanceTypeInput instanceType,
            @JsonProperty("template") com.exoscale.api.models.components.TemplateInput template,
            @JsonProperty("ssh-key") Optional<? extends com.exoscale.api.models.components.SshKeyInput> sshKey,
            @JsonProperty("user-data") Optional<? extends String> userData,
            @JsonProperty("deploy-target") Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget,
            @JsonProperty("ipv6-enabled") Optional<? extends Boolean> ipv6Enabled,
            @JsonProperty("disk-size") long diskSize,
            @JsonProperty("ssh-keys") Optional<? extends java.util.List<com.exoscale.api.models.components.SshKeyInput>> sshKeys) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(autoStart, "autoStart");
        Utils.checkNotNull(securityGroups, "securityGroups");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(instanceType, "instanceType");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(sshKey, "sshKey");
        Utils.checkNotNull(userData, "userData");
        Utils.checkNotNull(deployTarget, "deployTarget");
        Utils.checkNotNull(ipv6Enabled, "ipv6Enabled");
        Utils.checkNotNull(diskSize, "diskSize");
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.antiAffinityGroups = antiAffinityGroups;
        this.publicIpAssignment = publicIpAssignment;
        this.labels = labels;
        this.autoStart = autoStart;
        this.securityGroups = securityGroups;
        this.name = name;
        this.instanceType = instanceType;
        this.template = template;
        this.sshKey = sshKey;
        this.userData = userData;
        this.deployTarget = deployTarget;
        this.ipv6Enabled = ipv6Enabled;
        this.diskSize = diskSize;
        this.sshKeys = sshKeys;
    }

    /**
     * Instance Anti-affinity Groups
     */
    public Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups() {
        return antiAffinityGroups;
    }

    public Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment() {
        return publicIpAssignment;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    /**
     * Start Instance on creation (default: true)
     */
    public Optional<? extends Boolean> autoStart() {
        return autoStart;
    }

    /**
     * Instance Security Groups
     */
    public Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups() {
        return securityGroups;
    }

    /**
     * Instance name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Compute instance type
     */
    public com.exoscale.api.models.components.InstanceTypeInput instanceType() {
        return instanceType;
    }

    /**
     * Instance template
     */
    public com.exoscale.api.models.components.TemplateInput template() {
        return template;
    }

    /**
     * SSH key
     */
    public Optional<? extends com.exoscale.api.models.components.SshKeyInput> sshKey() {
        return sshKey;
    }

    /**
     * Instance Cloud-init user-data
     */
    public Optional<? extends String> userData() {
        return userData;
    }

    /**
     * Deploy target
     */
    public Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget() {
        return deployTarget;
    }

    /**
     * Enable IPv6. DEPRECATED: use `public-ip-assignments`.
     */
    public Optional<? extends Boolean> ipv6Enabled() {
        return ipv6Enabled;
    }

    /**
     * Instance disk size in GB
     */
    public long diskSize() {
        return diskSize;
    }

    /**
     * Instance SSH Keys
     */
    public Optional<? extends java.util.List<com.exoscale.api.models.components.SshKeyInput>> sshKeys() {
        return sshKeys;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Instance Anti-affinity Groups
     */
    public CreateInstanceRequestBody withAntiAffinityGroups(java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput> antiAffinityGroups) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        this.antiAffinityGroups = Optional.ofNullable(antiAffinityGroups);
        return this;
    }

    /**
     * Instance Anti-affinity Groups
     */
    public CreateInstanceRequestBody withAntiAffinityGroups(Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        this.antiAffinityGroups = antiAffinityGroups;
        return this;
    }

    public CreateInstanceRequestBody withPublicIpAssignment(com.exoscale.api.models.components.PublicIpAssignment publicIpAssignment) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        this.publicIpAssignment = Optional.ofNullable(publicIpAssignment);
        return this;
    }

    public CreateInstanceRequestBody withPublicIpAssignment(Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        this.publicIpAssignment = publicIpAssignment;
        return this;
    }

    public CreateInstanceRequestBody withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public CreateInstanceRequestBody withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    /**
     * Start Instance on creation (default: true)
     */
    public CreateInstanceRequestBody withAutoStart(boolean autoStart) {
        Utils.checkNotNull(autoStart, "autoStart");
        this.autoStart = Optional.ofNullable(autoStart);
        return this;
    }

    /**
     * Start Instance on creation (default: true)
     */
    public CreateInstanceRequestBody withAutoStart(Optional<? extends Boolean> autoStart) {
        Utils.checkNotNull(autoStart, "autoStart");
        this.autoStart = autoStart;
        return this;
    }

    /**
     * Instance Security Groups
     */
    public CreateInstanceRequestBody withSecurityGroups(java.util.List<com.exoscale.api.models.components.SecurityGroupInput> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = Optional.ofNullable(securityGroups);
        return this;
    }

    /**
     * Instance Security Groups
     */
    public CreateInstanceRequestBody withSecurityGroups(Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Instance name
     */
    public CreateInstanceRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Instance name
     */
    public CreateInstanceRequestBody withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Compute instance type
     */
    public CreateInstanceRequestBody withInstanceType(com.exoscale.api.models.components.InstanceTypeInput instanceType) {
        Utils.checkNotNull(instanceType, "instanceType");
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Instance template
     */
    public CreateInstanceRequestBody withTemplate(com.exoscale.api.models.components.TemplateInput template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    /**
     * SSH key
     */
    public CreateInstanceRequestBody withSshKey(com.exoscale.api.models.components.SshKeyInput sshKey) {
        Utils.checkNotNull(sshKey, "sshKey");
        this.sshKey = Optional.ofNullable(sshKey);
        return this;
    }

    /**
     * SSH key
     */
    public CreateInstanceRequestBody withSshKey(Optional<? extends com.exoscale.api.models.components.SshKeyInput> sshKey) {
        Utils.checkNotNull(sshKey, "sshKey");
        this.sshKey = sshKey;
        return this;
    }

    /**
     * Instance Cloud-init user-data
     */
    public CreateInstanceRequestBody withUserData(String userData) {
        Utils.checkNotNull(userData, "userData");
        this.userData = Optional.ofNullable(userData);
        return this;
    }

    /**
     * Instance Cloud-init user-data
     */
    public CreateInstanceRequestBody withUserData(Optional<? extends String> userData) {
        Utils.checkNotNull(userData, "userData");
        this.userData = userData;
        return this;
    }

    /**
     * Deploy target
     */
    public CreateInstanceRequestBody withDeployTarget(com.exoscale.api.models.components.DeployTarget deployTarget) {
        Utils.checkNotNull(deployTarget, "deployTarget");
        this.deployTarget = Optional.ofNullable(deployTarget);
        return this;
    }

    /**
     * Deploy target
     */
    public CreateInstanceRequestBody withDeployTarget(Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget) {
        Utils.checkNotNull(deployTarget, "deployTarget");
        this.deployTarget = deployTarget;
        return this;
    }

    /**
     * Enable IPv6. DEPRECATED: use `public-ip-assignments`.
     */
    public CreateInstanceRequestBody withIpv6Enabled(boolean ipv6Enabled) {
        Utils.checkNotNull(ipv6Enabled, "ipv6Enabled");
        this.ipv6Enabled = Optional.ofNullable(ipv6Enabled);
        return this;
    }

    /**
     * Enable IPv6. DEPRECATED: use `public-ip-assignments`.
     */
    public CreateInstanceRequestBody withIpv6Enabled(Optional<? extends Boolean> ipv6Enabled) {
        Utils.checkNotNull(ipv6Enabled, "ipv6Enabled");
        this.ipv6Enabled = ipv6Enabled;
        return this;
    }

    /**
     * Instance disk size in GB
     */
    public CreateInstanceRequestBody withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }

    /**
     * Instance SSH Keys
     */
    public CreateInstanceRequestBody withSshKeys(java.util.List<com.exoscale.api.models.components.SshKeyInput> sshKeys) {
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.sshKeys = Optional.ofNullable(sshKeys);
        return this;
    }

    /**
     * Instance SSH Keys
     */
    public CreateInstanceRequestBody withSshKeys(Optional<? extends java.util.List<com.exoscale.api.models.components.SshKeyInput>> sshKeys) {
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.sshKeys = sshKeys;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateInstanceRequestBody other = (CreateInstanceRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.antiAffinityGroups, other.antiAffinityGroups) &&
            java.util.Objects.deepEquals(this.publicIpAssignment, other.publicIpAssignment) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.autoStart, other.autoStart) &&
            java.util.Objects.deepEquals(this.securityGroups, other.securityGroups) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.instanceType, other.instanceType) &&
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.sshKey, other.sshKey) &&
            java.util.Objects.deepEquals(this.userData, other.userData) &&
            java.util.Objects.deepEquals(this.deployTarget, other.deployTarget) &&
            java.util.Objects.deepEquals(this.ipv6Enabled, other.ipv6Enabled) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize) &&
            java.util.Objects.deepEquals(this.sshKeys, other.sshKeys);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            antiAffinityGroups,
            publicIpAssignment,
            labels,
            autoStart,
            securityGroups,
            name,
            instanceType,
            template,
            sshKey,
            userData,
            deployTarget,
            ipv6Enabled,
            diskSize,
            sshKeys);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateInstanceRequestBody.class,
                "antiAffinityGroups", antiAffinityGroups,
                "publicIpAssignment", publicIpAssignment,
                "labels", labels,
                "autoStart", autoStart,
                "securityGroups", securityGroups,
                "name", name,
                "instanceType", instanceType,
                "template", template,
                "sshKey", sshKey,
                "userData", userData,
                "deployTarget", deployTarget,
                "ipv6Enabled", ipv6Enabled,
                "diskSize", diskSize,
                "sshKeys", sshKeys);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends Boolean> autoStart = Optional.empty();
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private com.exoscale.api.models.components.InstanceTypeInput instanceType;
 
        private com.exoscale.api.models.components.TemplateInput template;
 
        private Optional<? extends com.exoscale.api.models.components.SshKeyInput> sshKey = Optional.empty();
 
        private Optional<? extends String> userData = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget = Optional.empty();
 
        private Optional<? extends Boolean> ipv6Enabled = Optional.empty();
 
        private Long diskSize;
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.SshKeyInput>> sshKeys = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Instance Anti-affinity Groups
         */
        public Builder antiAffinityGroups(java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput> antiAffinityGroups) {
            Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
            this.antiAffinityGroups = Optional.ofNullable(antiAffinityGroups);
            return this;
        }

        /**
         * Instance Anti-affinity Groups
         */
        public Builder antiAffinityGroups(Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups) {
            Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
            this.antiAffinityGroups = antiAffinityGroups;
            return this;
        }

        public Builder publicIpAssignment(com.exoscale.api.models.components.PublicIpAssignment publicIpAssignment) {
            Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
            this.publicIpAssignment = Optional.ofNullable(publicIpAssignment);
            return this;
        }

        public Builder publicIpAssignment(Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment) {
            Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
            this.publicIpAssignment = publicIpAssignment;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        /**
         * Start Instance on creation (default: true)
         */
        public Builder autoStart(boolean autoStart) {
            Utils.checkNotNull(autoStart, "autoStart");
            this.autoStart = Optional.ofNullable(autoStart);
            return this;
        }

        /**
         * Start Instance on creation (default: true)
         */
        public Builder autoStart(Optional<? extends Boolean> autoStart) {
            Utils.checkNotNull(autoStart, "autoStart");
            this.autoStart = autoStart;
            return this;
        }

        /**
         * Instance Security Groups
         */
        public Builder securityGroups(java.util.List<com.exoscale.api.models.components.SecurityGroupInput> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = Optional.ofNullable(securityGroups);
            return this;
        }

        /**
         * Instance Security Groups
         */
        public Builder securityGroups(Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = securityGroups;
            return this;
        }

        /**
         * Instance name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Instance name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Compute instance type
         */
        public Builder instanceType(com.exoscale.api.models.components.InstanceTypeInput instanceType) {
            Utils.checkNotNull(instanceType, "instanceType");
            this.instanceType = instanceType;
            return this;
        }

        /**
         * Instance template
         */
        public Builder template(com.exoscale.api.models.components.TemplateInput template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        /**
         * SSH key
         */
        public Builder sshKey(com.exoscale.api.models.components.SshKeyInput sshKey) {
            Utils.checkNotNull(sshKey, "sshKey");
            this.sshKey = Optional.ofNullable(sshKey);
            return this;
        }

        /**
         * SSH key
         */
        public Builder sshKey(Optional<? extends com.exoscale.api.models.components.SshKeyInput> sshKey) {
            Utils.checkNotNull(sshKey, "sshKey");
            this.sshKey = sshKey;
            return this;
        }

        /**
         * Instance Cloud-init user-data
         */
        public Builder userData(String userData) {
            Utils.checkNotNull(userData, "userData");
            this.userData = Optional.ofNullable(userData);
            return this;
        }

        /**
         * Instance Cloud-init user-data
         */
        public Builder userData(Optional<? extends String> userData) {
            Utils.checkNotNull(userData, "userData");
            this.userData = userData;
            return this;
        }

        /**
         * Deploy target
         */
        public Builder deployTarget(com.exoscale.api.models.components.DeployTarget deployTarget) {
            Utils.checkNotNull(deployTarget, "deployTarget");
            this.deployTarget = Optional.ofNullable(deployTarget);
            return this;
        }

        /**
         * Deploy target
         */
        public Builder deployTarget(Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget) {
            Utils.checkNotNull(deployTarget, "deployTarget");
            this.deployTarget = deployTarget;
            return this;
        }

        /**
         * Enable IPv6. DEPRECATED: use `public-ip-assignments`.
         */
        public Builder ipv6Enabled(boolean ipv6Enabled) {
            Utils.checkNotNull(ipv6Enabled, "ipv6Enabled");
            this.ipv6Enabled = Optional.ofNullable(ipv6Enabled);
            return this;
        }

        /**
         * Enable IPv6. DEPRECATED: use `public-ip-assignments`.
         */
        public Builder ipv6Enabled(Optional<? extends Boolean> ipv6Enabled) {
            Utils.checkNotNull(ipv6Enabled, "ipv6Enabled");
            this.ipv6Enabled = ipv6Enabled;
            return this;
        }

        /**
         * Instance disk size in GB
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }

        /**
         * Instance SSH Keys
         */
        public Builder sshKeys(java.util.List<com.exoscale.api.models.components.SshKeyInput> sshKeys) {
            Utils.checkNotNull(sshKeys, "sshKeys");
            this.sshKeys = Optional.ofNullable(sshKeys);
            return this;
        }

        /**
         * Instance SSH Keys
         */
        public Builder sshKeys(Optional<? extends java.util.List<com.exoscale.api.models.components.SshKeyInput>> sshKeys) {
            Utils.checkNotNull(sshKeys, "sshKeys");
            this.sshKeys = sshKeys;
            return this;
        }
        
        public CreateInstanceRequestBody build() {
            return new CreateInstanceRequestBody(
                antiAffinityGroups,
                publicIpAssignment,
                labels,
                autoStart,
                securityGroups,
                name,
                instanceType,
                template,
                sshKey,
                userData,
                deployTarget,
                ipv6Enabled,
                diskSize,
                sshKeys);
        }
    }
}

