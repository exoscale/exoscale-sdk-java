/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateDbaasServiceMysqlRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup-schedule")
    private Optional<? extends CreateDbaasServiceMysqlBackupSchedule> backupSchedule;

    /**
     * Service integrations to be enabled when creating the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrations")
    private Optional<? extends java.util.List<Integrations>> integrations;

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip-filter")
    private Optional<? extends java.util.List<String>> ipFilter;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fork-from-service")
    private Optional<? extends String> forkFromService;

    /**
     * ISO time of a backup to recover from for services that support arbitrary times
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recovery-backup-time")
    private Optional<? extends String> recoveryBackupTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mysql-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings;

    /**
     * Automatic maintenance settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenance")
    private Optional<? extends CreateDbaasServiceMysqlMaintenance> maintenance;

    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admin-username")
    private Optional<? extends String> adminUsername;

    /**
     * MySQL major version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    /**
     * Subscription plan
     */
    @JsonProperty("plan")
    private String plan;

    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admin-password")
    private Optional<? extends String> adminPassword;

    /**
     * Migrate data from existing server
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("migration")
    private Optional<? extends CreateDbaasServiceMysqlMigration> migration;

    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("binlog-retention-period")
    private Optional<? extends Long> binlogRetentionPeriod;

    public CreateDbaasServiceMysqlRequestBody(
            @JsonProperty("backup-schedule") Optional<? extends CreateDbaasServiceMysqlBackupSchedule> backupSchedule,
            @JsonProperty("integrations") Optional<? extends java.util.List<Integrations>> integrations,
            @JsonProperty("ip-filter") Optional<? extends java.util.List<String>> ipFilter,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("fork-from-service") Optional<? extends String> forkFromService,
            @JsonProperty("recovery-backup-time") Optional<? extends String> recoveryBackupTime,
            @JsonProperty("mysql-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings,
            @JsonProperty("maintenance") Optional<? extends CreateDbaasServiceMysqlMaintenance> maintenance,
            @JsonProperty("admin-username") Optional<? extends String> adminUsername,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("plan") String plan,
            @JsonProperty("admin-password") Optional<? extends String> adminPassword,
            @JsonProperty("migration") Optional<? extends CreateDbaasServiceMysqlMigration> migration,
            @JsonProperty("binlog-retention-period") Optional<? extends Long> binlogRetentionPeriod) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        Utils.checkNotNull(integrations, "integrations");
        Utils.checkNotNull(ipFilter, "ipFilter");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(forkFromService, "forkFromService");
        Utils.checkNotNull(recoveryBackupTime, "recoveryBackupTime");
        Utils.checkNotNull(mysqlSettings, "mysqlSettings");
        Utils.checkNotNull(maintenance, "maintenance");
        Utils.checkNotNull(adminUsername, "adminUsername");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(plan, "plan");
        Utils.checkNotNull(adminPassword, "adminPassword");
        Utils.checkNotNull(migration, "migration");
        Utils.checkNotNull(binlogRetentionPeriod, "binlogRetentionPeriod");
        this.backupSchedule = backupSchedule;
        this.integrations = integrations;
        this.ipFilter = ipFilter;
        this.terminationProtection = terminationProtection;
        this.forkFromService = forkFromService;
        this.recoveryBackupTime = recoveryBackupTime;
        this.mysqlSettings = mysqlSettings;
        this.maintenance = maintenance;
        this.adminUsername = adminUsername;
        this.version = version;
        this.plan = plan;
        this.adminPassword = adminPassword;
        this.migration = migration;
        this.binlogRetentionPeriod = binlogRetentionPeriod;
    }

    public Optional<? extends CreateDbaasServiceMysqlBackupSchedule> backupSchedule() {
        return backupSchedule;
    }

    /**
     * Service integrations to be enabled when creating the service.
     */
    public Optional<? extends java.util.List<Integrations>> integrations() {
        return integrations;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public Optional<? extends java.util.List<String>> ipFilter() {
        return ipFilter;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    public Optional<? extends String> forkFromService() {
        return forkFromService;
    }

    /**
     * ISO time of a backup to recover from for services that support arbitrary times
     */
    public Optional<? extends String> recoveryBackupTime() {
        return recoveryBackupTime;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings() {
        return mysqlSettings;
    }

    /**
     * Automatic maintenance settings
     */
    public Optional<? extends CreateDbaasServiceMysqlMaintenance> maintenance() {
        return maintenance;
    }

    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     */
    public Optional<? extends String> adminUsername() {
        return adminUsername;
    }

    /**
     * MySQL major version
     */
    public Optional<? extends String> version() {
        return version;
    }

    /**
     * Subscription plan
     */
    public String plan() {
        return plan;
    }

    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     */
    public Optional<? extends String> adminPassword() {
        return adminPassword;
    }

    /**
     * Migrate data from existing server
     */
    public Optional<? extends CreateDbaasServiceMysqlMigration> migration() {
        return migration;
    }

    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     */
    public Optional<? extends Long> binlogRetentionPeriod() {
        return binlogRetentionPeriod;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateDbaasServiceMysqlRequestBody withBackupSchedule(CreateDbaasServiceMysqlBackupSchedule backupSchedule) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.backupSchedule = Optional.ofNullable(backupSchedule);
        return this;
    }

    public CreateDbaasServiceMysqlRequestBody withBackupSchedule(Optional<? extends CreateDbaasServiceMysqlBackupSchedule> backupSchedule) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.backupSchedule = backupSchedule;
        return this;
    }

    /**
     * Service integrations to be enabled when creating the service.
     */
    public CreateDbaasServiceMysqlRequestBody withIntegrations(java.util.List<Integrations> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = Optional.ofNullable(integrations);
        return this;
    }

    /**
     * Service integrations to be enabled when creating the service.
     */
    public CreateDbaasServiceMysqlRequestBody withIntegrations(Optional<? extends java.util.List<Integrations>> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = integrations;
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public CreateDbaasServiceMysqlRequestBody withIpFilter(java.util.List<String> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = Optional.ofNullable(ipFilter);
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public CreateDbaasServiceMysqlRequestBody withIpFilter(Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = ipFilter;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public CreateDbaasServiceMysqlRequestBody withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public CreateDbaasServiceMysqlRequestBody withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    public CreateDbaasServiceMysqlRequestBody withForkFromService(String forkFromService) {
        Utils.checkNotNull(forkFromService, "forkFromService");
        this.forkFromService = Optional.ofNullable(forkFromService);
        return this;
    }

    public CreateDbaasServiceMysqlRequestBody withForkFromService(Optional<? extends String> forkFromService) {
        Utils.checkNotNull(forkFromService, "forkFromService");
        this.forkFromService = forkFromService;
        return this;
    }

    /**
     * ISO time of a backup to recover from for services that support arbitrary times
     */
    public CreateDbaasServiceMysqlRequestBody withRecoveryBackupTime(String recoveryBackupTime) {
        Utils.checkNotNull(recoveryBackupTime, "recoveryBackupTime");
        this.recoveryBackupTime = Optional.ofNullable(recoveryBackupTime);
        return this;
    }

    /**
     * ISO time of a backup to recover from for services that support arbitrary times
     */
    public CreateDbaasServiceMysqlRequestBody withRecoveryBackupTime(Optional<? extends String> recoveryBackupTime) {
        Utils.checkNotNull(recoveryBackupTime, "recoveryBackupTime");
        this.recoveryBackupTime = recoveryBackupTime;
        return this;
    }

    public CreateDbaasServiceMysqlRequestBody withMysqlSettings(com.exoscale.api.models.components.JsonSchemaMysql mysqlSettings) {
        Utils.checkNotNull(mysqlSettings, "mysqlSettings");
        this.mysqlSettings = Optional.ofNullable(mysqlSettings);
        return this;
    }

    public CreateDbaasServiceMysqlRequestBody withMysqlSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings) {
        Utils.checkNotNull(mysqlSettings, "mysqlSettings");
        this.mysqlSettings = mysqlSettings;
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public CreateDbaasServiceMysqlRequestBody withMaintenance(CreateDbaasServiceMysqlMaintenance maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = Optional.ofNullable(maintenance);
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public CreateDbaasServiceMysqlRequestBody withMaintenance(Optional<? extends CreateDbaasServiceMysqlMaintenance> maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = maintenance;
        return this;
    }

    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     */
    public CreateDbaasServiceMysqlRequestBody withAdminUsername(String adminUsername) {
        Utils.checkNotNull(adminUsername, "adminUsername");
        this.adminUsername = Optional.ofNullable(adminUsername);
        return this;
    }

    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     */
    public CreateDbaasServiceMysqlRequestBody withAdminUsername(Optional<? extends String> adminUsername) {
        Utils.checkNotNull(adminUsername, "adminUsername");
        this.adminUsername = adminUsername;
        return this;
    }

    /**
     * MySQL major version
     */
    public CreateDbaasServiceMysqlRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * MySQL major version
     */
    public CreateDbaasServiceMysqlRequestBody withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Subscription plan
     */
    public CreateDbaasServiceMysqlRequestBody withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }

    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     */
    public CreateDbaasServiceMysqlRequestBody withAdminPassword(String adminPassword) {
        Utils.checkNotNull(adminPassword, "adminPassword");
        this.adminPassword = Optional.ofNullable(adminPassword);
        return this;
    }

    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     */
    public CreateDbaasServiceMysqlRequestBody withAdminPassword(Optional<? extends String> adminPassword) {
        Utils.checkNotNull(adminPassword, "adminPassword");
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Migrate data from existing server
     */
    public CreateDbaasServiceMysqlRequestBody withMigration(CreateDbaasServiceMysqlMigration migration) {
        Utils.checkNotNull(migration, "migration");
        this.migration = Optional.ofNullable(migration);
        return this;
    }

    /**
     * Migrate data from existing server
     */
    public CreateDbaasServiceMysqlRequestBody withMigration(Optional<? extends CreateDbaasServiceMysqlMigration> migration) {
        Utils.checkNotNull(migration, "migration");
        this.migration = migration;
        return this;
    }

    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     */
    public CreateDbaasServiceMysqlRequestBody withBinlogRetentionPeriod(long binlogRetentionPeriod) {
        Utils.checkNotNull(binlogRetentionPeriod, "binlogRetentionPeriod");
        this.binlogRetentionPeriod = Optional.ofNullable(binlogRetentionPeriod);
        return this;
    }

    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     */
    public CreateDbaasServiceMysqlRequestBody withBinlogRetentionPeriod(Optional<? extends Long> binlogRetentionPeriod) {
        Utils.checkNotNull(binlogRetentionPeriod, "binlogRetentionPeriod");
        this.binlogRetentionPeriod = binlogRetentionPeriod;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDbaasServiceMysqlRequestBody other = (CreateDbaasServiceMysqlRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.backupSchedule, other.backupSchedule) &&
            java.util.Objects.deepEquals(this.integrations, other.integrations) &&
            java.util.Objects.deepEquals(this.ipFilter, other.ipFilter) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.forkFromService, other.forkFromService) &&
            java.util.Objects.deepEquals(this.recoveryBackupTime, other.recoveryBackupTime) &&
            java.util.Objects.deepEquals(this.mysqlSettings, other.mysqlSettings) &&
            java.util.Objects.deepEquals(this.maintenance, other.maintenance) &&
            java.util.Objects.deepEquals(this.adminUsername, other.adminUsername) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.plan, other.plan) &&
            java.util.Objects.deepEquals(this.adminPassword, other.adminPassword) &&
            java.util.Objects.deepEquals(this.migration, other.migration) &&
            java.util.Objects.deepEquals(this.binlogRetentionPeriod, other.binlogRetentionPeriod);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            backupSchedule,
            integrations,
            ipFilter,
            terminationProtection,
            forkFromService,
            recoveryBackupTime,
            mysqlSettings,
            maintenance,
            adminUsername,
            version,
            plan,
            adminPassword,
            migration,
            binlogRetentionPeriod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDbaasServiceMysqlRequestBody.class,
                "backupSchedule", backupSchedule,
                "integrations", integrations,
                "ipFilter", ipFilter,
                "terminationProtection", terminationProtection,
                "forkFromService", forkFromService,
                "recoveryBackupTime", recoveryBackupTime,
                "mysqlSettings", mysqlSettings,
                "maintenance", maintenance,
                "adminUsername", adminUsername,
                "version", version,
                "plan", plan,
                "adminPassword", adminPassword,
                "migration", migration,
                "binlogRetentionPeriod", binlogRetentionPeriod);
    }
    
    public final static class Builder {
 
        private Optional<? extends CreateDbaasServiceMysqlBackupSchedule> backupSchedule = Optional.empty();
 
        private Optional<? extends java.util.List<Integrations>> integrations = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ipFilter = Optional.empty();
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends String> forkFromService = Optional.empty();
 
        private Optional<? extends String> recoveryBackupTime = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings = Optional.empty();
 
        private Optional<? extends CreateDbaasServiceMysqlMaintenance> maintenance = Optional.empty();
 
        private Optional<? extends String> adminUsername = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private String plan;
 
        private Optional<? extends String> adminPassword = Optional.empty();
 
        private Optional<? extends CreateDbaasServiceMysqlMigration> migration = Optional.empty();
 
        private Optional<? extends Long> binlogRetentionPeriod = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder backupSchedule(CreateDbaasServiceMysqlBackupSchedule backupSchedule) {
            Utils.checkNotNull(backupSchedule, "backupSchedule");
            this.backupSchedule = Optional.ofNullable(backupSchedule);
            return this;
        }

        public Builder backupSchedule(Optional<? extends CreateDbaasServiceMysqlBackupSchedule> backupSchedule) {
            Utils.checkNotNull(backupSchedule, "backupSchedule");
            this.backupSchedule = backupSchedule;
            return this;
        }

        /**
         * Service integrations to be enabled when creating the service.
         */
        public Builder integrations(java.util.List<Integrations> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = Optional.ofNullable(integrations);
            return this;
        }

        /**
         * Service integrations to be enabled when creating the service.
         */
        public Builder integrations(Optional<? extends java.util.List<Integrations>> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = integrations;
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(java.util.List<String> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = Optional.ofNullable(ipFilter);
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(Optional<? extends java.util.List<String>> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        public Builder forkFromService(String forkFromService) {
            Utils.checkNotNull(forkFromService, "forkFromService");
            this.forkFromService = Optional.ofNullable(forkFromService);
            return this;
        }

        public Builder forkFromService(Optional<? extends String> forkFromService) {
            Utils.checkNotNull(forkFromService, "forkFromService");
            this.forkFromService = forkFromService;
            return this;
        }

        /**
         * ISO time of a backup to recover from for services that support arbitrary times
         */
        public Builder recoveryBackupTime(String recoveryBackupTime) {
            Utils.checkNotNull(recoveryBackupTime, "recoveryBackupTime");
            this.recoveryBackupTime = Optional.ofNullable(recoveryBackupTime);
            return this;
        }

        /**
         * ISO time of a backup to recover from for services that support arbitrary times
         */
        public Builder recoveryBackupTime(Optional<? extends String> recoveryBackupTime) {
            Utils.checkNotNull(recoveryBackupTime, "recoveryBackupTime");
            this.recoveryBackupTime = recoveryBackupTime;
            return this;
        }

        public Builder mysqlSettings(com.exoscale.api.models.components.JsonSchemaMysql mysqlSettings) {
            Utils.checkNotNull(mysqlSettings, "mysqlSettings");
            this.mysqlSettings = Optional.ofNullable(mysqlSettings);
            return this;
        }

        public Builder mysqlSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaMysql> mysqlSettings) {
            Utils.checkNotNull(mysqlSettings, "mysqlSettings");
            this.mysqlSettings = mysqlSettings;
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(CreateDbaasServiceMysqlMaintenance maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = Optional.ofNullable(maintenance);
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Optional<? extends CreateDbaasServiceMysqlMaintenance> maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Custom username for admin user. This must be set only when a new service is being created.
         */
        public Builder adminUsername(String adminUsername) {
            Utils.checkNotNull(adminUsername, "adminUsername");
            this.adminUsername = Optional.ofNullable(adminUsername);
            return this;
        }

        /**
         * Custom username for admin user. This must be set only when a new service is being created.
         */
        public Builder adminUsername(Optional<? extends String> adminUsername) {
            Utils.checkNotNull(adminUsername, "adminUsername");
            this.adminUsername = adminUsername;
            return this;
        }

        /**
         * MySQL major version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * MySQL major version
         */
        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }

        /**
         * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
         */
        public Builder adminPassword(String adminPassword) {
            Utils.checkNotNull(adminPassword, "adminPassword");
            this.adminPassword = Optional.ofNullable(adminPassword);
            return this;
        }

        /**
         * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
         */
        public Builder adminPassword(Optional<? extends String> adminPassword) {
            Utils.checkNotNull(adminPassword, "adminPassword");
            this.adminPassword = adminPassword;
            return this;
        }

        /**
         * Migrate data from existing server
         */
        public Builder migration(CreateDbaasServiceMysqlMigration migration) {
            Utils.checkNotNull(migration, "migration");
            this.migration = Optional.ofNullable(migration);
            return this;
        }

        /**
         * Migrate data from existing server
         */
        public Builder migration(Optional<? extends CreateDbaasServiceMysqlMigration> migration) {
            Utils.checkNotNull(migration, "migration");
            this.migration = migration;
            return this;
        }

        /**
         * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
         */
        public Builder binlogRetentionPeriod(long binlogRetentionPeriod) {
            Utils.checkNotNull(binlogRetentionPeriod, "binlogRetentionPeriod");
            this.binlogRetentionPeriod = Optional.ofNullable(binlogRetentionPeriod);
            return this;
        }

        /**
         * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
         */
        public Builder binlogRetentionPeriod(Optional<? extends Long> binlogRetentionPeriod) {
            Utils.checkNotNull(binlogRetentionPeriod, "binlogRetentionPeriod");
            this.binlogRetentionPeriod = binlogRetentionPeriod;
            return this;
        }
        
        public CreateDbaasServiceMysqlRequestBody build() {
            return new CreateDbaasServiceMysqlRequestBody(
                backupSchedule,
                integrations,
                ipFilter,
                terminationProtection,
                forkFromService,
                recoveryBackupTime,
                mysqlSettings,
                maintenance,
                adminUsername,
                version,
                plan,
                adminPassword,
                migration,
                binlogRetentionPeriod);
        }
    }
}

