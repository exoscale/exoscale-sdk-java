/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for ConfigureLogCleanerForTopicCompaction type.
 */
public class ConfigureLogCleanerForTopicCompaction {
    private Integer logCleanerDeleteRetentionMs;
    private Integer logCleanerMaxCompactionLagMs;
    private Double logCleanerMinCleanableRatio;
    private Integer logCleanerMinCompactionLagMs;
    private LogCleanupPolicyEnum logCleanupPolicy;

    /**
     * Default constructor.
     */
    public ConfigureLogCleanerForTopicCompaction() {
    }

    /**
     * Initialization constructor.
     * @param  logCleanerDeleteRetentionMs  Integer value for logCleanerDeleteRetentionMs.
     * @param  logCleanerMaxCompactionLagMs  Integer value for logCleanerMaxCompactionLagMs.
     * @param  logCleanerMinCleanableRatio  Double value for logCleanerMinCleanableRatio.
     * @param  logCleanerMinCompactionLagMs  Integer value for logCleanerMinCompactionLagMs.
     * @param  logCleanupPolicy  LogCleanupPolicyEnum value for logCleanupPolicy.
     */
    public ConfigureLogCleanerForTopicCompaction(
            Integer logCleanerDeleteRetentionMs,
            Integer logCleanerMaxCompactionLagMs,
            Double logCleanerMinCleanableRatio,
            Integer logCleanerMinCompactionLagMs,
            LogCleanupPolicyEnum logCleanupPolicy) {
        this.logCleanerDeleteRetentionMs = logCleanerDeleteRetentionMs;
        this.logCleanerMaxCompactionLagMs = logCleanerMaxCompactionLagMs;
        this.logCleanerMinCleanableRatio = logCleanerMinCleanableRatio;
        this.logCleanerMinCompactionLagMs = logCleanerMinCompactionLagMs;
        this.logCleanupPolicy = logCleanupPolicy;
    }

    /**
     * Getter for LogCleanerDeleteRetentionMs.
     * How long are delete records retained?
     * @return Returns the Integer
     */
    @JsonGetter("log_cleaner_delete_retention_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getLogCleanerDeleteRetentionMs() {
        return logCleanerDeleteRetentionMs;
    }

    /**
     * Setter for LogCleanerDeleteRetentionMs.
     * How long are delete records retained?
     * @param logCleanerDeleteRetentionMs Value for Integer
     */
    @JsonSetter("log_cleaner_delete_retention_ms")
    public void setLogCleanerDeleteRetentionMs(Integer logCleanerDeleteRetentionMs) {
        this.logCleanerDeleteRetentionMs = logCleanerDeleteRetentionMs;
    }

    /**
     * Getter for LogCleanerMaxCompactionLagMs.
     * The maximum amount of time message will remain uncompacted. Only applicable for logs that are
     * being compacted
     * @return Returns the Integer
     */
    @JsonGetter("log_cleaner_max_compaction_lag_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getLogCleanerMaxCompactionLagMs() {
        return logCleanerMaxCompactionLagMs;
    }

    /**
     * Setter for LogCleanerMaxCompactionLagMs.
     * The maximum amount of time message will remain uncompacted. Only applicable for logs that are
     * being compacted
     * @param logCleanerMaxCompactionLagMs Value for Integer
     */
    @JsonSetter("log_cleaner_max_compaction_lag_ms")
    public void setLogCleanerMaxCompactionLagMs(Integer logCleanerMaxCompactionLagMs) {
        this.logCleanerMaxCompactionLagMs = logCleanerMaxCompactionLagMs;
    }

    /**
     * Getter for LogCleanerMinCleanableRatio.
     * Controls log compactor frequency. Larger value means more frequent compactions but also more
     * space wasted for logs. Consider setting log.cleaner.max.compaction.lag.ms to enforce
     * compactions sooner, instead of setting a very high value for this option.
     * @return Returns the Double
     */
    @JsonGetter("log_cleaner_min_cleanable_ratio")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLogCleanerMinCleanableRatio() {
        return logCleanerMinCleanableRatio;
    }

    /**
     * Setter for LogCleanerMinCleanableRatio.
     * Controls log compactor frequency. Larger value means more frequent compactions but also more
     * space wasted for logs. Consider setting log.cleaner.max.compaction.lag.ms to enforce
     * compactions sooner, instead of setting a very high value for this option.
     * @param logCleanerMinCleanableRatio Value for Double
     */
    @JsonSetter("log_cleaner_min_cleanable_ratio")
    public void setLogCleanerMinCleanableRatio(Double logCleanerMinCleanableRatio) {
        this.logCleanerMinCleanableRatio = logCleanerMinCleanableRatio;
    }

    /**
     * Getter for LogCleanerMinCompactionLagMs.
     * The minimum time a message will remain uncompacted in the log. Only applicable for logs that
     * are being compacted.
     * @return Returns the Integer
     */
    @JsonGetter("log_cleaner_min_compaction_lag_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getLogCleanerMinCompactionLagMs() {
        return logCleanerMinCompactionLagMs;
    }

    /**
     * Setter for LogCleanerMinCompactionLagMs.
     * The minimum time a message will remain uncompacted in the log. Only applicable for logs that
     * are being compacted.
     * @param logCleanerMinCompactionLagMs Value for Integer
     */
    @JsonSetter("log_cleaner_min_compaction_lag_ms")
    public void setLogCleanerMinCompactionLagMs(Integer logCleanerMinCompactionLagMs) {
        this.logCleanerMinCompactionLagMs = logCleanerMinCompactionLagMs;
    }

    /**
     * Getter for LogCleanupPolicy.
     * The default cleanup policy for segments beyond the retention window
     * @return Returns the LogCleanupPolicyEnum
     */
    @JsonGetter("log_cleanup_policy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public LogCleanupPolicyEnum getLogCleanupPolicy() {
        return logCleanupPolicy;
    }

    /**
     * Setter for LogCleanupPolicy.
     * The default cleanup policy for segments beyond the retention window
     * @param logCleanupPolicy Value for LogCleanupPolicyEnum
     */
    @JsonSetter("log_cleanup_policy")
    public void setLogCleanupPolicy(LogCleanupPolicyEnum logCleanupPolicy) {
        this.logCleanupPolicy = logCleanupPolicy;
    }

    /**
     * Converts this ConfigureLogCleanerForTopicCompaction into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ConfigureLogCleanerForTopicCompaction [" + "logCleanerDeleteRetentionMs="
                + logCleanerDeleteRetentionMs + ", logCleanerMaxCompactionLagMs="
                + logCleanerMaxCompactionLagMs + ", logCleanerMinCleanableRatio="
                + logCleanerMinCleanableRatio + ", logCleanerMinCompactionLagMs="
                + logCleanerMinCompactionLagMs + ", logCleanupPolicy=" + logCleanupPolicy + "]";
    }

    /**
     * Builds a new {@link ConfigureLogCleanerForTopicCompaction.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ConfigureLogCleanerForTopicCompaction.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .logCleanerDeleteRetentionMs(getLogCleanerDeleteRetentionMs())
                .logCleanerMaxCompactionLagMs(getLogCleanerMaxCompactionLagMs())
                .logCleanerMinCleanableRatio(getLogCleanerMinCleanableRatio())
                .logCleanerMinCompactionLagMs(getLogCleanerMinCompactionLagMs())
                .logCleanupPolicy(getLogCleanupPolicy());
        return builder;
    }

    /**
     * Class to build instances of {@link ConfigureLogCleanerForTopicCompaction}.
     */
    public static class Builder {
        private Integer logCleanerDeleteRetentionMs;
        private Integer logCleanerMaxCompactionLagMs;
        private Double logCleanerMinCleanableRatio;
        private Integer logCleanerMinCompactionLagMs;
        private LogCleanupPolicyEnum logCleanupPolicy;



        /**
         * Setter for logCleanerDeleteRetentionMs.
         * @param  logCleanerDeleteRetentionMs  Integer value for logCleanerDeleteRetentionMs.
         * @return Builder
         */
        public Builder logCleanerDeleteRetentionMs(Integer logCleanerDeleteRetentionMs) {
            this.logCleanerDeleteRetentionMs = logCleanerDeleteRetentionMs;
            return this;
        }

        /**
         * Setter for logCleanerMaxCompactionLagMs.
         * @param  logCleanerMaxCompactionLagMs  Integer value for logCleanerMaxCompactionLagMs.
         * @return Builder
         */
        public Builder logCleanerMaxCompactionLagMs(Integer logCleanerMaxCompactionLagMs) {
            this.logCleanerMaxCompactionLagMs = logCleanerMaxCompactionLagMs;
            return this;
        }

        /**
         * Setter for logCleanerMinCleanableRatio.
         * @param  logCleanerMinCleanableRatio  Double value for logCleanerMinCleanableRatio.
         * @return Builder
         */
        public Builder logCleanerMinCleanableRatio(Double logCleanerMinCleanableRatio) {
            this.logCleanerMinCleanableRatio = logCleanerMinCleanableRatio;
            return this;
        }

        /**
         * Setter for logCleanerMinCompactionLagMs.
         * @param  logCleanerMinCompactionLagMs  Integer value for logCleanerMinCompactionLagMs.
         * @return Builder
         */
        public Builder logCleanerMinCompactionLagMs(Integer logCleanerMinCompactionLagMs) {
            this.logCleanerMinCompactionLagMs = logCleanerMinCompactionLagMs;
            return this;
        }

        /**
         * Setter for logCleanupPolicy.
         * @param  logCleanupPolicy  LogCleanupPolicyEnum value for logCleanupPolicy.
         * @return Builder
         */
        public Builder logCleanupPolicy(LogCleanupPolicyEnum logCleanupPolicy) {
            this.logCleanupPolicy = logCleanupPolicy;
            return this;
        }

        /**
         * Builds a new {@link ConfigureLogCleanerForTopicCompaction} object using the set fields.
         * @return {@link ConfigureLogCleanerForTopicCompaction}
         */
        public ConfigureLogCleanerForTopicCompaction build() {
            return new ConfigureLogCleanerForTopicCompaction(logCleanerDeleteRetentionMs,
                    logCleanerMaxCompactionLagMs, logCleanerMinCleanableRatio,
                    logCleanerMinCompactionLagMs, logCleanupPolicy);
        }
    }
}
