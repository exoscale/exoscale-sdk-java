/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessKey;
import org.openapitools.client.model.CreateAccessKeyRequest;
import org.openapitools.client.model.CreateApiKeyRequest;
import org.openapitools.client.model.CreateIamRoleRequest;
import org.openapitools.client.model.IamApiKey;
import org.openapitools.client.model.IamApiKeyCreated;
import org.openapitools.client.model.IamPolicy;
import org.openapitools.client.model.IamRole;
import org.openapitools.client.model.ListAccessKeyKnownOperations200Response;
import org.openapitools.client.model.ListAccessKeys200Response;
import org.openapitools.client.model.ListApiKeys200Response;
import org.openapitools.client.model.ListIamRoles200Response;
import org.openapitools.client.model.Operation;
import java.util.UUID;
import org.openapitools.client.model.UpdateIamRoleRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IamApi
 */
@Disabled
public class IamApiTest {

    private final IamApi api = new IamApi();

    /**
     * Create a legacy IAM Access Key
     *
     * This operation creates a legacy IAM Access Key, to create a key for use with IAM roles use the api-key endpoint.The corresponding secret is only available in the response returned by this operation, the caller must take care of storing it safely as there is no other way to retrieve it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccessKeyTest() throws ApiException {
        CreateAccessKeyRequest createAccessKeyRequest = null;
        AccessKey response = api.createAccessKey(createAccessKeyRequest);
        // TODO: test validations
    }

    /**
     * Create a new API key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        CreateApiKeyRequest createApiKeyRequest = null;
        IamApiKeyCreated response = api.createApiKey(createApiKeyRequest);
        // TODO: test validations
    }

    /**
     * Create IAM Role
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIamRoleTest() throws ApiException {
        CreateIamRoleRequest createIamRoleRequest = null;
        Operation response = api.createIamRole(createIamRoleRequest);
        // TODO: test validations
    }

    /**
     * Delete an API key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiKeyTest() throws ApiException {
        String id = null;
        Operation response = api.deleteApiKey(id);
        // TODO: test validations
    }

    /**
     * Delete IAM Role
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIamRoleTest() throws ApiException {
        UUID id = null;
        Operation response = api.deleteIamRole(id);
        // TODO: test validations
    }

    /**
     * Retrieve IAM Access Key details
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessKeyTest() throws ApiException {
        String key = null;
        AccessKey response = api.getAccessKey(key);
        // TODO: test validations
    }

    /**
     * Get API key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiKeyTest() throws ApiException {
        String id = null;
        IamApiKey response = api.getApiKey(id);
        // TODO: test validations
    }

    /**
     * Retrieve IAM Organization Policy
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIamOrganizationPolicyTest() throws ApiException {
        IamPolicy response = api.getIamOrganizationPolicy();
        // TODO: test validations
    }

    /**
     * Retrieve IAM Role
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIamRoleTest() throws ApiException {
        UUID id = null;
        IamRole response = api.getIamRole(id);
        // TODO: test validations
    }

    /**
     * Retrieve all known available IAM Access Key operations and associated tags
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessKeyKnownOperationsTest() throws ApiException {
        ListAccessKeyKnownOperations200Response response = api.listAccessKeyKnownOperations();
        // TODO: test validations
    }

    /**
     * Retrieve IAM Access Key operations and associated tags for the signing key
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessKeyOperationsTest() throws ApiException {
        ListAccessKeyKnownOperations200Response response = api.listAccessKeyOperations();
        // TODO: test validations
    }

    /**
     * List IAM Access Keys
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessKeysTest() throws ApiException {
        ListAccessKeys200Response response = api.listAccessKeys();
        // TODO: test validations
    }

    /**
     * List API keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApiKeysTest() throws ApiException {
        ListApiKeys200Response response = api.listApiKeys();
        // TODO: test validations
    }

    /**
     * List IAM Roles
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIamRolesTest() throws ApiException {
        ListIamRoles200Response response = api.listIamRoles();
        // TODO: test validations
    }

    /**
     * Revoke an IAM Access Key
     *
     * This operation revokes the specified IAM Access Key. Access Keys created by the revoked Access Key will not be revoked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeAccessKeyTest() throws ApiException {
        String key = null;
        Operation response = api.revokeAccessKey(key);
        // TODO: test validations
    }

    /**
     * Update IAM Organization Policy
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIamOrganizationPolicyTest() throws ApiException {
        IamPolicy iamPolicy = null;
        Operation response = api.updateIamOrganizationPolicy(iamPolicy);
        // TODO: test validations
    }

    /**
     * Update IAM Role
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIamRoleTest() throws ApiException {
        UUID id = null;
        UpdateIamRoleRequest updateIamRoleRequest = null;
        Operation response = api.updateIamRole(id, updateIamRoleRequest);
        // TODO: test validations
    }

    /**
     * Update IAM Role Policy
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIamRolePolicyTest() throws ApiException {
        UUID id = null;
        IamPolicy iamPolicy = null;
        Operation response = api.updateIamRolePolicy(id, iamPolicy);
        // TODO: test validations
    }

}
