/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.api;

import com.exoscale.model.CreateSksClusterRequest;
import com.exoscale.model.CreateSksNodepoolRequest;
import com.exoscale.model.EvictSksNodepoolMembersRequest;
import com.exoscale.model.GenerateSksClusterKubeconfig200Response;
import com.exoscale.model.GetSksClusterAuthorityCert200Response;
import com.exoscale.model.ListSksClusterVersions200Response;
import com.exoscale.model.ListSksClusters200Response;
import com.exoscale.model.Operation;
import com.exoscale.model.ScaleSksNodepoolRequest;
import com.exoscale.model.SksCluster;
import com.exoscale.model.SksKubeconfigRequest;
import com.exoscale.model.SksNodepool;
import java.util.UUID;
import com.exoscale.model.UpdateSksClusterRequest;
import com.exoscale.model.UpdateSksNodepoolRequest;
import com.exoscale.model.UpgradeSksClusterRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for SksApi
 */
@Ignore
public class SksApiTest {

    private final SksApi api = new SksApi();

    
    /**
     * Create an SKS cluster
     *
     * 
     */
    @Test
    public void createSksClusterTest()  {
        CreateSksClusterRequest createSksClusterRequest = null;
        Operation response = api.createSksCluster(createSksClusterRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a new SKS Nodepool
     *
     * 
     */
    @Test
    public void createSksNodepoolTest()  {
        UUID id = null;
        CreateSksNodepoolRequest createSksNodepoolRequest = null;
        Operation response = api.createSksNodepool(id, createSksNodepoolRequest).block();

        // TODO: test validations
    }
    
    /**
     * Delete an SKS cluster
     *
     * 
     */
    @Test
    public void deleteSksClusterTest()  {
        UUID id = null;
        Operation response = api.deleteSksCluster(id).block();

        // TODO: test validations
    }
    
    /**
     * Delete an SKS Nodepool
     *
     * 
     */
    @Test
    public void deleteSksNodepoolTest()  {
        UUID id = null;
        UUID sksNodepoolId = null;
        Operation response = api.deleteSksNodepool(id, sksNodepoolId).block();

        // TODO: test validations
    }
    
    /**
     * Evict Nodepool members
     *
     * This operation evicts the specified Compute instances member from the Nodepool, shrinking it to &#x60;&amp;lt;current nodepool size&amp;gt; - &amp;lt;# evicted members&amp;gt;&#x60;.
     */
    @Test
    public void evictSksNodepoolMembersTest()  {
        UUID id = null;
        UUID sksNodepoolId = null;
        EvictSksNodepoolMembersRequest evictSksNodepoolMembersRequest = null;
        Operation response = api.evictSksNodepoolMembers(id, sksNodepoolId, evictSksNodepoolMembersRequest).block();

        // TODO: test validations
    }
    
    /**
     * Generate a new Kubeconfig file for a SKS cluster
     *
     * This operation returns a Kubeconfig file encoded in base64.
     */
    @Test
    public void generateSksClusterKubeconfigTest()  {
        UUID id = null;
        SksKubeconfigRequest sksKubeconfigRequest = null;
        GenerateSksClusterKubeconfig200Response response = api.generateSksClusterKubeconfig(id, sksKubeconfigRequest).block();

        // TODO: test validations
    }
    
    /**
     * Retrieve SKS cluster details
     *
     * 
     */
    @Test
    public void getSksClusterTest()  {
        UUID id = null;
        SksCluster response = api.getSksCluster(id).block();

        // TODO: test validations
    }
    
    /**
     * Get the certificate for a SKS cluster authority
     *
     * This operation returns the certificate for the given SKS cluster authority encoded in base64.
     */
    @Test
    public void getSksClusterAuthorityCertTest()  {
        UUID id = null;
        String authority = null;
        GetSksClusterAuthorityCert200Response response = api.getSksClusterAuthorityCert(id, authority).block();

        // TODO: test validations
    }
    
    /**
     * Get the latest inspection result
     *
     * Helps troubleshoot common problems when deploying a kubernetes cluster. Inspections run every couple of minutes.
     */
    @Test
    public void getSksClusterInspectionTest()  {
        UUID id = null;
        Map<String, Object> response = api.getSksClusterInspection(id).block();

        // TODO: test validations
    }
    
    /**
     * Retrieve SKS Nodepool details
     *
     * 
     */
    @Test
    public void getSksNodepoolTest()  {
        UUID id = null;
        UUID sksNodepoolId = null;
        SksNodepool response = api.getSksNodepool(id, sksNodepoolId).block();

        // TODO: test validations
    }
    
    /**
     * Resources that are scheduled to be removed in future kubernetes releases
     *
     * This operation returns the deprecated resources for a given cluster
     */
    @Test
    public void listSksClusterDeprecatedResourcesTest()  {
        UUID id = null;
        List<Map<String, String>> response = api.listSksClusterDeprecatedResources(id).collectList().block();

        // TODO: test validations
    }
    
    /**
     * List available versions for SKS clusters
     *
     * 
     */
    @Test
    public void listSksClusterVersionsTest()  {
        String includeDeprecated = null;
        ListSksClusterVersions200Response response = api.listSksClusterVersions(includeDeprecated).block();

        // TODO: test validations
    }
    
    /**
     * List SKS clusters
     *
     * 
     */
    @Test
    public void listSksClustersTest()  {
        ListSksClusters200Response response = api.listSksClusters().block();

        // TODO: test validations
    }
    
    /**
     * Reset an SKS cluster field to its default value
     *
     * 
     */
    @Test
    public void resetSksClusterFieldTest()  {
        UUID id = null;
        String field = null;
        Operation response = api.resetSksClusterField(id, field).block();

        // TODO: test validations
    }
    
    /**
     * Reset an SKS Nodepool field to its default value
     *
     * 
     */
    @Test
    public void resetSksNodepoolFieldTest()  {
        UUID id = null;
        UUID sksNodepoolId = null;
        String field = null;
        Operation response = api.resetSksNodepoolField(id, sksNodepoolId, field).block();

        // TODO: test validations
    }
    
    /**
     * Rotate Exoscale CCM credentials
     *
     * 
     */
    @Test
    public void rotateSksCcmCredentialsTest()  {
        UUID id = null;
        Operation response = api.rotateSksCcmCredentials(id).block();

        // TODO: test validations
    }
    
    /**
     * Rotate operators certificate authority
     *
     * 
     */
    @Test
    public void rotateSksOperatorsCaTest()  {
        UUID id = null;
        Operation response = api.rotateSksOperatorsCa(id).block();

        // TODO: test validations
    }
    
    /**
     * Scale a SKS Nodepool
     *
     * 
     */
    @Test
    public void scaleSksNodepoolTest()  {
        UUID id = null;
        UUID sksNodepoolId = null;
        ScaleSksNodepoolRequest scaleSksNodepoolRequest = null;
        Operation response = api.scaleSksNodepool(id, sksNodepoolId, scaleSksNodepoolRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update an SKS cluster
     *
     * 
     */
    @Test
    public void updateSksClusterTest()  {
        UUID id = null;
        UpdateSksClusterRequest updateSksClusterRequest = null;
        Operation response = api.updateSksCluster(id, updateSksClusterRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update an SKS Nodepool
     *
     * 
     */
    @Test
    public void updateSksNodepoolTest()  {
        UUID id = null;
        UUID sksNodepoolId = null;
        UpdateSksNodepoolRequest updateSksNodepoolRequest = null;
        Operation response = api.updateSksNodepool(id, sksNodepoolId, updateSksNodepoolRequest).block();

        // TODO: test validations
    }
    
    /**
     * Upgrade an SKS cluster
     *
     * 
     */
    @Test
    public void upgradeSksClusterTest()  {
        UUID id = null;
        UpgradeSksClusterRequest upgradeSksClusterRequest = null;
        Operation response = api.upgradeSksCluster(id, upgradeSksClusterRequest).block();

        // TODO: test validations
    }
    
    /**
     * Upgrade a SKS cluster to pro
     *
     * 
     */
    @Test
    public void upgradeSksClusterServiceLevelTest()  {
        UUID id = null;
        Operation response = api.upgradeSksClusterServiceLevel(id).block();

        // TODO: test validations
    }
    
}
