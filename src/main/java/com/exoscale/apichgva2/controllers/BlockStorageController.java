/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.BlockStorageAttachRequest;
import com.exoscale.apichgva2.models.BlockStorageCreateSnapshotRequest;
import com.exoscale.apichgva2.models.BlockStorageRequest;
import com.exoscale.apichgva2.models.BlockStorageRequest1;
import com.exoscale.apichgva2.models.BlockStorageResizeVolumeRequest;
import com.exoscale.apichgva2.models.BlockStorageResponse;
import com.exoscale.apichgva2.models.BlockStorageSnapshot;
import com.exoscale.apichgva2.models.BlockStorageSnapshotResponse;
import com.exoscale.apichgva2.models.BlockStorageVolume;
import com.exoscale.apichgva2.models.Operation;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class BlockStorageController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public BlockStorageController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation attachBlockStorageVolumeToInstance(
            final UUID id,
            final BlockStorageAttachRequest body) throws ApiException, IOException {
        return prepareAttachBlockStorageVolumeToInstanceRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> attachBlockStorageVolumeToInstanceAsync(
            final UUID id,
            final BlockStorageAttachRequest body) {
        try { 
            return prepareAttachBlockStorageVolumeToInstanceRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for attachBlockStorageVolumeToInstance.
     */
    private ApiCall<Operation, ApiException> prepareAttachBlockStorageVolumeToInstanceRequest(
            final UUID id,
            final BlockStorageAttachRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage/{id}:attach")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteBlockStorageSnapshot(
            final UUID id) throws ApiException, IOException {
        return prepareDeleteBlockStorageSnapshotRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteBlockStorageSnapshotAsync(
            final UUID id) {
        try { 
            return prepareDeleteBlockStorageSnapshotRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteBlockStorageSnapshot.
     */
    private ApiCall<Operation, ApiException> prepareDeleteBlockStorageSnapshotRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage-snapshot/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the BlockStorageSnapshot response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BlockStorageSnapshot getBlockStorageSnapshot(
            final UUID id) throws ApiException, IOException {
        return prepareGetBlockStorageSnapshotRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the BlockStorageSnapshot response from the API call
     */
    public CompletableFuture<BlockStorageSnapshot> getBlockStorageSnapshotAsync(
            final UUID id) {
        try { 
            return prepareGetBlockStorageSnapshotRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getBlockStorageSnapshot.
     */
    private ApiCall<BlockStorageSnapshot, ApiException> prepareGetBlockStorageSnapshotRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<BlockStorageSnapshot, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage-snapshot/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BlockStorageSnapshot.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the BlockStorageVolume response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BlockStorageVolume getBlockStorageVolume(
            final UUID id) throws ApiException, IOException {
        return prepareGetBlockStorageVolumeRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the BlockStorageVolume response from the API call
     */
    public CompletableFuture<BlockStorageVolume> getBlockStorageVolumeAsync(
            final UUID id) {
        try { 
            return prepareGetBlockStorageVolumeRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getBlockStorageVolume.
     */
    private ApiCall<BlockStorageVolume, ApiException> prepareGetBlockStorageVolumeRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<BlockStorageVolume, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BlockStorageVolume.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateBlockStorageVolumeLabels(
            final UUID id,
            final BlockStorageRequest body) throws ApiException, IOException {
        return prepareUpdateBlockStorageVolumeLabelsRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateBlockStorageVolumeLabelsAsync(
            final UUID id,
            final BlockStorageRequest body) {
        try { 
            return prepareUpdateBlockStorageVolumeLabelsRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateBlockStorageVolumeLabels.
     */
    private ApiCall<Operation, ApiException> prepareUpdateBlockStorageVolumeLabelsRequest(
            final UUID id,
            final BlockStorageRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage/{id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteBlockStorageVolume(
            final UUID id) throws ApiException, IOException {
        return prepareDeleteBlockStorageVolumeRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteBlockStorageVolumeAsync(
            final UUID id) {
        try { 
            return prepareDeleteBlockStorageVolumeRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteBlockStorageVolume.
     */
    private ApiCall<Operation, ApiException> prepareDeleteBlockStorageVolumeRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createBlockStorageSnapshot(
            final UUID id,
            final BlockStorageCreateSnapshotRequest body) throws ApiException, IOException {
        return prepareCreateBlockStorageSnapshotRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createBlockStorageSnapshotAsync(
            final UUID id,
            final BlockStorageCreateSnapshotRequest body) {
        try { 
            return prepareCreateBlockStorageSnapshotRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createBlockStorageSnapshot.
     */
    private ApiCall<Operation, ApiException> prepareCreateBlockStorageSnapshotRequest(
            final UUID id,
            final BlockStorageCreateSnapshotRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage/{id}:create-snapshot")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the BlockStorageSnapshotResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BlockStorageSnapshotResponse listBlockStorageSnapshots() throws ApiException, IOException {
        return prepareListBlockStorageSnapshotsRequest().execute();
    }

    /**
     * @return    Returns the BlockStorageSnapshotResponse response from the API call
     */
    public CompletableFuture<BlockStorageSnapshotResponse> listBlockStorageSnapshotsAsync() {
        try { 
            return prepareListBlockStorageSnapshotsRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listBlockStorageSnapshots.
     */
    private ApiCall<BlockStorageSnapshotResponse, ApiException> prepareListBlockStorageSnapshotsRequest() throws IOException {
        return new ApiCall.Builder<BlockStorageSnapshotResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage-snapshot")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BlockStorageSnapshotResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation resizes a Block storage volume. Note: the volume can only grow, cannot be
     * shrunk.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the BlockStorageVolume response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BlockStorageVolume resizeBlockStorageVolume(
            final UUID id,
            final BlockStorageResizeVolumeRequest body) throws ApiException, IOException {
        return prepareResizeBlockStorageVolumeRequest(id, body).execute();
    }

    /**
     * This operation resizes a Block storage volume. Note: the volume can only grow, cannot be
     * shrunk.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the BlockStorageVolume response from the API call
     */
    public CompletableFuture<BlockStorageVolume> resizeBlockStorageVolumeAsync(
            final UUID id,
            final BlockStorageResizeVolumeRequest body) {
        try { 
            return prepareResizeBlockStorageVolumeRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resizeBlockStorageVolume.
     */
    private ApiCall<BlockStorageVolume, ApiException> prepareResizeBlockStorageVolumeRequest(
            final UUID id,
            final BlockStorageResizeVolumeRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<BlockStorageVolume, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage/{id}:resize-volume")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BlockStorageVolume.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation detachBlockStorageVolume(
            final UUID id) throws ApiException, IOException {
        return prepareDetachBlockStorageVolumeRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> detachBlockStorageVolumeAsync(
            final UUID id) {
        try { 
            return prepareDetachBlockStorageVolumeRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for detachBlockStorageVolume.
     */
    private ApiCall<Operation, ApiException> prepareDetachBlockStorageVolumeRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage/{id}:detach")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  instanceId  Optional parameter: Example:
     * @return    Returns the BlockStorageResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BlockStorageResponse listBlockStorageVolumes(
            final UUID instanceId) throws ApiException, IOException {
        return prepareListBlockStorageVolumesRequest(instanceId).execute();
    }

    /**
     * @param  instanceId  Optional parameter: Example:
     * @return    Returns the BlockStorageResponse response from the API call
     */
    public CompletableFuture<BlockStorageResponse> listBlockStorageVolumesAsync(
            final UUID instanceId) {
        try { 
            return prepareListBlockStorageVolumesRequest(instanceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listBlockStorageVolumes.
     */
    private ApiCall<BlockStorageResponse, ApiException> prepareListBlockStorageVolumesRequest(
            final UUID instanceId) throws IOException {
        return new ApiCall.Builder<BlockStorageResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage")
                        .queryParam(param -> param.key("instance-id")
                                .value(instanceId).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BlockStorageResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createBlockStorageVolume(
            final BlockStorageRequest1 body) throws ApiException, IOException {
        return prepareCreateBlockStorageVolumeRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createBlockStorageVolumeAsync(
            final BlockStorageRequest1 body) {
        try { 
            return prepareCreateBlockStorageVolumeRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createBlockStorageVolume.
     */
    private ApiCall<Operation, ApiException> prepareCreateBlockStorageVolumeRequest(
            final BlockStorageRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/block-storage")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}