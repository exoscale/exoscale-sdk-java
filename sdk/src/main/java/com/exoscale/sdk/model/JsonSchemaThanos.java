/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.exoscale.sdk.model.ThanosCompactorUserConfiguration;
import com.exoscale.sdk.model.ThanosQueryFrontendUserConfiguration;
import com.exoscale.sdk.model.ThanosQueryUserConfiguration;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * JsonSchemaThanos
 */
@JsonPropertyOrder({
  JsonSchemaThanos.JSON_PROPERTY_COMPACTOR,
  JsonSchemaThanos.JSON_PROPERTY_QUERY,
  JsonSchemaThanos.JSON_PROPERTY_QUERY_FRONTEND
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class JsonSchemaThanos {
  public static final String JSON_PROPERTY_COMPACTOR = "compactor";
  private ThanosCompactorUserConfiguration compactor;

  public static final String JSON_PROPERTY_QUERY = "query";
  private ThanosQueryUserConfiguration query;

  public static final String JSON_PROPERTY_QUERY_FRONTEND = "query_frontend";
  private ThanosQueryFrontendUserConfiguration queryFrontend;

  public JsonSchemaThanos() { 
  }

  public JsonSchemaThanos compactor(ThanosCompactorUserConfiguration compactor) {
    this.compactor = compactor;
    return this;
  }

   /**
   * Get compactor
   * @return compactor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ThanosCompactorUserConfiguration getCompactor() {
    return compactor;
  }


  @JsonProperty(JSON_PROPERTY_COMPACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompactor(ThanosCompactorUserConfiguration compactor) {
    this.compactor = compactor;
  }


  public JsonSchemaThanos query(ThanosQueryUserConfiguration query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ThanosQueryUserConfiguration getQuery() {
    return query;
  }


  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuery(ThanosQueryUserConfiguration query) {
    this.query = query;
  }


  public JsonSchemaThanos queryFrontend(ThanosQueryFrontendUserConfiguration queryFrontend) {
    this.queryFrontend = queryFrontend;
    return this;
  }

   /**
   * Get queryFrontend
   * @return queryFrontend
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUERY_FRONTEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ThanosQueryFrontendUserConfiguration getQueryFrontend() {
    return queryFrontend;
  }


  @JsonProperty(JSON_PROPERTY_QUERY_FRONTEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueryFrontend(ThanosQueryFrontendUserConfiguration queryFrontend) {
    this.queryFrontend = queryFrontend;
  }


  /**
   * Return true if this json-schema-thanos object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchemaThanos jsonSchemaThanos = (JsonSchemaThanos) o;
    return Objects.equals(this.compactor, jsonSchemaThanos.compactor) &&
        Objects.equals(this.query, jsonSchemaThanos.query) &&
        Objects.equals(this.queryFrontend, jsonSchemaThanos.queryFrontend);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compactor, query, queryFrontend);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchemaThanos {\n");
    sb.append("    compactor: ").append(toIndentedString(compactor)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    queryFrontend: ").append(toIndentedString(queryFrontend)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `compactor` to the URL query string
    if (getCompactor() != null) {
      joiner.add(getCompactor().toUrlQueryString(prefix + "compactor" + suffix));
    }

    // add `query` to the URL query string
    if (getQuery() != null) {
      joiner.add(getQuery().toUrlQueryString(prefix + "query" + suffix));
    }

    // add `query_frontend` to the URL query string
    if (getQueryFrontend() != null) {
      joiner.add(getQueryFrontend().toUrlQueryString(prefix + "query_frontend" + suffix));
    }

    return joiner.toString();
  }
}

