/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * IamPolicy - Policy
 */

public class IamPolicy {

    /**
     * IAM default service strategy
     */
    @JsonProperty("default-service-strategy")
    private DefaultServiceStrategy defaultServiceStrategy;

    /**
     * IAM services
     */
    @JsonProperty("services")
    private java.util.Map<String, IamServicePolicy> services;

    public IamPolicy(
            @JsonProperty("default-service-strategy") DefaultServiceStrategy defaultServiceStrategy,
            @JsonProperty("services") java.util.Map<String, IamServicePolicy> services) {
        Utils.checkNotNull(defaultServiceStrategy, "defaultServiceStrategy");
        services = Utils.emptyMapIfNull(services);
        this.defaultServiceStrategy = defaultServiceStrategy;
        this.services = services;
    }

    /**
     * IAM default service strategy
     */
    public DefaultServiceStrategy defaultServiceStrategy() {
        return defaultServiceStrategy;
    }

    /**
     * IAM services
     */
    public java.util.Map<String, IamServicePolicy> services() {
        return services;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * IAM default service strategy
     */
    public IamPolicy withDefaultServiceStrategy(DefaultServiceStrategy defaultServiceStrategy) {
        Utils.checkNotNull(defaultServiceStrategy, "defaultServiceStrategy");
        this.defaultServiceStrategy = defaultServiceStrategy;
        return this;
    }

    /**
     * IAM services
     */
    public IamPolicy withServices(java.util.Map<String, IamServicePolicy> services) {
        Utils.checkNotNull(services, "services");
        this.services = services;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IamPolicy other = (IamPolicy) o;
        return 
            java.util.Objects.deepEquals(this.defaultServiceStrategy, other.defaultServiceStrategy) &&
            java.util.Objects.deepEquals(this.services, other.services);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            defaultServiceStrategy,
            services);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IamPolicy.class,
                "defaultServiceStrategy", defaultServiceStrategy,
                "services", services);
    }
    
    public final static class Builder {
 
        private DefaultServiceStrategy defaultServiceStrategy;
 
        private java.util.Map<String, IamServicePolicy> services;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * IAM default service strategy
         */
        public Builder defaultServiceStrategy(DefaultServiceStrategy defaultServiceStrategy) {
            Utils.checkNotNull(defaultServiceStrategy, "defaultServiceStrategy");
            this.defaultServiceStrategy = defaultServiceStrategy;
            return this;
        }

        /**
         * IAM services
         */
        public Builder services(java.util.Map<String, IamServicePolicy> services) {
            Utils.checkNotNull(services, "services");
            this.services = services;
            return this;
        }
        
        public IamPolicy build() {
            return new IamPolicy(
                defaultServiceStrategy,
                services);
        }
    }
}

