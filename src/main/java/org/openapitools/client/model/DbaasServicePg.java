/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DbaasIntegration;
import org.openapitools.client.model.DbaasNodeState;
import org.openapitools.client.model.DbaasServiceBackup;
import org.openapitools.client.model.DbaasServiceMaintenance;
import org.openapitools.client.model.DbaasServiceMysqlBackupSchedule;
import org.openapitools.client.model.DbaasServiceMysqlComponentsInner;
import org.openapitools.client.model.DbaasServiceNotification;
import org.openapitools.client.model.DbaasServicePgConnectionInfo;
import org.openapitools.client.model.DbaasServicePgConnectionPoolsInner;
import org.openapitools.client.model.DbaasServicePgUsersInner;
import org.openapitools.client.model.EnumPgSynchronousReplication;
import org.openapitools.client.model.EnumServiceState;
import org.openapitools.client.model.JsonSchemaPg;
import org.openapitools.client.model.JsonSchemaPgbouncer;
import org.openapitools.client.model.JsonSchemaPglookout;
import org.openapitools.client.model.JsonSchemaTimescaledb;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DbaasServicePg
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasServicePg {
  public static final String SERIALIZED_NAME_PGBOUNCER_SETTINGS = "pgbouncer-settings";
  @SerializedName(SERIALIZED_NAME_PGBOUNCER_SETTINGS)
  private JsonSchemaPgbouncer pgbouncerSettings;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated-at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_NODE_COUNT = "node-count";
  @SerializedName(SERIALIZED_NAME_NODE_COUNT)
  private Long nodeCount;

  public static final String SERIALIZED_NAME_CONNECTION_INFO = "connection-info";
  @SerializedName(SERIALIZED_NAME_CONNECTION_INFO)
  private DbaasServicePgConnectionInfo connectionInfo;

  public static final String SERIALIZED_NAME_BACKUP_SCHEDULE = "backup-schedule";
  @SerializedName(SERIALIZED_NAME_BACKUP_SCHEDULE)
  private DbaasServiceMysqlBackupSchedule backupSchedule;

  public static final String SERIALIZED_NAME_NODE_CPU_COUNT = "node-cpu-count";
  @SerializedName(SERIALIZED_NAME_NODE_CPU_COUNT)
  private Long nodeCpuCount;

  public static final String SERIALIZED_NAME_INTEGRATIONS = "integrations";
  @SerializedName(SERIALIZED_NAME_INTEGRATIONS)
  private List<DbaasIntegration> integrations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public static final String SERIALIZED_NAME_NODE_STATES = "node-states";
  @SerializedName(SERIALIZED_NAME_NODE_STATES)
  private List<DbaasNodeState> nodeStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CONNECTION_POOLS = "connection-pools";
  @SerializedName(SERIALIZED_NAME_CONNECTION_POOLS)
  private List<DbaasServicePgConnectionPoolsInner> connectionPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private EnumServiceState state;

  public static final String SERIALIZED_NAME_TIMESCALEDB_SETTINGS = "timescaledb-settings";
  @SerializedName(SERIALIZED_NAME_TIMESCALEDB_SETTINGS)
  private JsonSchemaTimescaledb timescaledbSettings;

  public static final String SERIALIZED_NAME_DATABASES = "databases";
  @SerializedName(SERIALIZED_NAME_DATABASES)
  private List<String> databases = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_FILTER = "ip-filter";
  @SerializedName(SERIALIZED_NAME_IP_FILTER)
  private List<String> ipFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKUPS = "backups";
  @SerializedName(SERIALIZED_NAME_BACKUPS)
  private List<DbaasServiceBackup> backups = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERMINATION_PROTECTION = "termination-protection";
  @SerializedName(SERIALIZED_NAME_TERMINATION_PROTECTION)
  private Boolean terminationProtection;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<DbaasServiceNotification> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private List<DbaasServiceMysqlComponentsInner> components = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYNCHRONOUS_REPLICATION = "synchronous-replication";
  @SerializedName(SERIALIZED_NAME_SYNCHRONOUS_REPLICATION)
  private EnumPgSynchronousReplication synchronousReplication;

  public static final String SERIALIZED_NAME_PGLOOKOUT_SETTINGS = "pglookout-settings";
  @SerializedName(SERIALIZED_NAME_PGLOOKOUT_SETTINGS)
  private JsonSchemaPglookout pglookoutSettings = {"max_failover_replication_time_lag":60};

  public static final String SERIALIZED_NAME_MAINTENANCE = "maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private DbaasServiceMaintenance maintenance;

  public static final String SERIALIZED_NAME_DISK_SIZE = "disk-size";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE)
  private Long diskSize;

  public static final String SERIALIZED_NAME_NODE_MEMORY = "node-memory";
  @SerializedName(SERIALIZED_NAME_NODE_MEMORY)
  private Long nodeMemory;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_URI_PARAMS = "uri-params";
  @SerializedName(SERIALIZED_NAME_URI_PARAMS)
  private Object uriParams;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CREATED_AT = "created-at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_WORK_MEM = "work-mem";
  @SerializedName(SERIALIZED_NAME_WORK_MEM)
  private Long workMem;

  public static final String SERIALIZED_NAME_SHARED_BUFFERS_PERCENTAGE = "shared-buffers-percentage";
  @SerializedName(SERIALIZED_NAME_SHARED_BUFFERS_PERCENTAGE)
  private Long sharedBuffersPercentage;

  public static final String SERIALIZED_NAME_PG_SETTINGS = "pg-settings";
  @SerializedName(SERIALIZED_NAME_PG_SETTINGS)
  private JsonSchemaPg pgSettings;

  public static final String SERIALIZED_NAME_MAX_CONNECTIONS = "max-connections";
  @SerializedName(SERIALIZED_NAME_MAX_CONNECTIONS)
  private Long maxConnections;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<DbaasServicePgUsersInner> users = new ArrayList<>();

  public DbaasServicePg() {
  }

  public DbaasServicePg pgbouncerSettings(JsonSchemaPgbouncer pgbouncerSettings) {
    this.pgbouncerSettings = pgbouncerSettings;
    return this;
  }

   /**
   * Get pgbouncerSettings
   * @return pgbouncerSettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaPgbouncer getPgbouncerSettings() {
    return pgbouncerSettings;
  }

  public void setPgbouncerSettings(JsonSchemaPgbouncer pgbouncerSettings) {
    this.pgbouncerSettings = pgbouncerSettings;
  }


  public DbaasServicePg updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Service last update timestamp (ISO 8601)
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public DbaasServicePg nodeCount(Long nodeCount) {
    this.nodeCount = nodeCount;
    return this;
  }

   /**
   * Number of service nodes in the active plan
   * minimum: 0
   * @return nodeCount
  **/
  @javax.annotation.Nullable
  public Long getNodeCount() {
    return nodeCount;
  }

  public void setNodeCount(Long nodeCount) {
    this.nodeCount = nodeCount;
  }


  public DbaasServicePg connectionInfo(DbaasServicePgConnectionInfo connectionInfo) {
    this.connectionInfo = connectionInfo;
    return this;
  }

   /**
   * Get connectionInfo
   * @return connectionInfo
  **/
  @javax.annotation.Nullable
  public DbaasServicePgConnectionInfo getConnectionInfo() {
    return connectionInfo;
  }

  public void setConnectionInfo(DbaasServicePgConnectionInfo connectionInfo) {
    this.connectionInfo = connectionInfo;
  }


  public DbaasServicePg backupSchedule(DbaasServiceMysqlBackupSchedule backupSchedule) {
    this.backupSchedule = backupSchedule;
    return this;
  }

   /**
   * Get backupSchedule
   * @return backupSchedule
  **/
  @javax.annotation.Nullable
  public DbaasServiceMysqlBackupSchedule getBackupSchedule() {
    return backupSchedule;
  }

  public void setBackupSchedule(DbaasServiceMysqlBackupSchedule backupSchedule) {
    this.backupSchedule = backupSchedule;
  }


  public DbaasServicePg nodeCpuCount(Long nodeCpuCount) {
    this.nodeCpuCount = nodeCpuCount;
    return this;
  }

   /**
   * Number of CPUs for each node
   * minimum: 0
   * @return nodeCpuCount
  **/
  @javax.annotation.Nullable
  public Long getNodeCpuCount() {
    return nodeCpuCount;
  }

  public void setNodeCpuCount(Long nodeCpuCount) {
    this.nodeCpuCount = nodeCpuCount;
  }


  public DbaasServicePg integrations(List<DbaasIntegration> integrations) {
    this.integrations = integrations;
    return this;
  }

  public DbaasServicePg addIntegrationsItem(DbaasIntegration integrationsItem) {
    if (this.integrations == null) {
      this.integrations = new ArrayList<>();
    }
    this.integrations.add(integrationsItem);
    return this;
  }

   /**
   * Service integrations
   * @return integrations
  **/
  @javax.annotation.Nullable
  public List<DbaasIntegration> getIntegrations() {
    return integrations;
  }

  public void setIntegrations(List<DbaasIntegration> integrations) {
    this.integrations = integrations;
  }


  public DbaasServicePg zone(String zone) {
    this.zone = zone;
    return this;
  }

   /**
   * The zone where the service is running
   * @return zone
  **/
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }


  public DbaasServicePg nodeStates(List<DbaasNodeState> nodeStates) {
    this.nodeStates = nodeStates;
    return this;
  }

  public DbaasServicePg addNodeStatesItem(DbaasNodeState nodeStatesItem) {
    if (this.nodeStates == null) {
      this.nodeStates = new ArrayList<>();
    }
    this.nodeStates.add(nodeStatesItem);
    return this;
  }

   /**
   * State of individual service nodes
   * @return nodeStates
  **/
  @javax.annotation.Nullable
  public List<DbaasNodeState> getNodeStates() {
    return nodeStates;
  }

  public void setNodeStates(List<DbaasNodeState> nodeStates) {
    this.nodeStates = nodeStates;
  }


  public DbaasServicePg name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DbaasServicePg connectionPools(List<DbaasServicePgConnectionPoolsInner> connectionPools) {
    this.connectionPools = connectionPools;
    return this;
  }

  public DbaasServicePg addConnectionPoolsItem(DbaasServicePgConnectionPoolsInner connectionPoolsItem) {
    if (this.connectionPools == null) {
      this.connectionPools = new ArrayList<>();
    }
    this.connectionPools.add(connectionPoolsItem);
    return this;
  }

   /**
   * PostgreSQL PGBouncer connection pools
   * @return connectionPools
  **/
  @javax.annotation.Nullable
  public List<DbaasServicePgConnectionPoolsInner> getConnectionPools() {
    return connectionPools;
  }

  public void setConnectionPools(List<DbaasServicePgConnectionPoolsInner> connectionPools) {
    this.connectionPools = connectionPools;
  }


  public DbaasServicePg type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public DbaasServicePg state(EnumServiceState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public EnumServiceState getState() {
    return state;
  }

  public void setState(EnumServiceState state) {
    this.state = state;
  }


  public DbaasServicePg timescaledbSettings(JsonSchemaTimescaledb timescaledbSettings) {
    this.timescaledbSettings = timescaledbSettings;
    return this;
  }

   /**
   * Get timescaledbSettings
   * @return timescaledbSettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaTimescaledb getTimescaledbSettings() {
    return timescaledbSettings;
  }

  public void setTimescaledbSettings(JsonSchemaTimescaledb timescaledbSettings) {
    this.timescaledbSettings = timescaledbSettings;
  }


  public DbaasServicePg databases(List<String> databases) {
    this.databases = databases;
    return this;
  }

  public DbaasServicePg addDatabasesItem(String databasesItem) {
    if (this.databases == null) {
      this.databases = new ArrayList<>();
    }
    this.databases.add(databasesItem);
    return this;
  }

   /**
   * List of PostgreSQL databases
   * @return databases
  **/
  @javax.annotation.Nullable
  public List<String> getDatabases() {
    return databases;
  }

  public void setDatabases(List<String> databases) {
    this.databases = databases;
  }


  public DbaasServicePg ipFilter(List<String> ipFilter) {
    this.ipFilter = ipFilter;
    return this;
  }

  public DbaasServicePg addIpFilterItem(String ipFilterItem) {
    if (this.ipFilter == null) {
      this.ipFilter = new ArrayList<>();
    }
    this.ipFilter.add(ipFilterItem);
    return this;
  }

   /**
   * Allowed CIDR address blocks for incoming connections
   * @return ipFilter
  **/
  @javax.annotation.Nullable
  public List<String> getIpFilter() {
    return ipFilter;
  }

  public void setIpFilter(List<String> ipFilter) {
    this.ipFilter = ipFilter;
  }


  public DbaasServicePg backups(List<DbaasServiceBackup> backups) {
    this.backups = backups;
    return this;
  }

  public DbaasServicePg addBackupsItem(DbaasServiceBackup backupsItem) {
    if (this.backups == null) {
      this.backups = new ArrayList<>();
    }
    this.backups.add(backupsItem);
    return this;
  }

   /**
   * List of backups for the service
   * @return backups
  **/
  @javax.annotation.Nullable
  public List<DbaasServiceBackup> getBackups() {
    return backups;
  }

  public void setBackups(List<DbaasServiceBackup> backups) {
    this.backups = backups;
  }


  public DbaasServicePg terminationProtection(Boolean terminationProtection) {
    this.terminationProtection = terminationProtection;
    return this;
  }

   /**
   * Service is protected against termination and powering off
   * @return terminationProtection
  **/
  @javax.annotation.Nullable
  public Boolean getTerminationProtection() {
    return terminationProtection;
  }

  public void setTerminationProtection(Boolean terminationProtection) {
    this.terminationProtection = terminationProtection;
  }


  public DbaasServicePg notifications(List<DbaasServiceNotification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public DbaasServicePg addNotificationsItem(DbaasServiceNotification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * Service notifications
   * @return notifications
  **/
  @javax.annotation.Nullable
  public List<DbaasServiceNotification> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<DbaasServiceNotification> notifications) {
    this.notifications = notifications;
  }


  public DbaasServicePg components(List<DbaasServiceMysqlComponentsInner> components) {
    this.components = components;
    return this;
  }

  public DbaasServicePg addComponentsItem(DbaasServiceMysqlComponentsInner componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

   /**
   * Service component information objects
   * @return components
  **/
  @javax.annotation.Nullable
  public List<DbaasServiceMysqlComponentsInner> getComponents() {
    return components;
  }

  public void setComponents(List<DbaasServiceMysqlComponentsInner> components) {
    this.components = components;
  }


  public DbaasServicePg synchronousReplication(EnumPgSynchronousReplication synchronousReplication) {
    this.synchronousReplication = synchronousReplication;
    return this;
  }

   /**
   * Get synchronousReplication
   * @return synchronousReplication
  **/
  @javax.annotation.Nullable
  public EnumPgSynchronousReplication getSynchronousReplication() {
    return synchronousReplication;
  }

  public void setSynchronousReplication(EnumPgSynchronousReplication synchronousReplication) {
    this.synchronousReplication = synchronousReplication;
  }


  public DbaasServicePg pglookoutSettings(JsonSchemaPglookout pglookoutSettings) {
    this.pglookoutSettings = pglookoutSettings;
    return this;
  }

   /**
   * Get pglookoutSettings
   * @return pglookoutSettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaPglookout getPglookoutSettings() {
    return pglookoutSettings;
  }

  public void setPglookoutSettings(JsonSchemaPglookout pglookoutSettings) {
    this.pglookoutSettings = pglookoutSettings;
  }


  public DbaasServicePg maintenance(DbaasServiceMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

   /**
   * Get maintenance
   * @return maintenance
  **/
  @javax.annotation.Nullable
  public DbaasServiceMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(DbaasServiceMaintenance maintenance) {
    this.maintenance = maintenance;
  }


  public DbaasServicePg diskSize(Long diskSize) {
    this.diskSize = diskSize;
    return this;
  }

   /**
   * TODO UNIT disk space for data storage
   * minimum: 0
   * @return diskSize
  **/
  @javax.annotation.Nullable
  public Long getDiskSize() {
    return diskSize;
  }

  public void setDiskSize(Long diskSize) {
    this.diskSize = diskSize;
  }


  public DbaasServicePg nodeMemory(Long nodeMemory) {
    this.nodeMemory = nodeMemory;
    return this;
  }

   /**
   * TODO UNIT of memory for each node
   * minimum: 0
   * @return nodeMemory
  **/
  @javax.annotation.Nullable
  public Long getNodeMemory() {
    return nodeMemory;
  }

  public void setNodeMemory(Long nodeMemory) {
    this.nodeMemory = nodeMemory;
  }


  public DbaasServicePg uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * URI for connecting to the service (may be absent)
   * @return uri
  **/
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public DbaasServicePg uriParams(Object uriParams) {
    this.uriParams = uriParams;
    return this;
  }

   /**
   * service_uri parameterized into key-value pairs
   * @return uriParams
  **/
  @javax.annotation.Nullable
  public Object getUriParams() {
    return uriParams;
  }

  public void setUriParams(Object uriParams) {
    this.uriParams = uriParams;
  }


  public DbaasServicePg version(String version) {
    this.version = version;
    return this;
  }

   /**
   * PostgreSQL version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public DbaasServicePg createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Service creation timestamp (ISO 8601)
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DbaasServicePg plan(String plan) {
    this.plan = plan;
    return this;
  }

   /**
   * Subscription plan
   * @return plan
  **/
  @javax.annotation.Nonnull
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public DbaasServicePg workMem(Long workMem) {
    this.workMem = workMem;
    return this;
  }

   /**
   * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
   * minimum: 1
   * maximum: 1024
   * @return workMem
  **/
  @javax.annotation.Nullable
  public Long getWorkMem() {
    return workMem;
  }

  public void setWorkMem(Long workMem) {
    this.workMem = workMem;
  }


  public DbaasServicePg sharedBuffersPercentage(Long sharedBuffersPercentage) {
    this.sharedBuffersPercentage = sharedBuffersPercentage;
    return this;
  }

   /**
   * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
   * minimum: 20
   * maximum: 60
   * @return sharedBuffersPercentage
  **/
  @javax.annotation.Nullable
  public Long getSharedBuffersPercentage() {
    return sharedBuffersPercentage;
  }

  public void setSharedBuffersPercentage(Long sharedBuffersPercentage) {
    this.sharedBuffersPercentage = sharedBuffersPercentage;
  }


  public DbaasServicePg pgSettings(JsonSchemaPg pgSettings) {
    this.pgSettings = pgSettings;
    return this;
  }

   /**
   * Get pgSettings
   * @return pgSettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaPg getPgSettings() {
    return pgSettings;
  }

  public void setPgSettings(JsonSchemaPg pgSettings) {
    this.pgSettings = pgSettings;
  }


  public DbaasServicePg maxConnections(Long maxConnections) {
    this.maxConnections = maxConnections;
    return this;
  }

   /**
   * Maximum number of connections allowed to an instance
   * minimum: 0
   * @return maxConnections
  **/
  @javax.annotation.Nullable
  public Long getMaxConnections() {
    return maxConnections;
  }

  public void setMaxConnections(Long maxConnections) {
    this.maxConnections = maxConnections;
  }


  public DbaasServicePg users(List<DbaasServicePgUsersInner> users) {
    this.users = users;
    return this;
  }

  public DbaasServicePg addUsersItem(DbaasServicePgUsersInner usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * List of service users
   * @return users
  **/
  @javax.annotation.Nullable
  public List<DbaasServicePgUsersInner> getUsers() {
    return users;
  }

  public void setUsers(List<DbaasServicePgUsersInner> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasServicePg dbaasServicePg = (DbaasServicePg) o;
    return Objects.equals(this.pgbouncerSettings, dbaasServicePg.pgbouncerSettings) &&
        Objects.equals(this.updatedAt, dbaasServicePg.updatedAt) &&
        Objects.equals(this.nodeCount, dbaasServicePg.nodeCount) &&
        Objects.equals(this.connectionInfo, dbaasServicePg.connectionInfo) &&
        Objects.equals(this.backupSchedule, dbaasServicePg.backupSchedule) &&
        Objects.equals(this.nodeCpuCount, dbaasServicePg.nodeCpuCount) &&
        Objects.equals(this.integrations, dbaasServicePg.integrations) &&
        Objects.equals(this.zone, dbaasServicePg.zone) &&
        Objects.equals(this.nodeStates, dbaasServicePg.nodeStates) &&
        Objects.equals(this.name, dbaasServicePg.name) &&
        Objects.equals(this.connectionPools, dbaasServicePg.connectionPools) &&
        Objects.equals(this.type, dbaasServicePg.type) &&
        Objects.equals(this.state, dbaasServicePg.state) &&
        Objects.equals(this.timescaledbSettings, dbaasServicePg.timescaledbSettings) &&
        Objects.equals(this.databases, dbaasServicePg.databases) &&
        Objects.equals(this.ipFilter, dbaasServicePg.ipFilter) &&
        Objects.equals(this.backups, dbaasServicePg.backups) &&
        Objects.equals(this.terminationProtection, dbaasServicePg.terminationProtection) &&
        Objects.equals(this.notifications, dbaasServicePg.notifications) &&
        Objects.equals(this.components, dbaasServicePg.components) &&
        Objects.equals(this.synchronousReplication, dbaasServicePg.synchronousReplication) &&
        Objects.equals(this.pglookoutSettings, dbaasServicePg.pglookoutSettings) &&
        Objects.equals(this.maintenance, dbaasServicePg.maintenance) &&
        Objects.equals(this.diskSize, dbaasServicePg.diskSize) &&
        Objects.equals(this.nodeMemory, dbaasServicePg.nodeMemory) &&
        Objects.equals(this.uri, dbaasServicePg.uri) &&
        Objects.equals(this.uriParams, dbaasServicePg.uriParams) &&
        Objects.equals(this.version, dbaasServicePg.version) &&
        Objects.equals(this.createdAt, dbaasServicePg.createdAt) &&
        Objects.equals(this.plan, dbaasServicePg.plan) &&
        Objects.equals(this.workMem, dbaasServicePg.workMem) &&
        Objects.equals(this.sharedBuffersPercentage, dbaasServicePg.sharedBuffersPercentage) &&
        Objects.equals(this.pgSettings, dbaasServicePg.pgSettings) &&
        Objects.equals(this.maxConnections, dbaasServicePg.maxConnections) &&
        Objects.equals(this.users, dbaasServicePg.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pgbouncerSettings, updatedAt, nodeCount, connectionInfo, backupSchedule, nodeCpuCount, integrations, zone, nodeStates, name, connectionPools, type, state, timescaledbSettings, databases, ipFilter, backups, terminationProtection, notifications, components, synchronousReplication, pglookoutSettings, maintenance, diskSize, nodeMemory, uri, uriParams, version, createdAt, plan, workMem, sharedBuffersPercentage, pgSettings, maxConnections, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasServicePg {\n");
    sb.append("    pgbouncerSettings: ").append(toIndentedString(pgbouncerSettings)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    connectionInfo: ").append(toIndentedString(connectionInfo)).append("\n");
    sb.append("    backupSchedule: ").append(toIndentedString(backupSchedule)).append("\n");
    sb.append("    nodeCpuCount: ").append(toIndentedString(nodeCpuCount)).append("\n");
    sb.append("    integrations: ").append(toIndentedString(integrations)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("    nodeStates: ").append(toIndentedString(nodeStates)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    connectionPools: ").append(toIndentedString(connectionPools)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    timescaledbSettings: ").append(toIndentedString(timescaledbSettings)).append("\n");
    sb.append("    databases: ").append(toIndentedString(databases)).append("\n");
    sb.append("    ipFilter: ").append(toIndentedString(ipFilter)).append("\n");
    sb.append("    backups: ").append(toIndentedString(backups)).append("\n");
    sb.append("    terminationProtection: ").append(toIndentedString(terminationProtection)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    synchronousReplication: ").append(toIndentedString(synchronousReplication)).append("\n");
    sb.append("    pglookoutSettings: ").append(toIndentedString(pglookoutSettings)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("    diskSize: ").append(toIndentedString(diskSize)).append("\n");
    sb.append("    nodeMemory: ").append(toIndentedString(nodeMemory)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    uriParams: ").append(toIndentedString(uriParams)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    workMem: ").append(toIndentedString(workMem)).append("\n");
    sb.append("    sharedBuffersPercentage: ").append(toIndentedString(sharedBuffersPercentage)).append("\n");
    sb.append("    pgSettings: ").append(toIndentedString(pgSettings)).append("\n");
    sb.append("    maxConnections: ").append(toIndentedString(maxConnections)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pgbouncer-settings");
    openapiFields.add("updated-at");
    openapiFields.add("node-count");
    openapiFields.add("connection-info");
    openapiFields.add("backup-schedule");
    openapiFields.add("node-cpu-count");
    openapiFields.add("integrations");
    openapiFields.add("zone");
    openapiFields.add("node-states");
    openapiFields.add("name");
    openapiFields.add("connection-pools");
    openapiFields.add("type");
    openapiFields.add("state");
    openapiFields.add("timescaledb-settings");
    openapiFields.add("databases");
    openapiFields.add("ip-filter");
    openapiFields.add("backups");
    openapiFields.add("termination-protection");
    openapiFields.add("notifications");
    openapiFields.add("components");
    openapiFields.add("synchronous-replication");
    openapiFields.add("pglookout-settings");
    openapiFields.add("maintenance");
    openapiFields.add("disk-size");
    openapiFields.add("node-memory");
    openapiFields.add("uri");
    openapiFields.add("uri-params");
    openapiFields.add("version");
    openapiFields.add("created-at");
    openapiFields.add("plan");
    openapiFields.add("work-mem");
    openapiFields.add("shared-buffers-percentage");
    openapiFields.add("pg-settings");
    openapiFields.add("max-connections");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("plan");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasServicePg
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasServicePg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasServicePg is not found in the empty JSON string", DbaasServicePg.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasServicePg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasServicePg` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DbaasServicePg.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `pgbouncer-settings`
      if (jsonObj.get("pgbouncer-settings") != null && !jsonObj.get("pgbouncer-settings").isJsonNull()) {
        JsonSchemaPgbouncer.validateJsonElement(jsonObj.get("pgbouncer-settings"));
      }
      // validate the optional field `connection-info`
      if (jsonObj.get("connection-info") != null && !jsonObj.get("connection-info").isJsonNull()) {
        DbaasServicePgConnectionInfo.validateJsonElement(jsonObj.get("connection-info"));
      }
      // validate the optional field `backup-schedule`
      if (jsonObj.get("backup-schedule") != null && !jsonObj.get("backup-schedule").isJsonNull()) {
        DbaasServiceMysqlBackupSchedule.validateJsonElement(jsonObj.get("backup-schedule"));
      }
      if (jsonObj.get("integrations") != null && !jsonObj.get("integrations").isJsonNull()) {
        JsonArray jsonArrayintegrations = jsonObj.getAsJsonArray("integrations");
        if (jsonArrayintegrations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("integrations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `integrations` to be an array in the JSON string but got `%s`", jsonObj.get("integrations").toString()));
          }

          // validate the optional field `integrations` (array)
          for (int i = 0; i < jsonArrayintegrations.size(); i++) {
            DbaasIntegration.validateJsonElement(jsonArrayintegrations.get(i));
          };
        }
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
      if (jsonObj.get("node-states") != null && !jsonObj.get("node-states").isJsonNull()) {
        JsonArray jsonArraynodeStates = jsonObj.getAsJsonArray("node-states");
        if (jsonArraynodeStates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("node-states").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `node-states` to be an array in the JSON string but got `%s`", jsonObj.get("node-states").toString()));
          }

          // validate the optional field `node-states` (array)
          for (int i = 0; i < jsonArraynodeStates.size(); i++) {
            DbaasNodeState.validateJsonElement(jsonArraynodeStates.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("connection-pools") != null && !jsonObj.get("connection-pools").isJsonNull()) {
        JsonArray jsonArrayconnectionPools = jsonObj.getAsJsonArray("connection-pools");
        if (jsonArrayconnectionPools != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connection-pools").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connection-pools` to be an array in the JSON string but got `%s`", jsonObj.get("connection-pools").toString()));
          }

          // validate the optional field `connection-pools` (array)
          for (int i = 0; i < jsonArrayconnectionPools.size(); i++) {
            DbaasServicePgConnectionPoolsInner.validateJsonElement(jsonArrayconnectionPools.get(i));
          };
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        EnumServiceState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `timescaledb-settings`
      if (jsonObj.get("timescaledb-settings") != null && !jsonObj.get("timescaledb-settings").isJsonNull()) {
        JsonSchemaTimescaledb.validateJsonElement(jsonObj.get("timescaledb-settings"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("databases") != null && !jsonObj.get("databases").isJsonNull() && !jsonObj.get("databases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `databases` to be an array in the JSON string but got `%s`", jsonObj.get("databases").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ip-filter") != null && !jsonObj.get("ip-filter").isJsonNull() && !jsonObj.get("ip-filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip-filter` to be an array in the JSON string but got `%s`", jsonObj.get("ip-filter").toString()));
      }
      if (jsonObj.get("backups") != null && !jsonObj.get("backups").isJsonNull()) {
        JsonArray jsonArraybackups = jsonObj.getAsJsonArray("backups");
        if (jsonArraybackups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backups` to be an array in the JSON string but got `%s`", jsonObj.get("backups").toString()));
          }

          // validate the optional field `backups` (array)
          for (int i = 0; i < jsonArraybackups.size(); i++) {
            DbaasServiceBackup.validateJsonElement(jsonArraybackups.get(i));
          };
        }
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            DbaasServiceNotification.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
      if (jsonObj.get("components") != null && !jsonObj.get("components").isJsonNull()) {
        JsonArray jsonArraycomponents = jsonObj.getAsJsonArray("components");
        if (jsonArraycomponents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("components").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
          }

          // validate the optional field `components` (array)
          for (int i = 0; i < jsonArraycomponents.size(); i++) {
            DbaasServiceMysqlComponentsInner.validateJsonElement(jsonArraycomponents.get(i));
          };
        }
      }
      // validate the optional field `synchronous-replication`
      if (jsonObj.get("synchronous-replication") != null && !jsonObj.get("synchronous-replication").isJsonNull()) {
        EnumPgSynchronousReplication.validateJsonElement(jsonObj.get("synchronous-replication"));
      }
      // validate the optional field `pglookout-settings`
      if (jsonObj.get("pglookout-settings") != null && !jsonObj.get("pglookout-settings").isJsonNull()) {
        JsonSchemaPglookout.validateJsonElement(jsonObj.get("pglookout-settings"));
      }
      // validate the optional field `maintenance`
      if (jsonObj.get("maintenance") != null && !jsonObj.get("maintenance").isJsonNull()) {
        DbaasServiceMaintenance.validateJsonElement(jsonObj.get("maintenance"));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      // validate the optional field `pg-settings`
      if (jsonObj.get("pg-settings") != null && !jsonObj.get("pg-settings").isJsonNull()) {
        JsonSchemaPg.validateJsonElement(jsonObj.get("pg-settings"));
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            DbaasServicePgUsersInner.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasServicePg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasServicePg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasServicePg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasServicePg.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasServicePg>() {
           @Override
           public void write(JsonWriter out, DbaasServicePg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasServicePg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasServicePg given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasServicePg
  * @throws IOException if the JSON string is invalid with respect to DbaasServicePg
  */
  public static DbaasServicePg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasServicePg.class);
  }

 /**
  * Convert an instance of DbaasServicePg to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

