/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DbaasServiceType - DBaaS service
 */

public class DbaasServiceType {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * DbaaS service available versions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available-versions")
    private Optional<? extends java.util.List<String>> availableVersions;

    /**
     * DbaaS service default version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default-version")
    private Optional<? extends String> defaultVersion;

    /**
     * DbaaS service description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * DbaaS service plans
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plans")
    private Optional<? extends java.util.List<DbaasPlan>> plans;

    public DbaasServiceType(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("available-versions") Optional<? extends java.util.List<String>> availableVersions,
            @JsonProperty("default-version") Optional<? extends String> defaultVersion,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("plans") Optional<? extends java.util.List<DbaasPlan>> plans) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(availableVersions, "availableVersions");
        Utils.checkNotNull(defaultVersion, "defaultVersion");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(plans, "plans");
        this.name = name;
        this.availableVersions = availableVersions;
        this.defaultVersion = defaultVersion;
        this.description = description;
        this.plans = plans;
    }

    public Optional<? extends String> name() {
        return name;
    }

    /**
     * DbaaS service available versions
     */
    public Optional<? extends java.util.List<String>> availableVersions() {
        return availableVersions;
    }

    /**
     * DbaaS service default version
     */
    public Optional<? extends String> defaultVersion() {
        return defaultVersion;
    }

    /**
     * DbaaS service description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * DbaaS service plans
     */
    public Optional<? extends java.util.List<DbaasPlan>> plans() {
        return plans;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DbaasServiceType withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public DbaasServiceType withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * DbaaS service available versions
     */
    public DbaasServiceType withAvailableVersions(java.util.List<String> availableVersions) {
        Utils.checkNotNull(availableVersions, "availableVersions");
        this.availableVersions = Optional.ofNullable(availableVersions);
        return this;
    }

    /**
     * DbaaS service available versions
     */
    public DbaasServiceType withAvailableVersions(Optional<? extends java.util.List<String>> availableVersions) {
        Utils.checkNotNull(availableVersions, "availableVersions");
        this.availableVersions = availableVersions;
        return this;
    }

    /**
     * DbaaS service default version
     */
    public DbaasServiceType withDefaultVersion(String defaultVersion) {
        Utils.checkNotNull(defaultVersion, "defaultVersion");
        this.defaultVersion = Optional.ofNullable(defaultVersion);
        return this;
    }

    /**
     * DbaaS service default version
     */
    public DbaasServiceType withDefaultVersion(Optional<? extends String> defaultVersion) {
        Utils.checkNotNull(defaultVersion, "defaultVersion");
        this.defaultVersion = defaultVersion;
        return this;
    }

    /**
     * DbaaS service description
     */
    public DbaasServiceType withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * DbaaS service description
     */
    public DbaasServiceType withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * DbaaS service plans
     */
    public DbaasServiceType withPlans(java.util.List<DbaasPlan> plans) {
        Utils.checkNotNull(plans, "plans");
        this.plans = Optional.ofNullable(plans);
        return this;
    }

    /**
     * DbaaS service plans
     */
    public DbaasServiceType withPlans(Optional<? extends java.util.List<DbaasPlan>> plans) {
        Utils.checkNotNull(plans, "plans");
        this.plans = plans;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceType other = (DbaasServiceType) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.availableVersions, other.availableVersions) &&
            java.util.Objects.deepEquals(this.defaultVersion, other.defaultVersion) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.plans, other.plans);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            availableVersions,
            defaultVersion,
            description,
            plans);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceType.class,
                "name", name,
                "availableVersions", availableVersions,
                "defaultVersion", defaultVersion,
                "description", description,
                "plans", plans);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends java.util.List<String>> availableVersions = Optional.empty();
 
        private Optional<? extends String> defaultVersion = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasPlan>> plans = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * DbaaS service available versions
         */
        public Builder availableVersions(java.util.List<String> availableVersions) {
            Utils.checkNotNull(availableVersions, "availableVersions");
            this.availableVersions = Optional.ofNullable(availableVersions);
            return this;
        }

        /**
         * DbaaS service available versions
         */
        public Builder availableVersions(Optional<? extends java.util.List<String>> availableVersions) {
            Utils.checkNotNull(availableVersions, "availableVersions");
            this.availableVersions = availableVersions;
            return this;
        }

        /**
         * DbaaS service default version
         */
        public Builder defaultVersion(String defaultVersion) {
            Utils.checkNotNull(defaultVersion, "defaultVersion");
            this.defaultVersion = Optional.ofNullable(defaultVersion);
            return this;
        }

        /**
         * DbaaS service default version
         */
        public Builder defaultVersion(Optional<? extends String> defaultVersion) {
            Utils.checkNotNull(defaultVersion, "defaultVersion");
            this.defaultVersion = defaultVersion;
            return this;
        }

        /**
         * DbaaS service description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * DbaaS service description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * DbaaS service plans
         */
        public Builder plans(java.util.List<DbaasPlan> plans) {
            Utils.checkNotNull(plans, "plans");
            this.plans = Optional.ofNullable(plans);
            return this;
        }

        /**
         * DbaaS service plans
         */
        public Builder plans(Optional<? extends java.util.List<DbaasPlan>> plans) {
            Utils.checkNotNull(plans, "plans");
            this.plans = plans;
            return this;
        }
        
        public DbaasServiceType build() {
            return new DbaasServiceType(
                name,
                availableVersions,
                defaultVersion,
                description,
                plans);
        }
    }
}

