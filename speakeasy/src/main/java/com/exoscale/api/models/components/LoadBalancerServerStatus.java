/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * LoadBalancerServerStatus - Load Balancer Service status
 */

public class LoadBalancerServerStatus {

    /**
     * Backend server public IP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public-ip")
    private Optional<? extends String> publicIp;

    /**
     * Status of the instance's healthcheck
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends Status> status;

    public LoadBalancerServerStatus(
            @JsonProperty("public-ip") Optional<? extends String> publicIp,
            @JsonProperty("status") Optional<? extends Status> status) {
        Utils.checkNotNull(publicIp, "publicIp");
        Utils.checkNotNull(status, "status");
        this.publicIp = publicIp;
        this.status = status;
    }

    /**
     * Backend server public IP
     */
    public Optional<? extends String> publicIp() {
        return publicIp;
    }

    /**
     * Status of the instance's healthcheck
     */
    public Optional<? extends Status> status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Backend server public IP
     */
    public LoadBalancerServerStatus withPublicIp(String publicIp) {
        Utils.checkNotNull(publicIp, "publicIp");
        this.publicIp = Optional.ofNullable(publicIp);
        return this;
    }

    /**
     * Backend server public IP
     */
    public LoadBalancerServerStatus withPublicIp(Optional<? extends String> publicIp) {
        Utils.checkNotNull(publicIp, "publicIp");
        this.publicIp = publicIp;
        return this;
    }

    /**
     * Status of the instance's healthcheck
     */
    public LoadBalancerServerStatus withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of the instance's healthcheck
     */
    public LoadBalancerServerStatus withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LoadBalancerServerStatus other = (LoadBalancerServerStatus) o;
        return 
            java.util.Objects.deepEquals(this.publicIp, other.publicIp) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            publicIp,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LoadBalancerServerStatus.class,
                "publicIp", publicIp,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> publicIp = Optional.empty();
 
        private Optional<? extends Status> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Backend server public IP
         */
        public Builder publicIp(String publicIp) {
            Utils.checkNotNull(publicIp, "publicIp");
            this.publicIp = Optional.ofNullable(publicIp);
            return this;
        }

        /**
         * Backend server public IP
         */
        public Builder publicIp(Optional<? extends String> publicIp) {
            Utils.checkNotNull(publicIp, "publicIp");
            this.publicIp = publicIp;
            return this;
        }

        /**
         * Status of the instance's healthcheck
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of the instance's healthcheck
         */
        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public LoadBalancerServerStatus build() {
            return new LoadBalancerServerStatus(
                publicIp,
                status);
        }
    }
}

