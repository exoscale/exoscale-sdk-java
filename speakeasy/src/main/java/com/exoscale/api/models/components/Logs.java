/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class Logs {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit")
    private Optional<? extends String> unit;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time")
    private Optional<? extends String> time;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<? extends String> message;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node")
    private Optional<? extends String> node;

    public Logs(
            @JsonProperty("unit") Optional<? extends String> unit,
            @JsonProperty("time") Optional<? extends String> time,
            @JsonProperty("message") Optional<? extends String> message,
            @JsonProperty("node") Optional<? extends String> node) {
        Utils.checkNotNull(unit, "unit");
        Utils.checkNotNull(time, "time");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(node, "node");
        this.unit = unit;
        this.time = time;
        this.message = message;
        this.node = node;
    }

    public Optional<? extends String> unit() {
        return unit;
    }

    public Optional<? extends String> time() {
        return time;
    }

    public Optional<? extends String> message() {
        return message;
    }

    public Optional<? extends String> node() {
        return node;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Logs withUnit(String unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = Optional.ofNullable(unit);
        return this;
    }

    public Logs withUnit(Optional<? extends String> unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = unit;
        return this;
    }

    public Logs withTime(String time) {
        Utils.checkNotNull(time, "time");
        this.time = Optional.ofNullable(time);
        return this;
    }

    public Logs withTime(Optional<? extends String> time) {
        Utils.checkNotNull(time, "time");
        this.time = time;
        return this;
    }

    public Logs withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    public Logs withMessage(Optional<? extends String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    public Logs withNode(String node) {
        Utils.checkNotNull(node, "node");
        this.node = Optional.ofNullable(node);
        return this;
    }

    public Logs withNode(Optional<? extends String> node) {
        Utils.checkNotNull(node, "node");
        this.node = node;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Logs other = (Logs) o;
        return 
            java.util.Objects.deepEquals(this.unit, other.unit) &&
            java.util.Objects.deepEquals(this.time, other.time) &&
            java.util.Objects.deepEquals(this.message, other.message) &&
            java.util.Objects.deepEquals(this.node, other.node);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            unit,
            time,
            message,
            node);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Logs.class,
                "unit", unit,
                "time", time,
                "message", message,
                "node", node);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> unit = Optional.empty();
 
        private Optional<? extends String> time = Optional.empty();
 
        private Optional<? extends String> message = Optional.empty();
 
        private Optional<? extends String> node = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder unit(String unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = Optional.ofNullable(unit);
            return this;
        }

        public Builder unit(Optional<? extends String> unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = unit;
            return this;
        }

        public Builder time(String time) {
            Utils.checkNotNull(time, "time");
            this.time = Optional.ofNullable(time);
            return this;
        }

        public Builder time(Optional<? extends String> time) {
            Utils.checkNotNull(time, "time");
            this.time = time;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        public Builder message(Optional<? extends String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public Builder node(String node) {
            Utils.checkNotNull(node, "node");
            this.node = Optional.ofNullable(node);
            return this;
        }

        public Builder node(Optional<? extends String> node) {
            Utils.checkNotNull(node, "node");
            this.node = node;
            return this;
        }
        
        public Logs build() {
            return new Logs(
                unit,
                time,
                message,
                node);
        }
    }
}

