/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.SpeakeasyMetadata;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ListSksClusterVersionsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-deprecated")
    private Optional<? extends String> includeDeprecated;

    public ListSksClusterVersionsRequest(
            Optional<? extends String> includeDeprecated) {
        Utils.checkNotNull(includeDeprecated, "includeDeprecated");
        this.includeDeprecated = includeDeprecated;
    }

    public Optional<? extends String> includeDeprecated() {
        return includeDeprecated;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListSksClusterVersionsRequest withIncludeDeprecated(String includeDeprecated) {
        Utils.checkNotNull(includeDeprecated, "includeDeprecated");
        this.includeDeprecated = Optional.ofNullable(includeDeprecated);
        return this;
    }

    public ListSksClusterVersionsRequest withIncludeDeprecated(Optional<? extends String> includeDeprecated) {
        Utils.checkNotNull(includeDeprecated, "includeDeprecated");
        this.includeDeprecated = includeDeprecated;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSksClusterVersionsRequest other = (ListSksClusterVersionsRequest) o;
        return 
            java.util.Objects.deepEquals(this.includeDeprecated, other.includeDeprecated);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            includeDeprecated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSksClusterVersionsRequest.class,
                "includeDeprecated", includeDeprecated);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> includeDeprecated = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder includeDeprecated(String includeDeprecated) {
            Utils.checkNotNull(includeDeprecated, "includeDeprecated");
            this.includeDeprecated = Optional.ofNullable(includeDeprecated);
            return this;
        }

        public Builder includeDeprecated(Optional<? extends String> includeDeprecated) {
            Utils.checkNotNull(includeDeprecated, "includeDeprecated");
            this.includeDeprecated = includeDeprecated;
            return this;
        }
        
        public ListSksClusterVersionsRequest build() {
            return new ListSksClusterVersionsRequest(
                includeDeprecated);
        }
    }
}

