/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GetDbaasSettingsRedisSettings {

    /**
     * Redis configuration values
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redis")
    private Optional<? extends Redis> redis;

    public GetDbaasSettingsRedisSettings(
            @JsonProperty("redis") Optional<? extends Redis> redis) {
        Utils.checkNotNull(redis, "redis");
        this.redis = redis;
    }

    /**
     * Redis configuration values
     */
    public Optional<? extends Redis> redis() {
        return redis;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Redis configuration values
     */
    public GetDbaasSettingsRedisSettings withRedis(Redis redis) {
        Utils.checkNotNull(redis, "redis");
        this.redis = Optional.ofNullable(redis);
        return this;
    }

    /**
     * Redis configuration values
     */
    public GetDbaasSettingsRedisSettings withRedis(Optional<? extends Redis> redis) {
        Utils.checkNotNull(redis, "redis");
        this.redis = redis;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDbaasSettingsRedisSettings other = (GetDbaasSettingsRedisSettings) o;
        return 
            java.util.Objects.deepEquals(this.redis, other.redis);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            redis);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDbaasSettingsRedisSettings.class,
                "redis", redis);
    }
    
    public final static class Builder {
 
        private Optional<? extends Redis> redis = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Redis configuration values
         */
        public Builder redis(Redis redis) {
            Utils.checkNotNull(redis, "redis");
            this.redis = Optional.ofNullable(redis);
            return this;
        }

        /**
         * Redis configuration values
         */
        public Builder redis(Optional<? extends Redis> redis) {
            Utils.checkNotNull(redis, "redis");
            this.redis = redis;
            return this;
        }
        
        public GetDbaasSettingsRedisSettings build() {
            return new GetDbaasSettingsRedisSettings(
                redis);
        }
    }
}

