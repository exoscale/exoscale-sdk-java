/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for BackupSchedule2 type.
 */
public class BackupSchedule2 {
    private Long backupHour;
    private Long backupMinute;

    /**
     * Default constructor.
     */
    public BackupSchedule2() {
    }

    /**
     * Initialization constructor.
     * @param  backupHour  Long value for backupHour.
     * @param  backupMinute  Long value for backupMinute.
     */
    public BackupSchedule2(
            Long backupHour,
            Long backupMinute) {
        this.backupHour = backupHour;
        this.backupMinute = backupMinute;
    }

    /**
     * Getter for BackupHour.
     * The hour of day (in UTC) when backup for the service is started. New backup is only started
     * if previous backup has already completed.
     * @return Returns the Long
     */
    @JsonGetter("backup-hour")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getBackupHour() {
        return backupHour;
    }

    /**
     * Setter for BackupHour.
     * The hour of day (in UTC) when backup for the service is started. New backup is only started
     * if previous backup has already completed.
     * @param backupHour Value for Long
     */
    @JsonSetter("backup-hour")
    public void setBackupHour(Long backupHour) {
        this.backupHour = backupHour;
    }

    /**
     * Getter for BackupMinute.
     * The minute of an hour when backup for the service is started. New backup is only started if
     * previous backup has already completed.
     * @return Returns the Long
     */
    @JsonGetter("backup-minute")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getBackupMinute() {
        return backupMinute;
    }

    /**
     * Setter for BackupMinute.
     * The minute of an hour when backup for the service is started. New backup is only started if
     * previous backup has already completed.
     * @param backupMinute Value for Long
     */
    @JsonSetter("backup-minute")
    public void setBackupMinute(Long backupMinute) {
        this.backupMinute = backupMinute;
    }

    /**
     * Converts this BackupSchedule2 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BackupSchedule2 [" + "backupHour=" + backupHour + ", backupMinute=" + backupMinute
                + "]";
    }

    /**
     * Builds a new {@link BackupSchedule2.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BackupSchedule2.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .backupHour(getBackupHour())
                .backupMinute(getBackupMinute());
        return builder;
    }

    /**
     * Class to build instances of {@link BackupSchedule2}.
     */
    public static class Builder {
        private Long backupHour;
        private Long backupMinute;



        /**
         * Setter for backupHour.
         * @param  backupHour  Long value for backupHour.
         * @return Builder
         */
        public Builder backupHour(Long backupHour) {
            this.backupHour = backupHour;
            return this;
        }

        /**
         * Setter for backupMinute.
         * @param  backupMinute  Long value for backupMinute.
         * @return Builder
         */
        public Builder backupMinute(Long backupMinute) {
            this.backupMinute = backupMinute;
            return this;
        }

        /**
         * Builds a new {@link BackupSchedule2} object using the set fields.
         * @return {@link BackupSchedule2}
         */
        public BackupSchedule2 build() {
            return new BackupSchedule2(backupHour, backupMinute);
        }
    }
}
