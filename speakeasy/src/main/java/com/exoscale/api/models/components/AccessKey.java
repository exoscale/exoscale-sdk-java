/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * AccessKey - IAM Access Key
 */

public class AccessKey {

    /**
     * IAM Access Key name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * IAM Access Key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    /**
     * IAM Access Key Secret
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    private Optional<? extends String> secret;

    /**
     * IAM Access Key type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends AccessKeyType> type;

    /**
     * IAM Access Key version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends Version> version;

    /**
     * IAM Access Key tags
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends java.util.List<String>> tags;

    /**
     * IAM Access Key operations
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operations")
    private Optional<? extends java.util.List<String>> operations;

    /**
     * IAM Access Key Resources
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private Optional<? extends java.util.List<AccessKeyResource>> resources;

    public AccessKey(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("secret") Optional<? extends String> secret,
            @JsonProperty("type") Optional<? extends AccessKeyType> type,
            @JsonProperty("version") Optional<? extends Version> version,
            @JsonProperty("tags") Optional<? extends java.util.List<String>> tags,
            @JsonProperty("operations") Optional<? extends java.util.List<String>> operations,
            @JsonProperty("resources") Optional<? extends java.util.List<AccessKeyResource>> resources) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(secret, "secret");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(operations, "operations");
        Utils.checkNotNull(resources, "resources");
        this.name = name;
        this.key = key;
        this.secret = secret;
        this.type = type;
        this.version = version;
        this.tags = tags;
        this.operations = operations;
        this.resources = resources;
    }

    /**
     * IAM Access Key name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * IAM Access Key
     */
    public Optional<? extends String> key() {
        return key;
    }

    /**
     * IAM Access Key Secret
     */
    public Optional<? extends String> secret() {
        return secret;
    }

    /**
     * IAM Access Key type
     */
    public Optional<? extends AccessKeyType> type() {
        return type;
    }

    /**
     * IAM Access Key version
     */
    public Optional<? extends Version> version() {
        return version;
    }

    /**
     * IAM Access Key tags
     */
    public Optional<? extends java.util.List<String>> tags() {
        return tags;
    }

    /**
     * IAM Access Key operations
     */
    public Optional<? extends java.util.List<String>> operations() {
        return operations;
    }

    /**
     * IAM Access Key Resources
     */
    public Optional<? extends java.util.List<AccessKeyResource>> resources() {
        return resources;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * IAM Access Key name
     */
    public AccessKey withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * IAM Access Key name
     */
    public AccessKey withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * IAM Access Key
     */
    public AccessKey withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    /**
     * IAM Access Key
     */
    public AccessKey withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * IAM Access Key Secret
     */
    public AccessKey withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = Optional.ofNullable(secret);
        return this;
    }

    /**
     * IAM Access Key Secret
     */
    public AccessKey withSecret(Optional<? extends String> secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    /**
     * IAM Access Key type
     */
    public AccessKey withType(AccessKeyType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * IAM Access Key type
     */
    public AccessKey withType(Optional<? extends AccessKeyType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * IAM Access Key version
     */
    public AccessKey withVersion(Version version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * IAM Access Key version
     */
    public AccessKey withVersion(Optional<? extends Version> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * IAM Access Key tags
     */
    public AccessKey withTags(java.util.List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    /**
     * IAM Access Key tags
     */
    public AccessKey withTags(Optional<? extends java.util.List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * IAM Access Key operations
     */
    public AccessKey withOperations(java.util.List<String> operations) {
        Utils.checkNotNull(operations, "operations");
        this.operations = Optional.ofNullable(operations);
        return this;
    }

    /**
     * IAM Access Key operations
     */
    public AccessKey withOperations(Optional<? extends java.util.List<String>> operations) {
        Utils.checkNotNull(operations, "operations");
        this.operations = operations;
        return this;
    }

    /**
     * IAM Access Key Resources
     */
    public AccessKey withResources(java.util.List<AccessKeyResource> resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = Optional.ofNullable(resources);
        return this;
    }

    /**
     * IAM Access Key Resources
     */
    public AccessKey withResources(Optional<? extends java.util.List<AccessKeyResource>> resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = resources;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccessKey other = (AccessKey) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.secret, other.secret) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.tags, other.tags) &&
            java.util.Objects.deepEquals(this.operations, other.operations) &&
            java.util.Objects.deepEquals(this.resources, other.resources);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            key,
            secret,
            type,
            version,
            tags,
            operations,
            resources);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccessKey.class,
                "name", name,
                "key", key,
                "secret", secret,
                "type", type,
                "version", version,
                "tags", tags,
                "operations", operations,
                "resources", resources);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends String> secret = Optional.empty();
 
        private Optional<? extends AccessKeyType> type = Optional.empty();
 
        private Optional<? extends Version> version = Optional.empty();
 
        private Optional<? extends java.util.List<String>> tags = Optional.empty();
 
        private Optional<? extends java.util.List<String>> operations = Optional.empty();
 
        private Optional<? extends java.util.List<AccessKeyResource>> resources = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * IAM Access Key name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * IAM Access Key name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * IAM Access Key
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        /**
         * IAM Access Key
         */
        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * IAM Access Key Secret
         */
        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = Optional.ofNullable(secret);
            return this;
        }

        /**
         * IAM Access Key Secret
         */
        public Builder secret(Optional<? extends String> secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }

        /**
         * IAM Access Key type
         */
        public Builder type(AccessKeyType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * IAM Access Key type
         */
        public Builder type(Optional<? extends AccessKeyType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * IAM Access Key version
         */
        public Builder version(Version version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * IAM Access Key version
         */
        public Builder version(Optional<? extends Version> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * IAM Access Key tags
         */
        public Builder tags(java.util.List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        /**
         * IAM Access Key tags
         */
        public Builder tags(Optional<? extends java.util.List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * IAM Access Key operations
         */
        public Builder operations(java.util.List<String> operations) {
            Utils.checkNotNull(operations, "operations");
            this.operations = Optional.ofNullable(operations);
            return this;
        }

        /**
         * IAM Access Key operations
         */
        public Builder operations(Optional<? extends java.util.List<String>> operations) {
            Utils.checkNotNull(operations, "operations");
            this.operations = operations;
            return this;
        }

        /**
         * IAM Access Key Resources
         */
        public Builder resources(java.util.List<AccessKeyResource> resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = Optional.ofNullable(resources);
            return this;
        }

        /**
         * IAM Access Key Resources
         */
        public Builder resources(Optional<? extends java.util.List<AccessKeyResource>> resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = resources;
            return this;
        }
        
        public AccessKey build() {
            return new AccessKey(
                name,
                key,
                secret,
                type,
                version,
                tags,
                operations,
                resources);
        }
    }
}

