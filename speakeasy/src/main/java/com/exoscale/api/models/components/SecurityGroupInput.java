/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * SecurityGroupInput - Security Group
 */

public class SecurityGroupInput {

    /**
     * Security Group name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Security Group description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Security Group external sources
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external-sources")
    private Optional<? extends java.util.List<String>> externalSources;

    /**
     * Security Group rules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rules")
    private Optional<? extends java.util.List<SecurityGroupRule>> rules;

    public SecurityGroupInput(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("external-sources") Optional<? extends java.util.List<String>> externalSources,
            @JsonProperty("rules") Optional<? extends java.util.List<SecurityGroupRule>> rules) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(externalSources, "externalSources");
        Utils.checkNotNull(rules, "rules");
        this.name = name;
        this.description = description;
        this.externalSources = externalSources;
        this.rules = rules;
    }

    /**
     * Security Group name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Security Group description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Security Group external sources
     */
    public Optional<? extends java.util.List<String>> externalSources() {
        return externalSources;
    }

    /**
     * Security Group rules
     */
    public Optional<? extends java.util.List<SecurityGroupRule>> rules() {
        return rules;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Security Group name
     */
    public SecurityGroupInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Security Group name
     */
    public SecurityGroupInput withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Security Group description
     */
    public SecurityGroupInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Security Group description
     */
    public SecurityGroupInput withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Security Group external sources
     */
    public SecurityGroupInput withExternalSources(java.util.List<String> externalSources) {
        Utils.checkNotNull(externalSources, "externalSources");
        this.externalSources = Optional.ofNullable(externalSources);
        return this;
    }

    /**
     * Security Group external sources
     */
    public SecurityGroupInput withExternalSources(Optional<? extends java.util.List<String>> externalSources) {
        Utils.checkNotNull(externalSources, "externalSources");
        this.externalSources = externalSources;
        return this;
    }

    /**
     * Security Group rules
     */
    public SecurityGroupInput withRules(java.util.List<SecurityGroupRule> rules) {
        Utils.checkNotNull(rules, "rules");
        this.rules = Optional.ofNullable(rules);
        return this;
    }

    /**
     * Security Group rules
     */
    public SecurityGroupInput withRules(Optional<? extends java.util.List<SecurityGroupRule>> rules) {
        Utils.checkNotNull(rules, "rules");
        this.rules = rules;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SecurityGroupInput other = (SecurityGroupInput) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.externalSources, other.externalSources) &&
            java.util.Objects.deepEquals(this.rules, other.rules);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            description,
            externalSources,
            rules);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SecurityGroupInput.class,
                "name", name,
                "description", description,
                "externalSources", externalSources,
                "rules", rules);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends java.util.List<String>> externalSources = Optional.empty();
 
        private Optional<? extends java.util.List<SecurityGroupRule>> rules = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Security Group name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Security Group name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Security Group description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Security Group description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Security Group external sources
         */
        public Builder externalSources(java.util.List<String> externalSources) {
            Utils.checkNotNull(externalSources, "externalSources");
            this.externalSources = Optional.ofNullable(externalSources);
            return this;
        }

        /**
         * Security Group external sources
         */
        public Builder externalSources(Optional<? extends java.util.List<String>> externalSources) {
            Utils.checkNotNull(externalSources, "externalSources");
            this.externalSources = externalSources;
            return this;
        }

        /**
         * Security Group rules
         */
        public Builder rules(java.util.List<SecurityGroupRule> rules) {
            Utils.checkNotNull(rules, "rules");
            this.rules = Optional.ofNullable(rules);
            return this;
        }

        /**
         * Security Group rules
         */
        public Builder rules(Optional<? extends java.util.List<SecurityGroupRule>> rules) {
            Utils.checkNotNull(rules, "rules");
            this.rules = rules;
            return this;
        }
        
        public SecurityGroupInput build() {
            return new SecurityGroupInput(
                name,
                description,
                externalSources,
                rules);
        }
    }
}

