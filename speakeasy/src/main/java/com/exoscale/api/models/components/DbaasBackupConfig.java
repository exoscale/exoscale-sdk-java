/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DbaasBackupConfig - DBaaS plan backup config
 */

public class DbaasBackupConfig {

    /**
     * Maximum number of backups to keep. Zero when no backups are created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max-count")
    private Optional<? extends Long> maxCount;

    /**
     * The interval, in hours, at which backups are generated.
     *                                             For some services, like PostgreSQL, this is the interval
     *                                             at which full snapshots are taken and continuous incremental
     *                                             backup stream is maintained in addition to that.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    private Optional<? extends Long> interval;

    /**
     * Mechanism how backups can be restored. 'regular'
     *                                             means a backup is restored as is so that the system
     *                                             is restored to the state it was when the backup was generated.
     *                                             'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recovery-mode")
    private Optional<? extends String> recoveryMode;

    /**
     * Interval of taking a frequent backup in service types supporting different backup schedules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequent-interval-minutes")
    private Optional<? extends Long> frequentIntervalMinutes;

    /**
     * Maximum age of the oldest frequent backup in service types supporting different backup schedules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequent-oldest-age-minutes")
    private Optional<? extends Long> frequentOldestAgeMinutes;

    /**
     * Interval of taking a frequent backup in service types supporting different backup schedules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("infrequent-interval-minutes")
    private Optional<? extends Long> infrequentIntervalMinutes;

    /**
     * Maximum age of the oldest infrequent backup in service types supporting different backup schedules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("infrequent-oldest-age-minutes")
    private Optional<? extends Long> infrequentOldestAgeMinutes;

    public DbaasBackupConfig(
            @JsonProperty("max-count") Optional<? extends Long> maxCount,
            @JsonProperty("interval") Optional<? extends Long> interval,
            @JsonProperty("recovery-mode") Optional<? extends String> recoveryMode,
            @JsonProperty("frequent-interval-minutes") Optional<? extends Long> frequentIntervalMinutes,
            @JsonProperty("frequent-oldest-age-minutes") Optional<? extends Long> frequentOldestAgeMinutes,
            @JsonProperty("infrequent-interval-minutes") Optional<? extends Long> infrequentIntervalMinutes,
            @JsonProperty("infrequent-oldest-age-minutes") Optional<? extends Long> infrequentOldestAgeMinutes) {
        Utils.checkNotNull(maxCount, "maxCount");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(recoveryMode, "recoveryMode");
        Utils.checkNotNull(frequentIntervalMinutes, "frequentIntervalMinutes");
        Utils.checkNotNull(frequentOldestAgeMinutes, "frequentOldestAgeMinutes");
        Utils.checkNotNull(infrequentIntervalMinutes, "infrequentIntervalMinutes");
        Utils.checkNotNull(infrequentOldestAgeMinutes, "infrequentOldestAgeMinutes");
        this.maxCount = maxCount;
        this.interval = interval;
        this.recoveryMode = recoveryMode;
        this.frequentIntervalMinutes = frequentIntervalMinutes;
        this.frequentOldestAgeMinutes = frequentOldestAgeMinutes;
        this.infrequentIntervalMinutes = infrequentIntervalMinutes;
        this.infrequentOldestAgeMinutes = infrequentOldestAgeMinutes;
    }

    /**
     * Maximum number of backups to keep. Zero when no backups are created.
     */
    public Optional<? extends Long> maxCount() {
        return maxCount;
    }

    /**
     * The interval, in hours, at which backups are generated.
     *                                             For some services, like PostgreSQL, this is the interval
     *                                             at which full snapshots are taken and continuous incremental
     *                                             backup stream is maintained in addition to that.
     */
    public Optional<? extends Long> interval() {
        return interval;
    }

    /**
     * Mechanism how backups can be restored. 'regular'
     *                                             means a backup is restored as is so that the system
     *                                             is restored to the state it was when the backup was generated.
     *                                             'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.
     */
    public Optional<? extends String> recoveryMode() {
        return recoveryMode;
    }

    /**
     * Interval of taking a frequent backup in service types supporting different backup schedules
     */
    public Optional<? extends Long> frequentIntervalMinutes() {
        return frequentIntervalMinutes;
    }

    /**
     * Maximum age of the oldest frequent backup in service types supporting different backup schedules
     */
    public Optional<? extends Long> frequentOldestAgeMinutes() {
        return frequentOldestAgeMinutes;
    }

    /**
     * Interval of taking a frequent backup in service types supporting different backup schedules
     */
    public Optional<? extends Long> infrequentIntervalMinutes() {
        return infrequentIntervalMinutes;
    }

    /**
     * Maximum age of the oldest infrequent backup in service types supporting different backup schedules
     */
    public Optional<? extends Long> infrequentOldestAgeMinutes() {
        return infrequentOldestAgeMinutes;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Maximum number of backups to keep. Zero when no backups are created.
     */
    public DbaasBackupConfig withMaxCount(long maxCount) {
        Utils.checkNotNull(maxCount, "maxCount");
        this.maxCount = Optional.ofNullable(maxCount);
        return this;
    }

    /**
     * Maximum number of backups to keep. Zero when no backups are created.
     */
    public DbaasBackupConfig withMaxCount(Optional<? extends Long> maxCount) {
        Utils.checkNotNull(maxCount, "maxCount");
        this.maxCount = maxCount;
        return this;
    }

    /**
     * The interval, in hours, at which backups are generated.
     *                                             For some services, like PostgreSQL, this is the interval
     *                                             at which full snapshots are taken and continuous incremental
     *                                             backup stream is maintained in addition to that.
     */
    public DbaasBackupConfig withInterval(long interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = Optional.ofNullable(interval);
        return this;
    }

    /**
     * The interval, in hours, at which backups are generated.
     *                                             For some services, like PostgreSQL, this is the interval
     *                                             at which full snapshots are taken and continuous incremental
     *                                             backup stream is maintained in addition to that.
     */
    public DbaasBackupConfig withInterval(Optional<? extends Long> interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * Mechanism how backups can be restored. 'regular'
     *                                             means a backup is restored as is so that the system
     *                                             is restored to the state it was when the backup was generated.
     *                                             'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.
     */
    public DbaasBackupConfig withRecoveryMode(String recoveryMode) {
        Utils.checkNotNull(recoveryMode, "recoveryMode");
        this.recoveryMode = Optional.ofNullable(recoveryMode);
        return this;
    }

    /**
     * Mechanism how backups can be restored. 'regular'
     *                                             means a backup is restored as is so that the system
     *                                             is restored to the state it was when the backup was generated.
     *                                             'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.
     */
    public DbaasBackupConfig withRecoveryMode(Optional<? extends String> recoveryMode) {
        Utils.checkNotNull(recoveryMode, "recoveryMode");
        this.recoveryMode = recoveryMode;
        return this;
    }

    /**
     * Interval of taking a frequent backup in service types supporting different backup schedules
     */
    public DbaasBackupConfig withFrequentIntervalMinutes(long frequentIntervalMinutes) {
        Utils.checkNotNull(frequentIntervalMinutes, "frequentIntervalMinutes");
        this.frequentIntervalMinutes = Optional.ofNullable(frequentIntervalMinutes);
        return this;
    }

    /**
     * Interval of taking a frequent backup in service types supporting different backup schedules
     */
    public DbaasBackupConfig withFrequentIntervalMinutes(Optional<? extends Long> frequentIntervalMinutes) {
        Utils.checkNotNull(frequentIntervalMinutes, "frequentIntervalMinutes");
        this.frequentIntervalMinutes = frequentIntervalMinutes;
        return this;
    }

    /**
     * Maximum age of the oldest frequent backup in service types supporting different backup schedules
     */
    public DbaasBackupConfig withFrequentOldestAgeMinutes(long frequentOldestAgeMinutes) {
        Utils.checkNotNull(frequentOldestAgeMinutes, "frequentOldestAgeMinutes");
        this.frequentOldestAgeMinutes = Optional.ofNullable(frequentOldestAgeMinutes);
        return this;
    }

    /**
     * Maximum age of the oldest frequent backup in service types supporting different backup schedules
     */
    public DbaasBackupConfig withFrequentOldestAgeMinutes(Optional<? extends Long> frequentOldestAgeMinutes) {
        Utils.checkNotNull(frequentOldestAgeMinutes, "frequentOldestAgeMinutes");
        this.frequentOldestAgeMinutes = frequentOldestAgeMinutes;
        return this;
    }

    /**
     * Interval of taking a frequent backup in service types supporting different backup schedules
     */
    public DbaasBackupConfig withInfrequentIntervalMinutes(long infrequentIntervalMinutes) {
        Utils.checkNotNull(infrequentIntervalMinutes, "infrequentIntervalMinutes");
        this.infrequentIntervalMinutes = Optional.ofNullable(infrequentIntervalMinutes);
        return this;
    }

    /**
     * Interval of taking a frequent backup in service types supporting different backup schedules
     */
    public DbaasBackupConfig withInfrequentIntervalMinutes(Optional<? extends Long> infrequentIntervalMinutes) {
        Utils.checkNotNull(infrequentIntervalMinutes, "infrequentIntervalMinutes");
        this.infrequentIntervalMinutes = infrequentIntervalMinutes;
        return this;
    }

    /**
     * Maximum age of the oldest infrequent backup in service types supporting different backup schedules
     */
    public DbaasBackupConfig withInfrequentOldestAgeMinutes(long infrequentOldestAgeMinutes) {
        Utils.checkNotNull(infrequentOldestAgeMinutes, "infrequentOldestAgeMinutes");
        this.infrequentOldestAgeMinutes = Optional.ofNullable(infrequentOldestAgeMinutes);
        return this;
    }

    /**
     * Maximum age of the oldest infrequent backup in service types supporting different backup schedules
     */
    public DbaasBackupConfig withInfrequentOldestAgeMinutes(Optional<? extends Long> infrequentOldestAgeMinutes) {
        Utils.checkNotNull(infrequentOldestAgeMinutes, "infrequentOldestAgeMinutes");
        this.infrequentOldestAgeMinutes = infrequentOldestAgeMinutes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasBackupConfig other = (DbaasBackupConfig) o;
        return 
            java.util.Objects.deepEquals(this.maxCount, other.maxCount) &&
            java.util.Objects.deepEquals(this.interval, other.interval) &&
            java.util.Objects.deepEquals(this.recoveryMode, other.recoveryMode) &&
            java.util.Objects.deepEquals(this.frequentIntervalMinutes, other.frequentIntervalMinutes) &&
            java.util.Objects.deepEquals(this.frequentOldestAgeMinutes, other.frequentOldestAgeMinutes) &&
            java.util.Objects.deepEquals(this.infrequentIntervalMinutes, other.infrequentIntervalMinutes) &&
            java.util.Objects.deepEquals(this.infrequentOldestAgeMinutes, other.infrequentOldestAgeMinutes);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            maxCount,
            interval,
            recoveryMode,
            frequentIntervalMinutes,
            frequentOldestAgeMinutes,
            infrequentIntervalMinutes,
            infrequentOldestAgeMinutes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasBackupConfig.class,
                "maxCount", maxCount,
                "interval", interval,
                "recoveryMode", recoveryMode,
                "frequentIntervalMinutes", frequentIntervalMinutes,
                "frequentOldestAgeMinutes", frequentOldestAgeMinutes,
                "infrequentIntervalMinutes", infrequentIntervalMinutes,
                "infrequentOldestAgeMinutes", infrequentOldestAgeMinutes);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> maxCount = Optional.empty();
 
        private Optional<? extends Long> interval = Optional.empty();
 
        private Optional<? extends String> recoveryMode = Optional.empty();
 
        private Optional<? extends Long> frequentIntervalMinutes = Optional.empty();
 
        private Optional<? extends Long> frequentOldestAgeMinutes = Optional.empty();
 
        private Optional<? extends Long> infrequentIntervalMinutes = Optional.empty();
 
        private Optional<? extends Long> infrequentOldestAgeMinutes = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Maximum number of backups to keep. Zero when no backups are created.
         */
        public Builder maxCount(long maxCount) {
            Utils.checkNotNull(maxCount, "maxCount");
            this.maxCount = Optional.ofNullable(maxCount);
            return this;
        }

        /**
         * Maximum number of backups to keep. Zero when no backups are created.
         */
        public Builder maxCount(Optional<? extends Long> maxCount) {
            Utils.checkNotNull(maxCount, "maxCount");
            this.maxCount = maxCount;
            return this;
        }

        /**
         * The interval, in hours, at which backups are generated.
         *                                             For some services, like PostgreSQL, this is the interval
         *                                             at which full snapshots are taken and continuous incremental
         *                                             backup stream is maintained in addition to that.
         */
        public Builder interval(long interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = Optional.ofNullable(interval);
            return this;
        }

        /**
         * The interval, in hours, at which backups are generated.
         *                                             For some services, like PostgreSQL, this is the interval
         *                                             at which full snapshots are taken and continuous incremental
         *                                             backup stream is maintained in addition to that.
         */
        public Builder interval(Optional<? extends Long> interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }

        /**
         * Mechanism how backups can be restored. 'regular'
         *                                             means a backup is restored as is so that the system
         *                                             is restored to the state it was when the backup was generated.
         *                                             'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.
         */
        public Builder recoveryMode(String recoveryMode) {
            Utils.checkNotNull(recoveryMode, "recoveryMode");
            this.recoveryMode = Optional.ofNullable(recoveryMode);
            return this;
        }

        /**
         * Mechanism how backups can be restored. 'regular'
         *                                             means a backup is restored as is so that the system
         *                                             is restored to the state it was when the backup was generated.
         *                                             'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.
         */
        public Builder recoveryMode(Optional<? extends String> recoveryMode) {
            Utils.checkNotNull(recoveryMode, "recoveryMode");
            this.recoveryMode = recoveryMode;
            return this;
        }

        /**
         * Interval of taking a frequent backup in service types supporting different backup schedules
         */
        public Builder frequentIntervalMinutes(long frequentIntervalMinutes) {
            Utils.checkNotNull(frequentIntervalMinutes, "frequentIntervalMinutes");
            this.frequentIntervalMinutes = Optional.ofNullable(frequentIntervalMinutes);
            return this;
        }

        /**
         * Interval of taking a frequent backup in service types supporting different backup schedules
         */
        public Builder frequentIntervalMinutes(Optional<? extends Long> frequentIntervalMinutes) {
            Utils.checkNotNull(frequentIntervalMinutes, "frequentIntervalMinutes");
            this.frequentIntervalMinutes = frequentIntervalMinutes;
            return this;
        }

        /**
         * Maximum age of the oldest frequent backup in service types supporting different backup schedules
         */
        public Builder frequentOldestAgeMinutes(long frequentOldestAgeMinutes) {
            Utils.checkNotNull(frequentOldestAgeMinutes, "frequentOldestAgeMinutes");
            this.frequentOldestAgeMinutes = Optional.ofNullable(frequentOldestAgeMinutes);
            return this;
        }

        /**
         * Maximum age of the oldest frequent backup in service types supporting different backup schedules
         */
        public Builder frequentOldestAgeMinutes(Optional<? extends Long> frequentOldestAgeMinutes) {
            Utils.checkNotNull(frequentOldestAgeMinutes, "frequentOldestAgeMinutes");
            this.frequentOldestAgeMinutes = frequentOldestAgeMinutes;
            return this;
        }

        /**
         * Interval of taking a frequent backup in service types supporting different backup schedules
         */
        public Builder infrequentIntervalMinutes(long infrequentIntervalMinutes) {
            Utils.checkNotNull(infrequentIntervalMinutes, "infrequentIntervalMinutes");
            this.infrequentIntervalMinutes = Optional.ofNullable(infrequentIntervalMinutes);
            return this;
        }

        /**
         * Interval of taking a frequent backup in service types supporting different backup schedules
         */
        public Builder infrequentIntervalMinutes(Optional<? extends Long> infrequentIntervalMinutes) {
            Utils.checkNotNull(infrequentIntervalMinutes, "infrequentIntervalMinutes");
            this.infrequentIntervalMinutes = infrequentIntervalMinutes;
            return this;
        }

        /**
         * Maximum age of the oldest infrequent backup in service types supporting different backup schedules
         */
        public Builder infrequentOldestAgeMinutes(long infrequentOldestAgeMinutes) {
            Utils.checkNotNull(infrequentOldestAgeMinutes, "infrequentOldestAgeMinutes");
            this.infrequentOldestAgeMinutes = Optional.ofNullable(infrequentOldestAgeMinutes);
            return this;
        }

        /**
         * Maximum age of the oldest infrequent backup in service types supporting different backup schedules
         */
        public Builder infrequentOldestAgeMinutes(Optional<? extends Long> infrequentOldestAgeMinutes) {
            Utils.checkNotNull(infrequentOldestAgeMinutes, "infrequentOldestAgeMinutes");
            this.infrequentOldestAgeMinutes = infrequentOldestAgeMinutes;
            return this;
        }
        
        public DbaasBackupConfig build() {
            return new DbaasBackupConfig(
                maxCount,
                interval,
                recoveryMode,
                frequentIntervalMinutes,
                frequentOldestAgeMinutes,
                infrequentIntervalMinutes,
                infrequentOldestAgeMinutes);
        }
    }
}

