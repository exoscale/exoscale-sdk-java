/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AllowAccessToSelectedServiceComponentsThroughPrivatelink;
import org.openapitools.client.model.AzureADOAuthIntegration;
import org.openapitools.client.model.GenericOAuthIntegration;
import org.openapitools.client.model.GitLabAuthIntegration;
import org.openapitools.client.model.GithubAuthIntegration;
import org.openapitools.client.model.GoogleAuthIntegration;
import org.openapitools.client.model.GrafanaDateFormatSpecifications;
import org.openapitools.client.model.SMTPServerSettings;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for JsonSchemaGrafana
 */
public class JsonSchemaGrafanaTest {
    private final JsonSchemaGrafana model = new JsonSchemaGrafana();

    /**
     * Model tests for JsonSchemaGrafana
     */
    @Test
    public void testJsonSchemaGrafana() {
        // TODO: test JsonSchemaGrafana
    }

    /**
     * Test the property 'allowEmbedding'
     */
    @Test
    public void allowEmbeddingTest() {
        // TODO: test allowEmbedding
    }

    /**
     * Test the property 'cookieSamesite'
     */
    @Test
    public void cookieSamesiteTest() {
        // TODO: test cookieSamesite
    }

    /**
     * Test the property 'dashboardPreviewsEnabled'
     */
    @Test
    public void dashboardPreviewsEnabledTest() {
        // TODO: test dashboardPreviewsEnabled
    }

    /**
     * Test the property 'metricsEnabled'
     */
    @Test
    public void metricsEnabledTest() {
        // TODO: test metricsEnabled
    }

    /**
     * Test the property 'recoveryBasebackupName'
     */
    @Test
    public void recoveryBasebackupNameTest() {
        // TODO: test recoveryBasebackupName
    }

    /**
     * Test the property 'authAzuread'
     */
    @Test
    public void authAzureadTest() {
        // TODO: test authAzuread
    }

    /**
     * Test the property 'alertingEnabled'
     */
    @Test
    public void alertingEnabledTest() {
        // TODO: test alertingEnabled
    }

    /**
     * Test the property 'unifiedAlertingEnabled'
     */
    @Test
    public void unifiedAlertingEnabledTest() {
        // TODO: test unifiedAlertingEnabled
    }

    /**
     * Test the property 'authGithub'
     */
    @Test
    public void authGithubTest() {
        // TODO: test authGithub
    }

    /**
     * Test the property 'userAutoAssignOrg'
     */
    @Test
    public void userAutoAssignOrgTest() {
        // TODO: test userAutoAssignOrg
    }

    /**
     * Test the property 'dataproxySendUserHeader'
     */
    @Test
    public void dataproxySendUserHeaderTest() {
        // TODO: test dataproxySendUserHeader
    }

    /**
     * Test the property 'privatelinkAccess'
     */
    @Test
    public void privatelinkAccessTest() {
        // TODO: test privatelinkAccess
    }

    /**
     * Test the property 'googleAnalyticsUaId'
     */
    @Test
    public void googleAnalyticsUaIdTest() {
        // TODO: test googleAnalyticsUaId
    }

    /**
     * Test the property 'dashboardsVersionsToKeep'
     */
    @Test
    public void dashboardsVersionsToKeepTest() {
        // TODO: test dashboardsVersionsToKeep
    }

    /**
     * Test the property 'editorsCanAdmin'
     */
    @Test
    public void editorsCanAdminTest() {
        // TODO: test editorsCanAdmin
    }

    /**
     * Test the property 'smtpServer'
     */
    @Test
    public void smtpServerTest() {
        // TODO: test smtpServer
    }

    /**
     * Test the property 'authGitlab'
     */
    @Test
    public void authGitlabTest() {
        // TODO: test authGitlab
    }

    /**
     * Test the property 'alertingNodataOrNullvalues'
     */
    @Test
    public void alertingNodataOrNullvaluesTest() {
        // TODO: test alertingNodataOrNullvalues
    }

    /**
     * Test the property 'authBasicEnabled'
     */
    @Test
    public void authBasicEnabledTest() {
        // TODO: test authBasicEnabled
    }

    /**
     * Test the property 'dateFormats'
     */
    @Test
    public void dateFormatsTest() {
        // TODO: test dateFormats
    }

    /**
     * Test the property 'disableGravatar'
     */
    @Test
    public void disableGravatarTest() {
        // TODO: test disableGravatar
    }

    /**
     * Test the property 'userAutoAssignOrgRole'
     */
    @Test
    public void userAutoAssignOrgRoleTest() {
        // TODO: test userAutoAssignOrgRole
    }

    /**
     * Test the property 'dataproxyTimeout'
     */
    @Test
    public void dataproxyTimeoutTest() {
        // TODO: test dataproxyTimeout
    }

    /**
     * Test the property 'viewersCanEdit'
     */
    @Test
    public void viewersCanEditTest() {
        // TODO: test viewersCanEdit
    }

    /**
     * Test the property 'dashboardsMinRefreshInterval'
     */
    @Test
    public void dashboardsMinRefreshIntervalTest() {
        // TODO: test dashboardsMinRefreshInterval
    }

    /**
     * Test the property 'authGoogle'
     */
    @Test
    public void authGoogleTest() {
        // TODO: test authGoogle
    }

    /**
     * Test the property 'oauthAllowInsecureEmailLookup'
     */
    @Test
    public void oauthAllowInsecureEmailLookupTest() {
        // TODO: test oauthAllowInsecureEmailLookup
    }

    /**
     * Test the property 'alertingMaxAnnotationsToKeep'
     */
    @Test
    public void alertingMaxAnnotationsToKeepTest() {
        // TODO: test alertingMaxAnnotationsToKeep
    }

    /**
     * Test the property 'authGenericOauth'
     */
    @Test
    public void authGenericOauthTest() {
        // TODO: test authGenericOauth
    }

    /**
     * Test the property 'alertingErrorOrTimeout'
     */
    @Test
    public void alertingErrorOrTimeoutTest() {
        // TODO: test alertingErrorOrTimeout
    }

}
