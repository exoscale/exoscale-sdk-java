/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class AttachInstanceToPrivateNetworkRequestBody {

    /**
     * Static IP address lease for the corresponding network interface
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip")
    private Optional<? extends String> ip;

    /**
     * Compute instance
     */
    @JsonProperty("instance")
    private Instance instance;

    public AttachInstanceToPrivateNetworkRequestBody(
            @JsonProperty("ip") Optional<? extends String> ip,
            @JsonProperty("instance") Instance instance) {
        Utils.checkNotNull(ip, "ip");
        Utils.checkNotNull(instance, "instance");
        this.ip = ip;
        this.instance = instance;
    }

    /**
     * Static IP address lease for the corresponding network interface
     */
    public Optional<? extends String> ip() {
        return ip;
    }

    /**
     * Compute instance
     */
    public Instance instance() {
        return instance;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Static IP address lease for the corresponding network interface
     */
    public AttachInstanceToPrivateNetworkRequestBody withIp(String ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = Optional.ofNullable(ip);
        return this;
    }

    /**
     * Static IP address lease for the corresponding network interface
     */
    public AttachInstanceToPrivateNetworkRequestBody withIp(Optional<? extends String> ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = ip;
        return this;
    }

    /**
     * Compute instance
     */
    public AttachInstanceToPrivateNetworkRequestBody withInstance(Instance instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = instance;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AttachInstanceToPrivateNetworkRequestBody other = (AttachInstanceToPrivateNetworkRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.ip, other.ip) &&
            java.util.Objects.deepEquals(this.instance, other.instance);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            ip,
            instance);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AttachInstanceToPrivateNetworkRequestBody.class,
                "ip", ip,
                "instance", instance);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> ip = Optional.empty();
 
        private Instance instance;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Static IP address lease for the corresponding network interface
         */
        public Builder ip(String ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = Optional.ofNullable(ip);
            return this;
        }

        /**
         * Static IP address lease for the corresponding network interface
         */
        public Builder ip(Optional<? extends String> ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = ip;
            return this;
        }

        /**
         * Compute instance
         */
        public Builder instance(Instance instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = instance;
            return this;
        }
        
        public AttachInstanceToPrivateNetworkRequestBody build() {
            return new AttachInstanceToPrivateNetworkRequestBody(
                ip,
                instance);
        }
    }
}

