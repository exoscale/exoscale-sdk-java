/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JsonSchemaPgbouncer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class JsonSchemaPgbouncer {
  public static final String SERIALIZED_NAME_MIN_POOL_SIZE = "min_pool_size";
  @SerializedName(SERIALIZED_NAME_MIN_POOL_SIZE)
  private Integer minPoolSize;

  /**
   * Gets or Sets ignoreStartupParameters
   */
  @JsonAdapter(IgnoreStartupParametersEnum.Adapter.class)
  public enum IgnoreStartupParametersEnum {
    EXTRA_FLOAT_DIGITS("extra_float_digits"),
    
    SEARCH_PATH("search_path");

    private String value;

    IgnoreStartupParametersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IgnoreStartupParametersEnum fromValue(String value) {
      for (IgnoreStartupParametersEnum b : IgnoreStartupParametersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IgnoreStartupParametersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IgnoreStartupParametersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IgnoreStartupParametersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IgnoreStartupParametersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IgnoreStartupParametersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IGNORE_STARTUP_PARAMETERS = "ignore_startup_parameters";
  @SerializedName(SERIALIZED_NAME_IGNORE_STARTUP_PARAMETERS)
  private List<IgnoreStartupParametersEnum> ignoreStartupParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVER_LIFETIME = "server_lifetime";
  @SerializedName(SERIALIZED_NAME_SERVER_LIFETIME)
  private Integer serverLifetime;

  /**
   * Gets or Sets autodbPoolMode
   */
  @JsonAdapter(AutodbPoolModeEnum.Adapter.class)
  public enum AutodbPoolModeEnum {
    SESSION("session"),
    
    TRANSACTION("transaction"),
    
    STATEMENT("statement");

    private String value;

    AutodbPoolModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutodbPoolModeEnum fromValue(String value) {
      for (AutodbPoolModeEnum b : AutodbPoolModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutodbPoolModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutodbPoolModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutodbPoolModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutodbPoolModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutodbPoolModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTODB_POOL_MODE = "autodb_pool_mode";
  @SerializedName(SERIALIZED_NAME_AUTODB_POOL_MODE)
  private AutodbPoolModeEnum autodbPoolMode;

  public static final String SERIALIZED_NAME_SERVER_IDLE_TIMEOUT = "server_idle_timeout";
  @SerializedName(SERIALIZED_NAME_SERVER_IDLE_TIMEOUT)
  private Integer serverIdleTimeout;

  public static final String SERIALIZED_NAME_AUTODB_MAX_DB_CONNECTIONS = "autodb_max_db_connections";
  @SerializedName(SERIALIZED_NAME_AUTODB_MAX_DB_CONNECTIONS)
  private Integer autodbMaxDbConnections;

  public static final String SERIALIZED_NAME_SERVER_RESET_QUERY_ALWAYS = "server_reset_query_always";
  @SerializedName(SERIALIZED_NAME_SERVER_RESET_QUERY_ALWAYS)
  private Boolean serverResetQueryAlways;

  public static final String SERIALIZED_NAME_AUTODB_POOL_SIZE = "autodb_pool_size";
  @SerializedName(SERIALIZED_NAME_AUTODB_POOL_SIZE)
  private Integer autodbPoolSize;

  public static final String SERIALIZED_NAME_AUTODB_IDLE_TIMEOUT = "autodb_idle_timeout";
  @SerializedName(SERIALIZED_NAME_AUTODB_IDLE_TIMEOUT)
  private Integer autodbIdleTimeout;

  public JsonSchemaPgbouncer() {
  }

  public JsonSchemaPgbouncer minPoolSize(Integer minPoolSize) {
    this.minPoolSize = minPoolSize;
    return this;
  }

   /**
   * Get minPoolSize
   * minimum: 0
   * maximum: 10000
   * @return minPoolSize
  **/
  @javax.annotation.Nullable
  public Integer getMinPoolSize() {
    return minPoolSize;
  }

  public void setMinPoolSize(Integer minPoolSize) {
    this.minPoolSize = minPoolSize;
  }


  public JsonSchemaPgbouncer ignoreStartupParameters(List<IgnoreStartupParametersEnum> ignoreStartupParameters) {
    this.ignoreStartupParameters = ignoreStartupParameters;
    return this;
  }

  public JsonSchemaPgbouncer addIgnoreStartupParametersItem(IgnoreStartupParametersEnum ignoreStartupParametersItem) {
    if (this.ignoreStartupParameters == null) {
      this.ignoreStartupParameters = new ArrayList<>();
    }
    this.ignoreStartupParameters.add(ignoreStartupParametersItem);
    return this;
  }

   /**
   * Get ignoreStartupParameters
   * @return ignoreStartupParameters
  **/
  @javax.annotation.Nullable
  public List<IgnoreStartupParametersEnum> getIgnoreStartupParameters() {
    return ignoreStartupParameters;
  }

  public void setIgnoreStartupParameters(List<IgnoreStartupParametersEnum> ignoreStartupParameters) {
    this.ignoreStartupParameters = ignoreStartupParameters;
  }


  public JsonSchemaPgbouncer serverLifetime(Integer serverLifetime) {
    this.serverLifetime = serverLifetime;
    return this;
  }

   /**
   * Get serverLifetime
   * minimum: 60
   * maximum: 86400
   * @return serverLifetime
  **/
  @javax.annotation.Nullable
  public Integer getServerLifetime() {
    return serverLifetime;
  }

  public void setServerLifetime(Integer serverLifetime) {
    this.serverLifetime = serverLifetime;
  }


  public JsonSchemaPgbouncer autodbPoolMode(AutodbPoolModeEnum autodbPoolMode) {
    this.autodbPoolMode = autodbPoolMode;
    return this;
  }

   /**
   * Get autodbPoolMode
   * @return autodbPoolMode
  **/
  @javax.annotation.Nullable
  public AutodbPoolModeEnum getAutodbPoolMode() {
    return autodbPoolMode;
  }

  public void setAutodbPoolMode(AutodbPoolModeEnum autodbPoolMode) {
    this.autodbPoolMode = autodbPoolMode;
  }


  public JsonSchemaPgbouncer serverIdleTimeout(Integer serverIdleTimeout) {
    this.serverIdleTimeout = serverIdleTimeout;
    return this;
  }

   /**
   * Get serverIdleTimeout
   * minimum: 0
   * maximum: 86400
   * @return serverIdleTimeout
  **/
  @javax.annotation.Nullable
  public Integer getServerIdleTimeout() {
    return serverIdleTimeout;
  }

  public void setServerIdleTimeout(Integer serverIdleTimeout) {
    this.serverIdleTimeout = serverIdleTimeout;
  }


  public JsonSchemaPgbouncer autodbMaxDbConnections(Integer autodbMaxDbConnections) {
    this.autodbMaxDbConnections = autodbMaxDbConnections;
    return this;
  }

   /**
   * Get autodbMaxDbConnections
   * minimum: 0
   * maximum: 2147483647
   * @return autodbMaxDbConnections
  **/
  @javax.annotation.Nullable
  public Integer getAutodbMaxDbConnections() {
    return autodbMaxDbConnections;
  }

  public void setAutodbMaxDbConnections(Integer autodbMaxDbConnections) {
    this.autodbMaxDbConnections = autodbMaxDbConnections;
  }


  public JsonSchemaPgbouncer serverResetQueryAlways(Boolean serverResetQueryAlways) {
    this.serverResetQueryAlways = serverResetQueryAlways;
    return this;
  }

   /**
   * Get serverResetQueryAlways
   * @return serverResetQueryAlways
  **/
  @javax.annotation.Nullable
  public Boolean getServerResetQueryAlways() {
    return serverResetQueryAlways;
  }

  public void setServerResetQueryAlways(Boolean serverResetQueryAlways) {
    this.serverResetQueryAlways = serverResetQueryAlways;
  }


  public JsonSchemaPgbouncer autodbPoolSize(Integer autodbPoolSize) {
    this.autodbPoolSize = autodbPoolSize;
    return this;
  }

   /**
   * Get autodbPoolSize
   * minimum: 0
   * maximum: 10000
   * @return autodbPoolSize
  **/
  @javax.annotation.Nullable
  public Integer getAutodbPoolSize() {
    return autodbPoolSize;
  }

  public void setAutodbPoolSize(Integer autodbPoolSize) {
    this.autodbPoolSize = autodbPoolSize;
  }


  public JsonSchemaPgbouncer autodbIdleTimeout(Integer autodbIdleTimeout) {
    this.autodbIdleTimeout = autodbIdleTimeout;
    return this;
  }

   /**
   * Get autodbIdleTimeout
   * minimum: 0
   * maximum: 86400
   * @return autodbIdleTimeout
  **/
  @javax.annotation.Nullable
  public Integer getAutodbIdleTimeout() {
    return autodbIdleTimeout;
  }

  public void setAutodbIdleTimeout(Integer autodbIdleTimeout) {
    this.autodbIdleTimeout = autodbIdleTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchemaPgbouncer jsonSchemaPgbouncer = (JsonSchemaPgbouncer) o;
    return Objects.equals(this.minPoolSize, jsonSchemaPgbouncer.minPoolSize) &&
        Objects.equals(this.ignoreStartupParameters, jsonSchemaPgbouncer.ignoreStartupParameters) &&
        Objects.equals(this.serverLifetime, jsonSchemaPgbouncer.serverLifetime) &&
        Objects.equals(this.autodbPoolMode, jsonSchemaPgbouncer.autodbPoolMode) &&
        Objects.equals(this.serverIdleTimeout, jsonSchemaPgbouncer.serverIdleTimeout) &&
        Objects.equals(this.autodbMaxDbConnections, jsonSchemaPgbouncer.autodbMaxDbConnections) &&
        Objects.equals(this.serverResetQueryAlways, jsonSchemaPgbouncer.serverResetQueryAlways) &&
        Objects.equals(this.autodbPoolSize, jsonSchemaPgbouncer.autodbPoolSize) &&
        Objects.equals(this.autodbIdleTimeout, jsonSchemaPgbouncer.autodbIdleTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minPoolSize, ignoreStartupParameters, serverLifetime, autodbPoolMode, serverIdleTimeout, autodbMaxDbConnections, serverResetQueryAlways, autodbPoolSize, autodbIdleTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchemaPgbouncer {\n");
    sb.append("    minPoolSize: ").append(toIndentedString(minPoolSize)).append("\n");
    sb.append("    ignoreStartupParameters: ").append(toIndentedString(ignoreStartupParameters)).append("\n");
    sb.append("    serverLifetime: ").append(toIndentedString(serverLifetime)).append("\n");
    sb.append("    autodbPoolMode: ").append(toIndentedString(autodbPoolMode)).append("\n");
    sb.append("    serverIdleTimeout: ").append(toIndentedString(serverIdleTimeout)).append("\n");
    sb.append("    autodbMaxDbConnections: ").append(toIndentedString(autodbMaxDbConnections)).append("\n");
    sb.append("    serverResetQueryAlways: ").append(toIndentedString(serverResetQueryAlways)).append("\n");
    sb.append("    autodbPoolSize: ").append(toIndentedString(autodbPoolSize)).append("\n");
    sb.append("    autodbIdleTimeout: ").append(toIndentedString(autodbIdleTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("min_pool_size");
    openapiFields.add("ignore_startup_parameters");
    openapiFields.add("server_lifetime");
    openapiFields.add("autodb_pool_mode");
    openapiFields.add("server_idle_timeout");
    openapiFields.add("autodb_max_db_connections");
    openapiFields.add("server_reset_query_always");
    openapiFields.add("autodb_pool_size");
    openapiFields.add("autodb_idle_timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to JsonSchemaPgbouncer
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JsonSchemaPgbouncer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonSchemaPgbouncer is not found in the empty JSON string", JsonSchemaPgbouncer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JsonSchemaPgbouncer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JsonSchemaPgbouncer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignore_startup_parameters") != null && !jsonObj.get("ignore_startup_parameters").isJsonNull() && !jsonObj.get("ignore_startup_parameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignore_startup_parameters` to be an array in the JSON string but got `%s`", jsonObj.get("ignore_startup_parameters").toString()));
      }
      if ((jsonObj.get("autodb_pool_mode") != null && !jsonObj.get("autodb_pool_mode").isJsonNull()) && !jsonObj.get("autodb_pool_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autodb_pool_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autodb_pool_mode").toString()));
      }
      // validate the optional field `autodb_pool_mode`
      if (jsonObj.get("autodb_pool_mode") != null && !jsonObj.get("autodb_pool_mode").isJsonNull()) {
        AutodbPoolModeEnum.validateJsonElement(jsonObj.get("autodb_pool_mode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonSchemaPgbouncer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonSchemaPgbouncer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonSchemaPgbouncer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonSchemaPgbouncer.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonSchemaPgbouncer>() {
           @Override
           public void write(JsonWriter out, JsonSchemaPgbouncer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonSchemaPgbouncer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JsonSchemaPgbouncer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JsonSchemaPgbouncer
  * @throws IOException if the JSON string is invalid with respect to JsonSchemaPgbouncer
  */
  public static JsonSchemaPgbouncer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonSchemaPgbouncer.class);
  }

 /**
  * Convert an instance of JsonSchemaPgbouncer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

