/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DbaasServiceOpensearchConnectionInfo - Opensearch connection information properties
 */

public class DbaasServiceOpensearchConnectionInfo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    private Optional<? extends java.util.List<String>> uri;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<? extends String> username;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<? extends String> password;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dashboard-uri")
    private Optional<? extends String> dashboardUri;

    public DbaasServiceOpensearchConnectionInfo(
            @JsonProperty("uri") Optional<? extends java.util.List<String>> uri,
            @JsonProperty("username") Optional<? extends String> username,
            @JsonProperty("password") Optional<? extends String> password,
            @JsonProperty("dashboard-uri") Optional<? extends String> dashboardUri) {
        Utils.checkNotNull(uri, "uri");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(dashboardUri, "dashboardUri");
        this.uri = uri;
        this.username = username;
        this.password = password;
        this.dashboardUri = dashboardUri;
    }

    public Optional<? extends java.util.List<String>> uri() {
        return uri;
    }

    public Optional<? extends String> username() {
        return username;
    }

    public Optional<? extends String> password() {
        return password;
    }

    public Optional<? extends String> dashboardUri() {
        return dashboardUri;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DbaasServiceOpensearchConnectionInfo withUri(java.util.List<String> uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = Optional.ofNullable(uri);
        return this;
    }

    public DbaasServiceOpensearchConnectionInfo withUri(Optional<? extends java.util.List<String>> uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = uri;
        return this;
    }

    public DbaasServiceOpensearchConnectionInfo withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }

    public DbaasServiceOpensearchConnectionInfo withUsername(Optional<? extends String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public DbaasServiceOpensearchConnectionInfo withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    public DbaasServiceOpensearchConnectionInfo withPassword(Optional<? extends String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public DbaasServiceOpensearchConnectionInfo withDashboardUri(String dashboardUri) {
        Utils.checkNotNull(dashboardUri, "dashboardUri");
        this.dashboardUri = Optional.ofNullable(dashboardUri);
        return this;
    }

    public DbaasServiceOpensearchConnectionInfo withDashboardUri(Optional<? extends String> dashboardUri) {
        Utils.checkNotNull(dashboardUri, "dashboardUri");
        this.dashboardUri = dashboardUri;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceOpensearchConnectionInfo other = (DbaasServiceOpensearchConnectionInfo) o;
        return 
            java.util.Objects.deepEquals(this.uri, other.uri) &&
            java.util.Objects.deepEquals(this.username, other.username) &&
            java.util.Objects.deepEquals(this.password, other.password) &&
            java.util.Objects.deepEquals(this.dashboardUri, other.dashboardUri);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            uri,
            username,
            password,
            dashboardUri);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceOpensearchConnectionInfo.class,
                "uri", uri,
                "username", username,
                "password", password,
                "dashboardUri", dashboardUri);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> uri = Optional.empty();
 
        private Optional<? extends String> username = Optional.empty();
 
        private Optional<? extends String> password = Optional.empty();
 
        private Optional<? extends String> dashboardUri = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder uri(java.util.List<String> uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = Optional.ofNullable(uri);
            return this;
        }

        public Builder uri(Optional<? extends java.util.List<String>> uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = uri;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        public Builder username(Optional<? extends String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        public Builder password(Optional<? extends String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder dashboardUri(String dashboardUri) {
            Utils.checkNotNull(dashboardUri, "dashboardUri");
            this.dashboardUri = Optional.ofNullable(dashboardUri);
            return this;
        }

        public Builder dashboardUri(Optional<? extends String> dashboardUri) {
            Utils.checkNotNull(dashboardUri, "dashboardUri");
            this.dashboardUri = dashboardUri;
            return this;
        }
        
        public DbaasServiceOpensearchConnectionInfo build() {
            return new DbaasServiceOpensearchConnectionInfo(
                uri,
                username,
                password,
                dashboardUri);
        }
    }
}

