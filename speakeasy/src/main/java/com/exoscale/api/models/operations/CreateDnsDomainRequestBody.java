/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * CreateDnsDomainRequestBody - DNS Domain
 */

public class CreateDnsDomainRequestBody {

    /**
     * Domain name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unicode-name")
    private Optional<? extends String> unicodeName;

    public CreateDnsDomainRequestBody(
            @JsonProperty("unicode-name") Optional<? extends String> unicodeName) {
        Utils.checkNotNull(unicodeName, "unicodeName");
        this.unicodeName = unicodeName;
    }

    /**
     * Domain name
     */
    public Optional<? extends String> unicodeName() {
        return unicodeName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Domain name
     */
    public CreateDnsDomainRequestBody withUnicodeName(String unicodeName) {
        Utils.checkNotNull(unicodeName, "unicodeName");
        this.unicodeName = Optional.ofNullable(unicodeName);
        return this;
    }

    /**
     * Domain name
     */
    public CreateDnsDomainRequestBody withUnicodeName(Optional<? extends String> unicodeName) {
        Utils.checkNotNull(unicodeName, "unicodeName");
        this.unicodeName = unicodeName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDnsDomainRequestBody other = (CreateDnsDomainRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.unicodeName, other.unicodeName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            unicodeName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDnsDomainRequestBody.class,
                "unicodeName", unicodeName);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> unicodeName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Domain name
         */
        public Builder unicodeName(String unicodeName) {
            Utils.checkNotNull(unicodeName, "unicodeName");
            this.unicodeName = Optional.ofNullable(unicodeName);
            return this;
        }

        /**
         * Domain name
         */
        public Builder unicodeName(Optional<? extends String> unicodeName) {
            Utils.checkNotNull(unicodeName, "unicodeName");
            this.unicodeName = unicodeName;
            return this;
        }
        
        public CreateDnsDomainRequestBody build() {
            return new CreateDnsDomainRequestBody(
                unicodeName);
        }
    }
}

