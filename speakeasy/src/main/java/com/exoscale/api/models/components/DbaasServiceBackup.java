/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;

/**
 * DbaasServiceBackup - List of backups for the service
 */

public class DbaasServiceBackup {

    /**
     * Internal name of this backup
     */
    @JsonProperty("backup-name")
    private String backupName;

    /**
     * Backup timestamp (ISO 8601)
     */
    @JsonProperty("backup-time")
    private OffsetDateTime backupTime;

    /**
     * Backup's original size before compression
     */
    @JsonProperty("data-size")
    private long dataSize;

    public DbaasServiceBackup(
            @JsonProperty("backup-name") String backupName,
            @JsonProperty("backup-time") OffsetDateTime backupTime,
            @JsonProperty("data-size") long dataSize) {
        Utils.checkNotNull(backupName, "backupName");
        Utils.checkNotNull(backupTime, "backupTime");
        Utils.checkNotNull(dataSize, "dataSize");
        this.backupName = backupName;
        this.backupTime = backupTime;
        this.dataSize = dataSize;
    }

    /**
     * Internal name of this backup
     */
    public String backupName() {
        return backupName;
    }

    /**
     * Backup timestamp (ISO 8601)
     */
    public OffsetDateTime backupTime() {
        return backupTime;
    }

    /**
     * Backup's original size before compression
     */
    public long dataSize() {
        return dataSize;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Internal name of this backup
     */
    public DbaasServiceBackup withBackupName(String backupName) {
        Utils.checkNotNull(backupName, "backupName");
        this.backupName = backupName;
        return this;
    }

    /**
     * Backup timestamp (ISO 8601)
     */
    public DbaasServiceBackup withBackupTime(OffsetDateTime backupTime) {
        Utils.checkNotNull(backupTime, "backupTime");
        this.backupTime = backupTime;
        return this;
    }

    /**
     * Backup's original size before compression
     */
    public DbaasServiceBackup withDataSize(long dataSize) {
        Utils.checkNotNull(dataSize, "dataSize");
        this.dataSize = dataSize;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceBackup other = (DbaasServiceBackup) o;
        return 
            java.util.Objects.deepEquals(this.backupName, other.backupName) &&
            java.util.Objects.deepEquals(this.backupTime, other.backupTime) &&
            java.util.Objects.deepEquals(this.dataSize, other.dataSize);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            backupName,
            backupTime,
            dataSize);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceBackup.class,
                "backupName", backupName,
                "backupTime", backupTime,
                "dataSize", dataSize);
    }
    
    public final static class Builder {
 
        private String backupName;
 
        private OffsetDateTime backupTime;
 
        private Long dataSize;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Internal name of this backup
         */
        public Builder backupName(String backupName) {
            Utils.checkNotNull(backupName, "backupName");
            this.backupName = backupName;
            return this;
        }

        /**
         * Backup timestamp (ISO 8601)
         */
        public Builder backupTime(OffsetDateTime backupTime) {
            Utils.checkNotNull(backupTime, "backupTime");
            this.backupTime = backupTime;
            return this;
        }

        /**
         * Backup's original size before compression
         */
        public Builder dataSize(long dataSize) {
            Utils.checkNotNull(dataSize, "dataSize");
            this.dataSize = dataSize;
            return this;
        }
        
        public DbaasServiceBackup build() {
            return new DbaasServiceBackup(
                backupName,
                backupTime,
                dataSize);
        }
    }
}

