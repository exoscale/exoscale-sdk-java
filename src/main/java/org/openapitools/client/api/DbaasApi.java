/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateDbaasIntegrationRequest;
import org.openapitools.client.model.CreateDbaasKafkaUserRequest;
import org.openapitools.client.model.CreateDbaasMysqlDatabaseRequest;
import org.openapitools.client.model.CreateDbaasMysqlUserRequest;
import org.openapitools.client.model.CreateDbaasPgConnectionPoolRequest;
import org.openapitools.client.model.CreateDbaasPgDatabaseRequest;
import org.openapitools.client.model.CreateDbaasPgUpgradeCheckRequest;
import org.openapitools.client.model.CreateDbaasPostgresUserRequest;
import org.openapitools.client.model.CreateDbaasServiceGrafanaRequest;
import org.openapitools.client.model.CreateDbaasServiceKafkaRequest;
import org.openapitools.client.model.CreateDbaasServiceMysqlRequest;
import org.openapitools.client.model.CreateDbaasServiceOpensearchRequest;
import org.openapitools.client.model.CreateDbaasServicePgRequest;
import org.openapitools.client.model.CreateDbaasServiceRedisRequest;
import org.openapitools.client.model.CreateDbaasTaskMigrationCheckRequest;
import org.openapitools.client.model.DbaasIntegration;
import org.openapitools.client.model.DbaasKafkaAcls;
import org.openapitools.client.model.DbaasKafkaSchemaRegistryAclEntry;
import org.openapitools.client.model.DbaasKafkaTopicAclEntry;
import org.openapitools.client.model.DbaasMigrationStatus;
import org.openapitools.client.model.DbaasOpensearchAclConfig;
import org.openapitools.client.model.DbaasPostgresUsers;
import org.openapitools.client.model.DbaasServiceGrafana;
import org.openapitools.client.model.DbaasServiceKafka;
import org.openapitools.client.model.DbaasServiceLogs;
import org.openapitools.client.model.DbaasServiceMysql;
import org.openapitools.client.model.DbaasServiceOpensearch;
import org.openapitools.client.model.DbaasServicePg;
import org.openapitools.client.model.DbaasServiceRedis;
import org.openapitools.client.model.DbaasServiceType;
import org.openapitools.client.model.DbaasTask;
import org.openapitools.client.model.DbaasUserKafkaSecrets;
import org.openapitools.client.model.DbaasUserMysqlSecrets;
import org.openapitools.client.model.DbaasUserOpensearchSecrets;
import org.openapitools.client.model.DbaasUserPostgresSecrets;
import org.openapitools.client.model.DbaasUserRedisSecrets;
import org.openapitools.client.model.GetDbaasCaCertificate200Response;
import org.openapitools.client.model.GetDbaasServiceLogsRequest;
import org.openapitools.client.model.GetDbaasServiceMetrics200Response;
import org.openapitools.client.model.GetDbaasServiceMetricsRequest;
import org.openapitools.client.model.GetDbaasSettingsGrafana200Response;
import org.openapitools.client.model.GetDbaasSettingsKafka200Response;
import org.openapitools.client.model.GetDbaasSettingsMysql200Response;
import org.openapitools.client.model.GetDbaasSettingsOpensearch200Response;
import org.openapitools.client.model.GetDbaasSettingsPg200Response;
import org.openapitools.client.model.GetDbaasSettingsRedis200Response;
import org.openapitools.client.model.ListDbaasIntegrationSettings200Response;
import org.openapitools.client.model.ListDbaasIntegrationTypes200Response;
import org.openapitools.client.model.ListDbaasServiceTypes200Response;
import org.openapitools.client.model.ListDbaasServices200Response;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.ResetDbaasMysqlUserPasswordRequest;
import org.openapitools.client.model.ResetDbaasOpensearchUserPasswordRequest;
import java.util.UUID;
import org.openapitools.client.model.UpdateDbaasIntegrationRequest;
import org.openapitools.client.model.UpdateDbaasPgConnectionPoolRequest;
import org.openapitools.client.model.UpdateDbaasPostgresAllowReplicationRequest;
import org.openapitools.client.model.UpdateDbaasServiceGrafanaRequest;
import org.openapitools.client.model.UpdateDbaasServiceKafkaRequest;
import org.openapitools.client.model.UpdateDbaasServiceMysqlRequest;
import org.openapitools.client.model.UpdateDbaasServiceOpensearchRequest;
import org.openapitools.client.model.UpdateDbaasServicePgRequest;
import org.openapitools.client.model.UpdateDbaasServiceRedisRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DbaasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DbaasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DbaasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDbaasIntegration
     * @param createDbaasIntegrationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasIntegrationCall(CreateDbaasIntegrationRequest createDbaasIntegrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasIntegrationRequest;

        // create path and map variables
        String localVarPath = "/dbaas-integration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasIntegrationValidateBeforeCall(CreateDbaasIntegrationRequest createDbaasIntegrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDbaasIntegrationRequest' is set
        if (createDbaasIntegrationRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasIntegrationRequest' when calling createDbaasIntegration(Async)");
        }

        return createDbaasIntegrationCall(createDbaasIntegrationRequest, _callback);

    }

    /**
     * Create a new DBaaS integration between two services
     * Create a new DBaaS integration between two services
     * @param createDbaasIntegrationRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasIntegration(CreateDbaasIntegrationRequest createDbaasIntegrationRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasIntegrationWithHttpInfo(createDbaasIntegrationRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new DBaaS integration between two services
     * Create a new DBaaS integration between two services
     * @param createDbaasIntegrationRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasIntegrationWithHttpInfo(CreateDbaasIntegrationRequest createDbaasIntegrationRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasIntegrationValidateBeforeCall(createDbaasIntegrationRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new DBaaS integration between two services (asynchronously)
     * Create a new DBaaS integration between two services
     * @param createDbaasIntegrationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasIntegrationAsync(CreateDbaasIntegrationRequest createDbaasIntegrationRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasIntegrationValidateBeforeCall(createDbaasIntegrationRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasKafkaSchemaRegistryAclConfig
     * @param name  (required)
     * @param dbaasKafkaSchemaRegistryAclEntry  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasKafkaSchemaRegistryAclConfigCall(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dbaasKafkaSchemaRegistryAclEntry;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{name}/schema-registry/acl-config"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasKafkaSchemaRegistryAclConfigValidateBeforeCall(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createDbaasKafkaSchemaRegistryAclConfig(Async)");
        }

        // verify the required parameter 'dbaasKafkaSchemaRegistryAclEntry' is set
        if (dbaasKafkaSchemaRegistryAclEntry == null) {
            throw new ApiException("Missing the required parameter 'dbaasKafkaSchemaRegistryAclEntry' when calling createDbaasKafkaSchemaRegistryAclConfig(Async)");
        }

        return createDbaasKafkaSchemaRegistryAclConfigCall(name, dbaasKafkaSchemaRegistryAclEntry, _callback);

    }

    /**
     * Add a Kafka Schema Registry ACL entry
     * 
     * @param name  (required)
     * @param dbaasKafkaSchemaRegistryAclEntry  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasKafkaSchemaRegistryAclConfig(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(name, dbaasKafkaSchemaRegistryAclEntry);
        return localVarResp.getData();
    }

    /**
     * Add a Kafka Schema Registry ACL entry
     * 
     * @param name  (required)
     * @param dbaasKafkaSchemaRegistryAclEntry  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry) throws ApiException {
        okhttp3.Call localVarCall = createDbaasKafkaSchemaRegistryAclConfigValidateBeforeCall(name, dbaasKafkaSchemaRegistryAclEntry, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a Kafka Schema Registry ACL entry (asynchronously)
     * 
     * @param name  (required)
     * @param dbaasKafkaSchemaRegistryAclEntry  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasKafkaSchemaRegistryAclConfigAsync(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasKafkaSchemaRegistryAclConfigValidateBeforeCall(name, dbaasKafkaSchemaRegistryAclEntry, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasKafkaTopicAclConfig
     * @param name  (required)
     * @param dbaasKafkaTopicAclEntry  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasKafkaTopicAclConfigCall(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dbaasKafkaTopicAclEntry;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{name}/topic/acl-config"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasKafkaTopicAclConfigValidateBeforeCall(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createDbaasKafkaTopicAclConfig(Async)");
        }

        // verify the required parameter 'dbaasKafkaTopicAclEntry' is set
        if (dbaasKafkaTopicAclEntry == null) {
            throw new ApiException("Missing the required parameter 'dbaasKafkaTopicAclEntry' when calling createDbaasKafkaTopicAclConfig(Async)");
        }

        return createDbaasKafkaTopicAclConfigCall(name, dbaasKafkaTopicAclEntry, _callback);

    }

    /**
     * Add a Kafka topic ACL entry
     * 
     * @param name  (required)
     * @param dbaasKafkaTopicAclEntry  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasKafkaTopicAclConfig(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasKafkaTopicAclConfigWithHttpInfo(name, dbaasKafkaTopicAclEntry);
        return localVarResp.getData();
    }

    /**
     * Add a Kafka topic ACL entry
     * 
     * @param name  (required)
     * @param dbaasKafkaTopicAclEntry  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasKafkaTopicAclConfigWithHttpInfo(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry) throws ApiException {
        okhttp3.Call localVarCall = createDbaasKafkaTopicAclConfigValidateBeforeCall(name, dbaasKafkaTopicAclEntry, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a Kafka topic ACL entry (asynchronously)
     * 
     * @param name  (required)
     * @param dbaasKafkaTopicAclEntry  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasKafkaTopicAclConfigAsync(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasKafkaTopicAclConfigValidateBeforeCall(name, dbaasKafkaTopicAclEntry, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasKafkaUser
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasKafkaUserCall(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasKafkaUserRequest;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{service-name}/user"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasKafkaUserValidateBeforeCall(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling createDbaasKafkaUser(Async)");
        }

        // verify the required parameter 'createDbaasKafkaUserRequest' is set
        if (createDbaasKafkaUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasKafkaUserRequest' when calling createDbaasKafkaUser(Async)");
        }

        return createDbaasKafkaUserCall(serviceName, createDbaasKafkaUserRequest, _callback);

    }

    /**
     * Create a DBaaS Kafka user
     * 
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasKafkaUser(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasKafkaUserWithHttpInfo(serviceName, createDbaasKafkaUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS Kafka user
     * 
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasKafkaUserWithHttpInfo(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasKafkaUserValidateBeforeCall(serviceName, createDbaasKafkaUserRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS Kafka user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasKafkaUserAsync(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasKafkaUserValidateBeforeCall(serviceName, createDbaasKafkaUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasMysqlDatabase
     * @param serviceName  (required)
     * @param createDbaasMysqlDatabaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasMysqlDatabaseCall(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasMysqlDatabaseRequest;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{service-name}/database"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasMysqlDatabaseValidateBeforeCall(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling createDbaasMysqlDatabase(Async)");
        }

        // verify the required parameter 'createDbaasMysqlDatabaseRequest' is set
        if (createDbaasMysqlDatabaseRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasMysqlDatabaseRequest' when calling createDbaasMysqlDatabase(Async)");
        }

        return createDbaasMysqlDatabaseCall(serviceName, createDbaasMysqlDatabaseRequest, _callback);

    }

    /**
     * Create a DBaaS MySQL database
     * 
     * @param serviceName  (required)
     * @param createDbaasMysqlDatabaseRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasMysqlDatabase(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasMysqlDatabaseWithHttpInfo(serviceName, createDbaasMysqlDatabaseRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS MySQL database
     * 
     * @param serviceName  (required)
     * @param createDbaasMysqlDatabaseRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasMysqlDatabaseWithHttpInfo(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasMysqlDatabaseValidateBeforeCall(serviceName, createDbaasMysqlDatabaseRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS MySQL database (asynchronously)
     * 
     * @param serviceName  (required)
     * @param createDbaasMysqlDatabaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasMysqlDatabaseAsync(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasMysqlDatabaseValidateBeforeCall(serviceName, createDbaasMysqlDatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasMysqlUser
     * @param serviceName  (required)
     * @param createDbaasMysqlUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasMysqlUserCall(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasMysqlUserRequest;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{service-name}/user"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasMysqlUserValidateBeforeCall(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling createDbaasMysqlUser(Async)");
        }

        // verify the required parameter 'createDbaasMysqlUserRequest' is set
        if (createDbaasMysqlUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasMysqlUserRequest' when calling createDbaasMysqlUser(Async)");
        }

        return createDbaasMysqlUserCall(serviceName, createDbaasMysqlUserRequest, _callback);

    }

    /**
     * Create a DBaaS MySQL user
     * 
     * @param serviceName  (required)
     * @param createDbaasMysqlUserRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasMysqlUser(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasMysqlUserWithHttpInfo(serviceName, createDbaasMysqlUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS MySQL user
     * 
     * @param serviceName  (required)
     * @param createDbaasMysqlUserRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasMysqlUserWithHttpInfo(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasMysqlUserValidateBeforeCall(serviceName, createDbaasMysqlUserRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS MySQL user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param createDbaasMysqlUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasMysqlUserAsync(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasMysqlUserValidateBeforeCall(serviceName, createDbaasMysqlUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasOpensearchUser
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasOpensearchUserCall(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasKafkaUserRequest;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{service-name}/user"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasOpensearchUserValidateBeforeCall(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling createDbaasOpensearchUser(Async)");
        }

        // verify the required parameter 'createDbaasKafkaUserRequest' is set
        if (createDbaasKafkaUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasKafkaUserRequest' when calling createDbaasOpensearchUser(Async)");
        }

        return createDbaasOpensearchUserCall(serviceName, createDbaasKafkaUserRequest, _callback);

    }

    /**
     * Create a DBaaS OpenSearch user
     * 
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasOpensearchUser(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasOpensearchUserWithHttpInfo(serviceName, createDbaasKafkaUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS OpenSearch user
     * 
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasOpensearchUserWithHttpInfo(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasOpensearchUserValidateBeforeCall(serviceName, createDbaasKafkaUserRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS OpenSearch user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasOpensearchUserAsync(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasOpensearchUserValidateBeforeCall(serviceName, createDbaasKafkaUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasPgConnectionPool
     * @param serviceName  (required)
     * @param createDbaasPgConnectionPoolRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasPgConnectionPoolCall(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasPgConnectionPoolRequest;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service-name}/connection-pool"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasPgConnectionPoolValidateBeforeCall(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling createDbaasPgConnectionPool(Async)");
        }

        // verify the required parameter 'createDbaasPgConnectionPoolRequest' is set
        if (createDbaasPgConnectionPoolRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasPgConnectionPoolRequest' when calling createDbaasPgConnectionPool(Async)");
        }

        return createDbaasPgConnectionPoolCall(serviceName, createDbaasPgConnectionPoolRequest, _callback);

    }

    /**
     * Create a DBaaS PostgreSQL connection pool
     * 
     * @param serviceName  (required)
     * @param createDbaasPgConnectionPoolRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasPgConnectionPool(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasPgConnectionPoolWithHttpInfo(serviceName, createDbaasPgConnectionPoolRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS PostgreSQL connection pool
     * 
     * @param serviceName  (required)
     * @param createDbaasPgConnectionPoolRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasPgConnectionPoolWithHttpInfo(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasPgConnectionPoolValidateBeforeCall(serviceName, createDbaasPgConnectionPoolRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS PostgreSQL connection pool (asynchronously)
     * 
     * @param serviceName  (required)
     * @param createDbaasPgConnectionPoolRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasPgConnectionPoolAsync(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasPgConnectionPoolValidateBeforeCall(serviceName, createDbaasPgConnectionPoolRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasPgDatabase
     * @param serviceName  (required)
     * @param createDbaasPgDatabaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasPgDatabaseCall(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasPgDatabaseRequest;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service-name}/database"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasPgDatabaseValidateBeforeCall(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling createDbaasPgDatabase(Async)");
        }

        // verify the required parameter 'createDbaasPgDatabaseRequest' is set
        if (createDbaasPgDatabaseRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasPgDatabaseRequest' when calling createDbaasPgDatabase(Async)");
        }

        return createDbaasPgDatabaseCall(serviceName, createDbaasPgDatabaseRequest, _callback);

    }

    /**
     * Create a DBaaS Postgres database
     * 
     * @param serviceName  (required)
     * @param createDbaasPgDatabaseRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasPgDatabase(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasPgDatabaseWithHttpInfo(serviceName, createDbaasPgDatabaseRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS Postgres database
     * 
     * @param serviceName  (required)
     * @param createDbaasPgDatabaseRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasPgDatabaseWithHttpInfo(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasPgDatabaseValidateBeforeCall(serviceName, createDbaasPgDatabaseRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS Postgres database (asynchronously)
     * 
     * @param serviceName  (required)
     * @param createDbaasPgDatabaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasPgDatabaseAsync(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasPgDatabaseValidateBeforeCall(serviceName, createDbaasPgDatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasPgUpgradeCheck
     * @param service  (required)
     * @param createDbaasPgUpgradeCheckRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasPgUpgradeCheckCall(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasPgUpgradeCheckRequest;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service}/upgrade-check"
            .replace("{" + "service" + "}", localVarApiClient.escapeString(service.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasPgUpgradeCheckValidateBeforeCall(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling createDbaasPgUpgradeCheck(Async)");
        }

        // verify the required parameter 'createDbaasPgUpgradeCheckRequest' is set
        if (createDbaasPgUpgradeCheckRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasPgUpgradeCheckRequest' when calling createDbaasPgUpgradeCheck(Async)");
        }

        return createDbaasPgUpgradeCheckCall(service, createDbaasPgUpgradeCheckRequest, _callback);

    }

    /**
     * 
     * Check whether you can upgrade Postgres service to a newer version
     * @param service  (required)
     * @param createDbaasPgUpgradeCheckRequest  (required)
     * @return DbaasTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasTask createDbaasPgUpgradeCheck(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest) throws ApiException {
        ApiResponse<DbaasTask> localVarResp = createDbaasPgUpgradeCheckWithHttpInfo(service, createDbaasPgUpgradeCheckRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Check whether you can upgrade Postgres service to a newer version
     * @param service  (required)
     * @param createDbaasPgUpgradeCheckRequest  (required)
     * @return ApiResponse&lt;DbaasTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasTask> createDbaasPgUpgradeCheckWithHttpInfo(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasPgUpgradeCheckValidateBeforeCall(service, createDbaasPgUpgradeCheckRequest, null);
        Type localVarReturnType = new TypeToken<DbaasTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check whether you can upgrade Postgres service to a newer version
     * @param service  (required)
     * @param createDbaasPgUpgradeCheckRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasPgUpgradeCheckAsync(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest, final ApiCallback<DbaasTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasPgUpgradeCheckValidateBeforeCall(service, createDbaasPgUpgradeCheckRequest, _callback);
        Type localVarReturnType = new TypeToken<DbaasTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasPostgresUser
     * @param serviceName  (required)
     * @param createDbaasPostgresUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasPostgresUserCall(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasPostgresUserRequest;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service-name}/user"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasPostgresUserValidateBeforeCall(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling createDbaasPostgresUser(Async)");
        }

        // verify the required parameter 'createDbaasPostgresUserRequest' is set
        if (createDbaasPostgresUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasPostgresUserRequest' when calling createDbaasPostgresUser(Async)");
        }

        return createDbaasPostgresUserCall(serviceName, createDbaasPostgresUserRequest, _callback);

    }

    /**
     * Create a DBaaS Postgres user
     * 
     * @param serviceName  (required)
     * @param createDbaasPostgresUserRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasPostgresUser(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasPostgresUserWithHttpInfo(serviceName, createDbaasPostgresUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS Postgres user
     * 
     * @param serviceName  (required)
     * @param createDbaasPostgresUserRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasPostgresUserWithHttpInfo(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasPostgresUserValidateBeforeCall(serviceName, createDbaasPostgresUserRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS Postgres user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param createDbaasPostgresUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasPostgresUserAsync(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasPostgresUserValidateBeforeCall(serviceName, createDbaasPostgresUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasRedisUser
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasRedisUserCall(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasKafkaUserRequest;

        // create path and map variables
        String localVarPath = "/dbaas-redis/{service-name}/user"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasRedisUserValidateBeforeCall(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling createDbaasRedisUser(Async)");
        }

        // verify the required parameter 'createDbaasKafkaUserRequest' is set
        if (createDbaasKafkaUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasKafkaUserRequest' when calling createDbaasRedisUser(Async)");
        }

        return createDbaasRedisUserCall(serviceName, createDbaasKafkaUserRequest, _callback);

    }

    /**
     * Create a DBaaS Redis user
     * 
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasRedisUser(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasRedisUserWithHttpInfo(serviceName, createDbaasKafkaUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS Redis user
     * 
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasRedisUserWithHttpInfo(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasRedisUserValidateBeforeCall(serviceName, createDbaasKafkaUserRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS Redis user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param createDbaasKafkaUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasRedisUserAsync(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasRedisUserValidateBeforeCall(serviceName, createDbaasKafkaUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasServiceGrafana
     * @param name  (required)
     * @param createDbaasServiceGrafanaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServiceGrafanaCall(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasServiceGrafanaRequest;

        // create path and map variables
        String localVarPath = "/dbaas-grafana/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasServiceGrafanaValidateBeforeCall(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createDbaasServiceGrafana(Async)");
        }

        // verify the required parameter 'createDbaasServiceGrafanaRequest' is set
        if (createDbaasServiceGrafanaRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasServiceGrafanaRequest' when calling createDbaasServiceGrafana(Async)");
        }

        return createDbaasServiceGrafanaCall(name, createDbaasServiceGrafanaRequest, _callback);

    }

    /**
     * 
     * Create a DBaaS Grafana service
     * @param name  (required)
     * @param createDbaasServiceGrafanaRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasServiceGrafana(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasServiceGrafanaWithHttpInfo(name, createDbaasServiceGrafanaRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a DBaaS Grafana service
     * @param name  (required)
     * @param createDbaasServiceGrafanaRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasServiceGrafanaWithHttpInfo(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasServiceGrafanaValidateBeforeCall(name, createDbaasServiceGrafanaRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a DBaaS Grafana service
     * @param name  (required)
     * @param createDbaasServiceGrafanaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServiceGrafanaAsync(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasServiceGrafanaValidateBeforeCall(name, createDbaasServiceGrafanaRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasServiceKafka
     * @param name  (required)
     * @param createDbaasServiceKafkaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServiceKafkaCall(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasServiceKafkaRequest;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasServiceKafkaValidateBeforeCall(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createDbaasServiceKafka(Async)");
        }

        // verify the required parameter 'createDbaasServiceKafkaRequest' is set
        if (createDbaasServiceKafkaRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasServiceKafkaRequest' when calling createDbaasServiceKafka(Async)");
        }

        return createDbaasServiceKafkaCall(name, createDbaasServiceKafkaRequest, _callback);

    }

    /**
     * Create a DBaaS Kafka service
     * Create a DBaaS Kafka service
     * @param name  (required)
     * @param createDbaasServiceKafkaRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasServiceKafka(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasServiceKafkaWithHttpInfo(name, createDbaasServiceKafkaRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS Kafka service
     * Create a DBaaS Kafka service
     * @param name  (required)
     * @param createDbaasServiceKafkaRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasServiceKafkaWithHttpInfo(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasServiceKafkaValidateBeforeCall(name, createDbaasServiceKafkaRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS Kafka service (asynchronously)
     * Create a DBaaS Kafka service
     * @param name  (required)
     * @param createDbaasServiceKafkaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServiceKafkaAsync(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasServiceKafkaValidateBeforeCall(name, createDbaasServiceKafkaRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasServiceMysql
     * @param name  (required)
     * @param createDbaasServiceMysqlRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServiceMysqlCall(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasServiceMysqlRequest;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasServiceMysqlValidateBeforeCall(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createDbaasServiceMysql(Async)");
        }

        // verify the required parameter 'createDbaasServiceMysqlRequest' is set
        if (createDbaasServiceMysqlRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasServiceMysqlRequest' when calling createDbaasServiceMysql(Async)");
        }

        return createDbaasServiceMysqlCall(name, createDbaasServiceMysqlRequest, _callback);

    }

    /**
     * Create a DBaaS MySQL service
     * Create a DBaaS MySQL service
     * @param name  (required)
     * @param createDbaasServiceMysqlRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasServiceMysql(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasServiceMysqlWithHttpInfo(name, createDbaasServiceMysqlRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS MySQL service
     * Create a DBaaS MySQL service
     * @param name  (required)
     * @param createDbaasServiceMysqlRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasServiceMysqlWithHttpInfo(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasServiceMysqlValidateBeforeCall(name, createDbaasServiceMysqlRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS MySQL service (asynchronously)
     * Create a DBaaS MySQL service
     * @param name  (required)
     * @param createDbaasServiceMysqlRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServiceMysqlAsync(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasServiceMysqlValidateBeforeCall(name, createDbaasServiceMysqlRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasServiceOpensearch
     * @param name  (required)
     * @param createDbaasServiceOpensearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServiceOpensearchCall(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasServiceOpensearchRequest;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasServiceOpensearchValidateBeforeCall(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createDbaasServiceOpensearch(Async)");
        }

        // verify the required parameter 'createDbaasServiceOpensearchRequest' is set
        if (createDbaasServiceOpensearchRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasServiceOpensearchRequest' when calling createDbaasServiceOpensearch(Async)");
        }

        return createDbaasServiceOpensearchCall(name, createDbaasServiceOpensearchRequest, _callback);

    }

    /**
     * Create a DBaaS OpenSearch service
     * Create a DBaaS OpenSearch service
     * @param name  (required)
     * @param createDbaasServiceOpensearchRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasServiceOpensearch(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasServiceOpensearchWithHttpInfo(name, createDbaasServiceOpensearchRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS OpenSearch service
     * Create a DBaaS OpenSearch service
     * @param name  (required)
     * @param createDbaasServiceOpensearchRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasServiceOpensearchWithHttpInfo(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasServiceOpensearchValidateBeforeCall(name, createDbaasServiceOpensearchRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS OpenSearch service (asynchronously)
     * Create a DBaaS OpenSearch service
     * @param name  (required)
     * @param createDbaasServiceOpensearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServiceOpensearchAsync(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasServiceOpensearchValidateBeforeCall(name, createDbaasServiceOpensearchRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasServicePg
     * @param name  (required)
     * @param createDbaasServicePgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServicePgCall(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasServicePgRequest;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasServicePgValidateBeforeCall(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createDbaasServicePg(Async)");
        }

        // verify the required parameter 'createDbaasServicePgRequest' is set
        if (createDbaasServicePgRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasServicePgRequest' when calling createDbaasServicePg(Async)");
        }

        return createDbaasServicePgCall(name, createDbaasServicePgRequest, _callback);

    }

    /**
     * Create a DBaaS PostgreSQL service
     * 
     * @param name  (required)
     * @param createDbaasServicePgRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasServicePg(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasServicePgWithHttpInfo(name, createDbaasServicePgRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS PostgreSQL service
     * 
     * @param name  (required)
     * @param createDbaasServicePgRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasServicePgWithHttpInfo(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasServicePgValidateBeforeCall(name, createDbaasServicePgRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS PostgreSQL service (asynchronously)
     * 
     * @param name  (required)
     * @param createDbaasServicePgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServicePgAsync(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasServicePgValidateBeforeCall(name, createDbaasServicePgRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasServiceRedis
     * @param name  (required)
     * @param createDbaasServiceRedisRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServiceRedisCall(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasServiceRedisRequest;

        // create path and map variables
        String localVarPath = "/dbaas-redis/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasServiceRedisValidateBeforeCall(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createDbaasServiceRedis(Async)");
        }

        // verify the required parameter 'createDbaasServiceRedisRequest' is set
        if (createDbaasServiceRedisRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasServiceRedisRequest' when calling createDbaasServiceRedis(Async)");
        }

        return createDbaasServiceRedisCall(name, createDbaasServiceRedisRequest, _callback);

    }

    /**
     * Create a DBaaS Redis service
     * Create a DBaaS Redis service
     * @param name  (required)
     * @param createDbaasServiceRedisRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasServiceRedis(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasServiceRedisWithHttpInfo(name, createDbaasServiceRedisRequest);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS Redis service
     * Create a DBaaS Redis service
     * @param name  (required)
     * @param createDbaasServiceRedisRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasServiceRedisWithHttpInfo(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasServiceRedisValidateBeforeCall(name, createDbaasServiceRedisRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS Redis service (asynchronously)
     * Create a DBaaS Redis service
     * @param name  (required)
     * @param createDbaasServiceRedisRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasServiceRedisAsync(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasServiceRedisValidateBeforeCall(name, createDbaasServiceRedisRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDbaasTaskMigrationCheck
     * @param service  (required)
     * @param createDbaasTaskMigrationCheckRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasTaskMigrationCheckCall(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbaasTaskMigrationCheckRequest;

        // create path and map variables
        String localVarPath = "/dbaas-task-migration-check/{service}"
            .replace("{" + "service" + "}", localVarApiClient.escapeString(service.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbaasTaskMigrationCheckValidateBeforeCall(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling createDbaasTaskMigrationCheck(Async)");
        }

        // verify the required parameter 'createDbaasTaskMigrationCheckRequest' is set
        if (createDbaasTaskMigrationCheckRequest == null) {
            throw new ApiException("Missing the required parameter 'createDbaasTaskMigrationCheckRequest' when calling createDbaasTaskMigrationCheck(Async)");
        }

        return createDbaasTaskMigrationCheckCall(service, createDbaasTaskMigrationCheckRequest, _callback);

    }

    /**
     * 
     * Create a DBaaS task to check migration
     * @param service  (required)
     * @param createDbaasTaskMigrationCheckRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation createDbaasTaskMigrationCheck(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = createDbaasTaskMigrationCheckWithHttpInfo(service, createDbaasTaskMigrationCheckRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a DBaaS task to check migration
     * @param service  (required)
     * @param createDbaasTaskMigrationCheckRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createDbaasTaskMigrationCheckWithHttpInfo(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest) throws ApiException {
        okhttp3.Call localVarCall = createDbaasTaskMigrationCheckValidateBeforeCall(service, createDbaasTaskMigrationCheckRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a DBaaS task to check migration
     * @param service  (required)
     * @param createDbaasTaskMigrationCheckRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDbaasTaskMigrationCheckAsync(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDbaasTaskMigrationCheckValidateBeforeCall(service, createDbaasTaskMigrationCheckRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasIntegration
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasIntegrationCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-integration/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasIntegrationValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDbaasIntegration(Async)");
        }

        return deleteDbaasIntegrationCall(id, _callback);

    }

    /**
     * Delete a DBaaS Integration
     * Delete a DBaaS Integration
     * @param id  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasIntegration(UUID id) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasIntegrationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a DBaaS Integration
     * Delete a DBaaS Integration
     * @param id  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasIntegrationWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasIntegrationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a DBaaS Integration (asynchronously)
     * Delete a DBaaS Integration
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasIntegrationAsync(UUID id, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasIntegrationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasKafkaSchemaRegistryAclConfig
     * @param name  (required)
     * @param aclId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasKafkaSchemaRegistryAclConfigCall(String name, String aclId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{name}/schema-registry/acl-config/{acl-id}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "acl-id" + "}", localVarApiClient.escapeString(aclId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasKafkaSchemaRegistryAclConfigValidateBeforeCall(String name, String aclId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDbaasKafkaSchemaRegistryAclConfig(Async)");
        }

        // verify the required parameter 'aclId' is set
        if (aclId == null) {
            throw new ApiException("Missing the required parameter 'aclId' when calling deleteDbaasKafkaSchemaRegistryAclConfig(Async)");
        }

        return deleteDbaasKafkaSchemaRegistryAclConfigCall(name, aclId, _callback);

    }

    /**
     * Delete a Kafka ACL entry
     * 
     * @param name  (required)
     * @param aclId  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasKafkaSchemaRegistryAclConfig(String name, String aclId) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(name, aclId);
        return localVarResp.getData();
    }

    /**
     * Delete a Kafka ACL entry
     * 
     * @param name  (required)
     * @param aclId  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(String name, String aclId) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasKafkaSchemaRegistryAclConfigValidateBeforeCall(name, aclId, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Kafka ACL entry (asynchronously)
     * 
     * @param name  (required)
     * @param aclId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasKafkaSchemaRegistryAclConfigAsync(String name, String aclId, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasKafkaSchemaRegistryAclConfigValidateBeforeCall(name, aclId, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasKafkaTopicAclConfig
     * @param name  (required)
     * @param aclId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasKafkaTopicAclConfigCall(String name, String aclId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{name}/topic/acl-config/{acl-id}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "acl-id" + "}", localVarApiClient.escapeString(aclId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasKafkaTopicAclConfigValidateBeforeCall(String name, String aclId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDbaasKafkaTopicAclConfig(Async)");
        }

        // verify the required parameter 'aclId' is set
        if (aclId == null) {
            throw new ApiException("Missing the required parameter 'aclId' when calling deleteDbaasKafkaTopicAclConfig(Async)");
        }

        return deleteDbaasKafkaTopicAclConfigCall(name, aclId, _callback);

    }

    /**
     * Delete a Kafka ACL entry
     * 
     * @param name  (required)
     * @param aclId  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasKafkaTopicAclConfig(String name, String aclId) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasKafkaTopicAclConfigWithHttpInfo(name, aclId);
        return localVarResp.getData();
    }

    /**
     * Delete a Kafka ACL entry
     * 
     * @param name  (required)
     * @param aclId  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasKafkaTopicAclConfigWithHttpInfo(String name, String aclId) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasKafkaTopicAclConfigValidateBeforeCall(name, aclId, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Kafka ACL entry (asynchronously)
     * 
     * @param name  (required)
     * @param aclId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasKafkaTopicAclConfigAsync(String name, String aclId, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasKafkaTopicAclConfigValidateBeforeCall(name, aclId, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasKafkaUser
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasKafkaUserCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{service-name}/user/{username}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasKafkaUserValidateBeforeCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling deleteDbaasKafkaUser(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteDbaasKafkaUser(Async)");
        }

        return deleteDbaasKafkaUserCall(serviceName, username, _callback);

    }

    /**
     * Delete a DBaaS kafka user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasKafkaUser(String serviceName, String username) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasKafkaUserWithHttpInfo(serviceName, username);
        return localVarResp.getData();
    }

    /**
     * Delete a DBaaS kafka user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasKafkaUserWithHttpInfo(String serviceName, String username) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasKafkaUserValidateBeforeCall(serviceName, username, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a DBaaS kafka user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasKafkaUserAsync(String serviceName, String username, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasKafkaUserValidateBeforeCall(serviceName, username, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasMysqlDatabase
     * @param serviceName  (required)
     * @param databaseName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasMysqlDatabaseCall(String serviceName, String databaseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{service-name}/database/{database-name}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "database-name" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasMysqlDatabaseValidateBeforeCall(String serviceName, String databaseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling deleteDbaasMysqlDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling deleteDbaasMysqlDatabase(Async)");
        }

        return deleteDbaasMysqlDatabaseCall(serviceName, databaseName, _callback);

    }

    /**
     * Delete a DBaaS MySQL database
     * 
     * @param serviceName  (required)
     * @param databaseName  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasMysqlDatabase(String serviceName, String databaseName) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasMysqlDatabaseWithHttpInfo(serviceName, databaseName);
        return localVarResp.getData();
    }

    /**
     * Delete a DBaaS MySQL database
     * 
     * @param serviceName  (required)
     * @param databaseName  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasMysqlDatabaseWithHttpInfo(String serviceName, String databaseName) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasMysqlDatabaseValidateBeforeCall(serviceName, databaseName, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a DBaaS MySQL database (asynchronously)
     * 
     * @param serviceName  (required)
     * @param databaseName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasMysqlDatabaseAsync(String serviceName, String databaseName, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasMysqlDatabaseValidateBeforeCall(serviceName, databaseName, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasMysqlUser
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasMysqlUserCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{service-name}/user/{username}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasMysqlUserValidateBeforeCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling deleteDbaasMysqlUser(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteDbaasMysqlUser(Async)");
        }

        return deleteDbaasMysqlUserCall(serviceName, username, _callback);

    }

    /**
     * Delete a DBaaS MySQL user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasMysqlUser(String serviceName, String username) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasMysqlUserWithHttpInfo(serviceName, username);
        return localVarResp.getData();
    }

    /**
     * Delete a DBaaS MySQL user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasMysqlUserWithHttpInfo(String serviceName, String username) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasMysqlUserValidateBeforeCall(serviceName, username, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a DBaaS MySQL user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasMysqlUserAsync(String serviceName, String username, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasMysqlUserValidateBeforeCall(serviceName, username, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasOpensearchUser
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasOpensearchUserCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{service-name}/user/{username}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasOpensearchUserValidateBeforeCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling deleteDbaasOpensearchUser(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteDbaasOpensearchUser(Async)");
        }

        return deleteDbaasOpensearchUserCall(serviceName, username, _callback);

    }

    /**
     * Delete a DBaaS OpenSearch user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasOpensearchUser(String serviceName, String username) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasOpensearchUserWithHttpInfo(serviceName, username);
        return localVarResp.getData();
    }

    /**
     * Delete a DBaaS OpenSearch user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasOpensearchUserWithHttpInfo(String serviceName, String username) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasOpensearchUserValidateBeforeCall(serviceName, username, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a DBaaS OpenSearch user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasOpensearchUserAsync(String serviceName, String username, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasOpensearchUserValidateBeforeCall(serviceName, username, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasPgConnectionPool
     * @param serviceName  (required)
     * @param connectionPoolName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasPgConnectionPoolCall(String serviceName, String connectionPoolName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service-name}/connection-pool/{connection-pool-name}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "connection-pool-name" + "}", localVarApiClient.escapeString(connectionPoolName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasPgConnectionPoolValidateBeforeCall(String serviceName, String connectionPoolName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling deleteDbaasPgConnectionPool(Async)");
        }

        // verify the required parameter 'connectionPoolName' is set
        if (connectionPoolName == null) {
            throw new ApiException("Missing the required parameter 'connectionPoolName' when calling deleteDbaasPgConnectionPool(Async)");
        }

        return deleteDbaasPgConnectionPoolCall(serviceName, connectionPoolName, _callback);

    }

    /**
     * Delete a DBaaS PostgreSQL connection pool
     * 
     * @param serviceName  (required)
     * @param connectionPoolName  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasPgConnectionPool(String serviceName, String connectionPoolName) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasPgConnectionPoolWithHttpInfo(serviceName, connectionPoolName);
        return localVarResp.getData();
    }

    /**
     * Delete a DBaaS PostgreSQL connection pool
     * 
     * @param serviceName  (required)
     * @param connectionPoolName  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasPgConnectionPoolWithHttpInfo(String serviceName, String connectionPoolName) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasPgConnectionPoolValidateBeforeCall(serviceName, connectionPoolName, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a DBaaS PostgreSQL connection pool (asynchronously)
     * 
     * @param serviceName  (required)
     * @param connectionPoolName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasPgConnectionPoolAsync(String serviceName, String connectionPoolName, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasPgConnectionPoolValidateBeforeCall(serviceName, connectionPoolName, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasPgDatabase
     * @param serviceName  (required)
     * @param databaseName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasPgDatabaseCall(String serviceName, String databaseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service-name}/database/{database-name}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "database-name" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasPgDatabaseValidateBeforeCall(String serviceName, String databaseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling deleteDbaasPgDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling deleteDbaasPgDatabase(Async)");
        }

        return deleteDbaasPgDatabaseCall(serviceName, databaseName, _callback);

    }

    /**
     * Delete a DBaaS Postgres database
     * 
     * @param serviceName  (required)
     * @param databaseName  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasPgDatabase(String serviceName, String databaseName) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasPgDatabaseWithHttpInfo(serviceName, databaseName);
        return localVarResp.getData();
    }

    /**
     * Delete a DBaaS Postgres database
     * 
     * @param serviceName  (required)
     * @param databaseName  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasPgDatabaseWithHttpInfo(String serviceName, String databaseName) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasPgDatabaseValidateBeforeCall(serviceName, databaseName, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a DBaaS Postgres database (asynchronously)
     * 
     * @param serviceName  (required)
     * @param databaseName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasPgDatabaseAsync(String serviceName, String databaseName, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasPgDatabaseValidateBeforeCall(serviceName, databaseName, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasPostgresUser
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasPostgresUserCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service-name}/user/{username}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasPostgresUserValidateBeforeCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling deleteDbaasPostgresUser(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteDbaasPostgresUser(Async)");
        }

        return deleteDbaasPostgresUserCall(serviceName, username, _callback);

    }

    /**
     * Delete a DBaaS Postgres user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasPostgresUser(String serviceName, String username) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasPostgresUserWithHttpInfo(serviceName, username);
        return localVarResp.getData();
    }

    /**
     * Delete a DBaaS Postgres user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasPostgresUserWithHttpInfo(String serviceName, String username) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasPostgresUserValidateBeforeCall(serviceName, username, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a DBaaS Postgres user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasPostgresUserAsync(String serviceName, String username, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasPostgresUserValidateBeforeCall(serviceName, username, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasRedisUser
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasRedisUserCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-redis/{service-name}/user/{username}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasRedisUserValidateBeforeCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling deleteDbaasRedisUser(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteDbaasRedisUser(Async)");
        }

        return deleteDbaasRedisUserCall(serviceName, username, _callback);

    }

    /**
     * Delete a DBaaS Redis user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasRedisUser(String serviceName, String username) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasRedisUserWithHttpInfo(serviceName, username);
        return localVarResp.getData();
    }

    /**
     * Delete a DBaaS Redis user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasRedisUserWithHttpInfo(String serviceName, String username) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasRedisUserValidateBeforeCall(serviceName, username, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a DBaaS Redis user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasRedisUserAsync(String serviceName, String username, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasRedisUserValidateBeforeCall(serviceName, username, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasService
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-service/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasServiceValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDbaasService(Async)");
        }

        return deleteDbaasServiceCall(name, _callback);

    }

    /**
     * Delete a DBaaS service
     * Delete a DBaaS service
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasService(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasServiceWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Delete a DBaaS service
     * Delete a DBaaS service
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasServiceWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasServiceValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a DBaaS service (asynchronously)
     * Delete a DBaaS service
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasServiceValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasServiceGrafana
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceGrafanaCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-grafana/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasServiceGrafanaValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDbaasServiceGrafana(Async)");
        }

        return deleteDbaasServiceGrafanaCall(name, _callback);

    }

    /**
     * Delete a Grafana service
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasServiceGrafana(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasServiceGrafanaWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Delete a Grafana service
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasServiceGrafanaWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasServiceGrafanaValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Grafana service (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceGrafanaAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasServiceGrafanaValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasServiceKafka
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceKafkaCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasServiceKafkaValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDbaasServiceKafka(Async)");
        }

        return deleteDbaasServiceKafkaCall(name, _callback);

    }

    /**
     * Delete a Kafka service
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasServiceKafka(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasServiceKafkaWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Delete a Kafka service
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasServiceKafkaWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasServiceKafkaValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Kafka service (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceKafkaAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasServiceKafkaValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasServiceMysql
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceMysqlCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasServiceMysqlValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDbaasServiceMysql(Async)");
        }

        return deleteDbaasServiceMysqlCall(name, _callback);

    }

    /**
     * Delete a MySQL service
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasServiceMysql(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasServiceMysqlWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Delete a MySQL service
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasServiceMysqlWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasServiceMysqlValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a MySQL service (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceMysqlAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasServiceMysqlValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasServiceOpensearch
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceOpensearchCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasServiceOpensearchValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDbaasServiceOpensearch(Async)");
        }

        return deleteDbaasServiceOpensearchCall(name, _callback);

    }

    /**
     * Delete a OpenSearch service
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasServiceOpensearch(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasServiceOpensearchWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Delete a OpenSearch service
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasServiceOpensearchWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasServiceOpensearchValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a OpenSearch service (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceOpensearchAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasServiceOpensearchValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasServicePg
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServicePgCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasServicePgValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDbaasServicePg(Async)");
        }

        return deleteDbaasServicePgCall(name, _callback);

    }

    /**
     * Delete a Postgres service
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasServicePg(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasServicePgWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Delete a Postgres service
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasServicePgWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasServicePgValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Postgres service (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServicePgAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasServicePgValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDbaasServiceRedis
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceRedisCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-redis/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDbaasServiceRedisValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDbaasServiceRedis(Async)");
        }

        return deleteDbaasServiceRedisCall(name, _callback);

    }

    /**
     * Delete a Redis service
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation deleteDbaasServiceRedis(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = deleteDbaasServiceRedisWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Delete a Redis service
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> deleteDbaasServiceRedisWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteDbaasServiceRedisValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Redis service (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDbaasServiceRedisAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDbaasServiceRedisValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasCaCertificate
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasCaCertificateCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-ca-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasCaCertificateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDbaasCaCertificateCall(_callback);

    }

    /**
     * Get DBaaS CA Certificate
     * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
     * @return GetDbaasCaCertificate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDbaasCaCertificate200Response getDbaasCaCertificate() throws ApiException {
        ApiResponse<GetDbaasCaCertificate200Response> localVarResp = getDbaasCaCertificateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get DBaaS CA Certificate
     * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
     * @return ApiResponse&lt;GetDbaasCaCertificate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDbaasCaCertificate200Response> getDbaasCaCertificateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDbaasCaCertificateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetDbaasCaCertificate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS CA Certificate (asynchronously)
     * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasCaCertificateAsync(final ApiCallback<GetDbaasCaCertificate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasCaCertificateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetDbaasCaCertificate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasIntegration
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasIntegrationCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-integration/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasIntegrationValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDbaasIntegration(Async)");
        }

        return getDbaasIntegrationCall(id, _callback);

    }

    /**
     * Get a DBaaS Integration
     * Get a DBaaS Integration
     * @param id  (required)
     * @return DbaasIntegration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasIntegration getDbaasIntegration(UUID id) throws ApiException {
        ApiResponse<DbaasIntegration> localVarResp = getDbaasIntegrationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a DBaaS Integration
     * Get a DBaaS Integration
     * @param id  (required)
     * @return ApiResponse&lt;DbaasIntegration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasIntegration> getDbaasIntegrationWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getDbaasIntegrationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DbaasIntegration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DBaaS Integration (asynchronously)
     * Get a DBaaS Integration
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasIntegrationAsync(UUID id, final ApiCallback<DbaasIntegration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasIntegrationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DbaasIntegration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasKafkaAclConfig
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasKafkaAclConfigCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{name}/acl-config"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasKafkaAclConfigValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDbaasKafkaAclConfig(Async)");
        }

        return getDbaasKafkaAclConfigCall(name, _callback);

    }

    /**
     * Get DBaaS kafka ACL configuration
     * 
     * @param name  (required)
     * @return DbaasKafkaAcls
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasKafkaAcls getDbaasKafkaAclConfig(String name) throws ApiException {
        ApiResponse<DbaasKafkaAcls> localVarResp = getDbaasKafkaAclConfigWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get DBaaS kafka ACL configuration
     * 
     * @param name  (required)
     * @return ApiResponse&lt;DbaasKafkaAcls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasKafkaAcls> getDbaasKafkaAclConfigWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getDbaasKafkaAclConfigValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<DbaasKafkaAcls>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS kafka ACL configuration (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasKafkaAclConfigAsync(String name, final ApiCallback<DbaasKafkaAcls> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasKafkaAclConfigValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<DbaasKafkaAcls>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasMigrationStatus
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasMigrationStatusCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-migration-status/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasMigrationStatusValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDbaasMigrationStatus(Async)");
        }

        return getDbaasMigrationStatusCall(name, _callback);

    }

    /**
     * Get a DBaaS migration status
     * Get a DBaaS migration status
     * @param name  (required)
     * @return DbaasMigrationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasMigrationStatus getDbaasMigrationStatus(String name) throws ApiException {
        ApiResponse<DbaasMigrationStatus> localVarResp = getDbaasMigrationStatusWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get a DBaaS migration status
     * Get a DBaaS migration status
     * @param name  (required)
     * @return ApiResponse&lt;DbaasMigrationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasMigrationStatus> getDbaasMigrationStatusWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getDbaasMigrationStatusValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<DbaasMigrationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DBaaS migration status (asynchronously)
     * Get a DBaaS migration status
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasMigrationStatusAsync(String name, final ApiCallback<DbaasMigrationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasMigrationStatusValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<DbaasMigrationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasOpensearchAclConfig
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasOpensearchAclConfigCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{name}/acl-config"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasOpensearchAclConfigValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDbaasOpensearchAclConfig(Async)");
        }

        return getDbaasOpensearchAclConfigCall(name, _callback);

    }

    /**
     * Get DBaaS OpenSearch ACL configuration
     * 
     * @param name  (required)
     * @return DbaasOpensearchAclConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasOpensearchAclConfig getDbaasOpensearchAclConfig(String name) throws ApiException {
        ApiResponse<DbaasOpensearchAclConfig> localVarResp = getDbaasOpensearchAclConfigWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get DBaaS OpenSearch ACL configuration
     * 
     * @param name  (required)
     * @return ApiResponse&lt;DbaasOpensearchAclConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasOpensearchAclConfig> getDbaasOpensearchAclConfigWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getDbaasOpensearchAclConfigValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<DbaasOpensearchAclConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS OpenSearch ACL configuration (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasOpensearchAclConfigAsync(String name, final ApiCallback<DbaasOpensearchAclConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasOpensearchAclConfigValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<DbaasOpensearchAclConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasServiceGrafana
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceGrafanaCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-grafana/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasServiceGrafanaValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDbaasServiceGrafana(Async)");
        }

        return getDbaasServiceGrafanaCall(name, _callback);

    }

    /**
     * Get a DBaaS Grafana service
     * 
     * @param name  (required)
     * @return DbaasServiceGrafana
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasServiceGrafana getDbaasServiceGrafana(String name) throws ApiException {
        ApiResponse<DbaasServiceGrafana> localVarResp = getDbaasServiceGrafanaWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get a DBaaS Grafana service
     * 
     * @param name  (required)
     * @return ApiResponse&lt;DbaasServiceGrafana&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasServiceGrafana> getDbaasServiceGrafanaWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getDbaasServiceGrafanaValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<DbaasServiceGrafana>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DBaaS Grafana service (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceGrafanaAsync(String name, final ApiCallback<DbaasServiceGrafana> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasServiceGrafanaValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<DbaasServiceGrafana>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasServiceKafka
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceKafkaCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasServiceKafkaValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDbaasServiceKafka(Async)");
        }

        return getDbaasServiceKafkaCall(name, _callback);

    }

    /**
     * Get a DBaaS Kafka service
     * 
     * @param name  (required)
     * @return DbaasServiceKafka
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasServiceKafka getDbaasServiceKafka(String name) throws ApiException {
        ApiResponse<DbaasServiceKafka> localVarResp = getDbaasServiceKafkaWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get a DBaaS Kafka service
     * 
     * @param name  (required)
     * @return ApiResponse&lt;DbaasServiceKafka&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasServiceKafka> getDbaasServiceKafkaWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getDbaasServiceKafkaValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<DbaasServiceKafka>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DBaaS Kafka service (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceKafkaAsync(String name, final ApiCallback<DbaasServiceKafka> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasServiceKafkaValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<DbaasServiceKafka>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasServiceLogs
     * @param serviceName  (required)
     * @param getDbaasServiceLogsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceLogsCall(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDbaasServiceLogsRequest;

        // create path and map variables
        String localVarPath = "/dbaas-service-logs/{service-name}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasServiceLogsValidateBeforeCall(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling getDbaasServiceLogs(Async)");
        }

        // verify the required parameter 'getDbaasServiceLogsRequest' is set
        if (getDbaasServiceLogsRequest == null) {
            throw new ApiException("Missing the required parameter 'getDbaasServiceLogsRequest' when calling getDbaasServiceLogs(Async)");
        }

        return getDbaasServiceLogsCall(serviceName, getDbaasServiceLogsRequest, _callback);

    }

    /**
     * Get logs of DBaaS service
     * Get logs of DBaaS service
     * @param serviceName  (required)
     * @param getDbaasServiceLogsRequest  (required)
     * @return DbaasServiceLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasServiceLogs getDbaasServiceLogs(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest) throws ApiException {
        ApiResponse<DbaasServiceLogs> localVarResp = getDbaasServiceLogsWithHttpInfo(serviceName, getDbaasServiceLogsRequest);
        return localVarResp.getData();
    }

    /**
     * Get logs of DBaaS service
     * Get logs of DBaaS service
     * @param serviceName  (required)
     * @param getDbaasServiceLogsRequest  (required)
     * @return ApiResponse&lt;DbaasServiceLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasServiceLogs> getDbaasServiceLogsWithHttpInfo(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest) throws ApiException {
        okhttp3.Call localVarCall = getDbaasServiceLogsValidateBeforeCall(serviceName, getDbaasServiceLogsRequest, null);
        Type localVarReturnType = new TypeToken<DbaasServiceLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get logs of DBaaS service (asynchronously)
     * Get logs of DBaaS service
     * @param serviceName  (required)
     * @param getDbaasServiceLogsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceLogsAsync(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest, final ApiCallback<DbaasServiceLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasServiceLogsValidateBeforeCall(serviceName, getDbaasServiceLogsRequest, _callback);
        Type localVarReturnType = new TypeToken<DbaasServiceLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasServiceMetrics
     * @param serviceName  (required)
     * @param getDbaasServiceMetricsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceMetricsCall(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDbaasServiceMetricsRequest;

        // create path and map variables
        String localVarPath = "/dbaas-service-metrics/{service-name}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasServiceMetricsValidateBeforeCall(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling getDbaasServiceMetrics(Async)");
        }

        // verify the required parameter 'getDbaasServiceMetricsRequest' is set
        if (getDbaasServiceMetricsRequest == null) {
            throw new ApiException("Missing the required parameter 'getDbaasServiceMetricsRequest' when calling getDbaasServiceMetrics(Async)");
        }

        return getDbaasServiceMetricsCall(serviceName, getDbaasServiceMetricsRequest, _callback);

    }

    /**
     * Get metrics of DBaaS service
     * Get metrics of DBaaS service
     * @param serviceName  (required)
     * @param getDbaasServiceMetricsRequest  (required)
     * @return GetDbaasServiceMetrics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDbaasServiceMetrics200Response getDbaasServiceMetrics(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest) throws ApiException {
        ApiResponse<GetDbaasServiceMetrics200Response> localVarResp = getDbaasServiceMetricsWithHttpInfo(serviceName, getDbaasServiceMetricsRequest);
        return localVarResp.getData();
    }

    /**
     * Get metrics of DBaaS service
     * Get metrics of DBaaS service
     * @param serviceName  (required)
     * @param getDbaasServiceMetricsRequest  (required)
     * @return ApiResponse&lt;GetDbaasServiceMetrics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDbaasServiceMetrics200Response> getDbaasServiceMetricsWithHttpInfo(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest) throws ApiException {
        okhttp3.Call localVarCall = getDbaasServiceMetricsValidateBeforeCall(serviceName, getDbaasServiceMetricsRequest, null);
        Type localVarReturnType = new TypeToken<GetDbaasServiceMetrics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metrics of DBaaS service (asynchronously)
     * Get metrics of DBaaS service
     * @param serviceName  (required)
     * @param getDbaasServiceMetricsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceMetricsAsync(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest, final ApiCallback<GetDbaasServiceMetrics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasServiceMetricsValidateBeforeCall(serviceName, getDbaasServiceMetricsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDbaasServiceMetrics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasServiceMysql
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceMysqlCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasServiceMysqlValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDbaasServiceMysql(Async)");
        }

        return getDbaasServiceMysqlCall(name, _callback);

    }

    /**
     * Get a DBaaS MySQL service
     * Get a DBaaS MySQL service
     * @param name  (required)
     * @return DbaasServiceMysql
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasServiceMysql getDbaasServiceMysql(String name) throws ApiException {
        ApiResponse<DbaasServiceMysql> localVarResp = getDbaasServiceMysqlWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get a DBaaS MySQL service
     * Get a DBaaS MySQL service
     * @param name  (required)
     * @return ApiResponse&lt;DbaasServiceMysql&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasServiceMysql> getDbaasServiceMysqlWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getDbaasServiceMysqlValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<DbaasServiceMysql>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DBaaS MySQL service (asynchronously)
     * Get a DBaaS MySQL service
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceMysqlAsync(String name, final ApiCallback<DbaasServiceMysql> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasServiceMysqlValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<DbaasServiceMysql>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasServiceOpensearch
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceOpensearchCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasServiceOpensearchValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDbaasServiceOpensearch(Async)");
        }

        return getDbaasServiceOpensearchCall(name, _callback);

    }

    /**
     * Get a DBaaS OpenSearch service
     * Get a DBaaS OpenSearch service
     * @param name  (required)
     * @return DbaasServiceOpensearch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasServiceOpensearch getDbaasServiceOpensearch(String name) throws ApiException {
        ApiResponse<DbaasServiceOpensearch> localVarResp = getDbaasServiceOpensearchWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get a DBaaS OpenSearch service
     * Get a DBaaS OpenSearch service
     * @param name  (required)
     * @return ApiResponse&lt;DbaasServiceOpensearch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasServiceOpensearch> getDbaasServiceOpensearchWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getDbaasServiceOpensearchValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<DbaasServiceOpensearch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DBaaS OpenSearch service (asynchronously)
     * Get a DBaaS OpenSearch service
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceOpensearchAsync(String name, final ApiCallback<DbaasServiceOpensearch> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasServiceOpensearchValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<DbaasServiceOpensearch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasServicePg
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServicePgCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasServicePgValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDbaasServicePg(Async)");
        }

        return getDbaasServicePgCall(name, _callback);

    }

    /**
     * Get a DBaaS PostgreSQL service
     * Get a DBaaS PostgreSQL service
     * @param name  (required)
     * @return DbaasServicePg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasServicePg getDbaasServicePg(String name) throws ApiException {
        ApiResponse<DbaasServicePg> localVarResp = getDbaasServicePgWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get a DBaaS PostgreSQL service
     * Get a DBaaS PostgreSQL service
     * @param name  (required)
     * @return ApiResponse&lt;DbaasServicePg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasServicePg> getDbaasServicePgWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getDbaasServicePgValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<DbaasServicePg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DBaaS PostgreSQL service (asynchronously)
     * Get a DBaaS PostgreSQL service
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServicePgAsync(String name, final ApiCallback<DbaasServicePg> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasServicePgValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<DbaasServicePg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasServiceRedis
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceRedisCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-redis/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasServiceRedisValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDbaasServiceRedis(Async)");
        }

        return getDbaasServiceRedisCall(name, _callback);

    }

    /**
     * Get a DBaaS Redis service
     * Get a DBaaS Redis service
     * @param name  (required)
     * @return DbaasServiceRedis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasServiceRedis getDbaasServiceRedis(String name) throws ApiException {
        ApiResponse<DbaasServiceRedis> localVarResp = getDbaasServiceRedisWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get a DBaaS Redis service
     * Get a DBaaS Redis service
     * @param name  (required)
     * @return ApiResponse&lt;DbaasServiceRedis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasServiceRedis> getDbaasServiceRedisWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getDbaasServiceRedisValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<DbaasServiceRedis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DBaaS Redis service (asynchronously)
     * Get a DBaaS Redis service
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceRedisAsync(String name, final ApiCallback<DbaasServiceRedis> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasServiceRedisValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<DbaasServiceRedis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasServiceType
     * @param serviceTypeName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceTypeCall(String serviceTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-service-type/{service-type-name}"
            .replace("{" + "service-type-name" + "}", localVarApiClient.escapeString(serviceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasServiceTypeValidateBeforeCall(String serviceTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceTypeName' is set
        if (serviceTypeName == null) {
            throw new ApiException("Missing the required parameter 'serviceTypeName' when calling getDbaasServiceType(Async)");
        }

        return getDbaasServiceTypeCall(serviceTypeName, _callback);

    }

    /**
     * Get a DBaaS service type
     * Get a DBaaS service type
     * @param serviceTypeName  (required)
     * @return DbaasServiceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasServiceType getDbaasServiceType(String serviceTypeName) throws ApiException {
        ApiResponse<DbaasServiceType> localVarResp = getDbaasServiceTypeWithHttpInfo(serviceTypeName);
        return localVarResp.getData();
    }

    /**
     * Get a DBaaS service type
     * Get a DBaaS service type
     * @param serviceTypeName  (required)
     * @return ApiResponse&lt;DbaasServiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasServiceType> getDbaasServiceTypeWithHttpInfo(String serviceTypeName) throws ApiException {
        okhttp3.Call localVarCall = getDbaasServiceTypeValidateBeforeCall(serviceTypeName, null);
        Type localVarReturnType = new TypeToken<DbaasServiceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DBaaS service type (asynchronously)
     * Get a DBaaS service type
     * @param serviceTypeName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasServiceTypeAsync(String serviceTypeName, final ApiCallback<DbaasServiceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasServiceTypeValidateBeforeCall(serviceTypeName, _callback);
        Type localVarReturnType = new TypeToken<DbaasServiceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasSettingsGrafana
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsGrafanaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-settings-grafana";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasSettingsGrafanaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDbaasSettingsGrafanaCall(_callback);

    }

    /**
     * Get DBaaS Grafana settings
     * Get DBaaS Grafana settings
     * @return GetDbaasSettingsGrafana200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDbaasSettingsGrafana200Response getDbaasSettingsGrafana() throws ApiException {
        ApiResponse<GetDbaasSettingsGrafana200Response> localVarResp = getDbaasSettingsGrafanaWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get DBaaS Grafana settings
     * Get DBaaS Grafana settings
     * @return ApiResponse&lt;GetDbaasSettingsGrafana200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDbaasSettingsGrafana200Response> getDbaasSettingsGrafanaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDbaasSettingsGrafanaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsGrafana200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS Grafana settings (asynchronously)
     * Get DBaaS Grafana settings
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsGrafanaAsync(final ApiCallback<GetDbaasSettingsGrafana200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasSettingsGrafanaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsGrafana200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasSettingsKafka
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsKafkaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-settings-kafka";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasSettingsKafkaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDbaasSettingsKafkaCall(_callback);

    }

    /**
     * Get DBaaS Kafka settings
     * Get DBaaS Kafka settings
     * @return GetDbaasSettingsKafka200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDbaasSettingsKafka200Response getDbaasSettingsKafka() throws ApiException {
        ApiResponse<GetDbaasSettingsKafka200Response> localVarResp = getDbaasSettingsKafkaWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get DBaaS Kafka settings
     * Get DBaaS Kafka settings
     * @return ApiResponse&lt;GetDbaasSettingsKafka200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDbaasSettingsKafka200Response> getDbaasSettingsKafkaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDbaasSettingsKafkaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsKafka200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS Kafka settings (asynchronously)
     * Get DBaaS Kafka settings
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsKafkaAsync(final ApiCallback<GetDbaasSettingsKafka200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasSettingsKafkaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsKafka200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasSettingsMysql
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsMysqlCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-settings-mysql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasSettingsMysqlValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDbaasSettingsMysqlCall(_callback);

    }

    /**
     * Get DBaaS MySQL settings
     * Get DBaaS MySQL settings
     * @return GetDbaasSettingsMysql200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDbaasSettingsMysql200Response getDbaasSettingsMysql() throws ApiException {
        ApiResponse<GetDbaasSettingsMysql200Response> localVarResp = getDbaasSettingsMysqlWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get DBaaS MySQL settings
     * Get DBaaS MySQL settings
     * @return ApiResponse&lt;GetDbaasSettingsMysql200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDbaasSettingsMysql200Response> getDbaasSettingsMysqlWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDbaasSettingsMysqlValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsMysql200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS MySQL settings (asynchronously)
     * Get DBaaS MySQL settings
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsMysqlAsync(final ApiCallback<GetDbaasSettingsMysql200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasSettingsMysqlValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsMysql200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasSettingsOpensearch
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsOpensearchCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-settings-opensearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasSettingsOpensearchValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDbaasSettingsOpensearchCall(_callback);

    }

    /**
     * Get DBaaS OpenSearch settings
     * Get DBaaS OpenSearch settings
     * @return GetDbaasSettingsOpensearch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDbaasSettingsOpensearch200Response getDbaasSettingsOpensearch() throws ApiException {
        ApiResponse<GetDbaasSettingsOpensearch200Response> localVarResp = getDbaasSettingsOpensearchWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get DBaaS OpenSearch settings
     * Get DBaaS OpenSearch settings
     * @return ApiResponse&lt;GetDbaasSettingsOpensearch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDbaasSettingsOpensearch200Response> getDbaasSettingsOpensearchWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDbaasSettingsOpensearchValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsOpensearch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS OpenSearch settings (asynchronously)
     * Get DBaaS OpenSearch settings
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsOpensearchAsync(final ApiCallback<GetDbaasSettingsOpensearch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasSettingsOpensearchValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsOpensearch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasSettingsPg
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsPgCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-settings-pg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasSettingsPgValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDbaasSettingsPgCall(_callback);

    }

    /**
     * Get DBaaS PostgreSQL settings
     * Get DBaaS PostgreSQL settings
     * @return GetDbaasSettingsPg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDbaasSettingsPg200Response getDbaasSettingsPg() throws ApiException {
        ApiResponse<GetDbaasSettingsPg200Response> localVarResp = getDbaasSettingsPgWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get DBaaS PostgreSQL settings
     * Get DBaaS PostgreSQL settings
     * @return ApiResponse&lt;GetDbaasSettingsPg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDbaasSettingsPg200Response> getDbaasSettingsPgWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDbaasSettingsPgValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsPg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS PostgreSQL settings (asynchronously)
     * Get DBaaS PostgreSQL settings
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsPgAsync(final ApiCallback<GetDbaasSettingsPg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasSettingsPgValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsPg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasSettingsRedis
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsRedisCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-settings-redis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasSettingsRedisValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDbaasSettingsRedisCall(_callback);

    }

    /**
     * Get DBaaS Redis settings
     * Returns the default settings for Redis.
     * @return GetDbaasSettingsRedis200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDbaasSettingsRedis200Response getDbaasSettingsRedis() throws ApiException {
        ApiResponse<GetDbaasSettingsRedis200Response> localVarResp = getDbaasSettingsRedisWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get DBaaS Redis settings
     * Returns the default settings for Redis.
     * @return ApiResponse&lt;GetDbaasSettingsRedis200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDbaasSettingsRedis200Response> getDbaasSettingsRedisWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDbaasSettingsRedisValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsRedis200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS Redis settings (asynchronously)
     * Returns the default settings for Redis.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasSettingsRedisAsync(final ApiCallback<GetDbaasSettingsRedis200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasSettingsRedisValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetDbaasSettingsRedis200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbaasTask
     * @param service  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasTaskCall(String service, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-task/{service}/{id}"
            .replace("{" + "service" + "}", localVarApiClient.escapeString(service.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbaasTaskValidateBeforeCall(String service, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getDbaasTask(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDbaasTask(Async)");
        }

        return getDbaasTaskCall(service, id, _callback);

    }

    /**
     * Get a DBaaS task
     * Get a DBaaS task
     * @param service  (required)
     * @param id  (required)
     * @return DbaasTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasTask getDbaasTask(String service, UUID id) throws ApiException {
        ApiResponse<DbaasTask> localVarResp = getDbaasTaskWithHttpInfo(service, id);
        return localVarResp.getData();
    }

    /**
     * Get a DBaaS task
     * Get a DBaaS task
     * @param service  (required)
     * @param id  (required)
     * @return ApiResponse&lt;DbaasTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasTask> getDbaasTaskWithHttpInfo(String service, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getDbaasTaskValidateBeforeCall(service, id, null);
        Type localVarReturnType = new TypeToken<DbaasTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a DBaaS task (asynchronously)
     * Get a DBaaS task
     * @param service  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbaasTaskAsync(String service, UUID id, final ApiCallback<DbaasTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbaasTaskValidateBeforeCall(service, id, _callback);
        Type localVarReturnType = new TypeToken<DbaasTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDbaasIntegrationSettings
     * @param integrationType  (required)
     * @param sourceType  (required)
     * @param destType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDbaasIntegrationSettingsCall(String integrationType, String sourceType, String destType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-integration-settings/{integration-type}/{source-type}/{dest-type}"
            .replace("{" + "integration-type" + "}", localVarApiClient.escapeString(integrationType.toString()))
            .replace("{" + "source-type" + "}", localVarApiClient.escapeString(sourceType.toString()))
            .replace("{" + "dest-type" + "}", localVarApiClient.escapeString(destType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDbaasIntegrationSettingsValidateBeforeCall(String integrationType, String sourceType, String destType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationType' is set
        if (integrationType == null) {
            throw new ApiException("Missing the required parameter 'integrationType' when calling listDbaasIntegrationSettings(Async)");
        }

        // verify the required parameter 'sourceType' is set
        if (sourceType == null) {
            throw new ApiException("Missing the required parameter 'sourceType' when calling listDbaasIntegrationSettings(Async)");
        }

        // verify the required parameter 'destType' is set
        if (destType == null) {
            throw new ApiException("Missing the required parameter 'destType' when calling listDbaasIntegrationSettings(Async)");
        }

        return listDbaasIntegrationSettingsCall(integrationType, sourceType, destType, _callback);

    }

    /**
     * Get DBaaS integration settings
     * Get DBaaS integration settings
     * @param integrationType  (required)
     * @param sourceType  (required)
     * @param destType  (required)
     * @return ListDbaasIntegrationSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListDbaasIntegrationSettings200Response listDbaasIntegrationSettings(String integrationType, String sourceType, String destType) throws ApiException {
        ApiResponse<ListDbaasIntegrationSettings200Response> localVarResp = listDbaasIntegrationSettingsWithHttpInfo(integrationType, sourceType, destType);
        return localVarResp.getData();
    }

    /**
     * Get DBaaS integration settings
     * Get DBaaS integration settings
     * @param integrationType  (required)
     * @param sourceType  (required)
     * @param destType  (required)
     * @return ApiResponse&lt;ListDbaasIntegrationSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDbaasIntegrationSettings200Response> listDbaasIntegrationSettingsWithHttpInfo(String integrationType, String sourceType, String destType) throws ApiException {
        okhttp3.Call localVarCall = listDbaasIntegrationSettingsValidateBeforeCall(integrationType, sourceType, destType, null);
        Type localVarReturnType = new TypeToken<ListDbaasIntegrationSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS integration settings (asynchronously)
     * Get DBaaS integration settings
     * @param integrationType  (required)
     * @param sourceType  (required)
     * @param destType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDbaasIntegrationSettingsAsync(String integrationType, String sourceType, String destType, final ApiCallback<ListDbaasIntegrationSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDbaasIntegrationSettingsValidateBeforeCall(integrationType, sourceType, destType, _callback);
        Type localVarReturnType = new TypeToken<ListDbaasIntegrationSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDbaasIntegrationTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDbaasIntegrationTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-integration-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDbaasIntegrationTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listDbaasIntegrationTypesCall(_callback);

    }

    /**
     * Get DBaaS integration types
     * Get DBaaS integration types
     * @return ListDbaasIntegrationTypes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListDbaasIntegrationTypes200Response listDbaasIntegrationTypes() throws ApiException {
        ApiResponse<ListDbaasIntegrationTypes200Response> localVarResp = listDbaasIntegrationTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get DBaaS integration types
     * Get DBaaS integration types
     * @return ApiResponse&lt;ListDbaasIntegrationTypes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDbaasIntegrationTypes200Response> listDbaasIntegrationTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listDbaasIntegrationTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListDbaasIntegrationTypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DBaaS integration types (asynchronously)
     * Get DBaaS integration types
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDbaasIntegrationTypesAsync(final ApiCallback<ListDbaasIntegrationTypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDbaasIntegrationTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListDbaasIntegrationTypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDbaasServiceTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDbaasServiceTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-service-type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDbaasServiceTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listDbaasServiceTypesCall(_callback);

    }

    /**
     * DBaaS Service Types
     * List available service types for DBaaS
     * @return ListDbaasServiceTypes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListDbaasServiceTypes200Response listDbaasServiceTypes() throws ApiException {
        ApiResponse<ListDbaasServiceTypes200Response> localVarResp = listDbaasServiceTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * DBaaS Service Types
     * List available service types for DBaaS
     * @return ApiResponse&lt;ListDbaasServiceTypes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDbaasServiceTypes200Response> listDbaasServiceTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listDbaasServiceTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListDbaasServiceTypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DBaaS Service Types (asynchronously)
     * List available service types for DBaaS
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDbaasServiceTypesAsync(final ApiCallback<ListDbaasServiceTypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDbaasServiceTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListDbaasServiceTypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDbaasServices
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDbaasServicesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-service";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDbaasServicesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listDbaasServicesCall(_callback);

    }

    /**
     * List DBaaS services
     * List DBaaS services
     * @return ListDbaasServices200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListDbaasServices200Response listDbaasServices() throws ApiException {
        ApiResponse<ListDbaasServices200Response> localVarResp = listDbaasServicesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List DBaaS services
     * List DBaaS services
     * @return ApiResponse&lt;ListDbaasServices200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDbaasServices200Response> listDbaasServicesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listDbaasServicesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListDbaasServices200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List DBaaS services (asynchronously)
     * List DBaaS services
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDbaasServicesAsync(final ApiCallback<ListDbaasServices200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDbaasServicesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListDbaasServices200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetDbaasKafkaUserPassword
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDbaasKafkaUserPasswordCall(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetDbaasOpensearchUserPasswordRequest;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{service-name}/user/{username}/password/reset"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetDbaasKafkaUserPasswordValidateBeforeCall(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling resetDbaasKafkaUserPassword(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling resetDbaasKafkaUserPassword(Async)");
        }

        // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
        if (resetDbaasOpensearchUserPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasKafkaUserPassword(Async)");
        }

        return resetDbaasKafkaUserPasswordCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, _callback);

    }

    /**
     * Reset the credentials of a DBaaS Kafka user
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation resetDbaasKafkaUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = resetDbaasKafkaUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Reset the credentials of a DBaaS Kafka user
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> resetDbaasKafkaUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = resetDbaasKafkaUserPasswordValidateBeforeCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the credentials of a DBaaS Kafka user (asynchronously)
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDbaasKafkaUserPasswordAsync(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetDbaasKafkaUserPasswordValidateBeforeCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetDbaasMysqlUserPassword
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasMysqlUserPasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDbaasMysqlUserPasswordCall(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetDbaasMysqlUserPasswordRequest;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{service-name}/user/{username}/password/reset"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetDbaasMysqlUserPasswordValidateBeforeCall(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling resetDbaasMysqlUserPassword(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling resetDbaasMysqlUserPassword(Async)");
        }

        // verify the required parameter 'resetDbaasMysqlUserPasswordRequest' is set
        if (resetDbaasMysqlUserPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'resetDbaasMysqlUserPasswordRequest' when calling resetDbaasMysqlUserPassword(Async)");
        }

        return resetDbaasMysqlUserPasswordCall(serviceName, username, resetDbaasMysqlUserPasswordRequest, _callback);

    }

    /**
     * Reset the credentials of a DBaaS mysql user
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasMysqlUserPasswordRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation resetDbaasMysqlUserPassword(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = resetDbaasMysqlUserPasswordWithHttpInfo(serviceName, username, resetDbaasMysqlUserPasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Reset the credentials of a DBaaS mysql user
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasMysqlUserPasswordRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> resetDbaasMysqlUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = resetDbaasMysqlUserPasswordValidateBeforeCall(serviceName, username, resetDbaasMysqlUserPasswordRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the credentials of a DBaaS mysql user (asynchronously)
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasMysqlUserPasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDbaasMysqlUserPasswordAsync(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetDbaasMysqlUserPasswordValidateBeforeCall(serviceName, username, resetDbaasMysqlUserPasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetDbaasOpensearchUserPassword
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDbaasOpensearchUserPasswordCall(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetDbaasOpensearchUserPasswordRequest;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{service-name}/user/{username}/password/reset"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetDbaasOpensearchUserPasswordValidateBeforeCall(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling resetDbaasOpensearchUserPassword(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling resetDbaasOpensearchUserPassword(Async)");
        }

        // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
        if (resetDbaasOpensearchUserPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasOpensearchUserPassword(Async)");
        }

        return resetDbaasOpensearchUserPasswordCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, _callback);

    }

    /**
     * Reset the credentials of a DBaaS OpenSearch user
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation resetDbaasOpensearchUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = resetDbaasOpensearchUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Reset the credentials of a DBaaS OpenSearch user
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> resetDbaasOpensearchUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = resetDbaasOpensearchUserPasswordValidateBeforeCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the credentials of a DBaaS OpenSearch user (asynchronously)
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDbaasOpensearchUserPasswordAsync(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetDbaasOpensearchUserPasswordValidateBeforeCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetDbaasPostgresUserPassword
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDbaasPostgresUserPasswordCall(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetDbaasOpensearchUserPasswordRequest;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service-name}/user/{username}/password/reset"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetDbaasPostgresUserPasswordValidateBeforeCall(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling resetDbaasPostgresUserPassword(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling resetDbaasPostgresUserPassword(Async)");
        }

        // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
        if (resetDbaasOpensearchUserPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasPostgresUserPassword(Async)");
        }

        return resetDbaasPostgresUserPasswordCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, _callback);

    }

    /**
     * Reset the credentials of a DBaaS Postgres user
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation resetDbaasPostgresUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = resetDbaasPostgresUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Reset the credentials of a DBaaS Postgres user
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> resetDbaasPostgresUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = resetDbaasPostgresUserPasswordValidateBeforeCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the credentials of a DBaaS Postgres user (asynchronously)
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDbaasPostgresUserPasswordAsync(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetDbaasPostgresUserPasswordValidateBeforeCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetDbaasRedisUserPassword
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDbaasRedisUserPasswordCall(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetDbaasOpensearchUserPasswordRequest;

        // create path and map variables
        String localVarPath = "/dbaas-redis/{service-name}/user/{username}/password/reset"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetDbaasRedisUserPasswordValidateBeforeCall(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling resetDbaasRedisUserPassword(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling resetDbaasRedisUserPassword(Async)");
        }

        // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
        if (resetDbaasOpensearchUserPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasRedisUserPassword(Async)");
        }

        return resetDbaasRedisUserPasswordCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, _callback);

    }

    /**
     * Reset the credentials of a DBaaS Redis user
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation resetDbaasRedisUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = resetDbaasRedisUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Reset the credentials of a DBaaS Redis user
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> resetDbaasRedisUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = resetDbaasRedisUserPasswordValidateBeforeCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the credentials of a DBaaS Redis user (asynchronously)
     * If no password is provided one will be generated automatically.
     * @param serviceName  (required)
     * @param username  (required)
     * @param resetDbaasOpensearchUserPasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDbaasRedisUserPasswordAsync(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetDbaasRedisUserPasswordValidateBeforeCall(serviceName, username, resetDbaasOpensearchUserPasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revealDbaasKafkaUserPassword
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revealDbaasKafkaUserPasswordCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{service-name}/user/{username}/password/reveal"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revealDbaasKafkaUserPasswordValidateBeforeCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling revealDbaasKafkaUserPassword(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling revealDbaasKafkaUserPassword(Async)");
        }

        return revealDbaasKafkaUserPasswordCall(serviceName, username, _callback);

    }

    /**
     * Reveal the secrets of a DBaaS Kafka user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return DbaasUserKafkaSecrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasUserKafkaSecrets revealDbaasKafkaUserPassword(String serviceName, String username) throws ApiException {
        ApiResponse<DbaasUserKafkaSecrets> localVarResp = revealDbaasKafkaUserPasswordWithHttpInfo(serviceName, username);
        return localVarResp.getData();
    }

    /**
     * Reveal the secrets of a DBaaS Kafka user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return ApiResponse&lt;DbaasUserKafkaSecrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasUserKafkaSecrets> revealDbaasKafkaUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
        okhttp3.Call localVarCall = revealDbaasKafkaUserPasswordValidateBeforeCall(serviceName, username, null);
        Type localVarReturnType = new TypeToken<DbaasUserKafkaSecrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reveal the secrets of a DBaaS Kafka user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revealDbaasKafkaUserPasswordAsync(String serviceName, String username, final ApiCallback<DbaasUserKafkaSecrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = revealDbaasKafkaUserPasswordValidateBeforeCall(serviceName, username, _callback);
        Type localVarReturnType = new TypeToken<DbaasUserKafkaSecrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revealDbaasMysqlUserPassword
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revealDbaasMysqlUserPasswordCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{service-name}/user/{username}/password/reveal"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revealDbaasMysqlUserPasswordValidateBeforeCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling revealDbaasMysqlUserPassword(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling revealDbaasMysqlUserPassword(Async)");
        }

        return revealDbaasMysqlUserPasswordCall(serviceName, username, _callback);

    }

    /**
     * Reveal the secrets of a DBaaS MySQL user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return DbaasUserMysqlSecrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasUserMysqlSecrets revealDbaasMysqlUserPassword(String serviceName, String username) throws ApiException {
        ApiResponse<DbaasUserMysqlSecrets> localVarResp = revealDbaasMysqlUserPasswordWithHttpInfo(serviceName, username);
        return localVarResp.getData();
    }

    /**
     * Reveal the secrets of a DBaaS MySQL user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return ApiResponse&lt;DbaasUserMysqlSecrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasUserMysqlSecrets> revealDbaasMysqlUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
        okhttp3.Call localVarCall = revealDbaasMysqlUserPasswordValidateBeforeCall(serviceName, username, null);
        Type localVarReturnType = new TypeToken<DbaasUserMysqlSecrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reveal the secrets of a DBaaS MySQL user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revealDbaasMysqlUserPasswordAsync(String serviceName, String username, final ApiCallback<DbaasUserMysqlSecrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = revealDbaasMysqlUserPasswordValidateBeforeCall(serviceName, username, _callback);
        Type localVarReturnType = new TypeToken<DbaasUserMysqlSecrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revealDbaasOpensearchUserPassword
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revealDbaasOpensearchUserPasswordCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{service-name}/user/{username}/password/reveal"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revealDbaasOpensearchUserPasswordValidateBeforeCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling revealDbaasOpensearchUserPassword(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling revealDbaasOpensearchUserPassword(Async)");
        }

        return revealDbaasOpensearchUserPasswordCall(serviceName, username, _callback);

    }

    /**
     * Reveal the secrets of a DBaaS OpenSearch user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return DbaasUserOpensearchSecrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasUserOpensearchSecrets revealDbaasOpensearchUserPassword(String serviceName, String username) throws ApiException {
        ApiResponse<DbaasUserOpensearchSecrets> localVarResp = revealDbaasOpensearchUserPasswordWithHttpInfo(serviceName, username);
        return localVarResp.getData();
    }

    /**
     * Reveal the secrets of a DBaaS OpenSearch user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return ApiResponse&lt;DbaasUserOpensearchSecrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasUserOpensearchSecrets> revealDbaasOpensearchUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
        okhttp3.Call localVarCall = revealDbaasOpensearchUserPasswordValidateBeforeCall(serviceName, username, null);
        Type localVarReturnType = new TypeToken<DbaasUserOpensearchSecrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reveal the secrets of a DBaaS OpenSearch user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revealDbaasOpensearchUserPasswordAsync(String serviceName, String username, final ApiCallback<DbaasUserOpensearchSecrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = revealDbaasOpensearchUserPasswordValidateBeforeCall(serviceName, username, _callback);
        Type localVarReturnType = new TypeToken<DbaasUserOpensearchSecrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revealDbaasPostgresUserPassword
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revealDbaasPostgresUserPasswordCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service-name}/user/{username}/password/reveal"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revealDbaasPostgresUserPasswordValidateBeforeCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling revealDbaasPostgresUserPassword(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling revealDbaasPostgresUserPassword(Async)");
        }

        return revealDbaasPostgresUserPasswordCall(serviceName, username, _callback);

    }

    /**
     * Reveal the secrets of a DBaaS Postgres user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return DbaasUserPostgresSecrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasUserPostgresSecrets revealDbaasPostgresUserPassword(String serviceName, String username) throws ApiException {
        ApiResponse<DbaasUserPostgresSecrets> localVarResp = revealDbaasPostgresUserPasswordWithHttpInfo(serviceName, username);
        return localVarResp.getData();
    }

    /**
     * Reveal the secrets of a DBaaS Postgres user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return ApiResponse&lt;DbaasUserPostgresSecrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasUserPostgresSecrets> revealDbaasPostgresUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
        okhttp3.Call localVarCall = revealDbaasPostgresUserPasswordValidateBeforeCall(serviceName, username, null);
        Type localVarReturnType = new TypeToken<DbaasUserPostgresSecrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reveal the secrets of a DBaaS Postgres user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revealDbaasPostgresUserPasswordAsync(String serviceName, String username, final ApiCallback<DbaasUserPostgresSecrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = revealDbaasPostgresUserPasswordValidateBeforeCall(serviceName, username, _callback);
        Type localVarReturnType = new TypeToken<DbaasUserPostgresSecrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revealDbaasRedisUserPassword
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revealDbaasRedisUserPasswordCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-redis/{service-name}/user/{username}/password/reveal"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revealDbaasRedisUserPasswordValidateBeforeCall(String serviceName, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling revealDbaasRedisUserPassword(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling revealDbaasRedisUserPassword(Async)");
        }

        return revealDbaasRedisUserPasswordCall(serviceName, username, _callback);

    }

    /**
     * Reveal the secrets of a DBaaS Redis user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return DbaasUserRedisSecrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasUserRedisSecrets revealDbaasRedisUserPassword(String serviceName, String username) throws ApiException {
        ApiResponse<DbaasUserRedisSecrets> localVarResp = revealDbaasRedisUserPasswordWithHttpInfo(serviceName, username);
        return localVarResp.getData();
    }

    /**
     * Reveal the secrets of a DBaaS Redis user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @return ApiResponse&lt;DbaasUserRedisSecrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasUserRedisSecrets> revealDbaasRedisUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
        okhttp3.Call localVarCall = revealDbaasRedisUserPasswordValidateBeforeCall(serviceName, username, null);
        Type localVarReturnType = new TypeToken<DbaasUserRedisSecrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reveal the secrets of a DBaaS Redis user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revealDbaasRedisUserPasswordAsync(String serviceName, String username, final ApiCallback<DbaasUserRedisSecrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = revealDbaasRedisUserPasswordValidateBeforeCall(serviceName, username, _callback);
        Type localVarReturnType = new TypeToken<DbaasUserRedisSecrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startDbaasGrafanaMaintenance
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasGrafanaMaintenanceCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-grafana/{name}/maintenance/start"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startDbaasGrafanaMaintenanceValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling startDbaasGrafanaMaintenance(Async)");
        }

        return startDbaasGrafanaMaintenanceCall(name, _callback);

    }

    /**
     * Initiate Grafana maintenance update
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation startDbaasGrafanaMaintenance(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = startDbaasGrafanaMaintenanceWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Initiate Grafana maintenance update
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> startDbaasGrafanaMaintenanceWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = startDbaasGrafanaMaintenanceValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate Grafana maintenance update (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasGrafanaMaintenanceAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = startDbaasGrafanaMaintenanceValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startDbaasKafkaMaintenance
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasKafkaMaintenanceCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{name}/maintenance/start"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startDbaasKafkaMaintenanceValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling startDbaasKafkaMaintenance(Async)");
        }

        return startDbaasKafkaMaintenanceCall(name, _callback);

    }

    /**
     * Initiate Kafka maintenance update
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation startDbaasKafkaMaintenance(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = startDbaasKafkaMaintenanceWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Initiate Kafka maintenance update
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> startDbaasKafkaMaintenanceWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = startDbaasKafkaMaintenanceValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate Kafka maintenance update (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasKafkaMaintenanceAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = startDbaasKafkaMaintenanceValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startDbaasMysqlMaintenance
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasMysqlMaintenanceCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{name}/maintenance/start"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startDbaasMysqlMaintenanceValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling startDbaasMysqlMaintenance(Async)");
        }

        return startDbaasMysqlMaintenanceCall(name, _callback);

    }

    /**
     * Initiate MySQL maintenance update
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation startDbaasMysqlMaintenance(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = startDbaasMysqlMaintenanceWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Initiate MySQL maintenance update
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> startDbaasMysqlMaintenanceWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = startDbaasMysqlMaintenanceValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate MySQL maintenance update (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasMysqlMaintenanceAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = startDbaasMysqlMaintenanceValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startDbaasOpensearchMaintenance
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasOpensearchMaintenanceCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{name}/maintenance/start"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startDbaasOpensearchMaintenanceValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling startDbaasOpensearchMaintenance(Async)");
        }

        return startDbaasOpensearchMaintenanceCall(name, _callback);

    }

    /**
     * Initiate OpenSearch maintenance update
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation startDbaasOpensearchMaintenance(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = startDbaasOpensearchMaintenanceWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Initiate OpenSearch maintenance update
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> startDbaasOpensearchMaintenanceWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = startDbaasOpensearchMaintenanceValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate OpenSearch maintenance update (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasOpensearchMaintenanceAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = startDbaasOpensearchMaintenanceValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startDbaasPgMaintenance
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasPgMaintenanceCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{name}/maintenance/start"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startDbaasPgMaintenanceValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling startDbaasPgMaintenance(Async)");
        }

        return startDbaasPgMaintenanceCall(name, _callback);

    }

    /**
     * Initiate PostgreSQL maintenance update
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation startDbaasPgMaintenance(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = startDbaasPgMaintenanceWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Initiate PostgreSQL maintenance update
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> startDbaasPgMaintenanceWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = startDbaasPgMaintenanceValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate PostgreSQL maintenance update (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasPgMaintenanceAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = startDbaasPgMaintenanceValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startDbaasRedisMaintenance
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasRedisMaintenanceCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-redis/{name}/maintenance/start"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startDbaasRedisMaintenanceValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling startDbaasRedisMaintenance(Async)");
        }

        return startDbaasRedisMaintenanceCall(name, _callback);

    }

    /**
     * Initiate Redis maintenance update
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation startDbaasRedisMaintenance(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = startDbaasRedisMaintenanceWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Initiate Redis maintenance update
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> startDbaasRedisMaintenanceWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = startDbaasRedisMaintenanceValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate Redis maintenance update (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDbaasRedisMaintenanceAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = startDbaasRedisMaintenanceValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopDbaasMysqlMigration
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopDbaasMysqlMigrationCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{name}/migration/stop"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopDbaasMysqlMigrationValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling stopDbaasMysqlMigration(Async)");
        }

        return stopDbaasMysqlMigrationCall(name, _callback);

    }

    /**
     * Stop a DBaaS MySQL migration
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation stopDbaasMysqlMigration(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = stopDbaasMysqlMigrationWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Stop a DBaaS MySQL migration
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> stopDbaasMysqlMigrationWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = stopDbaasMysqlMigrationValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop a DBaaS MySQL migration (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopDbaasMysqlMigrationAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopDbaasMysqlMigrationValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopDbaasPgMigration
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopDbaasPgMigrationCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{name}/migration/stop"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopDbaasPgMigrationValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling stopDbaasPgMigration(Async)");
        }

        return stopDbaasPgMigrationCall(name, _callback);

    }

    /**
     * Stop a DBaaS PostgreSQL migration
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation stopDbaasPgMigration(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = stopDbaasPgMigrationWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Stop a DBaaS PostgreSQL migration
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> stopDbaasPgMigrationWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = stopDbaasPgMigrationValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop a DBaaS PostgreSQL migration (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopDbaasPgMigrationAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopDbaasPgMigrationValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopDbaasRedisMigration
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopDbaasRedisMigrationCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbaas-redis/{name}/migration/stop"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopDbaasRedisMigrationValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling stopDbaasRedisMigration(Async)");
        }

        return stopDbaasRedisMigrationCall(name, _callback);

    }

    /**
     * Stop a DBaaS Redis migration
     * 
     * @param name  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation stopDbaasRedisMigration(String name) throws ApiException {
        ApiResponse<Operation> localVarResp = stopDbaasRedisMigrationWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Stop a DBaaS Redis migration
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> stopDbaasRedisMigrationWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = stopDbaasRedisMigrationValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop a DBaaS Redis migration (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopDbaasRedisMigrationAsync(String name, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopDbaasRedisMigrationValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDbaasIntegration
     * @param id  (required)
     * @param updateDbaasIntegrationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasIntegrationCall(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDbaasIntegrationRequest;

        // create path and map variables
        String localVarPath = "/dbaas-integration/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDbaasIntegrationValidateBeforeCall(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDbaasIntegration(Async)");
        }

        // verify the required parameter 'updateDbaasIntegrationRequest' is set
        if (updateDbaasIntegrationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDbaasIntegrationRequest' when calling updateDbaasIntegration(Async)");
        }

        return updateDbaasIntegrationCall(id, updateDbaasIntegrationRequest, _callback);

    }

    /**
     * Update a existing DBaaS integration
     * Update a existing DBaaS integration
     * @param id  (required)
     * @param updateDbaasIntegrationRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation updateDbaasIntegration(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = updateDbaasIntegrationWithHttpInfo(id, updateDbaasIntegrationRequest);
        return localVarResp.getData();
    }

    /**
     * Update a existing DBaaS integration
     * Update a existing DBaaS integration
     * @param id  (required)
     * @param updateDbaasIntegrationRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> updateDbaasIntegrationWithHttpInfo(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDbaasIntegrationValidateBeforeCall(id, updateDbaasIntegrationRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a existing DBaaS integration (asynchronously)
     * Update a existing DBaaS integration
     * @param id  (required)
     * @param updateDbaasIntegrationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasIntegrationAsync(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDbaasIntegrationValidateBeforeCall(id, updateDbaasIntegrationRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDbaasOpensearchAclConfig
     * @param name  (required)
     * @param dbaasOpensearchAclConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasOpensearchAclConfigCall(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dbaasOpensearchAclConfig;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{name}/acl-config"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDbaasOpensearchAclConfigValidateBeforeCall(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateDbaasOpensearchAclConfig(Async)");
        }

        // verify the required parameter 'dbaasOpensearchAclConfig' is set
        if (dbaasOpensearchAclConfig == null) {
            throw new ApiException("Missing the required parameter 'dbaasOpensearchAclConfig' when calling updateDbaasOpensearchAclConfig(Async)");
        }

        return updateDbaasOpensearchAclConfigCall(name, dbaasOpensearchAclConfig, _callback);

    }

    /**
     * Create a DBaaS OpenSearch ACL configuration
     * 
     * @param name  (required)
     * @param dbaasOpensearchAclConfig  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation updateDbaasOpensearchAclConfig(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig) throws ApiException {
        ApiResponse<Operation> localVarResp = updateDbaasOpensearchAclConfigWithHttpInfo(name, dbaasOpensearchAclConfig);
        return localVarResp.getData();
    }

    /**
     * Create a DBaaS OpenSearch ACL configuration
     * 
     * @param name  (required)
     * @param dbaasOpensearchAclConfig  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> updateDbaasOpensearchAclConfigWithHttpInfo(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig) throws ApiException {
        okhttp3.Call localVarCall = updateDbaasOpensearchAclConfigValidateBeforeCall(name, dbaasOpensearchAclConfig, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a DBaaS OpenSearch ACL configuration (asynchronously)
     * 
     * @param name  (required)
     * @param dbaasOpensearchAclConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasOpensearchAclConfigAsync(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDbaasOpensearchAclConfigValidateBeforeCall(name, dbaasOpensearchAclConfig, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDbaasPgConnectionPool
     * @param serviceName  (required)
     * @param connectionPoolName  (required)
     * @param updateDbaasPgConnectionPoolRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasPgConnectionPoolCall(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDbaasPgConnectionPoolRequest;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service-name}/connection-pool/{connection-pool-name}"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "connection-pool-name" + "}", localVarApiClient.escapeString(connectionPoolName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDbaasPgConnectionPoolValidateBeforeCall(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling updateDbaasPgConnectionPool(Async)");
        }

        // verify the required parameter 'connectionPoolName' is set
        if (connectionPoolName == null) {
            throw new ApiException("Missing the required parameter 'connectionPoolName' when calling updateDbaasPgConnectionPool(Async)");
        }

        // verify the required parameter 'updateDbaasPgConnectionPoolRequest' is set
        if (updateDbaasPgConnectionPoolRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDbaasPgConnectionPoolRequest' when calling updateDbaasPgConnectionPool(Async)");
        }

        return updateDbaasPgConnectionPoolCall(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest, _callback);

    }

    /**
     * Update a DBaaS PostgreSQL connection pool
     * 
     * @param serviceName  (required)
     * @param connectionPoolName  (required)
     * @param updateDbaasPgConnectionPoolRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation updateDbaasPgConnectionPool(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = updateDbaasPgConnectionPoolWithHttpInfo(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest);
        return localVarResp.getData();
    }

    /**
     * Update a DBaaS PostgreSQL connection pool
     * 
     * @param serviceName  (required)
     * @param connectionPoolName  (required)
     * @param updateDbaasPgConnectionPoolRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> updateDbaasPgConnectionPoolWithHttpInfo(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDbaasPgConnectionPoolValidateBeforeCall(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a DBaaS PostgreSQL connection pool (asynchronously)
     * 
     * @param serviceName  (required)
     * @param connectionPoolName  (required)
     * @param updateDbaasPgConnectionPoolRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasPgConnectionPoolAsync(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDbaasPgConnectionPoolValidateBeforeCall(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDbaasPostgresAllowReplication
     * @param serviceName  (required)
     * @param username  (required)
     * @param updateDbaasPostgresAllowReplicationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasPostgresAllowReplicationCall(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDbaasPostgresAllowReplicationRequest;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{service-name}/user/{username}/allow-replication"
            .replace("{" + "service-name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDbaasPostgresAllowReplicationValidateBeforeCall(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling updateDbaasPostgresAllowReplication(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateDbaasPostgresAllowReplication(Async)");
        }

        // verify the required parameter 'updateDbaasPostgresAllowReplicationRequest' is set
        if (updateDbaasPostgresAllowReplicationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDbaasPostgresAllowReplicationRequest' when calling updateDbaasPostgresAllowReplication(Async)");
        }

        return updateDbaasPostgresAllowReplicationCall(serviceName, username, updateDbaasPostgresAllowReplicationRequest, _callback);

    }

    /**
     * Update access control for one service user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param updateDbaasPostgresAllowReplicationRequest  (required)
     * @return DbaasPostgresUsers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DbaasPostgresUsers updateDbaasPostgresAllowReplication(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest) throws ApiException {
        ApiResponse<DbaasPostgresUsers> localVarResp = updateDbaasPostgresAllowReplicationWithHttpInfo(serviceName, username, updateDbaasPostgresAllowReplicationRequest);
        return localVarResp.getData();
    }

    /**
     * Update access control for one service user
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param updateDbaasPostgresAllowReplicationRequest  (required)
     * @return ApiResponse&lt;DbaasPostgresUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DbaasPostgresUsers> updateDbaasPostgresAllowReplicationWithHttpInfo(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDbaasPostgresAllowReplicationValidateBeforeCall(serviceName, username, updateDbaasPostgresAllowReplicationRequest, null);
        Type localVarReturnType = new TypeToken<DbaasPostgresUsers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update access control for one service user (asynchronously)
     * 
     * @param serviceName  (required)
     * @param username  (required)
     * @param updateDbaasPostgresAllowReplicationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasPostgresAllowReplicationAsync(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest, final ApiCallback<DbaasPostgresUsers> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDbaasPostgresAllowReplicationValidateBeforeCall(serviceName, username, updateDbaasPostgresAllowReplicationRequest, _callback);
        Type localVarReturnType = new TypeToken<DbaasPostgresUsers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDbaasServiceGrafana
     * @param name  (required)
     * @param updateDbaasServiceGrafanaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServiceGrafanaCall(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDbaasServiceGrafanaRequest;

        // create path and map variables
        String localVarPath = "/dbaas-grafana/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDbaasServiceGrafanaValidateBeforeCall(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateDbaasServiceGrafana(Async)");
        }

        // verify the required parameter 'updateDbaasServiceGrafanaRequest' is set
        if (updateDbaasServiceGrafanaRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDbaasServiceGrafanaRequest' when calling updateDbaasServiceGrafana(Async)");
        }

        return updateDbaasServiceGrafanaCall(name, updateDbaasServiceGrafanaRequest, _callback);

    }

    /**
     * Update a DBaaS Grafana service
     * 
     * @param name  (required)
     * @param updateDbaasServiceGrafanaRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation updateDbaasServiceGrafana(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = updateDbaasServiceGrafanaWithHttpInfo(name, updateDbaasServiceGrafanaRequest);
        return localVarResp.getData();
    }

    /**
     * Update a DBaaS Grafana service
     * 
     * @param name  (required)
     * @param updateDbaasServiceGrafanaRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> updateDbaasServiceGrafanaWithHttpInfo(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDbaasServiceGrafanaValidateBeforeCall(name, updateDbaasServiceGrafanaRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a DBaaS Grafana service (asynchronously)
     * 
     * @param name  (required)
     * @param updateDbaasServiceGrafanaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServiceGrafanaAsync(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDbaasServiceGrafanaValidateBeforeCall(name, updateDbaasServiceGrafanaRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDbaasServiceKafka
     * @param name  (required)
     * @param updateDbaasServiceKafkaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServiceKafkaCall(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDbaasServiceKafkaRequest;

        // create path and map variables
        String localVarPath = "/dbaas-kafka/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDbaasServiceKafkaValidateBeforeCall(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateDbaasServiceKafka(Async)");
        }

        // verify the required parameter 'updateDbaasServiceKafkaRequest' is set
        if (updateDbaasServiceKafkaRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDbaasServiceKafkaRequest' when calling updateDbaasServiceKafka(Async)");
        }

        return updateDbaasServiceKafkaCall(name, updateDbaasServiceKafkaRequest, _callback);

    }

    /**
     * Update a DBaaS Kafka service
     * Update a DBaaS Kafka service
     * @param name  (required)
     * @param updateDbaasServiceKafkaRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation updateDbaasServiceKafka(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = updateDbaasServiceKafkaWithHttpInfo(name, updateDbaasServiceKafkaRequest);
        return localVarResp.getData();
    }

    /**
     * Update a DBaaS Kafka service
     * Update a DBaaS Kafka service
     * @param name  (required)
     * @param updateDbaasServiceKafkaRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> updateDbaasServiceKafkaWithHttpInfo(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDbaasServiceKafkaValidateBeforeCall(name, updateDbaasServiceKafkaRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a DBaaS Kafka service (asynchronously)
     * Update a DBaaS Kafka service
     * @param name  (required)
     * @param updateDbaasServiceKafkaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServiceKafkaAsync(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDbaasServiceKafkaValidateBeforeCall(name, updateDbaasServiceKafkaRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDbaasServiceMysql
     * @param name  (required)
     * @param updateDbaasServiceMysqlRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServiceMysqlCall(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDbaasServiceMysqlRequest;

        // create path and map variables
        String localVarPath = "/dbaas-mysql/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDbaasServiceMysqlValidateBeforeCall(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateDbaasServiceMysql(Async)");
        }

        // verify the required parameter 'updateDbaasServiceMysqlRequest' is set
        if (updateDbaasServiceMysqlRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDbaasServiceMysqlRequest' when calling updateDbaasServiceMysql(Async)");
        }

        return updateDbaasServiceMysqlCall(name, updateDbaasServiceMysqlRequest, _callback);

    }

    /**
     * Update a DBaaS MySQL service
     * Update a DBaaS MySQL service
     * @param name  (required)
     * @param updateDbaasServiceMysqlRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation updateDbaasServiceMysql(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = updateDbaasServiceMysqlWithHttpInfo(name, updateDbaasServiceMysqlRequest);
        return localVarResp.getData();
    }

    /**
     * Update a DBaaS MySQL service
     * Update a DBaaS MySQL service
     * @param name  (required)
     * @param updateDbaasServiceMysqlRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> updateDbaasServiceMysqlWithHttpInfo(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDbaasServiceMysqlValidateBeforeCall(name, updateDbaasServiceMysqlRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a DBaaS MySQL service (asynchronously)
     * Update a DBaaS MySQL service
     * @param name  (required)
     * @param updateDbaasServiceMysqlRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServiceMysqlAsync(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDbaasServiceMysqlValidateBeforeCall(name, updateDbaasServiceMysqlRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDbaasServiceOpensearch
     * @param name  (required)
     * @param updateDbaasServiceOpensearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServiceOpensearchCall(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDbaasServiceOpensearchRequest;

        // create path and map variables
        String localVarPath = "/dbaas-opensearch/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDbaasServiceOpensearchValidateBeforeCall(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateDbaasServiceOpensearch(Async)");
        }

        // verify the required parameter 'updateDbaasServiceOpensearchRequest' is set
        if (updateDbaasServiceOpensearchRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDbaasServiceOpensearchRequest' when calling updateDbaasServiceOpensearch(Async)");
        }

        return updateDbaasServiceOpensearchCall(name, updateDbaasServiceOpensearchRequest, _callback);

    }

    /**
     * Update a DBaaS OpenSearch service
     * Update a DBaaS OpenSearch service
     * @param name  (required)
     * @param updateDbaasServiceOpensearchRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation updateDbaasServiceOpensearch(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = updateDbaasServiceOpensearchWithHttpInfo(name, updateDbaasServiceOpensearchRequest);
        return localVarResp.getData();
    }

    /**
     * Update a DBaaS OpenSearch service
     * Update a DBaaS OpenSearch service
     * @param name  (required)
     * @param updateDbaasServiceOpensearchRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> updateDbaasServiceOpensearchWithHttpInfo(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDbaasServiceOpensearchValidateBeforeCall(name, updateDbaasServiceOpensearchRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a DBaaS OpenSearch service (asynchronously)
     * Update a DBaaS OpenSearch service
     * @param name  (required)
     * @param updateDbaasServiceOpensearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServiceOpensearchAsync(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDbaasServiceOpensearchValidateBeforeCall(name, updateDbaasServiceOpensearchRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDbaasServicePg
     * @param name  (required)
     * @param updateDbaasServicePgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServicePgCall(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDbaasServicePgRequest;

        // create path and map variables
        String localVarPath = "/dbaas-postgres/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDbaasServicePgValidateBeforeCall(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateDbaasServicePg(Async)");
        }

        // verify the required parameter 'updateDbaasServicePgRequest' is set
        if (updateDbaasServicePgRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDbaasServicePgRequest' when calling updateDbaasServicePg(Async)");
        }

        return updateDbaasServicePgCall(name, updateDbaasServicePgRequest, _callback);

    }

    /**
     * Update a DBaaS PostgreSQL service
     * Update a DBaaS PostgreSQL service
     * @param name  (required)
     * @param updateDbaasServicePgRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation updateDbaasServicePg(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = updateDbaasServicePgWithHttpInfo(name, updateDbaasServicePgRequest);
        return localVarResp.getData();
    }

    /**
     * Update a DBaaS PostgreSQL service
     * Update a DBaaS PostgreSQL service
     * @param name  (required)
     * @param updateDbaasServicePgRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> updateDbaasServicePgWithHttpInfo(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDbaasServicePgValidateBeforeCall(name, updateDbaasServicePgRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a DBaaS PostgreSQL service (asynchronously)
     * Update a DBaaS PostgreSQL service
     * @param name  (required)
     * @param updateDbaasServicePgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServicePgAsync(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDbaasServicePgValidateBeforeCall(name, updateDbaasServicePgRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDbaasServiceRedis
     * @param name  (required)
     * @param updateDbaasServiceRedisRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServiceRedisCall(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDbaasServiceRedisRequest;

        // create path and map variables
        String localVarPath = "/dbaas-redis/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDbaasServiceRedisValidateBeforeCall(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateDbaasServiceRedis(Async)");
        }

        // verify the required parameter 'updateDbaasServiceRedisRequest' is set
        if (updateDbaasServiceRedisRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDbaasServiceRedisRequest' when calling updateDbaasServiceRedis(Async)");
        }

        return updateDbaasServiceRedisCall(name, updateDbaasServiceRedisRequest, _callback);

    }

    /**
     * Update a DBaaS Redis service
     * Update a DBaaS Redis service
     * @param name  (required)
     * @param updateDbaasServiceRedisRequest  (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public Operation updateDbaasServiceRedis(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest) throws ApiException {
        ApiResponse<Operation> localVarResp = updateDbaasServiceRedisWithHttpInfo(name, updateDbaasServiceRedisRequest);
        return localVarResp.getData();
    }

    /**
     * Update a DBaaS Redis service
     * Update a DBaaS Redis service
     * @param name  (required)
     * @param updateDbaasServiceRedisRequest  (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> updateDbaasServiceRedisWithHttpInfo(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDbaasServiceRedisValidateBeforeCall(name, updateDbaasServiceRedisRequest, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a DBaaS Redis service (asynchronously)
     * Update a DBaaS Redis service
     * @param name  (required)
     * @param updateDbaasServiceRedisRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDbaasServiceRedisAsync(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDbaasServiceRedisValidateBeforeCall(name, updateDbaasServiceRedisRequest, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
