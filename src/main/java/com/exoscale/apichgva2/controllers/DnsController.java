/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.DnsDomain;
import com.exoscale.apichgva2.models.DnsDomainRecord;
import com.exoscale.apichgva2.models.DnsDomainRecordRequest;
import com.exoscale.apichgva2.models.DnsDomainRecordRequest1;
import com.exoscale.apichgva2.models.DnsDomainRecordResponse;
import com.exoscale.apichgva2.models.DnsDomainRequest;
import com.exoscale.apichgva2.models.DnsDomainResponse;
import com.exoscale.apichgva2.models.DnsDomainZoneResponse;
import com.exoscale.apichgva2.models.Operation;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DnsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DnsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  domainId  Required parameter: Example:
     * @return    Returns the DnsDomainRecordResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DnsDomainRecordResponse listDnsDomainRecords(
            final UUID domainId) throws ApiException, IOException {
        return prepareListDnsDomainRecordsRequest(domainId).execute();
    }

    /**
     * @param  domainId  Required parameter: Example:
     * @return    Returns the DnsDomainRecordResponse response from the API call
     */
    public CompletableFuture<DnsDomainRecordResponse> listDnsDomainRecordsAsync(
            final UUID domainId) {
        try { 
            return prepareListDnsDomainRecordsRequest(domainId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDnsDomainRecords.
     */
    private ApiCall<DnsDomainRecordResponse, ApiException> prepareListDnsDomainRecordsRequest(
            final UUID domainId) throws IOException {
        return new ApiCall.Builder<DnsDomainRecordResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dns-domain/{domain-id}/record")
                        .templateParam(param -> param.key("domain-id").value(domainId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DnsDomainRecordResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  domainId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDnsDomainRecord(
            final UUID domainId,
            final DnsDomainRecordRequest body) throws ApiException, IOException {
        return prepareCreateDnsDomainRecordRequest(domainId, body).execute();
    }

    /**
     * @param  domainId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDnsDomainRecordAsync(
            final UUID domainId,
            final DnsDomainRecordRequest body) {
        try { 
            return prepareCreateDnsDomainRecordRequest(domainId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDnsDomainRecord.
     */
    private ApiCall<Operation, ApiException> prepareCreateDnsDomainRecordRequest(
            final UUID domainId,
            final DnsDomainRecordRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dns-domain/{domain-id}/record")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("domain-id").value(domainId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the DnsDomainResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DnsDomainResponse listDnsDomains() throws ApiException, IOException {
        return prepareListDnsDomainsRequest().execute();
    }

    /**
     * @return    Returns the DnsDomainResponse response from the API call
     */
    public CompletableFuture<DnsDomainResponse> listDnsDomainsAsync() {
        try { 
            return prepareListDnsDomainsRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDnsDomains.
     */
    private ApiCall<DnsDomainResponse, ApiException> prepareListDnsDomainsRequest() throws IOException {
        return new ApiCall.Builder<DnsDomainResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dns-domain")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DnsDomainResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the DnsDomain response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DnsDomain createDnsDomain(
            final DnsDomainRequest body) throws ApiException, IOException {
        return prepareCreateDnsDomainRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the DnsDomain response from the API call
     */
    public CompletableFuture<DnsDomain> createDnsDomainAsync(
            final DnsDomainRequest body) {
        try { 
            return prepareCreateDnsDomainRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDnsDomain.
     */
    private ApiCall<DnsDomain, ApiException> prepareCreateDnsDomainRequest(
            final DnsDomainRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<DnsDomain, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dns-domain")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DnsDomain.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  domainId  Required parameter: Example:
     * @param  recordId  Required parameter: Example:
     * @return    Returns the DnsDomainRecord response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DnsDomainRecord getDnsDomainRecord(
            final UUID domainId,
            final UUID recordId) throws ApiException, IOException {
        return prepareGetDnsDomainRecordRequest(domainId, recordId).execute();
    }

    /**
     * @param  domainId  Required parameter: Example:
     * @param  recordId  Required parameter: Example:
     * @return    Returns the DnsDomainRecord response from the API call
     */
    public CompletableFuture<DnsDomainRecord> getDnsDomainRecordAsync(
            final UUID domainId,
            final UUID recordId) {
        try { 
            return prepareGetDnsDomainRecordRequest(domainId, recordId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDnsDomainRecord.
     */
    private ApiCall<DnsDomainRecord, ApiException> prepareGetDnsDomainRecordRequest(
            final UUID domainId,
            final UUID recordId) throws IOException {
        return new ApiCall.Builder<DnsDomainRecord, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dns-domain/{domain-id}/record/{record-id}")
                        .templateParam(param -> param.key("domain-id").value(domainId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("record-id").value(recordId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DnsDomainRecord.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  domainId  Required parameter: Example:
     * @param  recordId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateDnsDomainRecord(
            final UUID domainId,
            final UUID recordId,
            final DnsDomainRecordRequest1 body) throws ApiException, IOException {
        return prepareUpdateDnsDomainRecordRequest(domainId, recordId, body).execute();
    }

    /**
     * @param  domainId  Required parameter: Example:
     * @param  recordId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateDnsDomainRecordAsync(
            final UUID domainId,
            final UUID recordId,
            final DnsDomainRecordRequest1 body) {
        try { 
            return prepareUpdateDnsDomainRecordRequest(domainId, recordId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDnsDomainRecord.
     */
    private ApiCall<Operation, ApiException> prepareUpdateDnsDomainRecordRequest(
            final UUID domainId,
            final UUID recordId,
            final DnsDomainRecordRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dns-domain/{domain-id}/record/{record-id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("domain-id").value(domainId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("record-id").value(recordId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  domainId  Required parameter: Example:
     * @param  recordId  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDnsDomainRecord(
            final UUID domainId,
            final UUID recordId) throws ApiException, IOException {
        return prepareDeleteDnsDomainRecordRequest(domainId, recordId).execute();
    }

    /**
     * @param  domainId  Required parameter: Example:
     * @param  recordId  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDnsDomainRecordAsync(
            final UUID domainId,
            final UUID recordId) {
        try { 
            return prepareDeleteDnsDomainRecordRequest(domainId, recordId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDnsDomainRecord.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDnsDomainRecordRequest(
            final UUID domainId,
            final UUID recordId) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dns-domain/{domain-id}/record/{record-id}")
                        .templateParam(param -> param.key("domain-id").value(domainId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("record-id").value(recordId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the DnsDomainZoneResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DnsDomainZoneResponse getDnsDomainZoneFile(
            final UUID id) throws ApiException, IOException {
        return prepareGetDnsDomainZoneFileRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the DnsDomainZoneResponse response from the API call
     */
    public CompletableFuture<DnsDomainZoneResponse> getDnsDomainZoneFileAsync(
            final UUID id) {
        try { 
            return prepareGetDnsDomainZoneFileRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDnsDomainZoneFile.
     */
    private ApiCall<DnsDomainZoneResponse, ApiException> prepareGetDnsDomainZoneFileRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<DnsDomainZoneResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dns-domain/{id}/zone")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DnsDomainZoneResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDnsDomain(
            final UUID id) throws ApiException, IOException {
        return prepareDeleteDnsDomainRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDnsDomainAsync(
            final UUID id) {
        try { 
            return prepareDeleteDnsDomainRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDnsDomain.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDnsDomainRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dns-domain/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the DnsDomain response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DnsDomain getDnsDomain(
            final UUID id) throws ApiException, IOException {
        return prepareGetDnsDomainRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the DnsDomain response from the API call
     */
    public CompletableFuture<DnsDomain> getDnsDomainAsync(
            final UUID id) {
        try { 
            return prepareGetDnsDomainRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDnsDomain.
     */
    private ApiCall<DnsDomain, ApiException> prepareGetDnsDomainRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<DnsDomain, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dns-domain/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DnsDomain.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}