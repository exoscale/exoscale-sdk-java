/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Quota - Organization Quota
 */

public class Quota {

    /**
     * Resource Name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<? extends String> resource;

    /**
     * Resource Usage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usage")
    private Optional<? extends Long> usage;

    /**
     * Resource Limit. -1 for Unlimited
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    private Optional<? extends Long> limit;

    public Quota(
            @JsonProperty("resource") Optional<? extends String> resource,
            @JsonProperty("usage") Optional<? extends Long> usage,
            @JsonProperty("limit") Optional<? extends Long> limit) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(usage, "usage");
        Utils.checkNotNull(limit, "limit");
        this.resource = resource;
        this.usage = usage;
        this.limit = limit;
    }

    /**
     * Resource Name
     */
    public Optional<? extends String> resource() {
        return resource;
    }

    /**
     * Resource Usage
     */
    public Optional<? extends Long> usage() {
        return usage;
    }

    /**
     * Resource Limit. -1 for Unlimited
     */
    public Optional<? extends Long> limit() {
        return limit;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Resource Name
     */
    public Quota withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Resource Name
     */
    public Quota withResource(Optional<? extends String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * Resource Usage
     */
    public Quota withUsage(long usage) {
        Utils.checkNotNull(usage, "usage");
        this.usage = Optional.ofNullable(usage);
        return this;
    }

    /**
     * Resource Usage
     */
    public Quota withUsage(Optional<? extends Long> usage) {
        Utils.checkNotNull(usage, "usage");
        this.usage = usage;
        return this;
    }

    /**
     * Resource Limit. -1 for Unlimited
     */
    public Quota withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * Resource Limit. -1 for Unlimited
     */
    public Quota withLimit(Optional<? extends Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Quota other = (Quota) o;
        return 
            java.util.Objects.deepEquals(this.resource, other.resource) &&
            java.util.Objects.deepEquals(this.usage, other.usage) &&
            java.util.Objects.deepEquals(this.limit, other.limit);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            resource,
            usage,
            limit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Quota.class,
                "resource", resource,
                "usage", usage,
                "limit", limit);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> resource = Optional.empty();
 
        private Optional<? extends Long> usage = Optional.empty();
 
        private Optional<? extends Long> limit = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Resource Name
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Resource Name
         */
        public Builder resource(Optional<? extends String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * Resource Usage
         */
        public Builder usage(long usage) {
            Utils.checkNotNull(usage, "usage");
            this.usage = Optional.ofNullable(usage);
            return this;
        }

        /**
         * Resource Usage
         */
        public Builder usage(Optional<? extends Long> usage) {
            Utils.checkNotNull(usage, "usage");
            this.usage = usage;
            return this;
        }

        /**
         * Resource Limit. -1 for Unlimited
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Resource Limit. -1 for Unlimited
         */
        public Builder limit(Optional<? extends Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }
        
        public Quota build() {
            return new Quota(
                resource,
                usage,
                limit);
        }
    }
}

