/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.exoscale.apichgva2.DateTimeHelper;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for DbaasServicePg type.
 */
public class DbaasServicePg {
    private PGBouncerConnectionPoolingSettings pgbouncerSettings;
    private LocalDateTime updatedAt;
    private Long nodeCount;
    private ConnectionInfo2 connectionInfo;
    private BackupSchedule backupSchedule;
    private Long nodeCpuCount;
    private List<DbaasIntegration> integrations;
    private String zone;
    private List<DbaasNodeState> nodeStates;
    private String name;
    private List<ConnectionPool> connectionPools;
    private String type;
    private EnumServiceStateEnum state;
    private TimescaleDBExtensionConfigurationValues timescaledbSettings;
    private List<String> databases;
    private List<String> ipFilter;
    private List<DbaasServiceBackup> backups;
    private Boolean terminationProtection;
    private List<DbaasServiceNotification> notifications;
    private List<Component> components;
    private EnumPgSynchronousReplicationEnum synchronousReplication;
    private PGLookoutSettings pglookoutSettings;
    private DbaasServiceMaintenance maintenance;
    private Long diskSize;
    private Long nodeMemory;
    private String uri;
    private Object uriParams;
    private String version;
    private LocalDateTime createdAt;
    private String plan;
    private Long workMem;
    private Long sharedBuffersPercentage;
    private PostgresqlConfConfigurationValues pgSettings;
    private Long maxConnections;
    private List<User2> users;

    /**
     * Default constructor.
     */
    public DbaasServicePg() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  type  String value for type.
     * @param  plan  String value for plan.
     * @param  pgbouncerSettings  PGBouncerConnectionPoolingSettings value for pgbouncerSettings.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  nodeCount  Long value for nodeCount.
     * @param  connectionInfo  ConnectionInfo2 value for connectionInfo.
     * @param  backupSchedule  BackupSchedule value for backupSchedule.
     * @param  nodeCpuCount  Long value for nodeCpuCount.
     * @param  integrations  List of DbaasIntegration value for integrations.
     * @param  zone  String value for zone.
     * @param  nodeStates  List of DbaasNodeState value for nodeStates.
     * @param  connectionPools  List of ConnectionPool value for connectionPools.
     * @param  state  EnumServiceStateEnum value for state.
     * @param  timescaledbSettings  TimescaleDBExtensionConfigurationValues value for
     *         timescaledbSettings.
     * @param  databases  List of String value for databases.
     * @param  ipFilter  List of String value for ipFilter.
     * @param  backups  List of DbaasServiceBackup value for backups.
     * @param  terminationProtection  Boolean value for terminationProtection.
     * @param  notifications  List of DbaasServiceNotification value for notifications.
     * @param  components  List of Component value for components.
     * @param  synchronousReplication  EnumPgSynchronousReplicationEnum value for
     *         synchronousReplication.
     * @param  pglookoutSettings  PGLookoutSettings value for pglookoutSettings.
     * @param  maintenance  DbaasServiceMaintenance value for maintenance.
     * @param  diskSize  Long value for diskSize.
     * @param  nodeMemory  Long value for nodeMemory.
     * @param  uri  String value for uri.
     * @param  uriParams  Object value for uriParams.
     * @param  version  String value for version.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  workMem  Long value for workMem.
     * @param  sharedBuffersPercentage  Long value for sharedBuffersPercentage.
     * @param  pgSettings  PostgresqlConfConfigurationValues value for pgSettings.
     * @param  maxConnections  Long value for maxConnections.
     * @param  users  List of User2 value for users.
     */
    public DbaasServicePg(
            String name,
            String type,
            String plan,
            PGBouncerConnectionPoolingSettings pgbouncerSettings,
            LocalDateTime updatedAt,
            Long nodeCount,
            ConnectionInfo2 connectionInfo,
            BackupSchedule backupSchedule,
            Long nodeCpuCount,
            List<DbaasIntegration> integrations,
            String zone,
            List<DbaasNodeState> nodeStates,
            List<ConnectionPool> connectionPools,
            EnumServiceStateEnum state,
            TimescaleDBExtensionConfigurationValues timescaledbSettings,
            List<String> databases,
            List<String> ipFilter,
            List<DbaasServiceBackup> backups,
            Boolean terminationProtection,
            List<DbaasServiceNotification> notifications,
            List<Component> components,
            EnumPgSynchronousReplicationEnum synchronousReplication,
            PGLookoutSettings pglookoutSettings,
            DbaasServiceMaintenance maintenance,
            Long diskSize,
            Long nodeMemory,
            String uri,
            Object uriParams,
            String version,
            LocalDateTime createdAt,
            Long workMem,
            Long sharedBuffersPercentage,
            PostgresqlConfConfigurationValues pgSettings,
            Long maxConnections,
            List<User2> users) {
        this.pgbouncerSettings = pgbouncerSettings;
        this.updatedAt = updatedAt;
        this.nodeCount = nodeCount;
        this.connectionInfo = connectionInfo;
        this.backupSchedule = backupSchedule;
        this.nodeCpuCount = nodeCpuCount;
        this.integrations = integrations;
        this.zone = zone;
        this.nodeStates = nodeStates;
        this.name = name;
        this.connectionPools = connectionPools;
        this.type = type;
        this.state = state;
        this.timescaledbSettings = timescaledbSettings;
        this.databases = databases;
        this.ipFilter = ipFilter;
        this.backups = backups;
        this.terminationProtection = terminationProtection;
        this.notifications = notifications;
        this.components = components;
        this.synchronousReplication = synchronousReplication;
        this.pglookoutSettings = pglookoutSettings;
        this.maintenance = maintenance;
        this.diskSize = diskSize;
        this.nodeMemory = nodeMemory;
        this.uri = uri;
        this.uriParams = uriParams;
        this.version = version;
        this.createdAt = createdAt;
        this.plan = plan;
        this.workMem = workMem;
        this.sharedBuffersPercentage = sharedBuffersPercentage;
        this.pgSettings = pgSettings;
        this.maxConnections = maxConnections;
        this.users = users;
    }

    /**
     * Getter for PgbouncerSettings.
     * @return Returns the PGBouncerConnectionPoolingSettings
     */
    @JsonGetter("pgbouncer-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PGBouncerConnectionPoolingSettings getPgbouncerSettings() {
        return pgbouncerSettings;
    }

    /**
     * Setter for PgbouncerSettings.
     * @param pgbouncerSettings Value for PGBouncerConnectionPoolingSettings
     */
    @JsonSetter("pgbouncer-settings")
    public void setPgbouncerSettings(PGBouncerConnectionPoolingSettings pgbouncerSettings) {
        this.pgbouncerSettings = pgbouncerSettings;
    }

    /**
     * Getter for UpdatedAt.
     * Service last update timestamp (ISO 8601)
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated-at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * Service last update timestamp (ISO 8601)
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated-at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for NodeCount.
     * Number of service nodes in the active plan
     * @return Returns the Long
     */
    @JsonGetter("node-count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNodeCount() {
        return nodeCount;
    }

    /**
     * Setter for NodeCount.
     * Number of service nodes in the active plan
     * @param nodeCount Value for Long
     */
    @JsonSetter("node-count")
    public void setNodeCount(Long nodeCount) {
        this.nodeCount = nodeCount;
    }

    /**
     * Getter for ConnectionInfo.
     * PG connection information properties
     * @return Returns the ConnectionInfo2
     */
    @JsonGetter("connection-info")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ConnectionInfo2 getConnectionInfo() {
        return connectionInfo;
    }

    /**
     * Setter for ConnectionInfo.
     * PG connection information properties
     * @param connectionInfo Value for ConnectionInfo2
     */
    @JsonSetter("connection-info")
    public void setConnectionInfo(ConnectionInfo2 connectionInfo) {
        this.connectionInfo = connectionInfo;
    }

    /**
     * Getter for BackupSchedule.
     * Backup schedule
     * @return Returns the BackupSchedule
     */
    @JsonGetter("backup-schedule")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public BackupSchedule getBackupSchedule() {
        return backupSchedule;
    }

    /**
     * Setter for BackupSchedule.
     * Backup schedule
     * @param backupSchedule Value for BackupSchedule
     */
    @JsonSetter("backup-schedule")
    public void setBackupSchedule(BackupSchedule backupSchedule) {
        this.backupSchedule = backupSchedule;
    }

    /**
     * Getter for NodeCpuCount.
     * Number of CPUs for each node
     * @return Returns the Long
     */
    @JsonGetter("node-cpu-count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNodeCpuCount() {
        return nodeCpuCount;
    }

    /**
     * Setter for NodeCpuCount.
     * Number of CPUs for each node
     * @param nodeCpuCount Value for Long
     */
    @JsonSetter("node-cpu-count")
    public void setNodeCpuCount(Long nodeCpuCount) {
        this.nodeCpuCount = nodeCpuCount;
    }

    /**
     * Getter for Integrations.
     * Service integrations
     * @return Returns the List of DbaasIntegration
     */
    @JsonGetter("integrations")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasIntegration> getIntegrations() {
        return integrations;
    }

    /**
     * Setter for Integrations.
     * Service integrations
     * @param integrations Value for List of DbaasIntegration
     */
    @JsonSetter("integrations")
    public void setIntegrations(List<DbaasIntegration> integrations) {
        this.integrations = integrations;
    }

    /**
     * Getter for Zone.
     * The zone where the service is running
     * @return Returns the String
     */
    @JsonGetter("zone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getZone() {
        return zone;
    }

    /**
     * Setter for Zone.
     * The zone where the service is running
     * @param zone Value for String
     */
    @JsonSetter("zone")
    public void setZone(String zone) {
        this.zone = zone;
    }

    /**
     * Getter for NodeStates.
     * State of individual service nodes
     * @return Returns the List of DbaasNodeState
     */
    @JsonGetter("node-states")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasNodeState> getNodeStates() {
        return nodeStates;
    }

    /**
     * Setter for NodeStates.
     * State of individual service nodes
     * @param nodeStates Value for List of DbaasNodeState
     */
    @JsonSetter("node-states")
    public void setNodeStates(List<DbaasNodeState> nodeStates) {
        this.nodeStates = nodeStates;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for ConnectionPools.
     * PostgreSQL PGBouncer connection pools
     * @return Returns the List of ConnectionPool
     */
    @JsonGetter("connection-pools")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ConnectionPool> getConnectionPools() {
        return connectionPools;
    }

    /**
     * Setter for ConnectionPools.
     * PostgreSQL PGBouncer connection pools
     * @param connectionPools Value for List of ConnectionPool
     */
    @JsonSetter("connection-pools")
    public void setConnectionPools(List<ConnectionPool> connectionPools) {
        this.connectionPools = connectionPools;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for State.
     * @return Returns the EnumServiceStateEnum
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EnumServiceStateEnum getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for EnumServiceStateEnum
     */
    @JsonSetter("state")
    public void setState(EnumServiceStateEnum state) {
        this.state = state;
    }

    /**
     * Getter for TimescaledbSettings.
     * @return Returns the TimescaleDBExtensionConfigurationValues
     */
    @JsonGetter("timescaledb-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TimescaleDBExtensionConfigurationValues getTimescaledbSettings() {
        return timescaledbSettings;
    }

    /**
     * Setter for TimescaledbSettings.
     * @param timescaledbSettings Value for TimescaleDBExtensionConfigurationValues
     */
    @JsonSetter("timescaledb-settings")
    public void setTimescaledbSettings(TimescaleDBExtensionConfigurationValues timescaledbSettings) {
        this.timescaledbSettings = timescaledbSettings;
    }

    /**
     * Getter for Databases.
     * List of PostgreSQL databases
     * @return Returns the List of String
     */
    @JsonGetter("databases")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getDatabases() {
        return databases;
    }

    /**
     * Setter for Databases.
     * List of PostgreSQL databases
     * @param databases Value for List of String
     */
    @JsonSetter("databases")
    public void setDatabases(List<String> databases) {
        this.databases = databases;
    }

    /**
     * Getter for IpFilter.
     * Allowed CIDR address blocks for incoming connections
     * @return Returns the List of String
     */
    @JsonGetter("ip-filter")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getIpFilter() {
        return ipFilter;
    }

    /**
     * Setter for IpFilter.
     * Allowed CIDR address blocks for incoming connections
     * @param ipFilter Value for List of String
     */
    @JsonSetter("ip-filter")
    public void setIpFilter(List<String> ipFilter) {
        this.ipFilter = ipFilter;
    }

    /**
     * Getter for Backups.
     * List of backups for the service
     * @return Returns the List of DbaasServiceBackup
     */
    @JsonGetter("backups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasServiceBackup> getBackups() {
        return backups;
    }

    /**
     * Setter for Backups.
     * List of backups for the service
     * @param backups Value for List of DbaasServiceBackup
     */
    @JsonSetter("backups")
    public void setBackups(List<DbaasServiceBackup> backups) {
        this.backups = backups;
    }

    /**
     * Getter for TerminationProtection.
     * Service is protected against termination and powering off
     * @return Returns the Boolean
     */
    @JsonGetter("termination-protection")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTerminationProtection() {
        return terminationProtection;
    }

    /**
     * Setter for TerminationProtection.
     * Service is protected against termination and powering off
     * @param terminationProtection Value for Boolean
     */
    @JsonSetter("termination-protection")
    public void setTerminationProtection(Boolean terminationProtection) {
        this.terminationProtection = terminationProtection;
    }

    /**
     * Getter for Notifications.
     * Service notifications
     * @return Returns the List of DbaasServiceNotification
     */
    @JsonGetter("notifications")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DbaasServiceNotification> getNotifications() {
        return notifications;
    }

    /**
     * Setter for Notifications.
     * Service notifications
     * @param notifications Value for List of DbaasServiceNotification
     */
    @JsonSetter("notifications")
    public void setNotifications(List<DbaasServiceNotification> notifications) {
        this.notifications = notifications;
    }

    /**
     * Getter for Components.
     * Service component information objects
     * @return Returns the List of Component
     */
    @JsonGetter("components")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Component> getComponents() {
        return components;
    }

    /**
     * Setter for Components.
     * Service component information objects
     * @param components Value for List of Component
     */
    @JsonSetter("components")
    public void setComponents(List<Component> components) {
        this.components = components;
    }

    /**
     * Getter for SynchronousReplication.
     * @return Returns the EnumPgSynchronousReplicationEnum
     */
    @JsonGetter("synchronous-replication")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EnumPgSynchronousReplicationEnum getSynchronousReplication() {
        return synchronousReplication;
    }

    /**
     * Setter for SynchronousReplication.
     * @param synchronousReplication Value for EnumPgSynchronousReplicationEnum
     */
    @JsonSetter("synchronous-replication")
    public void setSynchronousReplication(EnumPgSynchronousReplicationEnum synchronousReplication) {
        this.synchronousReplication = synchronousReplication;
    }

    /**
     * Getter for PglookoutSettings.
     * @return Returns the PGLookoutSettings
     */
    @JsonGetter("pglookout-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PGLookoutSettings getPglookoutSettings() {
        return pglookoutSettings;
    }

    /**
     * Setter for PglookoutSettings.
     * @param pglookoutSettings Value for PGLookoutSettings
     */
    @JsonSetter("pglookout-settings")
    public void setPglookoutSettings(PGLookoutSettings pglookoutSettings) {
        this.pglookoutSettings = pglookoutSettings;
    }

    /**
     * Getter for Maintenance.
     * Automatic maintenance settings
     * @return Returns the DbaasServiceMaintenance
     */
    @JsonGetter("maintenance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DbaasServiceMaintenance getMaintenance() {
        return maintenance;
    }

    /**
     * Setter for Maintenance.
     * Automatic maintenance settings
     * @param maintenance Value for DbaasServiceMaintenance
     */
    @JsonSetter("maintenance")
    public void setMaintenance(DbaasServiceMaintenance maintenance) {
        this.maintenance = maintenance;
    }

    /**
     * Getter for DiskSize.
     * TODO UNIT disk space for data storage
     * @return Returns the Long
     */
    @JsonGetter("disk-size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getDiskSize() {
        return diskSize;
    }

    /**
     * Setter for DiskSize.
     * TODO UNIT disk space for data storage
     * @param diskSize Value for Long
     */
    @JsonSetter("disk-size")
    public void setDiskSize(Long diskSize) {
        this.diskSize = diskSize;
    }

    /**
     * Getter for NodeMemory.
     * TODO UNIT of memory for each node
     * @return Returns the Long
     */
    @JsonGetter("node-memory")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getNodeMemory() {
        return nodeMemory;
    }

    /**
     * Setter for NodeMemory.
     * TODO UNIT of memory for each node
     * @param nodeMemory Value for Long
     */
    @JsonSetter("node-memory")
    public void setNodeMemory(Long nodeMemory) {
        this.nodeMemory = nodeMemory;
    }

    /**
     * Getter for Uri.
     * URI for connecting to the service (may be absent)
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * URI for connecting to the service (may be absent)
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for UriParams.
     * service_uri parameterized into key-value pairs
     * @return Returns the Object
     */
    @JsonGetter("uri-params")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getUriParams() {
        return uriParams;
    }

    /**
     * Setter for UriParams.
     * service_uri parameterized into key-value pairs
     * @param uriParams Value for Object
     */
    @JsonSetter("uri-params")
    public void setUriParams(Object uriParams) {
        this.uriParams = uriParams;
    }

    /**
     * Getter for Version.
     * PostgreSQL version
     * @return Returns the String
     */
    @JsonGetter("version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVersion() {
        return version;
    }

    /**
     * Setter for Version.
     * PostgreSQL version
     * @param version Value for String
     */
    @JsonSetter("version")
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Getter for CreatedAt.
     * Service creation timestamp (ISO 8601)
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created-at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * Service creation timestamp (ISO 8601)
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created-at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Plan.
     * Subscription plan
     * @return Returns the String
     */
    @JsonGetter("plan")
    public String getPlan() {
        return plan;
    }

    /**
     * Setter for Plan.
     * Subscription plan
     * @param plan Value for String
     */
    @JsonSetter("plan")
    public void setPlan(String plan) {
        this.plan = plan;
    }

    /**
     * Getter for WorkMem.
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash
     * table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM
     * (up to 32MB).
     * @return Returns the Long
     */
    @JsonGetter("work-mem")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getWorkMem() {
        return workMem;
    }

    /**
     * Setter for WorkMem.
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash
     * table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM
     * (up to 32MB).
     * @param workMem Value for Long
     */
    @JsonSetter("work-mem")
    public void setWorkMem(Long workMem) {
        this.workMem = workMem;
    }

    /**
     * Getter for SharedBuffersPercentage.
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range
     * is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers
     * configuration value.
     * @return Returns the Long
     */
    @JsonGetter("shared-buffers-percentage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getSharedBuffersPercentage() {
        return sharedBuffersPercentage;
    }

    /**
     * Setter for SharedBuffersPercentage.
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range
     * is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers
     * configuration value.
     * @param sharedBuffersPercentage Value for Long
     */
    @JsonSetter("shared-buffers-percentage")
    public void setSharedBuffersPercentage(Long sharedBuffersPercentage) {
        this.sharedBuffersPercentage = sharedBuffersPercentage;
    }

    /**
     * Getter for PgSettings.
     * @return Returns the PostgresqlConfConfigurationValues
     */
    @JsonGetter("pg-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PostgresqlConfConfigurationValues getPgSettings() {
        return pgSettings;
    }

    /**
     * Setter for PgSettings.
     * @param pgSettings Value for PostgresqlConfConfigurationValues
     */
    @JsonSetter("pg-settings")
    public void setPgSettings(PostgresqlConfConfigurationValues pgSettings) {
        this.pgSettings = pgSettings;
    }

    /**
     * Getter for MaxConnections.
     * Maximum number of connections allowed to an instance
     * @return Returns the Long
     */
    @JsonGetter("max-connections")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getMaxConnections() {
        return maxConnections;
    }

    /**
     * Setter for MaxConnections.
     * Maximum number of connections allowed to an instance
     * @param maxConnections Value for Long
     */
    @JsonSetter("max-connections")
    public void setMaxConnections(Long maxConnections) {
        this.maxConnections = maxConnections;
    }

    /**
     * Getter for Users.
     * List of service users
     * @return Returns the List of User2
     */
    @JsonGetter("users")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<User2> getUsers() {
        return users;
    }

    /**
     * Setter for Users.
     * List of service users
     * @param users Value for List of User2
     */
    @JsonSetter("users")
    public void setUsers(List<User2> users) {
        this.users = users;
    }

    /**
     * Converts this DbaasServicePg into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DbaasServicePg [" + "name=" + name + ", type=" + type + ", plan=" + plan
                + ", pgbouncerSettings=" + pgbouncerSettings + ", updatedAt=" + updatedAt
                + ", nodeCount=" + nodeCount + ", connectionInfo=" + connectionInfo
                + ", backupSchedule=" + backupSchedule + ", nodeCpuCount=" + nodeCpuCount
                + ", integrations=" + integrations + ", zone=" + zone + ", nodeStates=" + nodeStates
                + ", connectionPools=" + connectionPools + ", state=" + state
                + ", timescaledbSettings=" + timescaledbSettings + ", databases=" + databases
                + ", ipFilter=" + ipFilter + ", backups=" + backups + ", terminationProtection="
                + terminationProtection + ", notifications=" + notifications + ", components="
                + components + ", synchronousReplication=" + synchronousReplication
                + ", pglookoutSettings=" + pglookoutSettings + ", maintenance=" + maintenance
                + ", diskSize=" + diskSize + ", nodeMemory=" + nodeMemory + ", uri=" + uri
                + ", uriParams=" + uriParams + ", version=" + version + ", createdAt=" + createdAt
                + ", workMem=" + workMem + ", sharedBuffersPercentage=" + sharedBuffersPercentage
                + ", pgSettings=" + pgSettings + ", maxConnections=" + maxConnections + ", users="
                + users + "]";
    }

    /**
     * Builds a new {@link DbaasServicePg.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DbaasServicePg.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(name, type, plan)
                .pgbouncerSettings(getPgbouncerSettings())
                .updatedAt(getUpdatedAt())
                .nodeCount(getNodeCount())
                .connectionInfo(getConnectionInfo())
                .backupSchedule(getBackupSchedule())
                .nodeCpuCount(getNodeCpuCount())
                .integrations(getIntegrations())
                .zone(getZone())
                .nodeStates(getNodeStates())
                .connectionPools(getConnectionPools())
                .state(getState())
                .timescaledbSettings(getTimescaledbSettings())
                .databases(getDatabases())
                .ipFilter(getIpFilter())
                .backups(getBackups())
                .terminationProtection(getTerminationProtection())
                .notifications(getNotifications())
                .components(getComponents())
                .synchronousReplication(getSynchronousReplication())
                .pglookoutSettings(getPglookoutSettings())
                .maintenance(getMaintenance())
                .diskSize(getDiskSize())
                .nodeMemory(getNodeMemory())
                .uri(getUri())
                .uriParams(getUriParams())
                .version(getVersion())
                .createdAt(getCreatedAt())
                .workMem(getWorkMem())
                .sharedBuffersPercentage(getSharedBuffersPercentage())
                .pgSettings(getPgSettings())
                .maxConnections(getMaxConnections())
                .users(getUsers());
        return builder;
    }

    /**
     * Class to build instances of {@link DbaasServicePg}.
     */
    public static class Builder {
        private String name;
        private String type;
        private String plan;
        private PGBouncerConnectionPoolingSettings pgbouncerSettings;
        private LocalDateTime updatedAt;
        private Long nodeCount;
        private ConnectionInfo2 connectionInfo;
        private BackupSchedule backupSchedule;
        private Long nodeCpuCount;
        private List<DbaasIntegration> integrations;
        private String zone;
        private List<DbaasNodeState> nodeStates;
        private List<ConnectionPool> connectionPools;
        private EnumServiceStateEnum state;
        private TimescaleDBExtensionConfigurationValues timescaledbSettings;
        private List<String> databases;
        private List<String> ipFilter;
        private List<DbaasServiceBackup> backups;
        private Boolean terminationProtection;
        private List<DbaasServiceNotification> notifications;
        private List<Component> components;
        private EnumPgSynchronousReplicationEnum synchronousReplication;
        private PGLookoutSettings pglookoutSettings;
        private DbaasServiceMaintenance maintenance;
        private Long diskSize;
        private Long nodeMemory;
        private String uri;
        private Object uriParams;
        private String version;
        private LocalDateTime createdAt;
        private Long workMem;
        private Long sharedBuffersPercentage;
        private PostgresqlConfConfigurationValues pgSettings;
        private Long maxConnections;
        private List<User2> users;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  name  String value for name.
         * @param  type  String value for type.
         * @param  plan  String value for plan.
         */
        public Builder(String name, String type, String plan) {
            this.name = name;
            this.type = type;
            this.plan = plan;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for plan.
         * @param  plan  String value for plan.
         * @return Builder
         */
        public Builder plan(String plan) {
            this.plan = plan;
            return this;
        }

        /**
         * Setter for pgbouncerSettings.
         * @param  pgbouncerSettings  PGBouncerConnectionPoolingSettings value for
         *         pgbouncerSettings.
         * @return Builder
         */
        public Builder pgbouncerSettings(PGBouncerConnectionPoolingSettings pgbouncerSettings) {
            this.pgbouncerSettings = pgbouncerSettings;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for nodeCount.
         * @param  nodeCount  Long value for nodeCount.
         * @return Builder
         */
        public Builder nodeCount(Long nodeCount) {
            this.nodeCount = nodeCount;
            return this;
        }

        /**
         * Setter for connectionInfo.
         * @param  connectionInfo  ConnectionInfo2 value for connectionInfo.
         * @return Builder
         */
        public Builder connectionInfo(ConnectionInfo2 connectionInfo) {
            this.connectionInfo = connectionInfo;
            return this;
        }

        /**
         * Setter for backupSchedule.
         * @param  backupSchedule  BackupSchedule value for backupSchedule.
         * @return Builder
         */
        public Builder backupSchedule(BackupSchedule backupSchedule) {
            this.backupSchedule = backupSchedule;
            return this;
        }

        /**
         * Setter for nodeCpuCount.
         * @param  nodeCpuCount  Long value for nodeCpuCount.
         * @return Builder
         */
        public Builder nodeCpuCount(Long nodeCpuCount) {
            this.nodeCpuCount = nodeCpuCount;
            return this;
        }

        /**
         * Setter for integrations.
         * @param  integrations  List of DbaasIntegration value for integrations.
         * @return Builder
         */
        public Builder integrations(List<DbaasIntegration> integrations) {
            this.integrations = integrations;
            return this;
        }

        /**
         * Setter for zone.
         * @param  zone  String value for zone.
         * @return Builder
         */
        public Builder zone(String zone) {
            this.zone = zone;
            return this;
        }

        /**
         * Setter for nodeStates.
         * @param  nodeStates  List of DbaasNodeState value for nodeStates.
         * @return Builder
         */
        public Builder nodeStates(List<DbaasNodeState> nodeStates) {
            this.nodeStates = nodeStates;
            return this;
        }

        /**
         * Setter for connectionPools.
         * @param  connectionPools  List of ConnectionPool value for connectionPools.
         * @return Builder
         */
        public Builder connectionPools(List<ConnectionPool> connectionPools) {
            this.connectionPools = connectionPools;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  EnumServiceStateEnum value for state.
         * @return Builder
         */
        public Builder state(EnumServiceStateEnum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for timescaledbSettings.
         * @param  timescaledbSettings  TimescaleDBExtensionConfigurationValues value for
         *         timescaledbSettings.
         * @return Builder
         */
        public Builder timescaledbSettings(
                TimescaleDBExtensionConfigurationValues timescaledbSettings) {
            this.timescaledbSettings = timescaledbSettings;
            return this;
        }

        /**
         * Setter for databases.
         * @param  databases  List of String value for databases.
         * @return Builder
         */
        public Builder databases(List<String> databases) {
            this.databases = databases;
            return this;
        }

        /**
         * Setter for ipFilter.
         * @param  ipFilter  List of String value for ipFilter.
         * @return Builder
         */
        public Builder ipFilter(List<String> ipFilter) {
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * Setter for backups.
         * @param  backups  List of DbaasServiceBackup value for backups.
         * @return Builder
         */
        public Builder backups(List<DbaasServiceBackup> backups) {
            this.backups = backups;
            return this;
        }

        /**
         * Setter for terminationProtection.
         * @param  terminationProtection  Boolean value for terminationProtection.
         * @return Builder
         */
        public Builder terminationProtection(Boolean terminationProtection) {
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Setter for notifications.
         * @param  notifications  List of DbaasServiceNotification value for notifications.
         * @return Builder
         */
        public Builder notifications(List<DbaasServiceNotification> notifications) {
            this.notifications = notifications;
            return this;
        }

        /**
         * Setter for components.
         * @param  components  List of Component value for components.
         * @return Builder
         */
        public Builder components(List<Component> components) {
            this.components = components;
            return this;
        }

        /**
         * Setter for synchronousReplication.
         * @param  synchronousReplication  EnumPgSynchronousReplicationEnum value for
         *         synchronousReplication.
         * @return Builder
         */
        public Builder synchronousReplication(
                EnumPgSynchronousReplicationEnum synchronousReplication) {
            this.synchronousReplication = synchronousReplication;
            return this;
        }

        /**
         * Setter for pglookoutSettings.
         * @param  pglookoutSettings  PGLookoutSettings value for pglookoutSettings.
         * @return Builder
         */
        public Builder pglookoutSettings(PGLookoutSettings pglookoutSettings) {
            this.pglookoutSettings = pglookoutSettings;
            return this;
        }

        /**
         * Setter for maintenance.
         * @param  maintenance  DbaasServiceMaintenance value for maintenance.
         * @return Builder
         */
        public Builder maintenance(DbaasServiceMaintenance maintenance) {
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Setter for diskSize.
         * @param  diskSize  Long value for diskSize.
         * @return Builder
         */
        public Builder diskSize(Long diskSize) {
            this.diskSize = diskSize;
            return this;
        }

        /**
         * Setter for nodeMemory.
         * @param  nodeMemory  Long value for nodeMemory.
         * @return Builder
         */
        public Builder nodeMemory(Long nodeMemory) {
            this.nodeMemory = nodeMemory;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for uriParams.
         * @param  uriParams  Object value for uriParams.
         * @return Builder
         */
        public Builder uriParams(Object uriParams) {
            this.uriParams = uriParams;
            return this;
        }

        /**
         * Setter for version.
         * @param  version  String value for version.
         * @return Builder
         */
        public Builder version(String version) {
            this.version = version;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for workMem.
         * @param  workMem  Long value for workMem.
         * @return Builder
         */
        public Builder workMem(Long workMem) {
            this.workMem = workMem;
            return this;
        }

        /**
         * Setter for sharedBuffersPercentage.
         * @param  sharedBuffersPercentage  Long value for sharedBuffersPercentage.
         * @return Builder
         */
        public Builder sharedBuffersPercentage(Long sharedBuffersPercentage) {
            this.sharedBuffersPercentage = sharedBuffersPercentage;
            return this;
        }

        /**
         * Setter for pgSettings.
         * @param  pgSettings  PostgresqlConfConfigurationValues value for pgSettings.
         * @return Builder
         */
        public Builder pgSettings(PostgresqlConfConfigurationValues pgSettings) {
            this.pgSettings = pgSettings;
            return this;
        }

        /**
         * Setter for maxConnections.
         * @param  maxConnections  Long value for maxConnections.
         * @return Builder
         */
        public Builder maxConnections(Long maxConnections) {
            this.maxConnections = maxConnections;
            return this;
        }

        /**
         * Setter for users.
         * @param  users  List of User2 value for users.
         * @return Builder
         */
        public Builder users(List<User2> users) {
            this.users = users;
            return this;
        }

        /**
         * Builds a new {@link DbaasServicePg} object using the set fields.
         * @return {@link DbaasServicePg}
         */
        public DbaasServicePg build() {
            return new DbaasServicePg(name, type, plan, pgbouncerSettings, updatedAt, nodeCount,
                    connectionInfo, backupSchedule, nodeCpuCount, integrations, zone, nodeStates,
                    connectionPools, state, timescaledbSettings, databases, ipFilter, backups,
                    terminationProtection, notifications, components, synchronousReplication,
                    pglookoutSettings, maintenance, diskSize, nodeMemory, uri, uriParams, version,
                    createdAt, workMem, sharedBuffersPercentage, pgSettings, maxConnections, users);
        }
    }
}
