/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.SpeakeasyMetadata;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class ListEventsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from")
    private Optional<? extends OffsetDateTime> from;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=to")
    private Optional<? extends OffsetDateTime> to;

    public ListEventsRequest(
            Optional<? extends OffsetDateTime> from,
            Optional<? extends OffsetDateTime> to) {
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(to, "to");
        this.from = from;
        this.to = to;
    }

    public Optional<? extends OffsetDateTime> from() {
        return from;
    }

    public Optional<? extends OffsetDateTime> to() {
        return to;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListEventsRequest withFrom(OffsetDateTime from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    public ListEventsRequest withFrom(Optional<? extends OffsetDateTime> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public ListEventsRequest withTo(OffsetDateTime to) {
        Utils.checkNotNull(to, "to");
        this.to = Optional.ofNullable(to);
        return this;
    }

    public ListEventsRequest withTo(Optional<? extends OffsetDateTime> to) {
        Utils.checkNotNull(to, "to");
        this.to = to;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListEventsRequest other = (ListEventsRequest) o;
        return 
            java.util.Objects.deepEquals(this.from, other.from) &&
            java.util.Objects.deepEquals(this.to, other.to);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            from,
            to);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListEventsRequest.class,
                "from", from,
                "to", to);
    }
    
    public final static class Builder {
 
        private Optional<? extends OffsetDateTime> from = Optional.empty();
 
        private Optional<? extends OffsetDateTime> to = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder from(OffsetDateTime from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        public Builder from(Optional<? extends OffsetDateTime> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        public Builder to(OffsetDateTime to) {
            Utils.checkNotNull(to, "to");
            this.to = Optional.ofNullable(to);
            return this;
        }

        public Builder to(Optional<? extends OffsetDateTime> to) {
            Utils.checkNotNull(to, "to");
            this.to = to;
            return this;
        }
        
        public ListEventsRequest build() {
            return new ListEventsRequest(
                from,
                to);
        }
    }
}

