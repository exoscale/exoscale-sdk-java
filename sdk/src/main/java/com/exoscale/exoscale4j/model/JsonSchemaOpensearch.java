/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.exoscale4j.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.exoscale.exoscale4j.model.OpensearchEmailSenderSettings;
import com.exoscale.exoscale4j.model.OpensearchISMHistorySettings;
import com.exoscale.exoscale4j.model.OpensearchSecurityPluginSettings;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * JsonSchemaOpensearch
 */
@JsonPropertyOrder({
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_SEARCH_THROTTLED_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_ANALYZE_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_GET_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_GET_QUEUE_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_INDICES_RECOVERY_MAX_CONCURRENT_FILE_CHUNKS,
  JsonSchemaOpensearch.JSON_PROPERTY_INDICES_QUERIES_CACHE_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_SEARCH_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_INDICES_RECOVERY_MAX_BYTES_PER_SEC,
  JsonSchemaOpensearch.JSON_PROPERTY_HTTP_MAX_INITIAL_LINE_LENGTH,
  JsonSchemaOpensearch.JSON_PROPERTY_ENABLE_SECURITY_AUDIT,
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_WRITE_QUEUE_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_SCRIPT_MAX_COMPILATIONS_RATE,
  JsonSchemaOpensearch.JSON_PROPERTY_SEARCH_MAX_BUCKETS,
  JsonSchemaOpensearch.JSON_PROPERTY_REINDEX_REMOTE_WHITELIST,
  JsonSchemaOpensearch.JSON_PROPERTY_OVERRIDE_MAIN_RESPONSE_VERSION,
  JsonSchemaOpensearch.JSON_PROPERTY_HTTP_MAX_HEADER_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_EMAIL_SENDER,
  JsonSchemaOpensearch.JSON_PROPERTY_INDICES_FIELDDATA_CACHE_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_ACTION_DESTRUCTIVE_REQUIRES_NAME,
  JsonSchemaOpensearch.JSON_PROPERTY_PLUGINS_ALERTING_FILTER_BY_BACKEND_ROLES,
  JsonSchemaOpensearch.JSON_PROPERTY_INDICES_MEMORY_INDEX_BUFFER_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_FORCE_MERGE_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_AUTH_FAILURE_LISTENERS,
  JsonSchemaOpensearch.JSON_PROPERTY_ISM_HISTORY,
  JsonSchemaOpensearch.JSON_PROPERTY_CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES,
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_ANALYZE_QUEUE_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_ACTION_AUTO_CREATE_INDEX_ENABLED,
  JsonSchemaOpensearch.JSON_PROPERTY_HTTP_MAX_CONTENT_LENGTH,
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_WRITE_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_SEARCH_QUEUE_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_INDICES_QUERY_BOOL_MAX_CLAUSE_COUNT,
  JsonSchemaOpensearch.JSON_PROPERTY_THREAD_POOL_SEARCH_THROTTLED_QUEUE_SIZE,
  JsonSchemaOpensearch.JSON_PROPERTY_CLUSTER_MAX_SHARDS_PER_NODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-09T23:00:30.419743+02:00[Europe/Vienna]", comments = "Generator version: 7.4.0")
public class JsonSchemaOpensearch {
  public static final String JSON_PROPERTY_THREAD_POOL_SEARCH_THROTTLED_SIZE = "thread_pool_search_throttled_size";
  private Integer threadPoolSearchThrottledSize;

  public static final String JSON_PROPERTY_THREAD_POOL_ANALYZE_SIZE = "thread_pool_analyze_size";
  private Integer threadPoolAnalyzeSize;

  public static final String JSON_PROPERTY_THREAD_POOL_GET_SIZE = "thread_pool_get_size";
  private Integer threadPoolGetSize;

  public static final String JSON_PROPERTY_THREAD_POOL_GET_QUEUE_SIZE = "thread_pool_get_queue_size";
  private Integer threadPoolGetQueueSize;

  public static final String JSON_PROPERTY_INDICES_RECOVERY_MAX_CONCURRENT_FILE_CHUNKS = "indices_recovery_max_concurrent_file_chunks";
  private Integer indicesRecoveryMaxConcurrentFileChunks;

  public static final String JSON_PROPERTY_INDICES_QUERIES_CACHE_SIZE = "indices_queries_cache_size";
  private Integer indicesQueriesCacheSize;

  public static final String JSON_PROPERTY_THREAD_POOL_SEARCH_SIZE = "thread_pool_search_size";
  private Integer threadPoolSearchSize;

  public static final String JSON_PROPERTY_INDICES_RECOVERY_MAX_BYTES_PER_SEC = "indices_recovery_max_bytes_per_sec";
  private Integer indicesRecoveryMaxBytesPerSec;

  public static final String JSON_PROPERTY_HTTP_MAX_INITIAL_LINE_LENGTH = "http_max_initial_line_length";
  private Integer httpMaxInitialLineLength;

  public static final String JSON_PROPERTY_ENABLE_SECURITY_AUDIT = "enable_security_audit";
  private Boolean enableSecurityAudit = false;

  public static final String JSON_PROPERTY_THREAD_POOL_WRITE_QUEUE_SIZE = "thread_pool_write_queue_size";
  private Integer threadPoolWriteQueueSize;

  public static final String JSON_PROPERTY_SCRIPT_MAX_COMPILATIONS_RATE = "script_max_compilations_rate";
  private String scriptMaxCompilationsRate;

  public static final String JSON_PROPERTY_SEARCH_MAX_BUCKETS = "search_max_buckets";
  private JsonNullable<Integer> searchMaxBuckets = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_REINDEX_REMOTE_WHITELIST = "reindex_remote_whitelist";
  private JsonNullable<List<String>> reindexRemoteWhitelist = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_OVERRIDE_MAIN_RESPONSE_VERSION = "override_main_response_version";
  private Boolean overrideMainResponseVersion;

  public static final String JSON_PROPERTY_HTTP_MAX_HEADER_SIZE = "http_max_header_size";
  private Integer httpMaxHeaderSize;

  public static final String JSON_PROPERTY_EMAIL_SENDER = "email-sender";
  private OpensearchEmailSenderSettings emailSender;

  public static final String JSON_PROPERTY_INDICES_FIELDDATA_CACHE_SIZE = "indices_fielddata_cache_size";
  private JsonNullable<Integer> indicesFielddataCacheSize = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_ACTION_DESTRUCTIVE_REQUIRES_NAME = "action_destructive_requires_name";
  private JsonNullable<Boolean> actionDestructiveRequiresName = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_PLUGINS_ALERTING_FILTER_BY_BACKEND_ROLES = "plugins_alerting_filter_by_backend_roles";
  private Boolean pluginsAlertingFilterByBackendRoles;

  public static final String JSON_PROPERTY_INDICES_MEMORY_INDEX_BUFFER_SIZE = "indices_memory_index_buffer_size";
  private Integer indicesMemoryIndexBufferSize;

  public static final String JSON_PROPERTY_THREAD_POOL_FORCE_MERGE_SIZE = "thread_pool_force_merge_size";
  private Integer threadPoolForceMergeSize;

  public static final String JSON_PROPERTY_AUTH_FAILURE_LISTENERS = "auth_failure_listeners";
  private OpensearchSecurityPluginSettings authFailureListeners;

  public static final String JSON_PROPERTY_ISM_HISTORY = "ism-history";
  private OpensearchISMHistorySettings ismHistory;

  public static final String JSON_PROPERTY_CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES = "cluster_routing_allocation_node_concurrent_recoveries";
  private Integer clusterRoutingAllocationNodeConcurrentRecoveries;

  public static final String JSON_PROPERTY_THREAD_POOL_ANALYZE_QUEUE_SIZE = "thread_pool_analyze_queue_size";
  private Integer threadPoolAnalyzeQueueSize;

  public static final String JSON_PROPERTY_ACTION_AUTO_CREATE_INDEX_ENABLED = "action_auto_create_index_enabled";
  private Boolean actionAutoCreateIndexEnabled;

  public static final String JSON_PROPERTY_HTTP_MAX_CONTENT_LENGTH = "http_max_content_length";
  private Integer httpMaxContentLength;

  public static final String JSON_PROPERTY_THREAD_POOL_WRITE_SIZE = "thread_pool_write_size";
  private Integer threadPoolWriteSize;

  public static final String JSON_PROPERTY_THREAD_POOL_SEARCH_QUEUE_SIZE = "thread_pool_search_queue_size";
  private Integer threadPoolSearchQueueSize;

  public static final String JSON_PROPERTY_INDICES_QUERY_BOOL_MAX_CLAUSE_COUNT = "indices_query_bool_max_clause_count";
  private Integer indicesQueryBoolMaxClauseCount;

  public static final String JSON_PROPERTY_THREAD_POOL_SEARCH_THROTTLED_QUEUE_SIZE = "thread_pool_search_throttled_queue_size";
  private Integer threadPoolSearchThrottledQueueSize;

  public static final String JSON_PROPERTY_CLUSTER_MAX_SHARDS_PER_NODE = "cluster_max_shards_per_node";
  private Integer clusterMaxShardsPerNode;

  public JsonSchemaOpensearch() { 
  }

  public JsonSchemaOpensearch threadPoolSearchThrottledSize(Integer threadPoolSearchThrottledSize) {
    this.threadPoolSearchThrottledSize = threadPoolSearchThrottledSize;
    return this;
  }

   /**
   * Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
   * minimum: 1
   * maximum: 128
   * @return threadPoolSearchThrottledSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_SEARCH_THROTTLED_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolSearchThrottledSize() {
    return threadPoolSearchThrottledSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_SEARCH_THROTTLED_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolSearchThrottledSize(Integer threadPoolSearchThrottledSize) {
    this.threadPoolSearchThrottledSize = threadPoolSearchThrottledSize;
  }


  public JsonSchemaOpensearch threadPoolAnalyzeSize(Integer threadPoolAnalyzeSize) {
    this.threadPoolAnalyzeSize = threadPoolAnalyzeSize;
    return this;
  }

   /**
   * Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
   * minimum: 1
   * maximum: 128
   * @return threadPoolAnalyzeSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_ANALYZE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolAnalyzeSize() {
    return threadPoolAnalyzeSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_ANALYZE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolAnalyzeSize(Integer threadPoolAnalyzeSize) {
    this.threadPoolAnalyzeSize = threadPoolAnalyzeSize;
  }


  public JsonSchemaOpensearch threadPoolGetSize(Integer threadPoolGetSize) {
    this.threadPoolGetSize = threadPoolGetSize;
    return this;
  }

   /**
   * Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
   * minimum: 1
   * maximum: 128
   * @return threadPoolGetSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_GET_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolGetSize() {
    return threadPoolGetSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_GET_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolGetSize(Integer threadPoolGetSize) {
    this.threadPoolGetSize = threadPoolGetSize;
  }


  public JsonSchemaOpensearch threadPoolGetQueueSize(Integer threadPoolGetQueueSize) {
    this.threadPoolGetQueueSize = threadPoolGetQueueSize;
    return this;
  }

   /**
   * Size for the thread pool queue. See documentation for exact details.
   * minimum: 10
   * maximum: 2000
   * @return threadPoolGetQueueSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_GET_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolGetQueueSize() {
    return threadPoolGetQueueSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_GET_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolGetQueueSize(Integer threadPoolGetQueueSize) {
    this.threadPoolGetQueueSize = threadPoolGetQueueSize;
  }


  public JsonSchemaOpensearch indicesRecoveryMaxConcurrentFileChunks(Integer indicesRecoveryMaxConcurrentFileChunks) {
    this.indicesRecoveryMaxConcurrentFileChunks = indicesRecoveryMaxConcurrentFileChunks;
    return this;
  }

   /**
   * Number of file chunks sent in parallel for each recovery. Defaults to 2.
   * minimum: 2
   * maximum: 5
   * @return indicesRecoveryMaxConcurrentFileChunks
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDICES_RECOVERY_MAX_CONCURRENT_FILE_CHUNKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIndicesRecoveryMaxConcurrentFileChunks() {
    return indicesRecoveryMaxConcurrentFileChunks;
  }


  @JsonProperty(JSON_PROPERTY_INDICES_RECOVERY_MAX_CONCURRENT_FILE_CHUNKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndicesRecoveryMaxConcurrentFileChunks(Integer indicesRecoveryMaxConcurrentFileChunks) {
    this.indicesRecoveryMaxConcurrentFileChunks = indicesRecoveryMaxConcurrentFileChunks;
  }


  public JsonSchemaOpensearch indicesQueriesCacheSize(Integer indicesQueriesCacheSize) {
    this.indicesQueriesCacheSize = indicesQueriesCacheSize;
    return this;
  }

   /**
   * Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other OpenSearch functionality.
   * minimum: 3
   * maximum: 40
   * @return indicesQueriesCacheSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDICES_QUERIES_CACHE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIndicesQueriesCacheSize() {
    return indicesQueriesCacheSize;
  }


  @JsonProperty(JSON_PROPERTY_INDICES_QUERIES_CACHE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndicesQueriesCacheSize(Integer indicesQueriesCacheSize) {
    this.indicesQueriesCacheSize = indicesQueriesCacheSize;
  }


  public JsonSchemaOpensearch threadPoolSearchSize(Integer threadPoolSearchSize) {
    this.threadPoolSearchSize = threadPoolSearchSize;
    return this;
  }

   /**
   * Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
   * minimum: 1
   * maximum: 128
   * @return threadPoolSearchSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_SEARCH_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolSearchSize() {
    return threadPoolSearchSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_SEARCH_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolSearchSize(Integer threadPoolSearchSize) {
    this.threadPoolSearchSize = threadPoolSearchSize;
  }


  public JsonSchemaOpensearch indicesRecoveryMaxBytesPerSec(Integer indicesRecoveryMaxBytesPerSec) {
    this.indicesRecoveryMaxBytesPerSec = indicesRecoveryMaxBytesPerSec;
    return this;
  }

   /**
   * Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb
   * minimum: 40
   * maximum: 400
   * @return indicesRecoveryMaxBytesPerSec
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDICES_RECOVERY_MAX_BYTES_PER_SEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIndicesRecoveryMaxBytesPerSec() {
    return indicesRecoveryMaxBytesPerSec;
  }


  @JsonProperty(JSON_PROPERTY_INDICES_RECOVERY_MAX_BYTES_PER_SEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndicesRecoveryMaxBytesPerSec(Integer indicesRecoveryMaxBytesPerSec) {
    this.indicesRecoveryMaxBytesPerSec = indicesRecoveryMaxBytesPerSec;
  }


  public JsonSchemaOpensearch httpMaxInitialLineLength(Integer httpMaxInitialLineLength) {
    this.httpMaxInitialLineLength = httpMaxInitialLineLength;
    return this;
  }

   /**
   * The max length of an HTTP URL, in bytes
   * minimum: 1024
   * maximum: 65536
   * @return httpMaxInitialLineLength
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_MAX_INITIAL_LINE_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHttpMaxInitialLineLength() {
    return httpMaxInitialLineLength;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_MAX_INITIAL_LINE_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpMaxInitialLineLength(Integer httpMaxInitialLineLength) {
    this.httpMaxInitialLineLength = httpMaxInitialLineLength;
  }


  public JsonSchemaOpensearch enableSecurityAudit(Boolean enableSecurityAudit) {
    this.enableSecurityAudit = enableSecurityAudit;
    return this;
  }

   /**
   * Get enableSecurityAudit
   * @return enableSecurityAudit
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_SECURITY_AUDIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableSecurityAudit() {
    return enableSecurityAudit;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SECURITY_AUDIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSecurityAudit(Boolean enableSecurityAudit) {
    this.enableSecurityAudit = enableSecurityAudit;
  }


  public JsonSchemaOpensearch threadPoolWriteQueueSize(Integer threadPoolWriteQueueSize) {
    this.threadPoolWriteQueueSize = threadPoolWriteQueueSize;
    return this;
  }

   /**
   * Size for the thread pool queue. See documentation for exact details.
   * minimum: 10
   * maximum: 2000
   * @return threadPoolWriteQueueSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_WRITE_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolWriteQueueSize() {
    return threadPoolWriteQueueSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_WRITE_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolWriteQueueSize(Integer threadPoolWriteQueueSize) {
    this.threadPoolWriteQueueSize = threadPoolWriteQueueSize;
  }


  public JsonSchemaOpensearch scriptMaxCompilationsRate(String scriptMaxCompilationsRate) {
    this.scriptMaxCompilationsRate = scriptMaxCompilationsRate;
    return this;
  }

   /**
   * Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context
   * @return scriptMaxCompilationsRate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCRIPT_MAX_COMPILATIONS_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScriptMaxCompilationsRate() {
    return scriptMaxCompilationsRate;
  }


  @JsonProperty(JSON_PROPERTY_SCRIPT_MAX_COMPILATIONS_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScriptMaxCompilationsRate(String scriptMaxCompilationsRate) {
    this.scriptMaxCompilationsRate = scriptMaxCompilationsRate;
  }


  public JsonSchemaOpensearch searchMaxBuckets(Integer searchMaxBuckets) {
    this.searchMaxBuckets = JsonNullable.<Integer>of(searchMaxBuckets);
    return this;
  }

   /**
   * Maximum number of aggregation buckets allowed in a single response. OpenSearch default value is used when this is not defined.
   * minimum: 1
   * maximum: 1000000
   * @return searchMaxBuckets
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getSearchMaxBuckets() {
        return searchMaxBuckets.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SEARCH_MAX_BUCKETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getSearchMaxBuckets_JsonNullable() {
    return searchMaxBuckets;
  }
  
  @JsonProperty(JSON_PROPERTY_SEARCH_MAX_BUCKETS)
  public void setSearchMaxBuckets_JsonNullable(JsonNullable<Integer> searchMaxBuckets) {
    this.searchMaxBuckets = searchMaxBuckets;
  }

  public void setSearchMaxBuckets(Integer searchMaxBuckets) {
    this.searchMaxBuckets = JsonNullable.<Integer>of(searchMaxBuckets);
  }


  public JsonSchemaOpensearch reindexRemoteWhitelist(List<String> reindexRemoteWhitelist) {
    this.reindexRemoteWhitelist = JsonNullable.<List<String>>of(reindexRemoteWhitelist);
    return this;
  }

  public JsonSchemaOpensearch addReindexRemoteWhitelistItem(String reindexRemoteWhitelistItem) {
    if (this.reindexRemoteWhitelist == null || !this.reindexRemoteWhitelist.isPresent()) {
      this.reindexRemoteWhitelist = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.reindexRemoteWhitelist.get().add(reindexRemoteWhitelistItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
   * @return reindexRemoteWhitelist
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<String> getReindexRemoteWhitelist() {
        return reindexRemoteWhitelist.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REINDEX_REMOTE_WHITELIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getReindexRemoteWhitelist_JsonNullable() {
    return reindexRemoteWhitelist;
  }
  
  @JsonProperty(JSON_PROPERTY_REINDEX_REMOTE_WHITELIST)
  public void setReindexRemoteWhitelist_JsonNullable(JsonNullable<List<String>> reindexRemoteWhitelist) {
    this.reindexRemoteWhitelist = reindexRemoteWhitelist;
  }

  public void setReindexRemoteWhitelist(List<String> reindexRemoteWhitelist) {
    this.reindexRemoteWhitelist = JsonNullable.<List<String>>of(reindexRemoteWhitelist);
  }


  public JsonSchemaOpensearch overrideMainResponseVersion(Boolean overrideMainResponseVersion) {
    this.overrideMainResponseVersion = overrideMainResponseVersion;
    return this;
  }

   /**
   * Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false
   * @return overrideMainResponseVersion
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OVERRIDE_MAIN_RESPONSE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOverrideMainResponseVersion() {
    return overrideMainResponseVersion;
  }


  @JsonProperty(JSON_PROPERTY_OVERRIDE_MAIN_RESPONSE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverrideMainResponseVersion(Boolean overrideMainResponseVersion) {
    this.overrideMainResponseVersion = overrideMainResponseVersion;
  }


  public JsonSchemaOpensearch httpMaxHeaderSize(Integer httpMaxHeaderSize) {
    this.httpMaxHeaderSize = httpMaxHeaderSize;
    return this;
  }

   /**
   * The max size of allowed headers, in bytes
   * minimum: 1024
   * maximum: 262144
   * @return httpMaxHeaderSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_MAX_HEADER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHttpMaxHeaderSize() {
    return httpMaxHeaderSize;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_MAX_HEADER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpMaxHeaderSize(Integer httpMaxHeaderSize) {
    this.httpMaxHeaderSize = httpMaxHeaderSize;
  }


  public JsonSchemaOpensearch emailSender(OpensearchEmailSenderSettings emailSender) {
    this.emailSender = emailSender;
    return this;
  }

   /**
   * Get emailSender
   * @return emailSender
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL_SENDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OpensearchEmailSenderSettings getEmailSender() {
    return emailSender;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_SENDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmailSender(OpensearchEmailSenderSettings emailSender) {
    this.emailSender = emailSender;
  }


  public JsonSchemaOpensearch indicesFielddataCacheSize(Integer indicesFielddataCacheSize) {
    this.indicesFielddataCacheSize = JsonNullable.<Integer>of(indicesFielddataCacheSize);
    return this;
  }

   /**
   * Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.
   * minimum: 3
   * maximum: 100
   * @return indicesFielddataCacheSize
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getIndicesFielddataCacheSize() {
        return indicesFielddataCacheSize.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INDICES_FIELDDATA_CACHE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getIndicesFielddataCacheSize_JsonNullable() {
    return indicesFielddataCacheSize;
  }
  
  @JsonProperty(JSON_PROPERTY_INDICES_FIELDDATA_CACHE_SIZE)
  public void setIndicesFielddataCacheSize_JsonNullable(JsonNullable<Integer> indicesFielddataCacheSize) {
    this.indicesFielddataCacheSize = indicesFielddataCacheSize;
  }

  public void setIndicesFielddataCacheSize(Integer indicesFielddataCacheSize) {
    this.indicesFielddataCacheSize = JsonNullable.<Integer>of(indicesFielddataCacheSize);
  }


  public JsonSchemaOpensearch actionDestructiveRequiresName(Boolean actionDestructiveRequiresName) {
    this.actionDestructiveRequiresName = JsonNullable.<Boolean>of(actionDestructiveRequiresName);
    return this;
  }

   /**
   * Get actionDestructiveRequiresName
   * @return actionDestructiveRequiresName
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getActionDestructiveRequiresName() {
        return actionDestructiveRequiresName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ACTION_DESTRUCTIVE_REQUIRES_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getActionDestructiveRequiresName_JsonNullable() {
    return actionDestructiveRequiresName;
  }
  
  @JsonProperty(JSON_PROPERTY_ACTION_DESTRUCTIVE_REQUIRES_NAME)
  public void setActionDestructiveRequiresName_JsonNullable(JsonNullable<Boolean> actionDestructiveRequiresName) {
    this.actionDestructiveRequiresName = actionDestructiveRequiresName;
  }

  public void setActionDestructiveRequiresName(Boolean actionDestructiveRequiresName) {
    this.actionDestructiveRequiresName = JsonNullable.<Boolean>of(actionDestructiveRequiresName);
  }


  public JsonSchemaOpensearch pluginsAlertingFilterByBackendRoles(Boolean pluginsAlertingFilterByBackendRoles) {
    this.pluginsAlertingFilterByBackendRoles = pluginsAlertingFilterByBackendRoles;
    return this;
  }

   /**
   * Enable or disable filtering of alerting by backend roles. Requires Security plugin. Defaults to false
   * @return pluginsAlertingFilterByBackendRoles
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLUGINS_ALERTING_FILTER_BY_BACKEND_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPluginsAlertingFilterByBackendRoles() {
    return pluginsAlertingFilterByBackendRoles;
  }


  @JsonProperty(JSON_PROPERTY_PLUGINS_ALERTING_FILTER_BY_BACKEND_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginsAlertingFilterByBackendRoles(Boolean pluginsAlertingFilterByBackendRoles) {
    this.pluginsAlertingFilterByBackendRoles = pluginsAlertingFilterByBackendRoles;
  }


  public JsonSchemaOpensearch indicesMemoryIndexBufferSize(Integer indicesMemoryIndexBufferSize) {
    this.indicesMemoryIndexBufferSize = indicesMemoryIndexBufferSize;
    return this;
  }

   /**
   * Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.
   * minimum: 3
   * maximum: 40
   * @return indicesMemoryIndexBufferSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDICES_MEMORY_INDEX_BUFFER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIndicesMemoryIndexBufferSize() {
    return indicesMemoryIndexBufferSize;
  }


  @JsonProperty(JSON_PROPERTY_INDICES_MEMORY_INDEX_BUFFER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndicesMemoryIndexBufferSize(Integer indicesMemoryIndexBufferSize) {
    this.indicesMemoryIndexBufferSize = indicesMemoryIndexBufferSize;
  }


  public JsonSchemaOpensearch threadPoolForceMergeSize(Integer threadPoolForceMergeSize) {
    this.threadPoolForceMergeSize = threadPoolForceMergeSize;
    return this;
  }

   /**
   * Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
   * minimum: 1
   * maximum: 128
   * @return threadPoolForceMergeSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_FORCE_MERGE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolForceMergeSize() {
    return threadPoolForceMergeSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_FORCE_MERGE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolForceMergeSize(Integer threadPoolForceMergeSize) {
    this.threadPoolForceMergeSize = threadPoolForceMergeSize;
  }


  public JsonSchemaOpensearch authFailureListeners(OpensearchSecurityPluginSettings authFailureListeners) {
    this.authFailureListeners = authFailureListeners;
    return this;
  }

   /**
   * Get authFailureListeners
   * @return authFailureListeners
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTH_FAILURE_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OpensearchSecurityPluginSettings getAuthFailureListeners() {
    return authFailureListeners;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_FAILURE_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthFailureListeners(OpensearchSecurityPluginSettings authFailureListeners) {
    this.authFailureListeners = authFailureListeners;
  }


  public JsonSchemaOpensearch ismHistory(OpensearchISMHistorySettings ismHistory) {
    this.ismHistory = ismHistory;
    return this;
  }

   /**
   * Get ismHistory
   * @return ismHistory
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISM_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OpensearchISMHistorySettings getIsmHistory() {
    return ismHistory;
  }


  @JsonProperty(JSON_PROPERTY_ISM_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsmHistory(OpensearchISMHistorySettings ismHistory) {
    this.ismHistory = ismHistory;
  }


  public JsonSchemaOpensearch clusterRoutingAllocationNodeConcurrentRecoveries(Integer clusterRoutingAllocationNodeConcurrentRecoveries) {
    this.clusterRoutingAllocationNodeConcurrentRecoveries = clusterRoutingAllocationNodeConcurrentRecoveries;
    return this;
  }

   /**
   * How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to 2.
   * minimum: 2
   * maximum: 16
   * @return clusterRoutingAllocationNodeConcurrentRecoveries
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getClusterRoutingAllocationNodeConcurrentRecoveries() {
    return clusterRoutingAllocationNodeConcurrentRecoveries;
  }


  @JsonProperty(JSON_PROPERTY_CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClusterRoutingAllocationNodeConcurrentRecoveries(Integer clusterRoutingAllocationNodeConcurrentRecoveries) {
    this.clusterRoutingAllocationNodeConcurrentRecoveries = clusterRoutingAllocationNodeConcurrentRecoveries;
  }


  public JsonSchemaOpensearch threadPoolAnalyzeQueueSize(Integer threadPoolAnalyzeQueueSize) {
    this.threadPoolAnalyzeQueueSize = threadPoolAnalyzeQueueSize;
    return this;
  }

   /**
   * Size for the thread pool queue. See documentation for exact details.
   * minimum: 10
   * maximum: 2000
   * @return threadPoolAnalyzeQueueSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_ANALYZE_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolAnalyzeQueueSize() {
    return threadPoolAnalyzeQueueSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_ANALYZE_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolAnalyzeQueueSize(Integer threadPoolAnalyzeQueueSize) {
    this.threadPoolAnalyzeQueueSize = threadPoolAnalyzeQueueSize;
  }


  public JsonSchemaOpensearch actionAutoCreateIndexEnabled(Boolean actionAutoCreateIndexEnabled) {
    this.actionAutoCreateIndexEnabled = actionAutoCreateIndexEnabled;
    return this;
  }

   /**
   * Explicitly allow or block automatic creation of indices. Defaults to true
   * @return actionAutoCreateIndexEnabled
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTION_AUTO_CREATE_INDEX_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActionAutoCreateIndexEnabled() {
    return actionAutoCreateIndexEnabled;
  }


  @JsonProperty(JSON_PROPERTY_ACTION_AUTO_CREATE_INDEX_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActionAutoCreateIndexEnabled(Boolean actionAutoCreateIndexEnabled) {
    this.actionAutoCreateIndexEnabled = actionAutoCreateIndexEnabled;
  }


  public JsonSchemaOpensearch httpMaxContentLength(Integer httpMaxContentLength) {
    this.httpMaxContentLength = httpMaxContentLength;
    return this;
  }

   /**
   * Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes.
   * minimum: 1
   * maximum: 2147483647
   * @return httpMaxContentLength
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_MAX_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHttpMaxContentLength() {
    return httpMaxContentLength;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_MAX_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpMaxContentLength(Integer httpMaxContentLength) {
    this.httpMaxContentLength = httpMaxContentLength;
  }


  public JsonSchemaOpensearch threadPoolWriteSize(Integer threadPoolWriteSize) {
    this.threadPoolWriteSize = threadPoolWriteSize;
    return this;
  }

   /**
   * Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
   * minimum: 1
   * maximum: 128
   * @return threadPoolWriteSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_WRITE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolWriteSize() {
    return threadPoolWriteSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_WRITE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolWriteSize(Integer threadPoolWriteSize) {
    this.threadPoolWriteSize = threadPoolWriteSize;
  }


  public JsonSchemaOpensearch threadPoolSearchQueueSize(Integer threadPoolSearchQueueSize) {
    this.threadPoolSearchQueueSize = threadPoolSearchQueueSize;
    return this;
  }

   /**
   * Size for the thread pool queue. See documentation for exact details.
   * minimum: 10
   * maximum: 2000
   * @return threadPoolSearchQueueSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_SEARCH_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolSearchQueueSize() {
    return threadPoolSearchQueueSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_SEARCH_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolSearchQueueSize(Integer threadPoolSearchQueueSize) {
    this.threadPoolSearchQueueSize = threadPoolSearchQueueSize;
  }


  public JsonSchemaOpensearch indicesQueryBoolMaxClauseCount(Integer indicesQueryBoolMaxClauseCount) {
    this.indicesQueryBoolMaxClauseCount = indicesQueryBoolMaxClauseCount;
    return this;
  }

   /**
   * Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.
   * minimum: 64
   * maximum: 4096
   * @return indicesQueryBoolMaxClauseCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDICES_QUERY_BOOL_MAX_CLAUSE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIndicesQueryBoolMaxClauseCount() {
    return indicesQueryBoolMaxClauseCount;
  }


  @JsonProperty(JSON_PROPERTY_INDICES_QUERY_BOOL_MAX_CLAUSE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndicesQueryBoolMaxClauseCount(Integer indicesQueryBoolMaxClauseCount) {
    this.indicesQueryBoolMaxClauseCount = indicesQueryBoolMaxClauseCount;
  }


  public JsonSchemaOpensearch threadPoolSearchThrottledQueueSize(Integer threadPoolSearchThrottledQueueSize) {
    this.threadPoolSearchThrottledQueueSize = threadPoolSearchThrottledQueueSize;
    return this;
  }

   /**
   * Size for the thread pool queue. See documentation for exact details.
   * minimum: 10
   * maximum: 2000
   * @return threadPoolSearchThrottledQueueSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_POOL_SEARCH_THROTTLED_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThreadPoolSearchThrottledQueueSize() {
    return threadPoolSearchThrottledQueueSize;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_POOL_SEARCH_THROTTLED_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadPoolSearchThrottledQueueSize(Integer threadPoolSearchThrottledQueueSize) {
    this.threadPoolSearchThrottledQueueSize = threadPoolSearchThrottledQueueSize;
  }


  public JsonSchemaOpensearch clusterMaxShardsPerNode(Integer clusterMaxShardsPerNode) {
    this.clusterMaxShardsPerNode = clusterMaxShardsPerNode;
    return this;
  }

   /**
   * Controls the number of shards allowed in the cluster per data node
   * minimum: 100
   * maximum: 10000
   * @return clusterMaxShardsPerNode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLUSTER_MAX_SHARDS_PER_NODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getClusterMaxShardsPerNode() {
    return clusterMaxShardsPerNode;
  }


  @JsonProperty(JSON_PROPERTY_CLUSTER_MAX_SHARDS_PER_NODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClusterMaxShardsPerNode(Integer clusterMaxShardsPerNode) {
    this.clusterMaxShardsPerNode = clusterMaxShardsPerNode;
  }


  /**
   * Return true if this json-schema-opensearch object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchemaOpensearch jsonSchemaOpensearch = (JsonSchemaOpensearch) o;
    return Objects.equals(this.threadPoolSearchThrottledSize, jsonSchemaOpensearch.threadPoolSearchThrottledSize) &&
        Objects.equals(this.threadPoolAnalyzeSize, jsonSchemaOpensearch.threadPoolAnalyzeSize) &&
        Objects.equals(this.threadPoolGetSize, jsonSchemaOpensearch.threadPoolGetSize) &&
        Objects.equals(this.threadPoolGetQueueSize, jsonSchemaOpensearch.threadPoolGetQueueSize) &&
        Objects.equals(this.indicesRecoveryMaxConcurrentFileChunks, jsonSchemaOpensearch.indicesRecoveryMaxConcurrentFileChunks) &&
        Objects.equals(this.indicesQueriesCacheSize, jsonSchemaOpensearch.indicesQueriesCacheSize) &&
        Objects.equals(this.threadPoolSearchSize, jsonSchemaOpensearch.threadPoolSearchSize) &&
        Objects.equals(this.indicesRecoveryMaxBytesPerSec, jsonSchemaOpensearch.indicesRecoveryMaxBytesPerSec) &&
        Objects.equals(this.httpMaxInitialLineLength, jsonSchemaOpensearch.httpMaxInitialLineLength) &&
        Objects.equals(this.enableSecurityAudit, jsonSchemaOpensearch.enableSecurityAudit) &&
        Objects.equals(this.threadPoolWriteQueueSize, jsonSchemaOpensearch.threadPoolWriteQueueSize) &&
        Objects.equals(this.scriptMaxCompilationsRate, jsonSchemaOpensearch.scriptMaxCompilationsRate) &&
        equalsNullable(this.searchMaxBuckets, jsonSchemaOpensearch.searchMaxBuckets) &&
        equalsNullable(this.reindexRemoteWhitelist, jsonSchemaOpensearch.reindexRemoteWhitelist) &&
        Objects.equals(this.overrideMainResponseVersion, jsonSchemaOpensearch.overrideMainResponseVersion) &&
        Objects.equals(this.httpMaxHeaderSize, jsonSchemaOpensearch.httpMaxHeaderSize) &&
        Objects.equals(this.emailSender, jsonSchemaOpensearch.emailSender) &&
        equalsNullable(this.indicesFielddataCacheSize, jsonSchemaOpensearch.indicesFielddataCacheSize) &&
        equalsNullable(this.actionDestructiveRequiresName, jsonSchemaOpensearch.actionDestructiveRequiresName) &&
        Objects.equals(this.pluginsAlertingFilterByBackendRoles, jsonSchemaOpensearch.pluginsAlertingFilterByBackendRoles) &&
        Objects.equals(this.indicesMemoryIndexBufferSize, jsonSchemaOpensearch.indicesMemoryIndexBufferSize) &&
        Objects.equals(this.threadPoolForceMergeSize, jsonSchemaOpensearch.threadPoolForceMergeSize) &&
        Objects.equals(this.authFailureListeners, jsonSchemaOpensearch.authFailureListeners) &&
        Objects.equals(this.ismHistory, jsonSchemaOpensearch.ismHistory) &&
        Objects.equals(this.clusterRoutingAllocationNodeConcurrentRecoveries, jsonSchemaOpensearch.clusterRoutingAllocationNodeConcurrentRecoveries) &&
        Objects.equals(this.threadPoolAnalyzeQueueSize, jsonSchemaOpensearch.threadPoolAnalyzeQueueSize) &&
        Objects.equals(this.actionAutoCreateIndexEnabled, jsonSchemaOpensearch.actionAutoCreateIndexEnabled) &&
        Objects.equals(this.httpMaxContentLength, jsonSchemaOpensearch.httpMaxContentLength) &&
        Objects.equals(this.threadPoolWriteSize, jsonSchemaOpensearch.threadPoolWriteSize) &&
        Objects.equals(this.threadPoolSearchQueueSize, jsonSchemaOpensearch.threadPoolSearchQueueSize) &&
        Objects.equals(this.indicesQueryBoolMaxClauseCount, jsonSchemaOpensearch.indicesQueryBoolMaxClauseCount) &&
        Objects.equals(this.threadPoolSearchThrottledQueueSize, jsonSchemaOpensearch.threadPoolSearchThrottledQueueSize) &&
        Objects.equals(this.clusterMaxShardsPerNode, jsonSchemaOpensearch.clusterMaxShardsPerNode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(threadPoolSearchThrottledSize, threadPoolAnalyzeSize, threadPoolGetSize, threadPoolGetQueueSize, indicesRecoveryMaxConcurrentFileChunks, indicesQueriesCacheSize, threadPoolSearchSize, indicesRecoveryMaxBytesPerSec, httpMaxInitialLineLength, enableSecurityAudit, threadPoolWriteQueueSize, scriptMaxCompilationsRate, hashCodeNullable(searchMaxBuckets), hashCodeNullable(reindexRemoteWhitelist), overrideMainResponseVersion, httpMaxHeaderSize, emailSender, hashCodeNullable(indicesFielddataCacheSize), hashCodeNullable(actionDestructiveRequiresName), pluginsAlertingFilterByBackendRoles, indicesMemoryIndexBufferSize, threadPoolForceMergeSize, authFailureListeners, ismHistory, clusterRoutingAllocationNodeConcurrentRecoveries, threadPoolAnalyzeQueueSize, actionAutoCreateIndexEnabled, httpMaxContentLength, threadPoolWriteSize, threadPoolSearchQueueSize, indicesQueryBoolMaxClauseCount, threadPoolSearchThrottledQueueSize, clusterMaxShardsPerNode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchemaOpensearch {\n");
    sb.append("    threadPoolSearchThrottledSize: ").append(toIndentedString(threadPoolSearchThrottledSize)).append("\n");
    sb.append("    threadPoolAnalyzeSize: ").append(toIndentedString(threadPoolAnalyzeSize)).append("\n");
    sb.append("    threadPoolGetSize: ").append(toIndentedString(threadPoolGetSize)).append("\n");
    sb.append("    threadPoolGetQueueSize: ").append(toIndentedString(threadPoolGetQueueSize)).append("\n");
    sb.append("    indicesRecoveryMaxConcurrentFileChunks: ").append(toIndentedString(indicesRecoveryMaxConcurrentFileChunks)).append("\n");
    sb.append("    indicesQueriesCacheSize: ").append(toIndentedString(indicesQueriesCacheSize)).append("\n");
    sb.append("    threadPoolSearchSize: ").append(toIndentedString(threadPoolSearchSize)).append("\n");
    sb.append("    indicesRecoveryMaxBytesPerSec: ").append(toIndentedString(indicesRecoveryMaxBytesPerSec)).append("\n");
    sb.append("    httpMaxInitialLineLength: ").append(toIndentedString(httpMaxInitialLineLength)).append("\n");
    sb.append("    enableSecurityAudit: ").append(toIndentedString(enableSecurityAudit)).append("\n");
    sb.append("    threadPoolWriteQueueSize: ").append(toIndentedString(threadPoolWriteQueueSize)).append("\n");
    sb.append("    scriptMaxCompilationsRate: ").append(toIndentedString(scriptMaxCompilationsRate)).append("\n");
    sb.append("    searchMaxBuckets: ").append(toIndentedString(searchMaxBuckets)).append("\n");
    sb.append("    reindexRemoteWhitelist: ").append(toIndentedString(reindexRemoteWhitelist)).append("\n");
    sb.append("    overrideMainResponseVersion: ").append(toIndentedString(overrideMainResponseVersion)).append("\n");
    sb.append("    httpMaxHeaderSize: ").append(toIndentedString(httpMaxHeaderSize)).append("\n");
    sb.append("    emailSender: ").append(toIndentedString(emailSender)).append("\n");
    sb.append("    indicesFielddataCacheSize: ").append(toIndentedString(indicesFielddataCacheSize)).append("\n");
    sb.append("    actionDestructiveRequiresName: ").append(toIndentedString(actionDestructiveRequiresName)).append("\n");
    sb.append("    pluginsAlertingFilterByBackendRoles: ").append(toIndentedString(pluginsAlertingFilterByBackendRoles)).append("\n");
    sb.append("    indicesMemoryIndexBufferSize: ").append(toIndentedString(indicesMemoryIndexBufferSize)).append("\n");
    sb.append("    threadPoolForceMergeSize: ").append(toIndentedString(threadPoolForceMergeSize)).append("\n");
    sb.append("    authFailureListeners: ").append(toIndentedString(authFailureListeners)).append("\n");
    sb.append("    ismHistory: ").append(toIndentedString(ismHistory)).append("\n");
    sb.append("    clusterRoutingAllocationNodeConcurrentRecoveries: ").append(toIndentedString(clusterRoutingAllocationNodeConcurrentRecoveries)).append("\n");
    sb.append("    threadPoolAnalyzeQueueSize: ").append(toIndentedString(threadPoolAnalyzeQueueSize)).append("\n");
    sb.append("    actionAutoCreateIndexEnabled: ").append(toIndentedString(actionAutoCreateIndexEnabled)).append("\n");
    sb.append("    httpMaxContentLength: ").append(toIndentedString(httpMaxContentLength)).append("\n");
    sb.append("    threadPoolWriteSize: ").append(toIndentedString(threadPoolWriteSize)).append("\n");
    sb.append("    threadPoolSearchQueueSize: ").append(toIndentedString(threadPoolSearchQueueSize)).append("\n");
    sb.append("    indicesQueryBoolMaxClauseCount: ").append(toIndentedString(indicesQueryBoolMaxClauseCount)).append("\n");
    sb.append("    threadPoolSearchThrottledQueueSize: ").append(toIndentedString(threadPoolSearchThrottledQueueSize)).append("\n");
    sb.append("    clusterMaxShardsPerNode: ").append(toIndentedString(clusterMaxShardsPerNode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `thread_pool_search_throttled_size` to the URL query string
    if (getThreadPoolSearchThrottledSize() != null) {
      joiner.add(String.format("%sthread_pool_search_throttled_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolSearchThrottledSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thread_pool_analyze_size` to the URL query string
    if (getThreadPoolAnalyzeSize() != null) {
      joiner.add(String.format("%sthread_pool_analyze_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolAnalyzeSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thread_pool_get_size` to the URL query string
    if (getThreadPoolGetSize() != null) {
      joiner.add(String.format("%sthread_pool_get_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolGetSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thread_pool_get_queue_size` to the URL query string
    if (getThreadPoolGetQueueSize() != null) {
      joiner.add(String.format("%sthread_pool_get_queue_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolGetQueueSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `indices_recovery_max_concurrent_file_chunks` to the URL query string
    if (getIndicesRecoveryMaxConcurrentFileChunks() != null) {
      joiner.add(String.format("%sindices_recovery_max_concurrent_file_chunks%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIndicesRecoveryMaxConcurrentFileChunks()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `indices_queries_cache_size` to the URL query string
    if (getIndicesQueriesCacheSize() != null) {
      joiner.add(String.format("%sindices_queries_cache_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIndicesQueriesCacheSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thread_pool_search_size` to the URL query string
    if (getThreadPoolSearchSize() != null) {
      joiner.add(String.format("%sthread_pool_search_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolSearchSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `indices_recovery_max_bytes_per_sec` to the URL query string
    if (getIndicesRecoveryMaxBytesPerSec() != null) {
      joiner.add(String.format("%sindices_recovery_max_bytes_per_sec%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIndicesRecoveryMaxBytesPerSec()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `http_max_initial_line_length` to the URL query string
    if (getHttpMaxInitialLineLength() != null) {
      joiner.add(String.format("%shttp_max_initial_line_length%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHttpMaxInitialLineLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `enable_security_audit` to the URL query string
    if (getEnableSecurityAudit() != null) {
      joiner.add(String.format("%senable_security_audit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnableSecurityAudit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thread_pool_write_queue_size` to the URL query string
    if (getThreadPoolWriteQueueSize() != null) {
      joiner.add(String.format("%sthread_pool_write_queue_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolWriteQueueSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `script_max_compilations_rate` to the URL query string
    if (getScriptMaxCompilationsRate() != null) {
      joiner.add(String.format("%sscript_max_compilations_rate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScriptMaxCompilationsRate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `search_max_buckets` to the URL query string
    if (getSearchMaxBuckets() != null) {
      joiner.add(String.format("%ssearch_max_buckets%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSearchMaxBuckets()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `reindex_remote_whitelist` to the URL query string
    if (getReindexRemoteWhitelist() != null) {
      for (int i = 0; i < getReindexRemoteWhitelist().size(); i++) {
        joiner.add(String.format("%sreindex_remote_whitelist%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getReindexRemoteWhitelist().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `override_main_response_version` to the URL query string
    if (getOverrideMainResponseVersion() != null) {
      joiner.add(String.format("%soverride_main_response_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOverrideMainResponseVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `http_max_header_size` to the URL query string
    if (getHttpMaxHeaderSize() != null) {
      joiner.add(String.format("%shttp_max_header_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHttpMaxHeaderSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `email-sender` to the URL query string
    if (getEmailSender() != null) {
      joiner.add(getEmailSender().toUrlQueryString(prefix + "email-sender" + suffix));
    }

    // add `indices_fielddata_cache_size` to the URL query string
    if (getIndicesFielddataCacheSize() != null) {
      joiner.add(String.format("%sindices_fielddata_cache_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIndicesFielddataCacheSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `action_destructive_requires_name` to the URL query string
    if (getActionDestructiveRequiresName() != null) {
      joiner.add(String.format("%saction_destructive_requires_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActionDestructiveRequiresName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `plugins_alerting_filter_by_backend_roles` to the URL query string
    if (getPluginsAlertingFilterByBackendRoles() != null) {
      joiner.add(String.format("%splugins_alerting_filter_by_backend_roles%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPluginsAlertingFilterByBackendRoles()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `indices_memory_index_buffer_size` to the URL query string
    if (getIndicesMemoryIndexBufferSize() != null) {
      joiner.add(String.format("%sindices_memory_index_buffer_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIndicesMemoryIndexBufferSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thread_pool_force_merge_size` to the URL query string
    if (getThreadPoolForceMergeSize() != null) {
      joiner.add(String.format("%sthread_pool_force_merge_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolForceMergeSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `auth_failure_listeners` to the URL query string
    if (getAuthFailureListeners() != null) {
      joiner.add(getAuthFailureListeners().toUrlQueryString(prefix + "auth_failure_listeners" + suffix));
    }

    // add `ism-history` to the URL query string
    if (getIsmHistory() != null) {
      joiner.add(getIsmHistory().toUrlQueryString(prefix + "ism-history" + suffix));
    }

    // add `cluster_routing_allocation_node_concurrent_recoveries` to the URL query string
    if (getClusterRoutingAllocationNodeConcurrentRecoveries() != null) {
      joiner.add(String.format("%scluster_routing_allocation_node_concurrent_recoveries%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClusterRoutingAllocationNodeConcurrentRecoveries()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thread_pool_analyze_queue_size` to the URL query string
    if (getThreadPoolAnalyzeQueueSize() != null) {
      joiner.add(String.format("%sthread_pool_analyze_queue_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolAnalyzeQueueSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `action_auto_create_index_enabled` to the URL query string
    if (getActionAutoCreateIndexEnabled() != null) {
      joiner.add(String.format("%saction_auto_create_index_enabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActionAutoCreateIndexEnabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `http_max_content_length` to the URL query string
    if (getHttpMaxContentLength() != null) {
      joiner.add(String.format("%shttp_max_content_length%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHttpMaxContentLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thread_pool_write_size` to the URL query string
    if (getThreadPoolWriteSize() != null) {
      joiner.add(String.format("%sthread_pool_write_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolWriteSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thread_pool_search_queue_size` to the URL query string
    if (getThreadPoolSearchQueueSize() != null) {
      joiner.add(String.format("%sthread_pool_search_queue_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolSearchQueueSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `indices_query_bool_max_clause_count` to the URL query string
    if (getIndicesQueryBoolMaxClauseCount() != null) {
      joiner.add(String.format("%sindices_query_bool_max_clause_count%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIndicesQueryBoolMaxClauseCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thread_pool_search_throttled_queue_size` to the URL query string
    if (getThreadPoolSearchThrottledQueueSize() != null) {
      joiner.add(String.format("%sthread_pool_search_throttled_queue_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadPoolSearchThrottledQueueSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cluster_max_shards_per_node` to the URL query string
    if (getClusterMaxShardsPerNode() != null) {
      joiner.add(String.format("%scluster_max_shards_per_node%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClusterMaxShardsPerNode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

