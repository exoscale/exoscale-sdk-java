/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreatePrivateNetworkRequestBody {

    /**
     * Private Network name
     */
    @JsonProperty("name")
    private String name;

    /**
     * Private Network description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Private Network netmask
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("netmask")
    private Optional<? extends String> netmask;

    /**
     * Private Network start IP address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start-ip")
    private Optional<? extends String> startIp;

    /**
     * Private Network end IP address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end-ip")
    private Optional<? extends String> endIp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    public CreatePrivateNetworkRequestBody(
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("netmask") Optional<? extends String> netmask,
            @JsonProperty("start-ip") Optional<? extends String> startIp,
            @JsonProperty("end-ip") Optional<? extends String> endIp,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(netmask, "netmask");
        Utils.checkNotNull(startIp, "startIp");
        Utils.checkNotNull(endIp, "endIp");
        Utils.checkNotNull(labels, "labels");
        this.name = name;
        this.description = description;
        this.netmask = netmask;
        this.startIp = startIp;
        this.endIp = endIp;
        this.labels = labels;
    }

    /**
     * Private Network name
     */
    public String name() {
        return name;
    }

    /**
     * Private Network description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Private Network netmask
     */
    public Optional<? extends String> netmask() {
        return netmask;
    }

    /**
     * Private Network start IP address
     */
    public Optional<? extends String> startIp() {
        return startIp;
    }

    /**
     * Private Network end IP address
     */
    public Optional<? extends String> endIp() {
        return endIp;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Private Network name
     */
    public CreatePrivateNetworkRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Private Network description
     */
    public CreatePrivateNetworkRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Private Network description
     */
    public CreatePrivateNetworkRequestBody withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Private Network netmask
     */
    public CreatePrivateNetworkRequestBody withNetmask(String netmask) {
        Utils.checkNotNull(netmask, "netmask");
        this.netmask = Optional.ofNullable(netmask);
        return this;
    }

    /**
     * Private Network netmask
     */
    public CreatePrivateNetworkRequestBody withNetmask(Optional<? extends String> netmask) {
        Utils.checkNotNull(netmask, "netmask");
        this.netmask = netmask;
        return this;
    }

    /**
     * Private Network start IP address
     */
    public CreatePrivateNetworkRequestBody withStartIp(String startIp) {
        Utils.checkNotNull(startIp, "startIp");
        this.startIp = Optional.ofNullable(startIp);
        return this;
    }

    /**
     * Private Network start IP address
     */
    public CreatePrivateNetworkRequestBody withStartIp(Optional<? extends String> startIp) {
        Utils.checkNotNull(startIp, "startIp");
        this.startIp = startIp;
        return this;
    }

    /**
     * Private Network end IP address
     */
    public CreatePrivateNetworkRequestBody withEndIp(String endIp) {
        Utils.checkNotNull(endIp, "endIp");
        this.endIp = Optional.ofNullable(endIp);
        return this;
    }

    /**
     * Private Network end IP address
     */
    public CreatePrivateNetworkRequestBody withEndIp(Optional<? extends String> endIp) {
        Utils.checkNotNull(endIp, "endIp");
        this.endIp = endIp;
        return this;
    }

    public CreatePrivateNetworkRequestBody withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public CreatePrivateNetworkRequestBody withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreatePrivateNetworkRequestBody other = (CreatePrivateNetworkRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.netmask, other.netmask) &&
            java.util.Objects.deepEquals(this.startIp, other.startIp) &&
            java.util.Objects.deepEquals(this.endIp, other.endIp) &&
            java.util.Objects.deepEquals(this.labels, other.labels);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            description,
            netmask,
            startIp,
            endIp,
            labels);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreatePrivateNetworkRequestBody.class,
                "name", name,
                "description", description,
                "netmask", netmask,
                "startIp", startIp,
                "endIp", endIp,
                "labels", labels);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends String> netmask = Optional.empty();
 
        private Optional<? extends String> startIp = Optional.empty();
 
        private Optional<? extends String> endIp = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Private Network name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Private Network description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Private Network description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Private Network netmask
         */
        public Builder netmask(String netmask) {
            Utils.checkNotNull(netmask, "netmask");
            this.netmask = Optional.ofNullable(netmask);
            return this;
        }

        /**
         * Private Network netmask
         */
        public Builder netmask(Optional<? extends String> netmask) {
            Utils.checkNotNull(netmask, "netmask");
            this.netmask = netmask;
            return this;
        }

        /**
         * Private Network start IP address
         */
        public Builder startIp(String startIp) {
            Utils.checkNotNull(startIp, "startIp");
            this.startIp = Optional.ofNullable(startIp);
            return this;
        }

        /**
         * Private Network start IP address
         */
        public Builder startIp(Optional<? extends String> startIp) {
            Utils.checkNotNull(startIp, "startIp");
            this.startIp = startIp;
            return this;
        }

        /**
         * Private Network end IP address
         */
        public Builder endIp(String endIp) {
            Utils.checkNotNull(endIp, "endIp");
            this.endIp = Optional.ofNullable(endIp);
            return this;
        }

        /**
         * Private Network end IP address
         */
        public Builder endIp(Optional<? extends String> endIp) {
            Utils.checkNotNull(endIp, "endIp");
            this.endIp = endIp;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }
        
        public CreatePrivateNetworkRequestBody build() {
            return new CreatePrivateNetworkRequestBody(
                name,
                description,
                netmask,
                startIp,
                endIp,
                labels);
        }
    }
}

