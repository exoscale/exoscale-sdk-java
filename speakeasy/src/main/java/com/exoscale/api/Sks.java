/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api;

import com.exoscale.api.models.errors.SDKError;
import com.exoscale.api.models.operations.SDKMethodInterfaces.*;
import com.exoscale.api.utils.HTTPClient;
import com.exoscale.api.utils.HTTPRequest;
import com.exoscale.api.utils.JSON;
import com.exoscale.api.utils.SerializedBody;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * SKS is Exoscale's scalable Kubernetes service which provides managed Kubernetes
 * control planes with integrated support for Exoscale instance pools ands network load
 * balancers.
 * [Read more](https://www.exoscale.com/scalable-kubernetes-service/)
 * https://www.exoscale.com/scalable-kubernetes-service/ - Read more
 */
public class Sks implements
            MethodCallGenerateSksClusterKubeconfig,
            MethodCallUpdateSksNodepool,
            MethodCallGetSksNodepool,
            MethodCallDeleteSksNodepool,
            MethodCallGetSksClusterAuthorityCert,
            MethodCallListSksClusterDeprecatedResources,
            MethodCallScaleSksNodepool,
            MethodCallUpgradeSksClusterServiceLevel,
            MethodCallEvictSksNodepoolMembers,
            MethodCallCreateSksCluster,
            MethodCallListSksClusters,
            MethodCallDeleteSksCluster,
            MethodCallGetSksCluster,
            MethodCallUpdateSksCluster,
            MethodCallGetSksClusterInspection,
            MethodCallRotateSksCcmCredentials,
            MethodCallResetSksClusterField,
            MethodCallCreateSksNodepool,
            MethodCallResetSksNodepoolField,
            MethodCallRotateSksOperatorsCa,
            MethodCallListSksClusterVersions,
            MethodCallUpgradeSksCluster {

    private final SDKConfiguration sdkConfiguration;

    Sks(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.exoscale.api.models.operations.GenerateSksClusterKubeconfigRequestBuilder generateSksClusterKubeconfig() {
        return new com.exoscale.api.models.operations.GenerateSksClusterKubeconfigRequestBuilder(this);
    }

    /**
     * Generate a new Kubeconfig file for a SKS cluster
     * This operation returns a Kubeconfig file encoded in base64.
     * @param id
     * @param sksKubeconfigRequest Kubeconfig request for a SKS cluster
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GenerateSksClusterKubeconfigResponse generateSksClusterKubeconfig(
            String id,
            com.exoscale.api.models.components.SksKubeconfigRequest sksKubeconfigRequest) throws Exception {
        com.exoscale.api.models.operations.GenerateSksClusterKubeconfigRequest request =
            com.exoscale.api.models.operations.GenerateSksClusterKubeconfigRequest
                .builder()
                .id(id)
                .sksKubeconfigRequest(sksKubeconfigRequest)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GenerateSksClusterKubeconfigRequest.class,
                baseUrl,
                "/sks-cluster-kubeconfig/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "sksKubeconfigRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GenerateSksClusterKubeconfigResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GenerateSksClusterKubeconfigResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GenerateSksClusterKubeconfigResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.GenerateSksClusterKubeconfigResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.GenerateSksClusterKubeconfigResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateSksNodepoolRequestBuilder updateSksNodepool() {
        return new com.exoscale.api.models.operations.UpdateSksNodepoolRequestBuilder(this);
    }

    /**
     * Update an SKS Nodepool
     * @param id
     * @param sksNodepoolId
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateSksNodepoolResponse updateSksNodepool(
            String id,
            String sksNodepoolId,
            com.exoscale.api.models.operations.UpdateSksNodepoolRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateSksNodepoolRequest request =
            com.exoscale.api.models.operations.UpdateSksNodepoolRequest
                .builder()
                .id(id)
                .sksNodepoolId(sksNodepoolId)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateSksNodepoolRequest.class,
                baseUrl,
                "/sks-cluster/{id}/nodepool/{sks-nodepool-id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateSksNodepoolResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateSksNodepoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateSksNodepoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetSksNodepoolRequestBuilder getSksNodepool() {
        return new com.exoscale.api.models.operations.GetSksNodepoolRequestBuilder(this);
    }

    /**
     * Retrieve SKS Nodepool details
     * @param id
     * @param sksNodepoolId
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetSksNodepoolResponse getSksNodepool(
            String id,
            String sksNodepoolId) throws Exception {
        com.exoscale.api.models.operations.GetSksNodepoolRequest request =
            com.exoscale.api.models.operations.GetSksNodepoolRequest
                .builder()
                .id(id)
                .sksNodepoolId(sksNodepoolId)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetSksNodepoolRequest.class,
                baseUrl,
                "/sks-cluster/{id}/nodepool/{sks-nodepool-id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetSksNodepoolResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetSksNodepoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetSksNodepoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.SksNodepool out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.SksNodepool>() {});
                res.withSksNodepool(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteSksNodepoolRequestBuilder deleteSksNodepool() {
        return new com.exoscale.api.models.operations.DeleteSksNodepoolRequestBuilder(this);
    }

    /**
     * Delete an SKS Nodepool
     * @param id
     * @param sksNodepoolId
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteSksNodepoolResponse deleteSksNodepool(
            String id,
            String sksNodepoolId) throws Exception {
        com.exoscale.api.models.operations.DeleteSksNodepoolRequest request =
            com.exoscale.api.models.operations.DeleteSksNodepoolRequest
                .builder()
                .id(id)
                .sksNodepoolId(sksNodepoolId)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteSksNodepoolRequest.class,
                baseUrl,
                "/sks-cluster/{id}/nodepool/{sks-nodepool-id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteSksNodepoolResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteSksNodepoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteSksNodepoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetSksClusterAuthorityCertRequestBuilder getSksClusterAuthorityCert() {
        return new com.exoscale.api.models.operations.GetSksClusterAuthorityCertRequestBuilder(this);
    }

    /**
     * Get the certificate for a SKS cluster authority
     * This operation returns the certificate for the given SKS cluster authority encoded in base64.
     * @param id
     * @param authority
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetSksClusterAuthorityCertResponse getSksClusterAuthorityCert(
            String id,
            com.exoscale.api.models.operations.Authority authority) throws Exception {
        com.exoscale.api.models.operations.GetSksClusterAuthorityCertRequest request =
            com.exoscale.api.models.operations.GetSksClusterAuthorityCertRequest
                .builder()
                .id(id)
                .authority(authority)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetSksClusterAuthorityCertRequest.class,
                baseUrl,
                "/sks-cluster/{id}/authority/{authority}/cert",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetSksClusterAuthorityCertResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetSksClusterAuthorityCertResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetSksClusterAuthorityCertResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.GetSksClusterAuthorityCertResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.GetSksClusterAuthorityCertResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ListSksClusterDeprecatedResourcesRequestBuilder listSksClusterDeprecatedResources() {
        return new com.exoscale.api.models.operations.ListSksClusterDeprecatedResourcesRequestBuilder(this);
    }

    /**
     * Resources that are scheduled to be removed in future kubernetes releases
     * This operation returns the deprecated resources for a given cluster
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ListSksClusterDeprecatedResourcesResponse listSksClusterDeprecatedResources(
            String id) throws Exception {
        com.exoscale.api.models.operations.ListSksClusterDeprecatedResourcesRequest request =
            com.exoscale.api.models.operations.ListSksClusterDeprecatedResourcesRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ListSksClusterDeprecatedResourcesRequest.class,
                baseUrl,
                "/sks-cluster-deprecated-resources/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ListSksClusterDeprecatedResourcesResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ListSksClusterDeprecatedResourcesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ListSksClusterDeprecatedResourcesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.List<java.util.Map<String, String>> out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<java.util.List<java.util.Map<String, String>>>() {});
                res.withMaps(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ScaleSksNodepoolRequestBuilder scaleSksNodepool() {
        return new com.exoscale.api.models.operations.ScaleSksNodepoolRequestBuilder(this);
    }

    /**
     * Scale a SKS Nodepool
     * @param id
     * @param sksNodepoolId
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ScaleSksNodepoolResponse scaleSksNodepool(
            String id,
            String sksNodepoolId,
            com.exoscale.api.models.operations.ScaleSksNodepoolRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.ScaleSksNodepoolRequest request =
            com.exoscale.api.models.operations.ScaleSksNodepoolRequest
                .builder()
                .id(id)
                .sksNodepoolId(sksNodepoolId)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ScaleSksNodepoolRequest.class,
                baseUrl,
                "/sks-cluster/{id}/nodepool/{sks-nodepool-id}:scale",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ScaleSksNodepoolResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ScaleSksNodepoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ScaleSksNodepoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpgradeSksClusterServiceLevelRequestBuilder upgradeSksClusterServiceLevel() {
        return new com.exoscale.api.models.operations.UpgradeSksClusterServiceLevelRequestBuilder(this);
    }

    /**
     * Upgrade a SKS cluster to pro
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpgradeSksClusterServiceLevelResponse upgradeSksClusterServiceLevel(
            String id) throws Exception {
        com.exoscale.api.models.operations.UpgradeSksClusterServiceLevelRequest request =
            com.exoscale.api.models.operations.UpgradeSksClusterServiceLevelRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpgradeSksClusterServiceLevelRequest.class,
                baseUrl,
                "/sks-cluster/{id}/upgrade-service-level",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpgradeSksClusterServiceLevelResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpgradeSksClusterServiceLevelResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpgradeSksClusterServiceLevelResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.EvictSksNodepoolMembersRequestBuilder evictSksNodepoolMembers() {
        return new com.exoscale.api.models.operations.EvictSksNodepoolMembersRequestBuilder(this);
    }

    /**
     * Evict Nodepool members
     * This operation evicts the specified Compute instances member from the Nodepool, shrinking it to `&amp;lt;current nodepool size&amp;gt; - &amp;lt;# evicted members&amp;gt;`.
     * @param id
     * @param sksNodepoolId
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.EvictSksNodepoolMembersResponse evictSksNodepoolMembers(
            String id,
            String sksNodepoolId,
            com.exoscale.api.models.operations.EvictSksNodepoolMembersRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.EvictSksNodepoolMembersRequest request =
            com.exoscale.api.models.operations.EvictSksNodepoolMembersRequest
                .builder()
                .id(id)
                .sksNodepoolId(sksNodepoolId)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.EvictSksNodepoolMembersRequest.class,
                baseUrl,
                "/sks-cluster/{id}/nodepool/{sks-nodepool-id}:evict",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.EvictSksNodepoolMembersResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.EvictSksNodepoolMembersResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.EvictSksNodepoolMembersResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateSksClusterRequestBuilder createSksCluster() {
        return new com.exoscale.api.models.operations.CreateSksClusterRequestBuilder(this);
    }

    /**
     * Create an SKS cluster
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateSksClusterResponse createSksCluster(
            com.exoscale.api.models.operations.CreateSksClusterRequestBody request) throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/sks-cluster");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.exoscale.api.models.operations.CreateSksClusterRequestBody>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateSksClusterResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateSksClusterResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateSksClusterResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ListSksClustersRequestBuilder listSksClusters() {
        return new com.exoscale.api.models.operations.ListSksClustersRequestBuilder(this);
    }

    /**
     * List SKS clusters
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ListSksClustersResponse listSksClustersDirect() throws Exception {

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/sks-cluster");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ListSksClustersResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ListSksClustersResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ListSksClustersResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.ListSksClustersResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.ListSksClustersResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteSksClusterRequestBuilder deleteSksCluster() {
        return new com.exoscale.api.models.operations.DeleteSksClusterRequestBuilder(this);
    }

    /**
     * Delete an SKS cluster
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteSksClusterResponse deleteSksCluster(
            String id) throws Exception {
        com.exoscale.api.models.operations.DeleteSksClusterRequest request =
            com.exoscale.api.models.operations.DeleteSksClusterRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteSksClusterRequest.class,
                baseUrl,
                "/sks-cluster/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteSksClusterResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteSksClusterResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteSksClusterResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetSksClusterRequestBuilder getSksCluster() {
        return new com.exoscale.api.models.operations.GetSksClusterRequestBuilder(this);
    }

    /**
     * Retrieve SKS cluster details
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetSksClusterResponse getSksCluster(
            String id) throws Exception {
        com.exoscale.api.models.operations.GetSksClusterRequest request =
            com.exoscale.api.models.operations.GetSksClusterRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetSksClusterRequest.class,
                baseUrl,
                "/sks-cluster/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetSksClusterResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetSksClusterResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetSksClusterResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.SksCluster out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.SksCluster>() {});
                res.withSksCluster(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateSksClusterRequestBuilder updateSksCluster() {
        return new com.exoscale.api.models.operations.UpdateSksClusterRequestBuilder(this);
    }

    /**
     * Update an SKS cluster
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateSksClusterResponse updateSksCluster(
            String id,
            com.exoscale.api.models.operations.UpdateSksClusterRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateSksClusterRequest request =
            com.exoscale.api.models.operations.UpdateSksClusterRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateSksClusterRequest.class,
                baseUrl,
                "/sks-cluster/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateSksClusterResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateSksClusterResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateSksClusterResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetSksClusterInspectionRequestBuilder getSksClusterInspection() {
        return new com.exoscale.api.models.operations.GetSksClusterInspectionRequestBuilder(this);
    }

    /**
     * Get the latest inspection result
     * Helps troubleshoot common problems when deploying a kubernetes cluster. Inspections run every couple of minutes.
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetSksClusterInspectionResponse getSksClusterInspection(
            String id) throws Exception {
        com.exoscale.api.models.operations.GetSksClusterInspectionRequest request =
            com.exoscale.api.models.operations.GetSksClusterInspectionRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetSksClusterInspectionRequest.class,
                baseUrl,
                "/sks-cluster/{id}/inspection",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetSksClusterInspectionResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetSksClusterInspectionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetSksClusterInspectionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.lang.Object> out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<java.util.Map<String, java.lang.Object>>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.RotateSksCcmCredentialsRequestBuilder rotateSksCcmCredentials() {
        return new com.exoscale.api.models.operations.RotateSksCcmCredentialsRequestBuilder(this);
    }

    /**
     * Rotate Exoscale CCM credentials
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.RotateSksCcmCredentialsResponse rotateSksCcmCredentials(
            String id) throws Exception {
        com.exoscale.api.models.operations.RotateSksCcmCredentialsRequest request =
            com.exoscale.api.models.operations.RotateSksCcmCredentialsRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.RotateSksCcmCredentialsRequest.class,
                baseUrl,
                "/sks-cluster/{id}/rotate-ccm-credentials",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.RotateSksCcmCredentialsResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.RotateSksCcmCredentialsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.RotateSksCcmCredentialsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ResetSksClusterFieldRequestBuilder resetSksClusterField() {
        return new com.exoscale.api.models.operations.ResetSksClusterFieldRequestBuilder(this);
    }

    /**
     * Reset an SKS cluster field to its default value
     * @param id
     * @param field
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResetSksClusterFieldResponse resetSksClusterField(
            String id,
            com.exoscale.api.models.operations.ResetSksClusterFieldPathParamField field) throws Exception {
        com.exoscale.api.models.operations.ResetSksClusterFieldRequest request =
            com.exoscale.api.models.operations.ResetSksClusterFieldRequest
                .builder()
                .id(id)
                .field(field)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResetSksClusterFieldRequest.class,
                baseUrl,
                "/sks-cluster/{id}/{field}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResetSksClusterFieldResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResetSksClusterFieldResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResetSksClusterFieldResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.CreateSksNodepoolRequestBuilder createSksNodepool() {
        return new com.exoscale.api.models.operations.CreateSksNodepoolRequestBuilder(this);
    }

    /**
     * Create a new SKS Nodepool
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.CreateSksNodepoolResponse createSksNodepool(
            String id,
            com.exoscale.api.models.operations.CreateSksNodepoolRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.CreateSksNodepoolRequest request =
            com.exoscale.api.models.operations.CreateSksNodepoolRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.CreateSksNodepoolRequest.class,
                baseUrl,
                "/sks-cluster/{id}/nodepool",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.CreateSksNodepoolResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.CreateSksNodepoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.CreateSksNodepoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ResetSksNodepoolFieldRequestBuilder resetSksNodepoolField() {
        return new com.exoscale.api.models.operations.ResetSksNodepoolFieldRequestBuilder(this);
    }

    /**
     * Reset an SKS Nodepool field to its default value
     * @param id
     * @param sksNodepoolId
     * @param field
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResetSksNodepoolFieldResponse resetSksNodepoolField(
            String id,
            String sksNodepoolId,
            com.exoscale.api.models.operations.ResetSksNodepoolFieldPathParamField field) throws Exception {
        com.exoscale.api.models.operations.ResetSksNodepoolFieldRequest request =
            com.exoscale.api.models.operations.ResetSksNodepoolFieldRequest
                .builder()
                .id(id)
                .sksNodepoolId(sksNodepoolId)
                .field(field)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResetSksNodepoolFieldRequest.class,
                baseUrl,
                "/sks-cluster/{id}/nodepool/{sks-nodepool-id}/{field}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResetSksNodepoolFieldResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResetSksNodepoolFieldResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResetSksNodepoolFieldResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.RotateSksOperatorsCaRequestBuilder rotateSksOperatorsCa() {
        return new com.exoscale.api.models.operations.RotateSksOperatorsCaRequestBuilder(this);
    }

    /**
     * Rotate operators certificate authority
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.RotateSksOperatorsCaResponse rotateSksOperatorsCa(
            String id) throws Exception {
        com.exoscale.api.models.operations.RotateSksOperatorsCaRequest request =
            com.exoscale.api.models.operations.RotateSksOperatorsCaRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.RotateSksOperatorsCaRequest.class,
                baseUrl,
                "/sks-cluster/{id}/rotate-operators-ca",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.RotateSksOperatorsCaResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.RotateSksOperatorsCaResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.RotateSksOperatorsCaResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.ListSksClusterVersionsRequestBuilder listSksClusterVersions() {
        return new com.exoscale.api.models.operations.ListSksClusterVersionsRequestBuilder(this);
    }

    /**
     * List available versions for SKS clusters
     * @param includeDeprecated
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ListSksClusterVersionsResponse listSksClusterVersions(
            Optional<? extends String> includeDeprecated) throws Exception {
        com.exoscale.api.models.operations.ListSksClusterVersionsRequest request =
            com.exoscale.api.models.operations.ListSksClusterVersionsRequest
                .builder()
                .includeDeprecated(includeDeprecated)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                baseUrl,
                "/sks-cluster-version");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.exoscale.api.utils.Utils.getQueryParams(
                com.exoscale.api.models.operations.ListSksClusterVersionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ListSksClusterVersionsResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ListSksClusterVersionsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ListSksClusterVersionsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.operations.ListSksClusterVersionsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.operations.ListSksClusterVersionsResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpgradeSksClusterRequestBuilder upgradeSksCluster() {
        return new com.exoscale.api.models.operations.UpgradeSksClusterRequestBuilder(this);
    }

    /**
     * Upgrade an SKS cluster
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpgradeSksClusterResponse upgradeSksCluster(
            String id,
            com.exoscale.api.models.operations.UpgradeSksClusterRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpgradeSksClusterRequest request =
            com.exoscale.api.models.operations.UpgradeSksClusterRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpgradeSksClusterRequest.class,
                baseUrl,
                "/sks-cluster/{id}/upgrade",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpgradeSksClusterResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpgradeSksClusterResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpgradeSksClusterResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
