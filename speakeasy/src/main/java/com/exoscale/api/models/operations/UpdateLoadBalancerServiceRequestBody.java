/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class UpdateLoadBalancerServiceRequestBody {

    /**
     * Load Balancer Service name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Load Balancer Service description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Network traffic protocol
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    private Optional<? extends Protocol> protocol;

    /**
     * Load balancing strategy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strategy")
    private Optional<? extends Strategy> strategy;

    /**
     * Port exposed on the Load Balancer's public IP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<? extends Long> port;

    /**
     * Port on which the network traffic will be forwarded to on the receiving instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target-port")
    private Optional<? extends Long> targetPort;

    /**
     * Load Balancer Service healthcheck
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("healthcheck")
    private Optional<? extends com.exoscale.api.models.components.LoadBalancerServiceHealthcheck> healthcheck;

    public UpdateLoadBalancerServiceRequestBody(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("protocol") Optional<? extends Protocol> protocol,
            @JsonProperty("strategy") Optional<? extends Strategy> strategy,
            @JsonProperty("port") Optional<? extends Long> port,
            @JsonProperty("target-port") Optional<? extends Long> targetPort,
            @JsonProperty("healthcheck") Optional<? extends com.exoscale.api.models.components.LoadBalancerServiceHealthcheck> healthcheck) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(protocol, "protocol");
        Utils.checkNotNull(strategy, "strategy");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(targetPort, "targetPort");
        Utils.checkNotNull(healthcheck, "healthcheck");
        this.name = name;
        this.description = description;
        this.protocol = protocol;
        this.strategy = strategy;
        this.port = port;
        this.targetPort = targetPort;
        this.healthcheck = healthcheck;
    }

    /**
     * Load Balancer Service name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Load Balancer Service description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Network traffic protocol
     */
    public Optional<? extends Protocol> protocol() {
        return protocol;
    }

    /**
     * Load balancing strategy
     */
    public Optional<? extends Strategy> strategy() {
        return strategy;
    }

    /**
     * Port exposed on the Load Balancer's public IP
     */
    public Optional<? extends Long> port() {
        return port;
    }

    /**
     * Port on which the network traffic will be forwarded to on the receiving instance
     */
    public Optional<? extends Long> targetPort() {
        return targetPort;
    }

    /**
     * Load Balancer Service healthcheck
     */
    public Optional<? extends com.exoscale.api.models.components.LoadBalancerServiceHealthcheck> healthcheck() {
        return healthcheck;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Load Balancer Service name
     */
    public UpdateLoadBalancerServiceRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Load Balancer Service name
     */
    public UpdateLoadBalancerServiceRequestBody withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Load Balancer Service description
     */
    public UpdateLoadBalancerServiceRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Load Balancer Service description
     */
    public UpdateLoadBalancerServiceRequestBody withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Network traffic protocol
     */
    public UpdateLoadBalancerServiceRequestBody withProtocol(Protocol protocol) {
        Utils.checkNotNull(protocol, "protocol");
        this.protocol = Optional.ofNullable(protocol);
        return this;
    }

    /**
     * Network traffic protocol
     */
    public UpdateLoadBalancerServiceRequestBody withProtocol(Optional<? extends Protocol> protocol) {
        Utils.checkNotNull(protocol, "protocol");
        this.protocol = protocol;
        return this;
    }

    /**
     * Load balancing strategy
     */
    public UpdateLoadBalancerServiceRequestBody withStrategy(Strategy strategy) {
        Utils.checkNotNull(strategy, "strategy");
        this.strategy = Optional.ofNullable(strategy);
        return this;
    }

    /**
     * Load balancing strategy
     */
    public UpdateLoadBalancerServiceRequestBody withStrategy(Optional<? extends Strategy> strategy) {
        Utils.checkNotNull(strategy, "strategy");
        this.strategy = strategy;
        return this;
    }

    /**
     * Port exposed on the Load Balancer's public IP
     */
    public UpdateLoadBalancerServiceRequestBody withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * Port exposed on the Load Balancer's public IP
     */
    public UpdateLoadBalancerServiceRequestBody withPort(Optional<? extends Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * Port on which the network traffic will be forwarded to on the receiving instance
     */
    public UpdateLoadBalancerServiceRequestBody withTargetPort(long targetPort) {
        Utils.checkNotNull(targetPort, "targetPort");
        this.targetPort = Optional.ofNullable(targetPort);
        return this;
    }

    /**
     * Port on which the network traffic will be forwarded to on the receiving instance
     */
    public UpdateLoadBalancerServiceRequestBody withTargetPort(Optional<? extends Long> targetPort) {
        Utils.checkNotNull(targetPort, "targetPort");
        this.targetPort = targetPort;
        return this;
    }

    /**
     * Load Balancer Service healthcheck
     */
    public UpdateLoadBalancerServiceRequestBody withHealthcheck(com.exoscale.api.models.components.LoadBalancerServiceHealthcheck healthcheck) {
        Utils.checkNotNull(healthcheck, "healthcheck");
        this.healthcheck = Optional.ofNullable(healthcheck);
        return this;
    }

    /**
     * Load Balancer Service healthcheck
     */
    public UpdateLoadBalancerServiceRequestBody withHealthcheck(Optional<? extends com.exoscale.api.models.components.LoadBalancerServiceHealthcheck> healthcheck) {
        Utils.checkNotNull(healthcheck, "healthcheck");
        this.healthcheck = healthcheck;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateLoadBalancerServiceRequestBody other = (UpdateLoadBalancerServiceRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.protocol, other.protocol) &&
            java.util.Objects.deepEquals(this.strategy, other.strategy) &&
            java.util.Objects.deepEquals(this.port, other.port) &&
            java.util.Objects.deepEquals(this.targetPort, other.targetPort) &&
            java.util.Objects.deepEquals(this.healthcheck, other.healthcheck);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            description,
            protocol,
            strategy,
            port,
            targetPort,
            healthcheck);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateLoadBalancerServiceRequestBody.class,
                "name", name,
                "description", description,
                "protocol", protocol,
                "strategy", strategy,
                "port", port,
                "targetPort", targetPort,
                "healthcheck", healthcheck);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends Protocol> protocol = Optional.empty();
 
        private Optional<? extends Strategy> strategy = Optional.empty();
 
        private Optional<? extends Long> port = Optional.empty();
 
        private Optional<? extends Long> targetPort = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.LoadBalancerServiceHealthcheck> healthcheck = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Load Balancer Service name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Load Balancer Service name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Load Balancer Service description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Load Balancer Service description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Network traffic protocol
         */
        public Builder protocol(Protocol protocol) {
            Utils.checkNotNull(protocol, "protocol");
            this.protocol = Optional.ofNullable(protocol);
            return this;
        }

        /**
         * Network traffic protocol
         */
        public Builder protocol(Optional<? extends Protocol> protocol) {
            Utils.checkNotNull(protocol, "protocol");
            this.protocol = protocol;
            return this;
        }

        /**
         * Load balancing strategy
         */
        public Builder strategy(Strategy strategy) {
            Utils.checkNotNull(strategy, "strategy");
            this.strategy = Optional.ofNullable(strategy);
            return this;
        }

        /**
         * Load balancing strategy
         */
        public Builder strategy(Optional<? extends Strategy> strategy) {
            Utils.checkNotNull(strategy, "strategy");
            this.strategy = strategy;
            return this;
        }

        /**
         * Port exposed on the Load Balancer's public IP
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * Port exposed on the Load Balancer's public IP
         */
        public Builder port(Optional<? extends Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * Port on which the network traffic will be forwarded to on the receiving instance
         */
        public Builder targetPort(long targetPort) {
            Utils.checkNotNull(targetPort, "targetPort");
            this.targetPort = Optional.ofNullable(targetPort);
            return this;
        }

        /**
         * Port on which the network traffic will be forwarded to on the receiving instance
         */
        public Builder targetPort(Optional<? extends Long> targetPort) {
            Utils.checkNotNull(targetPort, "targetPort");
            this.targetPort = targetPort;
            return this;
        }

        /**
         * Load Balancer Service healthcheck
         */
        public Builder healthcheck(com.exoscale.api.models.components.LoadBalancerServiceHealthcheck healthcheck) {
            Utils.checkNotNull(healthcheck, "healthcheck");
            this.healthcheck = Optional.ofNullable(healthcheck);
            return this;
        }

        /**
         * Load Balancer Service healthcheck
         */
        public Builder healthcheck(Optional<? extends com.exoscale.api.models.components.LoadBalancerServiceHealthcheck> healthcheck) {
            Utils.checkNotNull(healthcheck, "healthcheck");
            this.healthcheck = healthcheck;
            return this;
        }
        
        public UpdateLoadBalancerServiceRequestBody build() {
            return new UpdateLoadBalancerServiceRequestBody(
                name,
                description,
                protocol,
                strategy,
                port,
                targetPort,
                healthcheck);
        }
    }
}

