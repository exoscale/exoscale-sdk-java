/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.api;

import com.exoscale.model.AttachBlockStorageVolumeToInstanceRequest;
import com.exoscale.model.BlockStorageSnapshot;
import com.exoscale.model.BlockStorageVolume;
import com.exoscale.model.CreateBlockStorageSnapshotRequest;
import com.exoscale.model.CreateBlockStorageVolumeRequest;
import com.exoscale.model.ListBlockStorageSnapshots200Response;
import com.exoscale.model.ListBlockStorageVolumes200Response;
import com.exoscale.model.Operation;
import com.exoscale.model.ResizeBlockStorageVolumeRequest;
import java.util.UUID;
import com.exoscale.model.UpdateBlockStorageVolumeLabelsRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for BlockStorageApi
 */
@Ignore
public class BlockStorageApiTest {

    private final BlockStorageApi api = new BlockStorageApi();

    
    /**
     * Attach block storage volume to an instance
     *
     * 
     */
    @Test
    public void attachBlockStorageVolumeToInstanceTest()  {
        UUID id = null;
        AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest = null;
        Operation response = api.attachBlockStorageVolumeToInstance(id, attachBlockStorageVolumeToInstanceRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a block storage snapshot
     *
     * 
     */
    @Test
    public void createBlockStorageSnapshotTest()  {
        UUID id = null;
        CreateBlockStorageSnapshotRequest createBlockStorageSnapshotRequest = null;
        Operation response = api.createBlockStorageSnapshot(id, createBlockStorageSnapshotRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a block storage volume
     *
     * 
     */
    @Test
    public void createBlockStorageVolumeTest()  {
        CreateBlockStorageVolumeRequest createBlockStorageVolumeRequest = null;
        Operation response = api.createBlockStorageVolume(createBlockStorageVolumeRequest).block();

        // TODO: test validations
    }
    
    /**
     * Delete a block storage snapshot, data will be unrecoverable
     *
     * 
     */
    @Test
    public void deleteBlockStorageSnapshotTest()  {
        UUID id = null;
        Operation response = api.deleteBlockStorageSnapshot(id).block();

        // TODO: test validations
    }
    
    /**
     * Delete a block storage volume, data will be unrecoverable
     *
     * 
     */
    @Test
    public void deleteBlockStorageVolumeTest()  {
        UUID id = null;
        Operation response = api.deleteBlockStorageVolume(id).block();

        // TODO: test validations
    }
    
    /**
     * Detach block storage volume
     *
     * 
     */
    @Test
    public void detachBlockStorageVolumeTest()  {
        UUID id = null;
        Operation response = api.detachBlockStorageVolume(id).block();

        // TODO: test validations
    }
    
    /**
     * Retrieve block storage snapshot details
     *
     * 
     */
    @Test
    public void getBlockStorageSnapshotTest()  {
        UUID id = null;
        BlockStorageSnapshot response = api.getBlockStorageSnapshot(id).block();

        // TODO: test validations
    }
    
    /**
     * Retrieve block storage volume details
     *
     * 
     */
    @Test
    public void getBlockStorageVolumeTest()  {
        UUID id = null;
        BlockStorageVolume response = api.getBlockStorageVolume(id).block();

        // TODO: test validations
    }
    
    /**
     * List block storage snapshots
     *
     * 
     */
    @Test
    public void listBlockStorageSnapshotsTest()  {
        ListBlockStorageSnapshots200Response response = api.listBlockStorageSnapshots().block();

        // TODO: test validations
    }
    
    /**
     * List block storage volumes
     *
     * 
     */
    @Test
    public void listBlockStorageVolumesTest()  {
        UUID instanceId = null;
        ListBlockStorageVolumes200Response response = api.listBlockStorageVolumes(instanceId).block();

        // TODO: test validations
    }
    
    /**
     * Resize a block storage volume
     *
     * This operation resizes a Block storage volume. Note: the volume can only grow, cannot be shrunk.
     */
    @Test
    public void resizeBlockStorageVolumeTest()  {
        UUID id = null;
        ResizeBlockStorageVolumeRequest resizeBlockStorageVolumeRequest = null;
        BlockStorageVolume response = api.resizeBlockStorageVolume(id, resizeBlockStorageVolumeRequest).block();

        // TODO: test validations
    }
    
    /**
     * Set block storage volume labels
     *
     * 
     */
    @Test
    public void updateBlockStorageVolumeLabelsTest()  {
        UUID id = null;
        UpdateBlockStorageVolumeLabelsRequest updateBlockStorageVolumeLabelsRequest = null;
        Operation response = api.updateBlockStorageVolumeLabels(id, updateBlockStorageVolumeLabelsRequest).block();

        // TODO: test validations
    }
    
}
