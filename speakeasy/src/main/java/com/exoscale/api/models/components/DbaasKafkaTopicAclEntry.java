/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DbaasKafkaTopicAclEntry {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Kafka username or username pattern
     */
    @JsonProperty("username")
    private String username;

    /**
     * Kafka topic name or pattern
     */
    @JsonProperty("topic")
    private String topic;

    /**
     * Kafka permission
     */
    @JsonProperty("permission")
    private DbaasKafkaTopicAclEntryPermission permission;

    public DbaasKafkaTopicAclEntry(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("username") String username,
            @JsonProperty("topic") String topic,
            @JsonProperty("permission") DbaasKafkaTopicAclEntryPermission permission) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(topic, "topic");
        Utils.checkNotNull(permission, "permission");
        this.id = id;
        this.username = username;
        this.topic = topic;
        this.permission = permission;
    }

    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Kafka username or username pattern
     */
    public String username() {
        return username;
    }

    /**
     * Kafka topic name or pattern
     */
    public String topic() {
        return topic;
    }

    /**
     * Kafka permission
     */
    public DbaasKafkaTopicAclEntryPermission permission() {
        return permission;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DbaasKafkaTopicAclEntry withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public DbaasKafkaTopicAclEntry withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Kafka username or username pattern
     */
    public DbaasKafkaTopicAclEntry withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * Kafka topic name or pattern
     */
    public DbaasKafkaTopicAclEntry withTopic(String topic) {
        Utils.checkNotNull(topic, "topic");
        this.topic = topic;
        return this;
    }

    /**
     * Kafka permission
     */
    public DbaasKafkaTopicAclEntry withPermission(DbaasKafkaTopicAclEntryPermission permission) {
        Utils.checkNotNull(permission, "permission");
        this.permission = permission;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasKafkaTopicAclEntry other = (DbaasKafkaTopicAclEntry) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.username, other.username) &&
            java.util.Objects.deepEquals(this.topic, other.topic) &&
            java.util.Objects.deepEquals(this.permission, other.permission);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            username,
            topic,
            permission);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasKafkaTopicAclEntry.class,
                "id", id,
                "username", username,
                "topic", topic,
                "permission", permission);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private String username;
 
        private String topic;
 
        private DbaasKafkaTopicAclEntryPermission permission;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Kafka username or username pattern
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        /**
         * Kafka topic name or pattern
         */
        public Builder topic(String topic) {
            Utils.checkNotNull(topic, "topic");
            this.topic = topic;
            return this;
        }

        /**
         * Kafka permission
         */
        public Builder permission(DbaasKafkaTopicAclEntryPermission permission) {
            Utils.checkNotNull(permission, "permission");
            this.permission = permission;
            return this;
        }
        
        public DbaasKafkaTopicAclEntry build() {
            return new DbaasKafkaTopicAclEntry(
                id,
                username,
                topic,
                permission);
        }
    }
}

