/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnumKafkaAuthMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Service component information objects
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasServiceComponents {
  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_KAFKA_AUTHENTICATION_METHOD = "kafka-authentication-method";
  @SerializedName(SERIALIZED_NAME_KAFKA_AUTHENTICATION_METHOD)
  private EnumKafkaAuthMethod kafkaAuthenticationMethod;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Long port;

  /**
   * Network access route
   */
  @JsonAdapter(RouteEnum.Adapter.class)
  public enum RouteEnum {
    DYNAMIC("dynamic"),
    
    PRIVATE("private"),
    
    PUBLIC("public"),
    
    PRIVATELINK("privatelink");

    private String value;

    RouteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteEnum fromValue(String value) {
      for (RouteEnum b : RouteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RouteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RouteEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RouteEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTE = "route";
  @SerializedName(SERIALIZED_NAME_ROUTE)
  private RouteEnum route;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private Boolean ssl;

  /**
   * DNS usage name
   */
  @JsonAdapter(UsageEnum.Adapter.class)
  public enum UsageEnum {
    PRIMARY("primary"),
    
    REPLICA("replica");

    private String value;

    UsageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageEnum fromValue(String value) {
      for (UsageEnum b : UsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private UsageEnum usage;

  public DbaasServiceComponents() {
  }

  public DbaasServiceComponents component(String component) {
    this.component = component;
    return this;
  }

   /**
   * Service component name
   * @return component
  **/
  @javax.annotation.Nonnull
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public DbaasServiceComponents host(String host) {
    this.host = host;
    return this;
  }

   /**
   * DNS name for connecting to the service component
   * @return host
  **/
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public DbaasServiceComponents kafkaAuthenticationMethod(EnumKafkaAuthMethod kafkaAuthenticationMethod) {
    this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
    return this;
  }

   /**
   * Get kafkaAuthenticationMethod
   * @return kafkaAuthenticationMethod
  **/
  @javax.annotation.Nullable
  public EnumKafkaAuthMethod getKafkaAuthenticationMethod() {
    return kafkaAuthenticationMethod;
  }

  public void setKafkaAuthenticationMethod(EnumKafkaAuthMethod kafkaAuthenticationMethod) {
    this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
  }


  public DbaasServiceComponents path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)
   * @return path
  **/
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public DbaasServiceComponents port(Long port) {
    this.port = port;
    return this;
  }

   /**
   * Port number for connecting to the service component
   * minimum: 0
   * maximum: 65535
   * @return port
  **/
  @javax.annotation.Nonnull
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }


  public DbaasServiceComponents route(RouteEnum route) {
    this.route = route;
    return this;
  }

   /**
   * Network access route
   * @return route
  **/
  @javax.annotation.Nonnull
  public RouteEnum getRoute() {
    return route;
  }

  public void setRoute(RouteEnum route) {
    this.route = route;
  }


  public DbaasServiceComponents ssl(Boolean ssl) {
    this.ssl = ssl;
    return this;
  }

   /**
   * Whether the endpoint is encrypted or accepts plaintext.                                            By default endpoints are always encrypted and                                            this property is only included for service components that may disable encryption.
   * @return ssl
  **/
  @javax.annotation.Nullable
  public Boolean getSsl() {
    return ssl;
  }

  public void setSsl(Boolean ssl) {
    this.ssl = ssl;
  }


  public DbaasServiceComponents usage(UsageEnum usage) {
    this.usage = usage;
    return this;
  }

   /**
   * DNS usage name
   * @return usage
  **/
  @javax.annotation.Nonnull
  public UsageEnum getUsage() {
    return usage;
  }

  public void setUsage(UsageEnum usage) {
    this.usage = usage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasServiceComponents dbaasServiceComponents = (DbaasServiceComponents) o;
    return Objects.equals(this.component, dbaasServiceComponents.component) &&
        Objects.equals(this.host, dbaasServiceComponents.host) &&
        Objects.equals(this.kafkaAuthenticationMethod, dbaasServiceComponents.kafkaAuthenticationMethod) &&
        Objects.equals(this.path, dbaasServiceComponents.path) &&
        Objects.equals(this.port, dbaasServiceComponents.port) &&
        Objects.equals(this.route, dbaasServiceComponents.route) &&
        Objects.equals(this.ssl, dbaasServiceComponents.ssl) &&
        Objects.equals(this.usage, dbaasServiceComponents.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(component, host, kafkaAuthenticationMethod, path, port, route, ssl, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasServiceComponents {\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    kafkaAuthenticationMethod: ").append(toIndentedString(kafkaAuthenticationMethod)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("component");
    openapiFields.add("host");
    openapiFields.add("kafka-authentication-method");
    openapiFields.add("path");
    openapiFields.add("port");
    openapiFields.add("route");
    openapiFields.add("ssl");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("component");
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("route");
    openapiRequiredFields.add("usage");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasServiceComponents
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasServiceComponents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasServiceComponents is not found in the empty JSON string", DbaasServiceComponents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasServiceComponents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasServiceComponents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DbaasServiceComponents.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      // validate the optional field `kafka-authentication-method`
      if (jsonObj.get("kafka-authentication-method") != null && !jsonObj.get("kafka-authentication-method").isJsonNull()) {
        EnumKafkaAuthMethod.validateJsonElement(jsonObj.get("kafka-authentication-method"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("route").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `route` to be a primitive type in the JSON string but got `%s`", jsonObj.get("route").toString()));
      }
      // validate the required field `route`
      RouteEnum.validateJsonElement(jsonObj.get("route"));
      if (!jsonObj.get("usage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage").toString()));
      }
      // validate the required field `usage`
      UsageEnum.validateJsonElement(jsonObj.get("usage"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasServiceComponents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasServiceComponents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasServiceComponents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasServiceComponents.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasServiceComponents>() {
           @Override
           public void write(JsonWriter out, DbaasServiceComponents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasServiceComponents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasServiceComponents given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasServiceComponents
  * @throws IOException if the JSON string is invalid with respect to DbaasServiceComponents
  */
  public static DbaasServiceComponents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasServiceComponents.class);
  }

 /**
  * Convert an instance of DbaasServiceComponents to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

