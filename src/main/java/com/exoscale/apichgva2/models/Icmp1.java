/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Icmp1 type.
 */
public class Icmp1 {
    private Long code;
    private Long type;

    /**
     * Default constructor.
     */
    public Icmp1() {
    }

    /**
     * Initialization constructor.
     * @param  code  Long value for code.
     * @param  type  Long value for type.
     */
    public Icmp1(
            Long code,
            Long type) {
        this.code = code;
        this.type = type;
    }

    /**
     * Getter for Code.
     * @return Returns the Long
     */
    @JsonGetter("code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getCode() {
        return code;
    }

    /**
     * Setter for Code.
     * @param code Value for Long
     */
    @JsonSetter("code")
    public void setCode(Long code) {
        this.code = code;
    }

    /**
     * Getter for Type.
     * @return Returns the Long
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for Long
     */
    @JsonSetter("type")
    public void setType(Long type) {
        this.type = type;
    }

    /**
     * Converts this Icmp1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Icmp1 [" + "code=" + code + ", type=" + type + "]";
    }

    /**
     * Builds a new {@link Icmp1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Icmp1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .code(getCode())
                .type(getType());
        return builder;
    }

    /**
     * Class to build instances of {@link Icmp1}.
     */
    public static class Builder {
        private Long code;
        private Long type;



        /**
         * Setter for code.
         * @param  code  Long value for code.
         * @return Builder
         */
        public Builder code(Long code) {
            this.code = code;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  Long value for type.
         * @return Builder
         */
        public Builder type(Long type) {
            this.type = type;
            return this;
        }

        /**
         * Builds a new {@link Icmp1} object using the set fields.
         * @return {@link Icmp1}
         */
        public Icmp1 build() {
            return new Icmp1(code, type);
        }
    }
}
