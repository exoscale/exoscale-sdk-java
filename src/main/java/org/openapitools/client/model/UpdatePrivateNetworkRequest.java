/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePrivateNetworkRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class UpdatePrivateNetworkRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NETMASK = "netmask";
  @SerializedName(SERIALIZED_NAME_NETMASK)
  private String netmask;

  public static final String SERIALIZED_NAME_START_IP = "start-ip";
  @SerializedName(SERIALIZED_NAME_START_IP)
  private String startIp;

  public static final String SERIALIZED_NAME_END_IP = "end-ip";
  @SerializedName(SERIALIZED_NAME_END_IP)
  private String endIp;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public UpdatePrivateNetworkRequest() {
  }

  public UpdatePrivateNetworkRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Private Network name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdatePrivateNetworkRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Private Network description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdatePrivateNetworkRequest netmask(String netmask) {
    this.netmask = netmask;
    return this;
  }

   /**
   * Private Network netmask
   * @return netmask
  **/
  @javax.annotation.Nullable
  public String getNetmask() {
    return netmask;
  }

  public void setNetmask(String netmask) {
    this.netmask = netmask;
  }


  public UpdatePrivateNetworkRequest startIp(String startIp) {
    this.startIp = startIp;
    return this;
  }

   /**
   * Private Network start IP address
   * @return startIp
  **/
  @javax.annotation.Nullable
  public String getStartIp() {
    return startIp;
  }

  public void setStartIp(String startIp) {
    this.startIp = startIp;
  }


  public UpdatePrivateNetworkRequest endIp(String endIp) {
    this.endIp = endIp;
    return this;
  }

   /**
   * Private Network end IP address
   * @return endIp
  **/
  @javax.annotation.Nullable
  public String getEndIp() {
    return endIp;
  }

  public void setEndIp(String endIp) {
    this.endIp = endIp;
  }


  public UpdatePrivateNetworkRequest labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public UpdatePrivateNetworkRequest putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePrivateNetworkRequest updatePrivateNetworkRequest = (UpdatePrivateNetworkRequest) o;
    return Objects.equals(this.name, updatePrivateNetworkRequest.name) &&
        Objects.equals(this.description, updatePrivateNetworkRequest.description) &&
        Objects.equals(this.netmask, updatePrivateNetworkRequest.netmask) &&
        Objects.equals(this.startIp, updatePrivateNetworkRequest.startIp) &&
        Objects.equals(this.endIp, updatePrivateNetworkRequest.endIp) &&
        Objects.equals(this.labels, updatePrivateNetworkRequest.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, netmask, startIp, endIp, labels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePrivateNetworkRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    netmask: ").append(toIndentedString(netmask)).append("\n");
    sb.append("    startIp: ").append(toIndentedString(startIp)).append("\n");
    sb.append("    endIp: ").append(toIndentedString(endIp)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("netmask");
    openapiFields.add("start-ip");
    openapiFields.add("end-ip");
    openapiFields.add("labels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdatePrivateNetworkRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePrivateNetworkRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePrivateNetworkRequest is not found in the empty JSON string", UpdatePrivateNetworkRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePrivateNetworkRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePrivateNetworkRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("netmask") != null && !jsonObj.get("netmask").isJsonNull()) && !jsonObj.get("netmask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `netmask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("netmask").toString()));
      }
      if ((jsonObj.get("start-ip") != null && !jsonObj.get("start-ip").isJsonNull()) && !jsonObj.get("start-ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start-ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start-ip").toString()));
      }
      if ((jsonObj.get("end-ip") != null && !jsonObj.get("end-ip").isJsonNull()) && !jsonObj.get("end-ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end-ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end-ip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePrivateNetworkRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePrivateNetworkRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePrivateNetworkRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePrivateNetworkRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePrivateNetworkRequest>() {
           @Override
           public void write(JsonWriter out, UpdatePrivateNetworkRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePrivateNetworkRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdatePrivateNetworkRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdatePrivateNetworkRequest
  * @throws IOException if the JSON string is invalid with respect to UpdatePrivateNetworkRequest
  */
  public static UpdatePrivateNetworkRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePrivateNetworkRequest.class);
  }

 /**
  * Convert an instance of UpdatePrivateNetworkRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

