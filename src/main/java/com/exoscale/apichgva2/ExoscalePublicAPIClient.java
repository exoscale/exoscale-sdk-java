/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2;

import com.exoscale.apichgva2.controllers.AntiAffinityGroupController;
import com.exoscale.apichgva2.controllers.BlockStorageController;
import com.exoscale.apichgva2.controllers.DbaasController;
import com.exoscale.apichgva2.controllers.DeployTargetController;
import com.exoscale.apichgva2.controllers.DnsController;
import com.exoscale.apichgva2.controllers.ElasticIpController;
import com.exoscale.apichgva2.controllers.EventController;
import com.exoscale.apichgva2.controllers.IamController;
import com.exoscale.apichgva2.controllers.InstanceController;
import com.exoscale.apichgva2.controllers.InstancePoolController;
import com.exoscale.apichgva2.controllers.InstanceTypeController;
import com.exoscale.apichgva2.controllers.NetworkLoadBalancerController;
import com.exoscale.apichgva2.controllers.OperationController;
import com.exoscale.apichgva2.controllers.PrivateNetworkController;
import com.exoscale.apichgva2.controllers.QuotasController;
import com.exoscale.apichgva2.controllers.ReverseDnsController;
import com.exoscale.apichgva2.controllers.SecurityGroupController;
import com.exoscale.apichgva2.controllers.SksController;
import com.exoscale.apichgva2.controllers.SnapshotController;
import com.exoscale.apichgva2.controllers.SosController;
import com.exoscale.apichgva2.controllers.SshKeyController;
import com.exoscale.apichgva2.controllers.TemplateController;
import com.exoscale.apichgva2.controllers.ZoneController;
import com.exoscale.apichgva2.http.client.HttpCallback;
import com.exoscale.apichgva2.http.client.HttpClientConfiguration;
import com.exoscale.apichgva2.http.client.ReadonlyHttpClientConfiguration;
import com.exoscale.apichgva2.models.ZoneNameEnum;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class ExoscalePublicAPIClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private NetworkLoadBalancerController networkLoadBalancer;
    private EventController event;
    private BlockStorageController blockStorage;
    private SksController sks;
    private DbaasController dbaas;
    private InstancePoolController instancePool;
    private InstanceController instance;
    private ReverseDnsController reverseDns;
    private AntiAffinityGroupController antiAffinityGroup;
    private SecurityGroupController securityGroup;
    private IamController iam;
    private PrivateNetworkController privateNetwork;
    private InstanceTypeController instanceType;
    private ElasticIpController elasticIp;
    private ZoneController zone;
    private DnsController dns;
    private DeployTargetController deployTarget;
    private SnapshotController snapshot;
    private QuotasController quotas;
    private OperationController operation;
    private TemplateController template;
    private SosController sos;
    private SshKeyController sshKey;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "APIMATIC 3.0";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * zone value.
     */
    private final ZoneNameEnum zone;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private ExoscalePublicAPIClient(Environment environment, ZoneNameEnum zone,
            HttpClient httpClient, ReadonlyHttpClientConfiguration httpClientConfig,
            HttpCallback httpCallback) {
        this.environment = environment;
        this.zone = zone;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;
        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .compatibilityFactory(compatibilityFactory)
                .callback(httpCallback)
                .userAgent(userAgent)
                .build();
        networkLoadBalancer = new NetworkLoadBalancerController(globalConfig);
        event = new EventController(globalConfig);
        blockStorage = new BlockStorageController(globalConfig);
        sks = new SksController(globalConfig);
        dbaas = new DbaasController(globalConfig);
        instancePool = new InstancePoolController(globalConfig);
        instance = new InstanceController(globalConfig);
        reverseDns = new ReverseDnsController(globalConfig);
        antiAffinityGroup = new AntiAffinityGroupController(globalConfig);
        securityGroup = new SecurityGroupController(globalConfig);
        iam = new IamController(globalConfig);
        privateNetwork = new PrivateNetworkController(globalConfig);
        instanceType = new InstanceTypeController(globalConfig);
        elasticIp = new ElasticIpController(globalConfig);
        zone = new ZoneController(globalConfig);
        dns = new DnsController(globalConfig);
        deployTarget = new DeployTargetController(globalConfig);
        snapshot = new SnapshotController(globalConfig);
        quotas = new QuotasController(globalConfig);
        operation = new OperationController(globalConfig);
        template = new TemplateController(globalConfig);
        sos = new SosController(globalConfig);
        sshKey = new SshKeyController(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of NetworkLoadBalancerController.
     * @return networkLoadBalancer
     */
    public NetworkLoadBalancerController getNetworkLoadBalancerController() {
        return networkLoadBalancer;
    }

    /**
     * Get the instance of EventController.
     * @return event
     */
    public EventController getEventController() {
        return event;
    }

    /**
     * Get the instance of BlockStorageController.
     * @return blockStorage
     */
    public BlockStorageController getBlockStorageController() {
        return blockStorage;
    }

    /**
     * Get the instance of SksController.
     * @return sks
     */
    public SksController getSksController() {
        return sks;
    }

    /**
     * Get the instance of DbaasController.
     * @return dbaas
     */
    public DbaasController getDbaasController() {
        return dbaas;
    }

    /**
     * Get the instance of InstancePoolController.
     * @return instancePool
     */
    public InstancePoolController getInstancePoolController() {
        return instancePool;
    }

    /**
     * Get the instance of InstanceController.
     * @return instance
     */
    public InstanceController getInstanceController() {
        return instance;
    }

    /**
     * Get the instance of ReverseDnsController.
     * @return reverseDns
     */
    public ReverseDnsController getReverseDnsController() {
        return reverseDns;
    }

    /**
     * Get the instance of AntiAffinityGroupController.
     * @return antiAffinityGroup
     */
    public AntiAffinityGroupController getAntiAffinityGroupController() {
        return antiAffinityGroup;
    }

    /**
     * Get the instance of SecurityGroupController.
     * @return securityGroup
     */
    public SecurityGroupController getSecurityGroupController() {
        return securityGroup;
    }

    /**
     * Get the instance of IamController.
     * @return iam
     */
    public IamController getIamController() {
        return iam;
    }

    /**
     * Get the instance of PrivateNetworkController.
     * @return privateNetwork
     */
    public PrivateNetworkController getPrivateNetworkController() {
        return privateNetwork;
    }

    /**
     * Get the instance of InstanceTypeController.
     * @return instanceType
     */
    public InstanceTypeController getInstanceTypeController() {
        return instanceType;
    }

    /**
     * Get the instance of ElasticIpController.
     * @return elasticIp
     */
    public ElasticIpController getElasticIpController() {
        return elasticIp;
    }

    /**
     * Get the instance of ZoneController.
     * @return zone
     */
    public ZoneController getZoneController() {
        return zone;
    }

    /**
     * Get the instance of DnsController.
     * @return dns
     */
    public DnsController getDnsController() {
        return dns;
    }

    /**
     * Get the instance of DeployTargetController.
     * @return deployTarget
     */
    public DeployTargetController getDeployTargetController() {
        return deployTarget;
    }

    /**
     * Get the instance of SnapshotController.
     * @return snapshot
     */
    public SnapshotController getSnapshotController() {
        return snapshot;
    }

    /**
     * Get the instance of QuotasController.
     * @return quotas
     */
    public QuotasController getQuotasController() {
        return quotas;
    }

    /**
     * Get the instance of OperationController.
     * @return operation
     */
    public OperationController getOperationController() {
        return operation;
    }

    /**
     * Get the instance of TemplateController.
     * @return template
     */
    public TemplateController getTemplateController() {
        return template;
    }

    /**
     * Get the instance of SosController.
     * @return sos
     */
    public SosController getSosController() {
        return sos;
    }

    /**
     * Get the instance of SshKeyController.
     * @return sshKey
     */
    public SshKeyController getSshKeyController() {
        return sshKey;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * zone value.
     * @return zone
     */
    public ZoneNameEnum getZone() {
        return zone;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        parameters.put("zone",
                new SimpleEntry<Object, Boolean>(this.zone, false));
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api-{zone}.exoscale.com/v2";
            }
        }
        return "https://api-{zone}.exoscale.com/v2";
    }

    /**
     * Converts this ExoscalePublicAPIClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ExoscalePublicAPIClient [" + "environment=" + environment + ", zone=" + zone
                + ", httpClientConfig=" + httpClientConfig + "]";
    }

    /**
     * Builds a new {@link ExoscalePublicAPIClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link ExoscalePublicAPIClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.zone = getZone();
        builder.httpClient = getHttpClient();
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(configBldr -> configBldr =
                ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link ExoscalePublicAPIClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private ZoneNameEnum zone = ZoneNameEnum.CHGVA2;
        private HttpClient httpClient;
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * zone value.
         * @param zone The zone for client.
         * @return Builder
         */
        public Builder zone(ZoneNameEnum zone) {
            this.zone = zone;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Builds a new ExoscalePublicAPIClient object using the set fields.
         * @return ExoscalePublicAPIClient
         */
        public ExoscalePublicAPIClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new ExoscalePublicAPIClient(environment, zone, httpClient, httpClientConfig,
                    httpCallback);
        }
    }
}