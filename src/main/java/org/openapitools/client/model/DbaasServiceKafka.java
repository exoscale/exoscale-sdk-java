/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DbaasIntegration;
import org.openapitools.client.model.DbaasNodeState;
import org.openapitools.client.model.DbaasServiceBackup;
import org.openapitools.client.model.DbaasServiceKafkaAuthenticationMethods;
import org.openapitools.client.model.DbaasServiceKafkaComponentsInner;
import org.openapitools.client.model.DbaasServiceKafkaConnectionInfo;
import org.openapitools.client.model.DbaasServiceKafkaUsersInner;
import org.openapitools.client.model.DbaasServiceMaintenance;
import org.openapitools.client.model.DbaasServiceNotification;
import org.openapitools.client.model.EnumServiceState;
import org.openapitools.client.model.JsonSchemaKafka;
import org.openapitools.client.model.JsonSchemaKafkaConnect;
import org.openapitools.client.model.JsonSchemaKafkaRest;
import org.openapitools.client.model.JsonSchemaSchemaRegistry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DbaasServiceKafka
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasServiceKafka {
  public static final String SERIALIZED_NAME_UPDATED_AT = "updated-at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_AUTHENTICATION_METHODS = "authentication-methods";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHODS)
  private DbaasServiceKafkaAuthenticationMethods authenticationMethods;

  public static final String SERIALIZED_NAME_NODE_COUNT = "node-count";
  @SerializedName(SERIALIZED_NAME_NODE_COUNT)
  private Long nodeCount;

  public static final String SERIALIZED_NAME_CONNECTION_INFO = "connection-info";
  @SerializedName(SERIALIZED_NAME_CONNECTION_INFO)
  private DbaasServiceKafkaConnectionInfo connectionInfo;

  public static final String SERIALIZED_NAME_NODE_CPU_COUNT = "node-cpu-count";
  @SerializedName(SERIALIZED_NAME_NODE_CPU_COUNT)
  private Long nodeCpuCount;

  public static final String SERIALIZED_NAME_KAFKA_REST_ENABLED = "kafka-rest-enabled";
  @SerializedName(SERIALIZED_NAME_KAFKA_REST_ENABLED)
  private Boolean kafkaRestEnabled;

  public static final String SERIALIZED_NAME_INTEGRATIONS = "integrations";
  @SerializedName(SERIALIZED_NAME_INTEGRATIONS)
  private List<DbaasIntegration> integrations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public static final String SERIALIZED_NAME_NODE_STATES = "node-states";
  @SerializedName(SERIALIZED_NAME_NODE_STATES)
  private List<DbaasNodeState> nodeStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_KAFKA_CONNECT_ENABLED = "kafka-connect-enabled";
  @SerializedName(SERIALIZED_NAME_KAFKA_CONNECT_ENABLED)
  private Boolean kafkaConnectEnabled;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private EnumServiceState state;

  public static final String SERIALIZED_NAME_IP_FILTER = "ip-filter";
  @SerializedName(SERIALIZED_NAME_IP_FILTER)
  private List<String> ipFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMA_REGISTRY_SETTINGS = "schema-registry-settings";
  @SerializedName(SERIALIZED_NAME_SCHEMA_REGISTRY_SETTINGS)
  private JsonSchemaSchemaRegistry schemaRegistrySettings;

  public static final String SERIALIZED_NAME_BACKUPS = "backups";
  @SerializedName(SERIALIZED_NAME_BACKUPS)
  private List<DbaasServiceBackup> backups = new ArrayList<>();

  public static final String SERIALIZED_NAME_KAFKA_REST_SETTINGS = "kafka-rest-settings";
  @SerializedName(SERIALIZED_NAME_KAFKA_REST_SETTINGS)
  private JsonSchemaKafkaRest kafkaRestSettings;

  public static final String SERIALIZED_NAME_TERMINATION_PROTECTION = "termination-protection";
  @SerializedName(SERIALIZED_NAME_TERMINATION_PROTECTION)
  private Boolean terminationProtection;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<DbaasServiceNotification> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_KAFKA_CONNECT_SETTINGS = "kafka-connect-settings";
  @SerializedName(SERIALIZED_NAME_KAFKA_CONNECT_SETTINGS)
  private JsonSchemaKafkaConnect kafkaConnectSettings;

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private List<DbaasServiceKafkaComponentsInner> components = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAINTENANCE = "maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private DbaasServiceMaintenance maintenance;

  public static final String SERIALIZED_NAME_KAFKA_SETTINGS = "kafka-settings";
  @SerializedName(SERIALIZED_NAME_KAFKA_SETTINGS)
  private JsonSchemaKafka kafkaSettings = {};

  public static final String SERIALIZED_NAME_DISK_SIZE = "disk-size";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE)
  private Long diskSize;

  public static final String SERIALIZED_NAME_NODE_MEMORY = "node-memory";
  @SerializedName(SERIALIZED_NAME_NODE_MEMORY)
  private Long nodeMemory;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_URI_PARAMS = "uri-params";
  @SerializedName(SERIALIZED_NAME_URI_PARAMS)
  private Object uriParams;

  public static final String SERIALIZED_NAME_SCHEMA_REGISTRY_ENABLED = "schema-registry-enabled";
  @SerializedName(SERIALIZED_NAME_SCHEMA_REGISTRY_ENABLED)
  private Boolean schemaRegistryEnabled;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CREATED_AT = "created-at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<DbaasServiceKafkaUsersInner> users = new ArrayList<>();

  public DbaasServiceKafka() {
  }

  public DbaasServiceKafka updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Service last update timestamp (ISO 8601)
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public DbaasServiceKafka authenticationMethods(DbaasServiceKafkaAuthenticationMethods authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
    return this;
  }

   /**
   * Get authenticationMethods
   * @return authenticationMethods
  **/
  @javax.annotation.Nullable
  public DbaasServiceKafkaAuthenticationMethods getAuthenticationMethods() {
    return authenticationMethods;
  }

  public void setAuthenticationMethods(DbaasServiceKafkaAuthenticationMethods authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
  }


  public DbaasServiceKafka nodeCount(Long nodeCount) {
    this.nodeCount = nodeCount;
    return this;
  }

   /**
   * Number of service nodes in the active plan
   * minimum: 0
   * @return nodeCount
  **/
  @javax.annotation.Nullable
  public Long getNodeCount() {
    return nodeCount;
  }

  public void setNodeCount(Long nodeCount) {
    this.nodeCount = nodeCount;
  }


  public DbaasServiceKafka connectionInfo(DbaasServiceKafkaConnectionInfo connectionInfo) {
    this.connectionInfo = connectionInfo;
    return this;
  }

   /**
   * Get connectionInfo
   * @return connectionInfo
  **/
  @javax.annotation.Nullable
  public DbaasServiceKafkaConnectionInfo getConnectionInfo() {
    return connectionInfo;
  }

  public void setConnectionInfo(DbaasServiceKafkaConnectionInfo connectionInfo) {
    this.connectionInfo = connectionInfo;
  }


  public DbaasServiceKafka nodeCpuCount(Long nodeCpuCount) {
    this.nodeCpuCount = nodeCpuCount;
    return this;
  }

   /**
   * Number of CPUs for each node
   * minimum: 0
   * @return nodeCpuCount
  **/
  @javax.annotation.Nullable
  public Long getNodeCpuCount() {
    return nodeCpuCount;
  }

  public void setNodeCpuCount(Long nodeCpuCount) {
    this.nodeCpuCount = nodeCpuCount;
  }


  public DbaasServiceKafka kafkaRestEnabled(Boolean kafkaRestEnabled) {
    this.kafkaRestEnabled = kafkaRestEnabled;
    return this;
  }

   /**
   * Whether Kafka REST is enabled
   * @return kafkaRestEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getKafkaRestEnabled() {
    return kafkaRestEnabled;
  }

  public void setKafkaRestEnabled(Boolean kafkaRestEnabled) {
    this.kafkaRestEnabled = kafkaRestEnabled;
  }


  public DbaasServiceKafka integrations(List<DbaasIntegration> integrations) {
    this.integrations = integrations;
    return this;
  }

  public DbaasServiceKafka addIntegrationsItem(DbaasIntegration integrationsItem) {
    if (this.integrations == null) {
      this.integrations = new ArrayList<>();
    }
    this.integrations.add(integrationsItem);
    return this;
  }

   /**
   * Service integrations
   * @return integrations
  **/
  @javax.annotation.Nullable
  public List<DbaasIntegration> getIntegrations() {
    return integrations;
  }

  public void setIntegrations(List<DbaasIntegration> integrations) {
    this.integrations = integrations;
  }


  public DbaasServiceKafka zone(String zone) {
    this.zone = zone;
    return this;
  }

   /**
   * The zone where the service is running
   * @return zone
  **/
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }


  public DbaasServiceKafka nodeStates(List<DbaasNodeState> nodeStates) {
    this.nodeStates = nodeStates;
    return this;
  }

  public DbaasServiceKafka addNodeStatesItem(DbaasNodeState nodeStatesItem) {
    if (this.nodeStates == null) {
      this.nodeStates = new ArrayList<>();
    }
    this.nodeStates.add(nodeStatesItem);
    return this;
  }

   /**
   * State of individual service nodes
   * @return nodeStates
  **/
  @javax.annotation.Nullable
  public List<DbaasNodeState> getNodeStates() {
    return nodeStates;
  }

  public void setNodeStates(List<DbaasNodeState> nodeStates) {
    this.nodeStates = nodeStates;
  }


  public DbaasServiceKafka name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DbaasServiceKafka kafkaConnectEnabled(Boolean kafkaConnectEnabled) {
    this.kafkaConnectEnabled = kafkaConnectEnabled;
    return this;
  }

   /**
   * Whether Kafka Connect is enabled
   * @return kafkaConnectEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getKafkaConnectEnabled() {
    return kafkaConnectEnabled;
  }

  public void setKafkaConnectEnabled(Boolean kafkaConnectEnabled) {
    this.kafkaConnectEnabled = kafkaConnectEnabled;
  }


  public DbaasServiceKafka type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public DbaasServiceKafka state(EnumServiceState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public EnumServiceState getState() {
    return state;
  }

  public void setState(EnumServiceState state) {
    this.state = state;
  }


  public DbaasServiceKafka ipFilter(List<String> ipFilter) {
    this.ipFilter = ipFilter;
    return this;
  }

  public DbaasServiceKafka addIpFilterItem(String ipFilterItem) {
    if (this.ipFilter == null) {
      this.ipFilter = new ArrayList<>();
    }
    this.ipFilter.add(ipFilterItem);
    return this;
  }

   /**
   * Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
   * @return ipFilter
  **/
  @javax.annotation.Nullable
  public List<String> getIpFilter() {
    return ipFilter;
  }

  public void setIpFilter(List<String> ipFilter) {
    this.ipFilter = ipFilter;
  }


  public DbaasServiceKafka schemaRegistrySettings(JsonSchemaSchemaRegistry schemaRegistrySettings) {
    this.schemaRegistrySettings = schemaRegistrySettings;
    return this;
  }

   /**
   * Get schemaRegistrySettings
   * @return schemaRegistrySettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaSchemaRegistry getSchemaRegistrySettings() {
    return schemaRegistrySettings;
  }

  public void setSchemaRegistrySettings(JsonSchemaSchemaRegistry schemaRegistrySettings) {
    this.schemaRegistrySettings = schemaRegistrySettings;
  }


  public DbaasServiceKafka backups(List<DbaasServiceBackup> backups) {
    this.backups = backups;
    return this;
  }

  public DbaasServiceKafka addBackupsItem(DbaasServiceBackup backupsItem) {
    if (this.backups == null) {
      this.backups = new ArrayList<>();
    }
    this.backups.add(backupsItem);
    return this;
  }

   /**
   * List of backups for the service
   * @return backups
  **/
  @javax.annotation.Nullable
  public List<DbaasServiceBackup> getBackups() {
    return backups;
  }

  public void setBackups(List<DbaasServiceBackup> backups) {
    this.backups = backups;
  }


  public DbaasServiceKafka kafkaRestSettings(JsonSchemaKafkaRest kafkaRestSettings) {
    this.kafkaRestSettings = kafkaRestSettings;
    return this;
  }

   /**
   * Get kafkaRestSettings
   * @return kafkaRestSettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaKafkaRest getKafkaRestSettings() {
    return kafkaRestSettings;
  }

  public void setKafkaRestSettings(JsonSchemaKafkaRest kafkaRestSettings) {
    this.kafkaRestSettings = kafkaRestSettings;
  }


  public DbaasServiceKafka terminationProtection(Boolean terminationProtection) {
    this.terminationProtection = terminationProtection;
    return this;
  }

   /**
   * Service is protected against termination and powering off
   * @return terminationProtection
  **/
  @javax.annotation.Nullable
  public Boolean getTerminationProtection() {
    return terminationProtection;
  }

  public void setTerminationProtection(Boolean terminationProtection) {
    this.terminationProtection = terminationProtection;
  }


  public DbaasServiceKafka notifications(List<DbaasServiceNotification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public DbaasServiceKafka addNotificationsItem(DbaasServiceNotification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * Service notifications
   * @return notifications
  **/
  @javax.annotation.Nullable
  public List<DbaasServiceNotification> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<DbaasServiceNotification> notifications) {
    this.notifications = notifications;
  }


  public DbaasServiceKafka kafkaConnectSettings(JsonSchemaKafkaConnect kafkaConnectSettings) {
    this.kafkaConnectSettings = kafkaConnectSettings;
    return this;
  }

   /**
   * Get kafkaConnectSettings
   * @return kafkaConnectSettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaKafkaConnect getKafkaConnectSettings() {
    return kafkaConnectSettings;
  }

  public void setKafkaConnectSettings(JsonSchemaKafkaConnect kafkaConnectSettings) {
    this.kafkaConnectSettings = kafkaConnectSettings;
  }


  public DbaasServiceKafka components(List<DbaasServiceKafkaComponentsInner> components) {
    this.components = components;
    return this;
  }

  public DbaasServiceKafka addComponentsItem(DbaasServiceKafkaComponentsInner componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

   /**
   * Service component information objects
   * @return components
  **/
  @javax.annotation.Nullable
  public List<DbaasServiceKafkaComponentsInner> getComponents() {
    return components;
  }

  public void setComponents(List<DbaasServiceKafkaComponentsInner> components) {
    this.components = components;
  }


  public DbaasServiceKafka maintenance(DbaasServiceMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

   /**
   * Get maintenance
   * @return maintenance
  **/
  @javax.annotation.Nullable
  public DbaasServiceMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(DbaasServiceMaintenance maintenance) {
    this.maintenance = maintenance;
  }


  public DbaasServiceKafka kafkaSettings(JsonSchemaKafka kafkaSettings) {
    this.kafkaSettings = kafkaSettings;
    return this;
  }

   /**
   * Get kafkaSettings
   * @return kafkaSettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaKafka getKafkaSettings() {
    return kafkaSettings;
  }

  public void setKafkaSettings(JsonSchemaKafka kafkaSettings) {
    this.kafkaSettings = kafkaSettings;
  }


  public DbaasServiceKafka diskSize(Long diskSize) {
    this.diskSize = diskSize;
    return this;
  }

   /**
   * TODO UNIT disk space for data storage
   * minimum: 0
   * @return diskSize
  **/
  @javax.annotation.Nullable
  public Long getDiskSize() {
    return diskSize;
  }

  public void setDiskSize(Long diskSize) {
    this.diskSize = diskSize;
  }


  public DbaasServiceKafka nodeMemory(Long nodeMemory) {
    this.nodeMemory = nodeMemory;
    return this;
  }

   /**
   * TODO UNIT of memory for each node
   * minimum: 0
   * @return nodeMemory
  **/
  @javax.annotation.Nullable
  public Long getNodeMemory() {
    return nodeMemory;
  }

  public void setNodeMemory(Long nodeMemory) {
    this.nodeMemory = nodeMemory;
  }


  public DbaasServiceKafka uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * URI for connecting to the service (may be absent)
   * @return uri
  **/
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public DbaasServiceKafka uriParams(Object uriParams) {
    this.uriParams = uriParams;
    return this;
  }

   /**
   * service_uri parameterized into key-value pairs
   * @return uriParams
  **/
  @javax.annotation.Nullable
  public Object getUriParams() {
    return uriParams;
  }

  public void setUriParams(Object uriParams) {
    this.uriParams = uriParams;
  }


  public DbaasServiceKafka schemaRegistryEnabled(Boolean schemaRegistryEnabled) {
    this.schemaRegistryEnabled = schemaRegistryEnabled;
    return this;
  }

   /**
   * Whether Schema-Registry is enabled
   * @return schemaRegistryEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getSchemaRegistryEnabled() {
    return schemaRegistryEnabled;
  }

  public void setSchemaRegistryEnabled(Boolean schemaRegistryEnabled) {
    this.schemaRegistryEnabled = schemaRegistryEnabled;
  }


  public DbaasServiceKafka version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Kafka version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public DbaasServiceKafka createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Service creation timestamp (ISO 8601)
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DbaasServiceKafka plan(String plan) {
    this.plan = plan;
    return this;
  }

   /**
   * Subscription plan
   * @return plan
  **/
  @javax.annotation.Nonnull
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public DbaasServiceKafka users(List<DbaasServiceKafkaUsersInner> users) {
    this.users = users;
    return this;
  }

  public DbaasServiceKafka addUsersItem(DbaasServiceKafkaUsersInner usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * List of service users
   * @return users
  **/
  @javax.annotation.Nullable
  public List<DbaasServiceKafkaUsersInner> getUsers() {
    return users;
  }

  public void setUsers(List<DbaasServiceKafkaUsersInner> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasServiceKafka dbaasServiceKafka = (DbaasServiceKafka) o;
    return Objects.equals(this.updatedAt, dbaasServiceKafka.updatedAt) &&
        Objects.equals(this.authenticationMethods, dbaasServiceKafka.authenticationMethods) &&
        Objects.equals(this.nodeCount, dbaasServiceKafka.nodeCount) &&
        Objects.equals(this.connectionInfo, dbaasServiceKafka.connectionInfo) &&
        Objects.equals(this.nodeCpuCount, dbaasServiceKafka.nodeCpuCount) &&
        Objects.equals(this.kafkaRestEnabled, dbaasServiceKafka.kafkaRestEnabled) &&
        Objects.equals(this.integrations, dbaasServiceKafka.integrations) &&
        Objects.equals(this.zone, dbaasServiceKafka.zone) &&
        Objects.equals(this.nodeStates, dbaasServiceKafka.nodeStates) &&
        Objects.equals(this.name, dbaasServiceKafka.name) &&
        Objects.equals(this.kafkaConnectEnabled, dbaasServiceKafka.kafkaConnectEnabled) &&
        Objects.equals(this.type, dbaasServiceKafka.type) &&
        Objects.equals(this.state, dbaasServiceKafka.state) &&
        Objects.equals(this.ipFilter, dbaasServiceKafka.ipFilter) &&
        Objects.equals(this.schemaRegistrySettings, dbaasServiceKafka.schemaRegistrySettings) &&
        Objects.equals(this.backups, dbaasServiceKafka.backups) &&
        Objects.equals(this.kafkaRestSettings, dbaasServiceKafka.kafkaRestSettings) &&
        Objects.equals(this.terminationProtection, dbaasServiceKafka.terminationProtection) &&
        Objects.equals(this.notifications, dbaasServiceKafka.notifications) &&
        Objects.equals(this.kafkaConnectSettings, dbaasServiceKafka.kafkaConnectSettings) &&
        Objects.equals(this.components, dbaasServiceKafka.components) &&
        Objects.equals(this.maintenance, dbaasServiceKafka.maintenance) &&
        Objects.equals(this.kafkaSettings, dbaasServiceKafka.kafkaSettings) &&
        Objects.equals(this.diskSize, dbaasServiceKafka.diskSize) &&
        Objects.equals(this.nodeMemory, dbaasServiceKafka.nodeMemory) &&
        Objects.equals(this.uri, dbaasServiceKafka.uri) &&
        Objects.equals(this.uriParams, dbaasServiceKafka.uriParams) &&
        Objects.equals(this.schemaRegistryEnabled, dbaasServiceKafka.schemaRegistryEnabled) &&
        Objects.equals(this.version, dbaasServiceKafka.version) &&
        Objects.equals(this.createdAt, dbaasServiceKafka.createdAt) &&
        Objects.equals(this.plan, dbaasServiceKafka.plan) &&
        Objects.equals(this.users, dbaasServiceKafka.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updatedAt, authenticationMethods, nodeCount, connectionInfo, nodeCpuCount, kafkaRestEnabled, integrations, zone, nodeStates, name, kafkaConnectEnabled, type, state, ipFilter, schemaRegistrySettings, backups, kafkaRestSettings, terminationProtection, notifications, kafkaConnectSettings, components, maintenance, kafkaSettings, diskSize, nodeMemory, uri, uriParams, schemaRegistryEnabled, version, createdAt, plan, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasServiceKafka {\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    authenticationMethods: ").append(toIndentedString(authenticationMethods)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    connectionInfo: ").append(toIndentedString(connectionInfo)).append("\n");
    sb.append("    nodeCpuCount: ").append(toIndentedString(nodeCpuCount)).append("\n");
    sb.append("    kafkaRestEnabled: ").append(toIndentedString(kafkaRestEnabled)).append("\n");
    sb.append("    integrations: ").append(toIndentedString(integrations)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("    nodeStates: ").append(toIndentedString(nodeStates)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    kafkaConnectEnabled: ").append(toIndentedString(kafkaConnectEnabled)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    ipFilter: ").append(toIndentedString(ipFilter)).append("\n");
    sb.append("    schemaRegistrySettings: ").append(toIndentedString(schemaRegistrySettings)).append("\n");
    sb.append("    backups: ").append(toIndentedString(backups)).append("\n");
    sb.append("    kafkaRestSettings: ").append(toIndentedString(kafkaRestSettings)).append("\n");
    sb.append("    terminationProtection: ").append(toIndentedString(terminationProtection)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    kafkaConnectSettings: ").append(toIndentedString(kafkaConnectSettings)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("    kafkaSettings: ").append(toIndentedString(kafkaSettings)).append("\n");
    sb.append("    diskSize: ").append(toIndentedString(diskSize)).append("\n");
    sb.append("    nodeMemory: ").append(toIndentedString(nodeMemory)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    uriParams: ").append(toIndentedString(uriParams)).append("\n");
    sb.append("    schemaRegistryEnabled: ").append(toIndentedString(schemaRegistryEnabled)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("updated-at");
    openapiFields.add("authentication-methods");
    openapiFields.add("node-count");
    openapiFields.add("connection-info");
    openapiFields.add("node-cpu-count");
    openapiFields.add("kafka-rest-enabled");
    openapiFields.add("integrations");
    openapiFields.add("zone");
    openapiFields.add("node-states");
    openapiFields.add("name");
    openapiFields.add("kafka-connect-enabled");
    openapiFields.add("type");
    openapiFields.add("state");
    openapiFields.add("ip-filter");
    openapiFields.add("schema-registry-settings");
    openapiFields.add("backups");
    openapiFields.add("kafka-rest-settings");
    openapiFields.add("termination-protection");
    openapiFields.add("notifications");
    openapiFields.add("kafka-connect-settings");
    openapiFields.add("components");
    openapiFields.add("maintenance");
    openapiFields.add("kafka-settings");
    openapiFields.add("disk-size");
    openapiFields.add("node-memory");
    openapiFields.add("uri");
    openapiFields.add("uri-params");
    openapiFields.add("schema-registry-enabled");
    openapiFields.add("version");
    openapiFields.add("created-at");
    openapiFields.add("plan");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("plan");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasServiceKafka
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasServiceKafka.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasServiceKafka is not found in the empty JSON string", DbaasServiceKafka.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasServiceKafka.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasServiceKafka` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DbaasServiceKafka.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authentication-methods`
      if (jsonObj.get("authentication-methods") != null && !jsonObj.get("authentication-methods").isJsonNull()) {
        DbaasServiceKafkaAuthenticationMethods.validateJsonElement(jsonObj.get("authentication-methods"));
      }
      // validate the optional field `connection-info`
      if (jsonObj.get("connection-info") != null && !jsonObj.get("connection-info").isJsonNull()) {
        DbaasServiceKafkaConnectionInfo.validateJsonElement(jsonObj.get("connection-info"));
      }
      if (jsonObj.get("integrations") != null && !jsonObj.get("integrations").isJsonNull()) {
        JsonArray jsonArrayintegrations = jsonObj.getAsJsonArray("integrations");
        if (jsonArrayintegrations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("integrations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `integrations` to be an array in the JSON string but got `%s`", jsonObj.get("integrations").toString()));
          }

          // validate the optional field `integrations` (array)
          for (int i = 0; i < jsonArrayintegrations.size(); i++) {
            DbaasIntegration.validateJsonElement(jsonArrayintegrations.get(i));
          };
        }
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
      if (jsonObj.get("node-states") != null && !jsonObj.get("node-states").isJsonNull()) {
        JsonArray jsonArraynodeStates = jsonObj.getAsJsonArray("node-states");
        if (jsonArraynodeStates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("node-states").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `node-states` to be an array in the JSON string but got `%s`", jsonObj.get("node-states").toString()));
          }

          // validate the optional field `node-states` (array)
          for (int i = 0; i < jsonArraynodeStates.size(); i++) {
            DbaasNodeState.validateJsonElement(jsonArraynodeStates.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        EnumServiceState.validateJsonElement(jsonObj.get("state"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ip-filter") != null && !jsonObj.get("ip-filter").isJsonNull() && !jsonObj.get("ip-filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip-filter` to be an array in the JSON string but got `%s`", jsonObj.get("ip-filter").toString()));
      }
      // validate the optional field `schema-registry-settings`
      if (jsonObj.get("schema-registry-settings") != null && !jsonObj.get("schema-registry-settings").isJsonNull()) {
        JsonSchemaSchemaRegistry.validateJsonElement(jsonObj.get("schema-registry-settings"));
      }
      if (jsonObj.get("backups") != null && !jsonObj.get("backups").isJsonNull()) {
        JsonArray jsonArraybackups = jsonObj.getAsJsonArray("backups");
        if (jsonArraybackups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backups` to be an array in the JSON string but got `%s`", jsonObj.get("backups").toString()));
          }

          // validate the optional field `backups` (array)
          for (int i = 0; i < jsonArraybackups.size(); i++) {
            DbaasServiceBackup.validateJsonElement(jsonArraybackups.get(i));
          };
        }
      }
      // validate the optional field `kafka-rest-settings`
      if (jsonObj.get("kafka-rest-settings") != null && !jsonObj.get("kafka-rest-settings").isJsonNull()) {
        JsonSchemaKafkaRest.validateJsonElement(jsonObj.get("kafka-rest-settings"));
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            DbaasServiceNotification.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
      // validate the optional field `kafka-connect-settings`
      if (jsonObj.get("kafka-connect-settings") != null && !jsonObj.get("kafka-connect-settings").isJsonNull()) {
        JsonSchemaKafkaConnect.validateJsonElement(jsonObj.get("kafka-connect-settings"));
      }
      if (jsonObj.get("components") != null && !jsonObj.get("components").isJsonNull()) {
        JsonArray jsonArraycomponents = jsonObj.getAsJsonArray("components");
        if (jsonArraycomponents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("components").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
          }

          // validate the optional field `components` (array)
          for (int i = 0; i < jsonArraycomponents.size(); i++) {
            DbaasServiceKafkaComponentsInner.validateJsonElement(jsonArraycomponents.get(i));
          };
        }
      }
      // validate the optional field `maintenance`
      if (jsonObj.get("maintenance") != null && !jsonObj.get("maintenance").isJsonNull()) {
        DbaasServiceMaintenance.validateJsonElement(jsonObj.get("maintenance"));
      }
      // validate the optional field `kafka-settings`
      if (jsonObj.get("kafka-settings") != null && !jsonObj.get("kafka-settings").isJsonNull()) {
        JsonSchemaKafka.validateJsonElement(jsonObj.get("kafka-settings"));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            DbaasServiceKafkaUsersInner.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasServiceKafka.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasServiceKafka' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasServiceKafka> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasServiceKafka.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasServiceKafka>() {
           @Override
           public void write(JsonWriter out, DbaasServiceKafka value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasServiceKafka read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasServiceKafka given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasServiceKafka
  * @throws IOException if the JSON string is invalid with respect to DbaasServiceKafka
  */
  public static DbaasServiceKafka fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasServiceKafka.class);
  }

 /**
  * Convert an instance of DbaasServiceKafka to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

