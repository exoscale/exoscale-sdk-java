/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * InstanceType - Compute instance type
 */

public class InstanceType {

    /**
     * Instance type ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Instance type size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Size> size;

    /**
     * Instance type family
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("family")
    private Optional<? extends Family> family;

    /**
     * CPU count
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpus")
    private Optional<? extends Long> cpus;

    /**
     * GPU count
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gpus")
    private Optional<? extends Long> gpus;

    /**
     * Requires authorization or publicly available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorized")
    private Optional<? extends Boolean> authorized;

    /**
     * Available memory
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memory")
    private Optional<? extends Long> memory;

    /**
     * Instance Type available zones
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zones")
    private Optional<? extends java.util.List<ZoneName>> zones;

    public InstanceType(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("size") Optional<? extends Size> size,
            @JsonProperty("family") Optional<? extends Family> family,
            @JsonProperty("cpus") Optional<? extends Long> cpus,
            @JsonProperty("gpus") Optional<? extends Long> gpus,
            @JsonProperty("authorized") Optional<? extends Boolean> authorized,
            @JsonProperty("memory") Optional<? extends Long> memory,
            @JsonProperty("zones") Optional<? extends java.util.List<ZoneName>> zones) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(family, "family");
        Utils.checkNotNull(cpus, "cpus");
        Utils.checkNotNull(gpus, "gpus");
        Utils.checkNotNull(authorized, "authorized");
        Utils.checkNotNull(memory, "memory");
        Utils.checkNotNull(zones, "zones");
        this.id = id;
        this.size = size;
        this.family = family;
        this.cpus = cpus;
        this.gpus = gpus;
        this.authorized = authorized;
        this.memory = memory;
        this.zones = zones;
    }

    /**
     * Instance type ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Instance type size
     */
    public Optional<? extends Size> size() {
        return size;
    }

    /**
     * Instance type family
     */
    public Optional<? extends Family> family() {
        return family;
    }

    /**
     * CPU count
     */
    public Optional<? extends Long> cpus() {
        return cpus;
    }

    /**
     * GPU count
     */
    public Optional<? extends Long> gpus() {
        return gpus;
    }

    /**
     * Requires authorization or publicly available
     */
    public Optional<? extends Boolean> authorized() {
        return authorized;
    }

    /**
     * Available memory
     */
    public Optional<? extends Long> memory() {
        return memory;
    }

    /**
     * Instance Type available zones
     */
    public Optional<? extends java.util.List<ZoneName>> zones() {
        return zones;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Instance type ID
     */
    public InstanceType withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Instance type ID
     */
    public InstanceType withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Instance type size
     */
    public InstanceType withSize(Size size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Instance type size
     */
    public InstanceType withSize(Optional<? extends Size> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Instance type family
     */
    public InstanceType withFamily(Family family) {
        Utils.checkNotNull(family, "family");
        this.family = Optional.ofNullable(family);
        return this;
    }

    /**
     * Instance type family
     */
    public InstanceType withFamily(Optional<? extends Family> family) {
        Utils.checkNotNull(family, "family");
        this.family = family;
        return this;
    }

    /**
     * CPU count
     */
    public InstanceType withCpus(long cpus) {
        Utils.checkNotNull(cpus, "cpus");
        this.cpus = Optional.ofNullable(cpus);
        return this;
    }

    /**
     * CPU count
     */
    public InstanceType withCpus(Optional<? extends Long> cpus) {
        Utils.checkNotNull(cpus, "cpus");
        this.cpus = cpus;
        return this;
    }

    /**
     * GPU count
     */
    public InstanceType withGpus(long gpus) {
        Utils.checkNotNull(gpus, "gpus");
        this.gpus = Optional.ofNullable(gpus);
        return this;
    }

    /**
     * GPU count
     */
    public InstanceType withGpus(Optional<? extends Long> gpus) {
        Utils.checkNotNull(gpus, "gpus");
        this.gpus = gpus;
        return this;
    }

    /**
     * Requires authorization or publicly available
     */
    public InstanceType withAuthorized(boolean authorized) {
        Utils.checkNotNull(authorized, "authorized");
        this.authorized = Optional.ofNullable(authorized);
        return this;
    }

    /**
     * Requires authorization or publicly available
     */
    public InstanceType withAuthorized(Optional<? extends Boolean> authorized) {
        Utils.checkNotNull(authorized, "authorized");
        this.authorized = authorized;
        return this;
    }

    /**
     * Available memory
     */
    public InstanceType withMemory(long memory) {
        Utils.checkNotNull(memory, "memory");
        this.memory = Optional.ofNullable(memory);
        return this;
    }

    /**
     * Available memory
     */
    public InstanceType withMemory(Optional<? extends Long> memory) {
        Utils.checkNotNull(memory, "memory");
        this.memory = memory;
        return this;
    }

    /**
     * Instance Type available zones
     */
    public InstanceType withZones(java.util.List<ZoneName> zones) {
        Utils.checkNotNull(zones, "zones");
        this.zones = Optional.ofNullable(zones);
        return this;
    }

    /**
     * Instance Type available zones
     */
    public InstanceType withZones(Optional<? extends java.util.List<ZoneName>> zones) {
        Utils.checkNotNull(zones, "zones");
        this.zones = zones;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InstanceType other = (InstanceType) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.family, other.family) &&
            java.util.Objects.deepEquals(this.cpus, other.cpus) &&
            java.util.Objects.deepEquals(this.gpus, other.gpus) &&
            java.util.Objects.deepEquals(this.authorized, other.authorized) &&
            java.util.Objects.deepEquals(this.memory, other.memory) &&
            java.util.Objects.deepEquals(this.zones, other.zones);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            size,
            family,
            cpus,
            gpus,
            authorized,
            memory,
            zones);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InstanceType.class,
                "id", id,
                "size", size,
                "family", family,
                "cpus", cpus,
                "gpus", gpus,
                "authorized", authorized,
                "memory", memory,
                "zones", zones);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends Size> size = Optional.empty();
 
        private Optional<? extends Family> family = Optional.empty();
 
        private Optional<? extends Long> cpus = Optional.empty();
 
        private Optional<? extends Long> gpus = Optional.empty();
 
        private Optional<? extends Boolean> authorized = Optional.empty();
 
        private Optional<? extends Long> memory = Optional.empty();
 
        private Optional<? extends java.util.List<ZoneName>> zones = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Instance type ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Instance type ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Instance type size
         */
        public Builder size(Size size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Instance type size
         */
        public Builder size(Optional<? extends Size> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * Instance type family
         */
        public Builder family(Family family) {
            Utils.checkNotNull(family, "family");
            this.family = Optional.ofNullable(family);
            return this;
        }

        /**
         * Instance type family
         */
        public Builder family(Optional<? extends Family> family) {
            Utils.checkNotNull(family, "family");
            this.family = family;
            return this;
        }

        /**
         * CPU count
         */
        public Builder cpus(long cpus) {
            Utils.checkNotNull(cpus, "cpus");
            this.cpus = Optional.ofNullable(cpus);
            return this;
        }

        /**
         * CPU count
         */
        public Builder cpus(Optional<? extends Long> cpus) {
            Utils.checkNotNull(cpus, "cpus");
            this.cpus = cpus;
            return this;
        }

        /**
         * GPU count
         */
        public Builder gpus(long gpus) {
            Utils.checkNotNull(gpus, "gpus");
            this.gpus = Optional.ofNullable(gpus);
            return this;
        }

        /**
         * GPU count
         */
        public Builder gpus(Optional<? extends Long> gpus) {
            Utils.checkNotNull(gpus, "gpus");
            this.gpus = gpus;
            return this;
        }

        /**
         * Requires authorization or publicly available
         */
        public Builder authorized(boolean authorized) {
            Utils.checkNotNull(authorized, "authorized");
            this.authorized = Optional.ofNullable(authorized);
            return this;
        }

        /**
         * Requires authorization or publicly available
         */
        public Builder authorized(Optional<? extends Boolean> authorized) {
            Utils.checkNotNull(authorized, "authorized");
            this.authorized = authorized;
            return this;
        }

        /**
         * Available memory
         */
        public Builder memory(long memory) {
            Utils.checkNotNull(memory, "memory");
            this.memory = Optional.ofNullable(memory);
            return this;
        }

        /**
         * Available memory
         */
        public Builder memory(Optional<? extends Long> memory) {
            Utils.checkNotNull(memory, "memory");
            this.memory = memory;
            return this;
        }

        /**
         * Instance Type available zones
         */
        public Builder zones(java.util.List<ZoneName> zones) {
            Utils.checkNotNull(zones, "zones");
            this.zones = Optional.ofNullable(zones);
            return this;
        }

        /**
         * Instance Type available zones
         */
        public Builder zones(Optional<? extends java.util.List<ZoneName>> zones) {
            Utils.checkNotNull(zones, "zones");
            this.zones = zones;
            return this;
        }
        
        public InstanceType build() {
            return new InstanceType(
                id,
                size,
                family,
                cpus,
                gpus,
                authorized,
                memory,
                zones);
        }
    }
}

