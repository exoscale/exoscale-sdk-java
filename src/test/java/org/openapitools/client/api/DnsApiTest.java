/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateDnsDomainRecordRequest;
import org.openapitools.client.model.CreateDnsDomainRequest;
import org.openapitools.client.model.DnsDomain;
import org.openapitools.client.model.DnsDomainRecord;
import org.openapitools.client.model.GetDnsDomainZoneFile200Response;
import org.openapitools.client.model.ListDnsDomainRecords200Response;
import org.openapitools.client.model.ListDnsDomains200Response;
import org.openapitools.client.model.Operation;
import java.util.UUID;
import org.openapitools.client.model.UpdateDnsDomainRecordRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for DnsApi
 */
@Ignore
public class DnsApiTest {

    private final DnsApi api = new DnsApi();

    
    /**
     * Create DNS domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDnsDomainTest() throws ApiException {
        CreateDnsDomainRequest createDnsDomainRequest = null;
        DnsDomain response = 
        api.createDnsDomain(createDnsDomainRequest);
        
        // TODO: test validations
    }
    
    /**
     * Create DNS domain record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDnsDomainRecordTest() throws ApiException {
        UUID domainId = null;
        CreateDnsDomainRecordRequest createDnsDomainRecordRequest = null;
        Operation response = 
        api.createDnsDomainRecord(domainId, createDnsDomainRecordRequest);
        
        // TODO: test validations
    }
    
    /**
     * Delete DNS Domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnsDomainTest() throws ApiException {
        UUID id = null;
        Operation response = 
        api.deleteDnsDomain(id);
        
        // TODO: test validations
    }
    
    /**
     * Delete DNS domain record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnsDomainRecordTest() throws ApiException {
        UUID domainId = null;
        UUID recordId = null;
        Operation response = 
        api.deleteDnsDomainRecord(domainId, recordId);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve DNS domain details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsDomainTest() throws ApiException {
        UUID id = null;
        DnsDomain response = 
        api.getDnsDomain(id);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve DNS domain record details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsDomainRecordTest() throws ApiException {
        UUID domainId = null;
        UUID recordId = null;
        DnsDomainRecord response = 
        api.getDnsDomainRecord(domainId, recordId);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve DNS domain zone file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsDomainZoneFileTest() throws ApiException {
        UUID id = null;
        GetDnsDomainZoneFile200Response response = 
        api.getDnsDomainZoneFile(id);
        
        // TODO: test validations
    }
    
    /**
     * List DNS domain records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDnsDomainRecordsTest() throws ApiException {
        UUID domainId = null;
        ListDnsDomainRecords200Response response = 
        api.listDnsDomainRecords(domainId);
        
        // TODO: test validations
    }
    
    /**
     * List DNS domains
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDnsDomainsTest() throws ApiException {
        ListDnsDomains200Response response = 
        api.listDnsDomains();
        
        // TODO: test validations
    }
    
    /**
     * Update DNS domain record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDnsDomainRecordTest() throws ApiException {
        UUID domainId = null;
        UUID recordId = null;
        UpdateDnsDomainRecordRequest updateDnsDomainRecordRequest = null;
        Operation response = 
        api.updateDnsDomainRecord(domainId, recordId, updateDnsDomainRecordRequest);
        
        // TODO: test validations
    }
    
}
