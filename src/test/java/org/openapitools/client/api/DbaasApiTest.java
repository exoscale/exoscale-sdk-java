/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateDbaasIntegrationRequest;
import org.openapitools.client.model.CreateDbaasKafkaUserRequest;
import org.openapitools.client.model.CreateDbaasMysqlDatabaseRequest;
import org.openapitools.client.model.CreateDbaasMysqlUserRequest;
import org.openapitools.client.model.CreateDbaasPgConnectionPoolRequest;
import org.openapitools.client.model.CreateDbaasPgDatabaseRequest;
import org.openapitools.client.model.CreateDbaasPgUpgradeCheckRequest;
import org.openapitools.client.model.CreateDbaasPostgresUserRequest;
import org.openapitools.client.model.CreateDbaasServiceGrafanaRequest;
import org.openapitools.client.model.CreateDbaasServiceKafkaRequest;
import org.openapitools.client.model.CreateDbaasServiceMysqlRequest;
import org.openapitools.client.model.CreateDbaasServiceOpensearchRequest;
import org.openapitools.client.model.CreateDbaasServicePgRequest;
import org.openapitools.client.model.CreateDbaasServiceRedisRequest;
import org.openapitools.client.model.CreateDbaasTaskMigrationCheckRequest;
import org.openapitools.client.model.DbaasIntegration;
import org.openapitools.client.model.DbaasKafkaAcls;
import org.openapitools.client.model.DbaasKafkaSchemaRegistryAclEntry;
import org.openapitools.client.model.DbaasKafkaTopicAclEntry;
import org.openapitools.client.model.DbaasMigrationStatus;
import org.openapitools.client.model.DbaasOpensearchAclConfig;
import org.openapitools.client.model.DbaasPostgresUsers;
import org.openapitools.client.model.DbaasServiceGrafana;
import org.openapitools.client.model.DbaasServiceKafka;
import org.openapitools.client.model.DbaasServiceLogs;
import org.openapitools.client.model.DbaasServiceMysql;
import org.openapitools.client.model.DbaasServiceOpensearch;
import org.openapitools.client.model.DbaasServicePg;
import org.openapitools.client.model.DbaasServiceRedis;
import org.openapitools.client.model.DbaasServiceType;
import org.openapitools.client.model.DbaasTask;
import org.openapitools.client.model.DbaasUserKafkaSecrets;
import org.openapitools.client.model.DbaasUserMysqlSecrets;
import org.openapitools.client.model.DbaasUserOpensearchSecrets;
import org.openapitools.client.model.DbaasUserPostgresSecrets;
import org.openapitools.client.model.DbaasUserRedisSecrets;
import org.openapitools.client.model.GetDbaasCaCertificate200Response;
import org.openapitools.client.model.GetDbaasServiceLogsRequest;
import org.openapitools.client.model.GetDbaasServiceMetrics200Response;
import org.openapitools.client.model.GetDbaasServiceMetricsRequest;
import org.openapitools.client.model.GetDbaasSettingsGrafana200Response;
import org.openapitools.client.model.GetDbaasSettingsKafka200Response;
import org.openapitools.client.model.GetDbaasSettingsMysql200Response;
import org.openapitools.client.model.GetDbaasSettingsOpensearch200Response;
import org.openapitools.client.model.GetDbaasSettingsPg200Response;
import org.openapitools.client.model.GetDbaasSettingsRedis200Response;
import org.openapitools.client.model.ListDbaasIntegrationSettings200Response;
import org.openapitools.client.model.ListDbaasIntegrationTypes200Response;
import org.openapitools.client.model.ListDbaasServiceTypes200Response;
import org.openapitools.client.model.ListDbaasServices200Response;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.ResetDbaasMysqlUserPasswordRequest;
import org.openapitools.client.model.ResetDbaasOpensearchUserPasswordRequest;
import java.util.UUID;
import org.openapitools.client.model.UpdateDbaasIntegrationRequest;
import org.openapitools.client.model.UpdateDbaasPgConnectionPoolRequest;
import org.openapitools.client.model.UpdateDbaasPostgresAllowReplicationRequest;
import org.openapitools.client.model.UpdateDbaasServiceGrafanaRequest;
import org.openapitools.client.model.UpdateDbaasServiceKafkaRequest;
import org.openapitools.client.model.UpdateDbaasServiceMysqlRequest;
import org.openapitools.client.model.UpdateDbaasServiceOpensearchRequest;
import org.openapitools.client.model.UpdateDbaasServicePgRequest;
import org.openapitools.client.model.UpdateDbaasServiceRedisRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DbaasApi
 */
@Disabled
public class DbaasApiTest {

    private final DbaasApi api = new DbaasApi();

    /**
     * Create a new DBaaS integration between two services
     *
     * Create a new DBaaS integration between two services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasIntegrationTest() throws ApiException {
        CreateDbaasIntegrationRequest createDbaasIntegrationRequest = null;
        Operation response = api.createDbaasIntegration(createDbaasIntegrationRequest);
        // TODO: test validations
    }

    /**
     * Add a Kafka Schema Registry ACL entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasKafkaSchemaRegistryAclConfigTest() throws ApiException {
        String name = null;
        DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry = null;
        Operation response = api.createDbaasKafkaSchemaRegistryAclConfig(name, dbaasKafkaSchemaRegistryAclEntry);
        // TODO: test validations
    }

    /**
     * Add a Kafka topic ACL entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasKafkaTopicAclConfigTest() throws ApiException {
        String name = null;
        DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry = null;
        Operation response = api.createDbaasKafkaTopicAclConfig(name, dbaasKafkaTopicAclEntry);
        // TODO: test validations
    }

    /**
     * Create a DBaaS Kafka user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasKafkaUserTest() throws ApiException {
        String serviceName = null;
        CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest = null;
        Operation response = api.createDbaasKafkaUser(serviceName, createDbaasKafkaUserRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS MySQL database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasMysqlDatabaseTest() throws ApiException {
        String serviceName = null;
        CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest = null;
        Operation response = api.createDbaasMysqlDatabase(serviceName, createDbaasMysqlDatabaseRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS MySQL user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasMysqlUserTest() throws ApiException {
        String serviceName = null;
        CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest = null;
        Operation response = api.createDbaasMysqlUser(serviceName, createDbaasMysqlUserRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS OpenSearch user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasOpensearchUserTest() throws ApiException {
        String serviceName = null;
        CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest = null;
        Operation response = api.createDbaasOpensearchUser(serviceName, createDbaasKafkaUserRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS PostgreSQL connection pool
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasPgConnectionPoolTest() throws ApiException {
        String serviceName = null;
        CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest = null;
        Operation response = api.createDbaasPgConnectionPool(serviceName, createDbaasPgConnectionPoolRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS Postgres database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasPgDatabaseTest() throws ApiException {
        String serviceName = null;
        CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest = null;
        Operation response = api.createDbaasPgDatabase(serviceName, createDbaasPgDatabaseRequest);
        // TODO: test validations
    }

    /**
     * 
     *
     * Check whether you can upgrade Postgres service to a newer version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasPgUpgradeCheckTest() throws ApiException {
        String service = null;
        CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest = null;
        DbaasTask response = api.createDbaasPgUpgradeCheck(service, createDbaasPgUpgradeCheckRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS Postgres user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasPostgresUserTest() throws ApiException {
        String serviceName = null;
        CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest = null;
        Operation response = api.createDbaasPostgresUser(serviceName, createDbaasPostgresUserRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS Redis user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasRedisUserTest() throws ApiException {
        String serviceName = null;
        CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest = null;
        Operation response = api.createDbaasRedisUser(serviceName, createDbaasKafkaUserRequest);
        // TODO: test validations
    }

    /**
     * 
     *
     * Create a DBaaS Grafana service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasServiceGrafanaTest() throws ApiException {
        String name = null;
        CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest = null;
        Operation response = api.createDbaasServiceGrafana(name, createDbaasServiceGrafanaRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS Kafka service
     *
     * Create a DBaaS Kafka service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasServiceKafkaTest() throws ApiException {
        String name = null;
        CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest = null;
        Operation response = api.createDbaasServiceKafka(name, createDbaasServiceKafkaRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS MySQL service
     *
     * Create a DBaaS MySQL service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasServiceMysqlTest() throws ApiException {
        String name = null;
        CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest = null;
        Operation response = api.createDbaasServiceMysql(name, createDbaasServiceMysqlRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS OpenSearch service
     *
     * Create a DBaaS OpenSearch service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasServiceOpensearchTest() throws ApiException {
        String name = null;
        CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest = null;
        Operation response = api.createDbaasServiceOpensearch(name, createDbaasServiceOpensearchRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS PostgreSQL service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasServicePgTest() throws ApiException {
        String name = null;
        CreateDbaasServicePgRequest createDbaasServicePgRequest = null;
        Operation response = api.createDbaasServicePg(name, createDbaasServicePgRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS Redis service
     *
     * Create a DBaaS Redis service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasServiceRedisTest() throws ApiException {
        String name = null;
        CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest = null;
        Operation response = api.createDbaasServiceRedis(name, createDbaasServiceRedisRequest);
        // TODO: test validations
    }

    /**
     * 
     *
     * Create a DBaaS task to check migration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDbaasTaskMigrationCheckTest() throws ApiException {
        String service = null;
        CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest = null;
        Operation response = api.createDbaasTaskMigrationCheck(service, createDbaasTaskMigrationCheckRequest);
        // TODO: test validations
    }

    /**
     * Delete a DBaaS Integration
     *
     * Delete a DBaaS Integration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasIntegrationTest() throws ApiException {
        UUID id = null;
        Operation response = api.deleteDbaasIntegration(id);
        // TODO: test validations
    }

    /**
     * Delete a Kafka ACL entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasKafkaSchemaRegistryAclConfigTest() throws ApiException {
        String name = null;
        String aclId = null;
        Operation response = api.deleteDbaasKafkaSchemaRegistryAclConfig(name, aclId);
        // TODO: test validations
    }

    /**
     * Delete a Kafka ACL entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasKafkaTopicAclConfigTest() throws ApiException {
        String name = null;
        String aclId = null;
        Operation response = api.deleteDbaasKafkaTopicAclConfig(name, aclId);
        // TODO: test validations
    }

    /**
     * Delete a DBaaS kafka user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasKafkaUserTest() throws ApiException {
        String serviceName = null;
        String username = null;
        Operation response = api.deleteDbaasKafkaUser(serviceName, username);
        // TODO: test validations
    }

    /**
     * Delete a DBaaS MySQL database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasMysqlDatabaseTest() throws ApiException {
        String serviceName = null;
        String databaseName = null;
        Operation response = api.deleteDbaasMysqlDatabase(serviceName, databaseName);
        // TODO: test validations
    }

    /**
     * Delete a DBaaS MySQL user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasMysqlUserTest() throws ApiException {
        String serviceName = null;
        String username = null;
        Operation response = api.deleteDbaasMysqlUser(serviceName, username);
        // TODO: test validations
    }

    /**
     * Delete a DBaaS OpenSearch user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasOpensearchUserTest() throws ApiException {
        String serviceName = null;
        String username = null;
        Operation response = api.deleteDbaasOpensearchUser(serviceName, username);
        // TODO: test validations
    }

    /**
     * Delete a DBaaS PostgreSQL connection pool
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasPgConnectionPoolTest() throws ApiException {
        String serviceName = null;
        String connectionPoolName = null;
        Operation response = api.deleteDbaasPgConnectionPool(serviceName, connectionPoolName);
        // TODO: test validations
    }

    /**
     * Delete a DBaaS Postgres database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasPgDatabaseTest() throws ApiException {
        String serviceName = null;
        String databaseName = null;
        Operation response = api.deleteDbaasPgDatabase(serviceName, databaseName);
        // TODO: test validations
    }

    /**
     * Delete a DBaaS Postgres user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasPostgresUserTest() throws ApiException {
        String serviceName = null;
        String username = null;
        Operation response = api.deleteDbaasPostgresUser(serviceName, username);
        // TODO: test validations
    }

    /**
     * Delete a DBaaS Redis user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasRedisUserTest() throws ApiException {
        String serviceName = null;
        String username = null;
        Operation response = api.deleteDbaasRedisUser(serviceName, username);
        // TODO: test validations
    }

    /**
     * Delete a DBaaS service
     *
     * Delete a DBaaS service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasServiceTest() throws ApiException {
        String name = null;
        Operation response = api.deleteDbaasService(name);
        // TODO: test validations
    }

    /**
     * Delete a Grafana service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasServiceGrafanaTest() throws ApiException {
        String name = null;
        Operation response = api.deleteDbaasServiceGrafana(name);
        // TODO: test validations
    }

    /**
     * Delete a Kafka service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasServiceKafkaTest() throws ApiException {
        String name = null;
        Operation response = api.deleteDbaasServiceKafka(name);
        // TODO: test validations
    }

    /**
     * Delete a MySQL service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasServiceMysqlTest() throws ApiException {
        String name = null;
        Operation response = api.deleteDbaasServiceMysql(name);
        // TODO: test validations
    }

    /**
     * Delete a OpenSearch service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasServiceOpensearchTest() throws ApiException {
        String name = null;
        Operation response = api.deleteDbaasServiceOpensearch(name);
        // TODO: test validations
    }

    /**
     * Delete a Postgres service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasServicePgTest() throws ApiException {
        String name = null;
        Operation response = api.deleteDbaasServicePg(name);
        // TODO: test validations
    }

    /**
     * Delete a Redis service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDbaasServiceRedisTest() throws ApiException {
        String name = null;
        Operation response = api.deleteDbaasServiceRedis(name);
        // TODO: test validations
    }

    /**
     * Get DBaaS CA Certificate
     *
     * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasCaCertificateTest() throws ApiException {
        GetDbaasCaCertificate200Response response = api.getDbaasCaCertificate();
        // TODO: test validations
    }

    /**
     * Get a DBaaS Integration
     *
     * Get a DBaaS Integration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasIntegrationTest() throws ApiException {
        UUID id = null;
        DbaasIntegration response = api.getDbaasIntegration(id);
        // TODO: test validations
    }

    /**
     * Get DBaaS kafka ACL configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasKafkaAclConfigTest() throws ApiException {
        String name = null;
        DbaasKafkaAcls response = api.getDbaasKafkaAclConfig(name);
        // TODO: test validations
    }

    /**
     * Get a DBaaS migration status
     *
     * Get a DBaaS migration status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasMigrationStatusTest() throws ApiException {
        String name = null;
        DbaasMigrationStatus response = api.getDbaasMigrationStatus(name);
        // TODO: test validations
    }

    /**
     * Get DBaaS OpenSearch ACL configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasOpensearchAclConfigTest() throws ApiException {
        String name = null;
        DbaasOpensearchAclConfig response = api.getDbaasOpensearchAclConfig(name);
        // TODO: test validations
    }

    /**
     * Get a DBaaS Grafana service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasServiceGrafanaTest() throws ApiException {
        String name = null;
        DbaasServiceGrafana response = api.getDbaasServiceGrafana(name);
        // TODO: test validations
    }

    /**
     * Get a DBaaS Kafka service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasServiceKafkaTest() throws ApiException {
        String name = null;
        DbaasServiceKafka response = api.getDbaasServiceKafka(name);
        // TODO: test validations
    }

    /**
     * Get logs of DBaaS service
     *
     * Get logs of DBaaS service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasServiceLogsTest() throws ApiException {
        String serviceName = null;
        GetDbaasServiceLogsRequest getDbaasServiceLogsRequest = null;
        DbaasServiceLogs response = api.getDbaasServiceLogs(serviceName, getDbaasServiceLogsRequest);
        // TODO: test validations
    }

    /**
     * Get metrics of DBaaS service
     *
     * Get metrics of DBaaS service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasServiceMetricsTest() throws ApiException {
        String serviceName = null;
        GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest = null;
        GetDbaasServiceMetrics200Response response = api.getDbaasServiceMetrics(serviceName, getDbaasServiceMetricsRequest);
        // TODO: test validations
    }

    /**
     * Get a DBaaS MySQL service
     *
     * Get a DBaaS MySQL service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasServiceMysqlTest() throws ApiException {
        String name = null;
        DbaasServiceMysql response = api.getDbaasServiceMysql(name);
        // TODO: test validations
    }

    /**
     * Get a DBaaS OpenSearch service
     *
     * Get a DBaaS OpenSearch service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasServiceOpensearchTest() throws ApiException {
        String name = null;
        DbaasServiceOpensearch response = api.getDbaasServiceOpensearch(name);
        // TODO: test validations
    }

    /**
     * Get a DBaaS PostgreSQL service
     *
     * Get a DBaaS PostgreSQL service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasServicePgTest() throws ApiException {
        String name = null;
        DbaasServicePg response = api.getDbaasServicePg(name);
        // TODO: test validations
    }

    /**
     * Get a DBaaS Redis service
     *
     * Get a DBaaS Redis service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasServiceRedisTest() throws ApiException {
        String name = null;
        DbaasServiceRedis response = api.getDbaasServiceRedis(name);
        // TODO: test validations
    }

    /**
     * Get a DBaaS service type
     *
     * Get a DBaaS service type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasServiceTypeTest() throws ApiException {
        String serviceTypeName = null;
        DbaasServiceType response = api.getDbaasServiceType(serviceTypeName);
        // TODO: test validations
    }

    /**
     * Get DBaaS Grafana settings
     *
     * Get DBaaS Grafana settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasSettingsGrafanaTest() throws ApiException {
        GetDbaasSettingsGrafana200Response response = api.getDbaasSettingsGrafana();
        // TODO: test validations
    }

    /**
     * Get DBaaS Kafka settings
     *
     * Get DBaaS Kafka settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasSettingsKafkaTest() throws ApiException {
        GetDbaasSettingsKafka200Response response = api.getDbaasSettingsKafka();
        // TODO: test validations
    }

    /**
     * Get DBaaS MySQL settings
     *
     * Get DBaaS MySQL settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasSettingsMysqlTest() throws ApiException {
        GetDbaasSettingsMysql200Response response = api.getDbaasSettingsMysql();
        // TODO: test validations
    }

    /**
     * Get DBaaS OpenSearch settings
     *
     * Get DBaaS OpenSearch settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasSettingsOpensearchTest() throws ApiException {
        GetDbaasSettingsOpensearch200Response response = api.getDbaasSettingsOpensearch();
        // TODO: test validations
    }

    /**
     * Get DBaaS PostgreSQL settings
     *
     * Get DBaaS PostgreSQL settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasSettingsPgTest() throws ApiException {
        GetDbaasSettingsPg200Response response = api.getDbaasSettingsPg();
        // TODO: test validations
    }

    /**
     * Get DBaaS Redis settings
     *
     * Returns the default settings for Redis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasSettingsRedisTest() throws ApiException {
        GetDbaasSettingsRedis200Response response = api.getDbaasSettingsRedis();
        // TODO: test validations
    }

    /**
     * Get a DBaaS task
     *
     * Get a DBaaS task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbaasTaskTest() throws ApiException {
        String service = null;
        UUID id = null;
        DbaasTask response = api.getDbaasTask(service, id);
        // TODO: test validations
    }

    /**
     * Get DBaaS integration settings
     *
     * Get DBaaS integration settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDbaasIntegrationSettingsTest() throws ApiException {
        String integrationType = null;
        String sourceType = null;
        String destType = null;
        ListDbaasIntegrationSettings200Response response = api.listDbaasIntegrationSettings(integrationType, sourceType, destType);
        // TODO: test validations
    }

    /**
     * Get DBaaS integration types
     *
     * Get DBaaS integration types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDbaasIntegrationTypesTest() throws ApiException {
        ListDbaasIntegrationTypes200Response response = api.listDbaasIntegrationTypes();
        // TODO: test validations
    }

    /**
     * DBaaS Service Types
     *
     * List available service types for DBaaS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDbaasServiceTypesTest() throws ApiException {
        ListDbaasServiceTypes200Response response = api.listDbaasServiceTypes();
        // TODO: test validations
    }

    /**
     * List DBaaS services
     *
     * List DBaaS services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDbaasServicesTest() throws ApiException {
        ListDbaasServices200Response response = api.listDbaasServices();
        // TODO: test validations
    }

    /**
     * Reset the credentials of a DBaaS Kafka user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDbaasKafkaUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest = null;
        Operation response = api.resetDbaasKafkaUserPassword(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
        // TODO: test validations
    }

    /**
     * Reset the credentials of a DBaaS mysql user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDbaasMysqlUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest = null;
        Operation response = api.resetDbaasMysqlUserPassword(serviceName, username, resetDbaasMysqlUserPasswordRequest);
        // TODO: test validations
    }

    /**
     * Reset the credentials of a DBaaS OpenSearch user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDbaasOpensearchUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest = null;
        Operation response = api.resetDbaasOpensearchUserPassword(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
        // TODO: test validations
    }

    /**
     * Reset the credentials of a DBaaS Postgres user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDbaasPostgresUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest = null;
        Operation response = api.resetDbaasPostgresUserPassword(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
        // TODO: test validations
    }

    /**
     * Reset the credentials of a DBaaS Redis user
     *
     * If no password is provided one will be generated automatically.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDbaasRedisUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest = null;
        Operation response = api.resetDbaasRedisUserPassword(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
        // TODO: test validations
    }

    /**
     * Reveal the secrets of a DBaaS Kafka user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revealDbaasKafkaUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserKafkaSecrets response = api.revealDbaasKafkaUserPassword(serviceName, username);
        // TODO: test validations
    }

    /**
     * Reveal the secrets of a DBaaS MySQL user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revealDbaasMysqlUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserMysqlSecrets response = api.revealDbaasMysqlUserPassword(serviceName, username);
        // TODO: test validations
    }

    /**
     * Reveal the secrets of a DBaaS OpenSearch user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revealDbaasOpensearchUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserOpensearchSecrets response = api.revealDbaasOpensearchUserPassword(serviceName, username);
        // TODO: test validations
    }

    /**
     * Reveal the secrets of a DBaaS Postgres user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revealDbaasPostgresUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserPostgresSecrets response = api.revealDbaasPostgresUserPassword(serviceName, username);
        // TODO: test validations
    }

    /**
     * Reveal the secrets of a DBaaS Redis user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revealDbaasRedisUserPasswordTest() throws ApiException {
        String serviceName = null;
        String username = null;
        DbaasUserRedisSecrets response = api.revealDbaasRedisUserPassword(serviceName, username);
        // TODO: test validations
    }

    /**
     * Initiate Grafana maintenance update
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDbaasGrafanaMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = api.startDbaasGrafanaMaintenance(name);
        // TODO: test validations
    }

    /**
     * Initiate Kafka maintenance update
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDbaasKafkaMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = api.startDbaasKafkaMaintenance(name);
        // TODO: test validations
    }

    /**
     * Initiate MySQL maintenance update
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDbaasMysqlMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = api.startDbaasMysqlMaintenance(name);
        // TODO: test validations
    }

    /**
     * Initiate OpenSearch maintenance update
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDbaasOpensearchMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = api.startDbaasOpensearchMaintenance(name);
        // TODO: test validations
    }

    /**
     * Initiate PostgreSQL maintenance update
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDbaasPgMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = api.startDbaasPgMaintenance(name);
        // TODO: test validations
    }

    /**
     * Initiate Redis maintenance update
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDbaasRedisMaintenanceTest() throws ApiException {
        String name = null;
        Operation response = api.startDbaasRedisMaintenance(name);
        // TODO: test validations
    }

    /**
     * Stop a DBaaS MySQL migration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopDbaasMysqlMigrationTest() throws ApiException {
        String name = null;
        Operation response = api.stopDbaasMysqlMigration(name);
        // TODO: test validations
    }

    /**
     * Stop a DBaaS PostgreSQL migration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopDbaasPgMigrationTest() throws ApiException {
        String name = null;
        Operation response = api.stopDbaasPgMigration(name);
        // TODO: test validations
    }

    /**
     * Stop a DBaaS Redis migration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopDbaasRedisMigrationTest() throws ApiException {
        String name = null;
        Operation response = api.stopDbaasRedisMigration(name);
        // TODO: test validations
    }

    /**
     * Update a existing DBaaS integration
     *
     * Update a existing DBaaS integration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDbaasIntegrationTest() throws ApiException {
        UUID id = null;
        UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest = null;
        Operation response = api.updateDbaasIntegration(id, updateDbaasIntegrationRequest);
        // TODO: test validations
    }

    /**
     * Create a DBaaS OpenSearch ACL configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDbaasOpensearchAclConfigTest() throws ApiException {
        String name = null;
        DbaasOpensearchAclConfig dbaasOpensearchAclConfig = null;
        Operation response = api.updateDbaasOpensearchAclConfig(name, dbaasOpensearchAclConfig);
        // TODO: test validations
    }

    /**
     * Update a DBaaS PostgreSQL connection pool
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDbaasPgConnectionPoolTest() throws ApiException {
        String serviceName = null;
        String connectionPoolName = null;
        UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest = null;
        Operation response = api.updateDbaasPgConnectionPool(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest);
        // TODO: test validations
    }

    /**
     * Update access control for one service user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDbaasPostgresAllowReplicationTest() throws ApiException {
        String serviceName = null;
        String username = null;
        UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest = null;
        DbaasPostgresUsers response = api.updateDbaasPostgresAllowReplication(serviceName, username, updateDbaasPostgresAllowReplicationRequest);
        // TODO: test validations
    }

    /**
     * Update a DBaaS Grafana service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDbaasServiceGrafanaTest() throws ApiException {
        String name = null;
        UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest = null;
        Operation response = api.updateDbaasServiceGrafana(name, updateDbaasServiceGrafanaRequest);
        // TODO: test validations
    }

    /**
     * Update a DBaaS Kafka service
     *
     * Update a DBaaS Kafka service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDbaasServiceKafkaTest() throws ApiException {
        String name = null;
        UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest = null;
        Operation response = api.updateDbaasServiceKafka(name, updateDbaasServiceKafkaRequest);
        // TODO: test validations
    }

    /**
     * Update a DBaaS MySQL service
     *
     * Update a DBaaS MySQL service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDbaasServiceMysqlTest() throws ApiException {
        String name = null;
        UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest = null;
        Operation response = api.updateDbaasServiceMysql(name, updateDbaasServiceMysqlRequest);
        // TODO: test validations
    }

    /**
     * Update a DBaaS OpenSearch service
     *
     * Update a DBaaS OpenSearch service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDbaasServiceOpensearchTest() throws ApiException {
        String name = null;
        UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest = null;
        Operation response = api.updateDbaasServiceOpensearch(name, updateDbaasServiceOpensearchRequest);
        // TODO: test validations
    }

    /**
     * Update a DBaaS PostgreSQL service
     *
     * Update a DBaaS PostgreSQL service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDbaasServicePgTest() throws ApiException {
        String name = null;
        UpdateDbaasServicePgRequest updateDbaasServicePgRequest = null;
        Operation response = api.updateDbaasServicePg(name, updateDbaasServicePgRequest);
        // TODO: test validations
    }

    /**
     * Update a DBaaS Redis service
     *
     * Update a DBaaS Redis service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDbaasServiceRedisTest() throws ApiException {
        String name = null;
        UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest = null;
        Operation response = api.updateDbaasServiceRedis(name, updateDbaasServiceRedisRequest);
        // TODO: test validations
    }

}
