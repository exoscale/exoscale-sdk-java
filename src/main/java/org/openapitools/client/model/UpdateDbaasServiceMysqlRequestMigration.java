/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnumMigrationMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Migrate data from existing server
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class UpdateDbaasServiceMysqlRequestMigration {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Long port;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private Boolean ssl;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_DBNAME = "dbname";
  @SerializedName(SERIALIZED_NAME_DBNAME)
  private String dbname;

  public static final String SERIALIZED_NAME_IGNORE_DBS = "ignore-dbs";
  @SerializedName(SERIALIZED_NAME_IGNORE_DBS)
  private String ignoreDbs;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private EnumMigrationMethod method;

  public UpdateDbaasServiceMysqlRequestMigration() {
  }

  public UpdateDbaasServiceMysqlRequestMigration host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Hostname or IP address of the server where to migrate data from
   * @return host
  **/
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public UpdateDbaasServiceMysqlRequestMigration port(Long port) {
    this.port = port;
    return this;
  }

   /**
   * Port number of the server where to migrate data from
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @javax.annotation.Nonnull
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }


  public UpdateDbaasServiceMysqlRequestMigration password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password for authentication with the server where to migrate data from
   * @return password
  **/
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public UpdateDbaasServiceMysqlRequestMigration ssl(Boolean ssl) {
    this.ssl = ssl;
    return this;
  }

   /**
   * The server where to migrate data from is secured with SSL
   * @return ssl
  **/
  @javax.annotation.Nullable
  public Boolean getSsl() {
    return ssl;
  }

  public void setSsl(Boolean ssl) {
    this.ssl = ssl;
  }


  public UpdateDbaasServiceMysqlRequestMigration username(String username) {
    this.username = username;
    return this;
  }

   /**
   * User name for authentication with the server where to migrate data from
   * @return username
  **/
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public UpdateDbaasServiceMysqlRequestMigration dbname(String dbname) {
    this.dbname = dbname;
    return this;
  }

   /**
   * Database name for bootstrapping the initial connection
   * @return dbname
  **/
  @javax.annotation.Nullable
  public String getDbname() {
    return dbname;
  }

  public void setDbname(String dbname) {
    this.dbname = dbname;
  }


  public UpdateDbaasServiceMysqlRequestMigration ignoreDbs(String ignoreDbs) {
    this.ignoreDbs = ignoreDbs;
    return this;
  }

   /**
   * Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)
   * @return ignoreDbs
  **/
  @javax.annotation.Nullable
  public String getIgnoreDbs() {
    return ignoreDbs;
  }

  public void setIgnoreDbs(String ignoreDbs) {
    this.ignoreDbs = ignoreDbs;
  }


  public UpdateDbaasServiceMysqlRequestMigration method(EnumMigrationMethod method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nullable
  public EnumMigrationMethod getMethod() {
    return method;
  }

  public void setMethod(EnumMigrationMethod method) {
    this.method = method;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDbaasServiceMysqlRequestMigration updateDbaasServiceMysqlRequestMigration = (UpdateDbaasServiceMysqlRequestMigration) o;
    return Objects.equals(this.host, updateDbaasServiceMysqlRequestMigration.host) &&
        Objects.equals(this.port, updateDbaasServiceMysqlRequestMigration.port) &&
        Objects.equals(this.password, updateDbaasServiceMysqlRequestMigration.password) &&
        Objects.equals(this.ssl, updateDbaasServiceMysqlRequestMigration.ssl) &&
        Objects.equals(this.username, updateDbaasServiceMysqlRequestMigration.username) &&
        Objects.equals(this.dbname, updateDbaasServiceMysqlRequestMigration.dbname) &&
        Objects.equals(this.ignoreDbs, updateDbaasServiceMysqlRequestMigration.ignoreDbs) &&
        Objects.equals(this.method, updateDbaasServiceMysqlRequestMigration.method);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, port, password, ssl, username, dbname, ignoreDbs, method);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDbaasServiceMysqlRequestMigration {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    dbname: ").append(toIndentedString(dbname)).append("\n");
    sb.append("    ignoreDbs: ").append(toIndentedString(ignoreDbs)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("host");
    openapiFields.add("port");
    openapiFields.add("password");
    openapiFields.add("ssl");
    openapiFields.add("username");
    openapiFields.add("dbname");
    openapiFields.add("ignore-dbs");
    openapiFields.add("method");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("port");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateDbaasServiceMysqlRequestMigration
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDbaasServiceMysqlRequestMigration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDbaasServiceMysqlRequestMigration is not found in the empty JSON string", UpdateDbaasServiceMysqlRequestMigration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDbaasServiceMysqlRequestMigration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDbaasServiceMysqlRequestMigration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateDbaasServiceMysqlRequestMigration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("dbname") != null && !jsonObj.get("dbname").isJsonNull()) && !jsonObj.get("dbname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbname").toString()));
      }
      if ((jsonObj.get("ignore-dbs") != null && !jsonObj.get("ignore-dbs").isJsonNull()) && !jsonObj.get("ignore-dbs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignore-dbs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ignore-dbs").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        EnumMigrationMethod.validateJsonElement(jsonObj.get("method"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDbaasServiceMysqlRequestMigration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDbaasServiceMysqlRequestMigration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDbaasServiceMysqlRequestMigration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDbaasServiceMysqlRequestMigration.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDbaasServiceMysqlRequestMigration>() {
           @Override
           public void write(JsonWriter out, UpdateDbaasServiceMysqlRequestMigration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDbaasServiceMysqlRequestMigration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateDbaasServiceMysqlRequestMigration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateDbaasServiceMysqlRequestMigration
  * @throws IOException if the JSON string is invalid with respect to UpdateDbaasServiceMysqlRequestMigration
  */
  public static UpdateDbaasServiceMysqlRequestMigration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDbaasServiceMysqlRequestMigration.class);
  }

 /**
  * Convert an instance of UpdateDbaasServiceMysqlRequestMigration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

