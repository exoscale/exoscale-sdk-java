/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
/**
 * A notable Mutation Event which happened on the infrastructure
 */
@Schema(description = "A notable Mutation Event which happened on the infrastructure")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class Event {
  @JsonProperty("request-id")
  private String requestId = null;

  @JsonProperty("zone")
  private String zone = null;

  @JsonProperty("remote-addr")
  private String remoteAddr = null;

  @JsonProperty("get-params")
  private Object getParams = null;

  @JsonProperty("body-params")
  private Object bodyParams = null;

  @JsonProperty("status")
  private Long status = null;

  @JsonProperty("uri")
  private String uri = null;

  @JsonProperty("elapsed-ms")
  private Long elapsedMs = null;

  @JsonProperty("timestamp")
  private OffsetDateTime timestamp = null;

  @JsonProperty("path-params")
  private Object pathParams = null;

  @JsonProperty("handler")
  private String handler = null;

  @JsonProperty("message")
  private String message = null;

  public Event requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Operation unique identifier
   * @return requestId
  **/
  @Schema(description = "Operation unique identifier")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public Event zone(String zone) {
    this.zone = zone;
    return this;
  }

   /**
   * Operation targeted zone
   * @return zone
  **/
  @Schema(description = "Operation targeted zone")
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }

  public Event remoteAddr(String remoteAddr) {
    this.remoteAddr = remoteAddr;
    return this;
  }

   /**
   * Client IP address
   * @return remoteAddr
  **/
  @Schema(description = "Client IP address")
  public String getRemoteAddr() {
    return remoteAddr;
  }

  public void setRemoteAddr(String remoteAddr) {
    this.remoteAddr = remoteAddr;
  }

  public Event getParams(Object getParams) {
    this.getParams = getParams;
    return this;
  }

   /**
   * Query string parameters (free form map)
   * @return getParams
  **/
  @Schema(description = "Query string parameters (free form map)")
  public Object getGetParams() {
    return getParams;
  }

  public void setGetParams(Object getParams) {
    this.getParams = getParams;
  }

  public Event bodyParams(Object bodyParams) {
    this.bodyParams = bodyParams;
    return this;
  }

   /**
   * Body parameters (free form map)
   * @return bodyParams
  **/
  @Schema(description = "Body parameters (free form map)")
  public Object getBodyParams() {
    return bodyParams;
  }

  public void setBodyParams(Object bodyParams) {
    this.bodyParams = bodyParams;
  }

  public Event status(Long status) {
    this.status = status;
    return this;
  }

   /**
   * Operation HTTP status
   * minimum: 0
   * @return status
  **/
  @Schema(description = "Operation HTTP status")
  public Long getStatus() {
    return status;
  }

  public void setStatus(Long status) {
    this.status = status;
  }

  public Event uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * Operation request URI
   * @return uri
  **/
  @Schema(description = "Operation request URI")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public Event elapsedMs(Long elapsedMs) {
    this.elapsedMs = elapsedMs;
    return this;
  }

   /**
   * Operation processing time
   * minimum: 0
   * @return elapsedMs
  **/
  @Schema(description = "Operation processing time")
  public Long getElapsedMs() {
    return elapsedMs;
  }

  public void setElapsedMs(Long elapsedMs) {
    this.elapsedMs = elapsedMs;
  }

  public Event timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Time at which the event happened, millisecond resolution
   * @return timestamp
  **/
  @Schema(description = "Time at which the event happened, millisecond resolution")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public Event pathParams(Object pathParams) {
    this.pathParams = pathParams;
    return this;
  }

   /**
   * URI path parameters (free form map)
   * @return pathParams
  **/
  @Schema(description = "URI path parameters (free form map)")
  public Object getPathParams() {
    return pathParams;
  }

  public void setPathParams(Object pathParams) {
    this.pathParams = pathParams;
  }

  public Event handler(String handler) {
    this.handler = handler;
    return this;
  }

   /**
   * Operation handler name
   * @return handler
  **/
  @Schema(description = "Operation handler name")
  public String getHandler() {
    return handler;
  }

  public void setHandler(String handler) {
    this.handler = handler;
  }

  public Event message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Operation message
   * @return message
  **/
  @Schema(description = "Operation message")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.requestId, event.requestId) &&
        Objects.equals(this.zone, event.zone) &&
        Objects.equals(this.remoteAddr, event.remoteAddr) &&
        Objects.equals(this.getParams, event.getParams) &&
        Objects.equals(this.bodyParams, event.bodyParams) &&
        Objects.equals(this.status, event.status) &&
        Objects.equals(this.uri, event.uri) &&
        Objects.equals(this.elapsedMs, event.elapsedMs) &&
        Objects.equals(this.timestamp, event.timestamp) &&
        Objects.equals(this.pathParams, event.pathParams) &&
        Objects.equals(this.handler, event.handler) &&
        Objects.equals(this.message, event.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, zone, remoteAddr, getParams, bodyParams, status, uri, elapsedMs, timestamp, pathParams, handler, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("    remoteAddr: ").append(toIndentedString(remoteAddr)).append("\n");
    sb.append("    getParams: ").append(toIndentedString(getParams)).append("\n");
    sb.append("    bodyParams: ").append(toIndentedString(bodyParams)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    elapsedMs: ").append(toIndentedString(elapsedMs)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    pathParams: ").append(toIndentedString(pathParams)).append("\n");
    sb.append("    handler: ").append(toIndentedString(handler)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
