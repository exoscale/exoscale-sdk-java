/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Pair;

import org.openapitools.client.model.AttachBlockStorageVolumeToInstanceRequest;
import org.openapitools.client.model.BlockStorageSnapshot;
import org.openapitools.client.model.BlockStorageVolume;
import org.openapitools.client.model.CreateBlockStorageSnapshotRequest;
import org.openapitools.client.model.CreateBlockStorageVolumeRequest;
import org.openapitools.client.model.ListBlockStorageSnapshots200Response;
import org.openapitools.client.model.ListBlockStorageVolumes200Response;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.ResizeBlockStorageVolumeRequest;
import java.util.UUID;
import org.openapitools.client.model.UpdateBlockStorageVolumeLabelsRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T18:00:26.790082348Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class BlockStorageApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public BlockStorageApi() {
    this(new ApiClient());
  }

  public BlockStorageApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Attach block storage volume to an instance
   * 
   * @param id  (required)
   * @param attachBlockStorageVolumeToInstanceRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation attachBlockStorageVolumeToInstance(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = attachBlockStorageVolumeToInstanceWithHttpInfo(id, attachBlockStorageVolumeToInstanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Attach block storage volume to an instance
   * 
   * @param id  (required)
   * @param attachBlockStorageVolumeToInstanceRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> attachBlockStorageVolumeToInstanceWithHttpInfo(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = attachBlockStorageVolumeToInstanceRequestBuilder(id, attachBlockStorageVolumeToInstanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("attachBlockStorageVolumeToInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder attachBlockStorageVolumeToInstanceRequestBuilder(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling attachBlockStorageVolumeToInstance");
    }
    // verify the required parameter 'attachBlockStorageVolumeToInstanceRequest' is set
    if (attachBlockStorageVolumeToInstanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'attachBlockStorageVolumeToInstanceRequest' when calling attachBlockStorageVolumeToInstance");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}:attach"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(attachBlockStorageVolumeToInstanceRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a block storage snapshot
   * 
   * @param id  (required)
   * @param createBlockStorageSnapshotRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createBlockStorageSnapshot(UUID id, CreateBlockStorageSnapshotRequest createBlockStorageSnapshotRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createBlockStorageSnapshotWithHttpInfo(id, createBlockStorageSnapshotRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a block storage snapshot
   * 
   * @param id  (required)
   * @param createBlockStorageSnapshotRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createBlockStorageSnapshotWithHttpInfo(UUID id, CreateBlockStorageSnapshotRequest createBlockStorageSnapshotRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createBlockStorageSnapshotRequestBuilder(id, createBlockStorageSnapshotRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createBlockStorageSnapshot", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createBlockStorageSnapshotRequestBuilder(UUID id, CreateBlockStorageSnapshotRequest createBlockStorageSnapshotRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createBlockStorageSnapshot");
    }
    // verify the required parameter 'createBlockStorageSnapshotRequest' is set
    if (createBlockStorageSnapshotRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createBlockStorageSnapshotRequest' when calling createBlockStorageSnapshot");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}:create-snapshot"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createBlockStorageSnapshotRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a block storage volume
   * 
   * @param createBlockStorageVolumeRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createBlockStorageVolume(CreateBlockStorageVolumeRequest createBlockStorageVolumeRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createBlockStorageVolumeWithHttpInfo(createBlockStorageVolumeRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a block storage volume
   * 
   * @param createBlockStorageVolumeRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createBlockStorageVolumeWithHttpInfo(CreateBlockStorageVolumeRequest createBlockStorageVolumeRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createBlockStorageVolumeRequestBuilder(createBlockStorageVolumeRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createBlockStorageVolumeRequestBuilder(CreateBlockStorageVolumeRequest createBlockStorageVolumeRequest) throws ApiException {
    // verify the required parameter 'createBlockStorageVolumeRequest' is set
    if (createBlockStorageVolumeRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createBlockStorageVolumeRequest' when calling createBlockStorageVolume");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createBlockStorageVolumeRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a block storage snapshot, data will be unrecoverable
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteBlockStorageSnapshot(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteBlockStorageSnapshotWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a block storage snapshot, data will be unrecoverable
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteBlockStorageSnapshotWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteBlockStorageSnapshotRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteBlockStorageSnapshot", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteBlockStorageSnapshotRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteBlockStorageSnapshot");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage-snapshot/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a block storage volume, data will be unrecoverable
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteBlockStorageVolume(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteBlockStorageVolumeWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a block storage volume, data will be unrecoverable
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteBlockStorageVolumeWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteBlockStorageVolumeRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteBlockStorageVolumeRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteBlockStorageVolume");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detach block storage volume
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation detachBlockStorageVolume(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = detachBlockStorageVolumeWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Detach block storage volume
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> detachBlockStorageVolumeWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = detachBlockStorageVolumeRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("detachBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder detachBlockStorageVolumeRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling detachBlockStorageVolume");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}:detach"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve block storage snapshot details
   * 
   * @param id  (required)
   * @return BlockStorageSnapshot
   * @throws ApiException if fails to make API call
   */
  public BlockStorageSnapshot getBlockStorageSnapshot(UUID id) throws ApiException {
    ApiResponse<BlockStorageSnapshot> localVarResponse = getBlockStorageSnapshotWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve block storage snapshot details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;BlockStorageSnapshot&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BlockStorageSnapshot> getBlockStorageSnapshotWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBlockStorageSnapshotRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBlockStorageSnapshot", localVarResponse);
        }
        return new ApiResponse<BlockStorageSnapshot>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BlockStorageSnapshot>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBlockStorageSnapshotRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getBlockStorageSnapshot");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage-snapshot/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve block storage volume details
   * 
   * @param id  (required)
   * @return BlockStorageVolume
   * @throws ApiException if fails to make API call
   */
  public BlockStorageVolume getBlockStorageVolume(UUID id) throws ApiException {
    ApiResponse<BlockStorageVolume> localVarResponse = getBlockStorageVolumeWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve block storage volume details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;BlockStorageVolume&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BlockStorageVolume> getBlockStorageVolumeWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBlockStorageVolumeRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<BlockStorageVolume>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BlockStorageVolume>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBlockStorageVolumeRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getBlockStorageVolume");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List block storage snapshots
   * 
   * @return ListBlockStorageSnapshots200Response
   * @throws ApiException if fails to make API call
   */
  public ListBlockStorageSnapshots200Response listBlockStorageSnapshots() throws ApiException {
    ApiResponse<ListBlockStorageSnapshots200Response> localVarResponse = listBlockStorageSnapshotsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List block storage snapshots
   * 
   * @return ApiResponse&lt;ListBlockStorageSnapshots200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListBlockStorageSnapshots200Response> listBlockStorageSnapshotsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listBlockStorageSnapshotsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listBlockStorageSnapshots", localVarResponse);
        }
        return new ApiResponse<ListBlockStorageSnapshots200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListBlockStorageSnapshots200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listBlockStorageSnapshotsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage-snapshot";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List block storage volumes
   * 
   * @param instanceId  (optional)
   * @return ListBlockStorageVolumes200Response
   * @throws ApiException if fails to make API call
   */
  public ListBlockStorageVolumes200Response listBlockStorageVolumes(UUID instanceId) throws ApiException {
    ApiResponse<ListBlockStorageVolumes200Response> localVarResponse = listBlockStorageVolumesWithHttpInfo(instanceId);
    return localVarResponse.getData();
  }

  /**
   * List block storage volumes
   * 
   * @param instanceId  (optional)
   * @return ApiResponse&lt;ListBlockStorageVolumes200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListBlockStorageVolumes200Response> listBlockStorageVolumesWithHttpInfo(UUID instanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listBlockStorageVolumesRequestBuilder(instanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listBlockStorageVolumes", localVarResponse);
        }
        return new ApiResponse<ListBlockStorageVolumes200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListBlockStorageVolumes200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listBlockStorageVolumesRequestBuilder(UUID instanceId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "instance-id";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("instance-id", instanceId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Resize a block storage volume
   * This operation resizes a Block storage volume. Note: the volume can only grow, cannot be shrunk.
   * @param id  (required)
   * @param resizeBlockStorageVolumeRequest  (required)
   * @return BlockStorageVolume
   * @throws ApiException if fails to make API call
   */
  public BlockStorageVolume resizeBlockStorageVolume(UUID id, ResizeBlockStorageVolumeRequest resizeBlockStorageVolumeRequest) throws ApiException {
    ApiResponse<BlockStorageVolume> localVarResponse = resizeBlockStorageVolumeWithHttpInfo(id, resizeBlockStorageVolumeRequest);
    return localVarResponse.getData();
  }

  /**
   * Resize a block storage volume
   * This operation resizes a Block storage volume. Note: the volume can only grow, cannot be shrunk.
   * @param id  (required)
   * @param resizeBlockStorageVolumeRequest  (required)
   * @return ApiResponse&lt;BlockStorageVolume&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BlockStorageVolume> resizeBlockStorageVolumeWithHttpInfo(UUID id, ResizeBlockStorageVolumeRequest resizeBlockStorageVolumeRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resizeBlockStorageVolumeRequestBuilder(id, resizeBlockStorageVolumeRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resizeBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<BlockStorageVolume>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BlockStorageVolume>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resizeBlockStorageVolumeRequestBuilder(UUID id, ResizeBlockStorageVolumeRequest resizeBlockStorageVolumeRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resizeBlockStorageVolume");
    }
    // verify the required parameter 'resizeBlockStorageVolumeRequest' is set
    if (resizeBlockStorageVolumeRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resizeBlockStorageVolumeRequest' when calling resizeBlockStorageVolume");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}:resize-volume"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(resizeBlockStorageVolumeRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set block storage volume labels
   * 
   * @param id  (required)
   * @param updateBlockStorageVolumeLabelsRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateBlockStorageVolumeLabels(UUID id, UpdateBlockStorageVolumeLabelsRequest updateBlockStorageVolumeLabelsRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateBlockStorageVolumeLabelsWithHttpInfo(id, updateBlockStorageVolumeLabelsRequest);
    return localVarResponse.getData();
  }

  /**
   * Set block storage volume labels
   * 
   * @param id  (required)
   * @param updateBlockStorageVolumeLabelsRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateBlockStorageVolumeLabelsWithHttpInfo(UUID id, UpdateBlockStorageVolumeLabelsRequest updateBlockStorageVolumeLabelsRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateBlockStorageVolumeLabelsRequestBuilder(id, updateBlockStorageVolumeLabelsRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateBlockStorageVolumeLabels", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateBlockStorageVolumeLabelsRequestBuilder(UUID id, UpdateBlockStorageVolumeLabelsRequest updateBlockStorageVolumeLabelsRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateBlockStorageVolumeLabels");
    }
    // verify the required parameter 'updateBlockStorageVolumeLabelsRequest' is set
    if (updateBlockStorageVolumeLabelsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateBlockStorageVolumeLabelsRequest' when calling updateBlockStorageVolumeLabels");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateBlockStorageVolumeLabelsRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
