/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * Instances - Instance
 */

public class Instances {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public-ip-assignment")
    private Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    /**
     * Instance Security Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security-groups")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroup>> securityGroups;

    /**
     * Instance name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Compute instance type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance-type")
    private Optional<? extends com.exoscale.api.models.components.InstanceType> instanceType;

    /**
     * Instance Private Networks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private-networks")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetwork>> privateNetworks;

    /**
     * Instance template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends com.exoscale.api.models.components.Template> template;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends com.exoscale.api.models.components.InstanceState> state;

    /**
     * SSH key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh-key")
    private Optional<? extends com.exoscale.api.models.components.SshKey> sshKey;

    /**
     * Resource manager
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager")
    private Optional<? extends com.exoscale.api.models.components.Manager> manager;

    /**
     * Instance IPv6 address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv6-address")
    private Optional<? extends String> ipv6Address;

    /**
     * Instance ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Instance SSH Keys
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh-keys")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.SshKey>> sshKeys;

    /**
     * Instance creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * Instance public IPv4 address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public-ip")
    private Optional<? extends String> publicIp;

    public Instances(
            @JsonProperty("public-ip-assignment") Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("security-groups") Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroup>> securityGroups,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("instance-type") Optional<? extends com.exoscale.api.models.components.InstanceType> instanceType,
            @JsonProperty("private-networks") Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetwork>> privateNetworks,
            @JsonProperty("template") Optional<? extends com.exoscale.api.models.components.Template> template,
            @JsonProperty("state") Optional<? extends com.exoscale.api.models.components.InstanceState> state,
            @JsonProperty("ssh-key") Optional<? extends com.exoscale.api.models.components.SshKey> sshKey,
            @JsonProperty("manager") Optional<? extends com.exoscale.api.models.components.Manager> manager,
            @JsonProperty("ipv6-address") Optional<? extends String> ipv6Address,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("ssh-keys") Optional<? extends java.util.List<com.exoscale.api.models.components.SshKey>> sshKeys,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("public-ip") Optional<? extends String> publicIp) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(securityGroups, "securityGroups");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(instanceType, "instanceType");
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(sshKey, "sshKey");
        Utils.checkNotNull(manager, "manager");
        Utils.checkNotNull(ipv6Address, "ipv6Address");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(sshKeys, "sshKeys");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(publicIp, "publicIp");
        this.publicIpAssignment = publicIpAssignment;
        this.labels = labels;
        this.securityGroups = securityGroups;
        this.name = name;
        this.instanceType = instanceType;
        this.privateNetworks = privateNetworks;
        this.template = template;
        this.state = state;
        this.sshKey = sshKey;
        this.manager = manager;
        this.ipv6Address = ipv6Address;
        this.id = id;
        this.sshKeys = sshKeys;
        this.createdAt = createdAt;
        this.publicIp = publicIp;
    }

    public Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment() {
        return publicIpAssignment;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    /**
     * Instance Security Groups
     */
    public Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroup>> securityGroups() {
        return securityGroups;
    }

    /**
     * Instance name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Compute instance type
     */
    public Optional<? extends com.exoscale.api.models.components.InstanceType> instanceType() {
        return instanceType;
    }

    /**
     * Instance Private Networks
     */
    public Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetwork>> privateNetworks() {
        return privateNetworks;
    }

    /**
     * Instance template
     */
    public Optional<? extends com.exoscale.api.models.components.Template> template() {
        return template;
    }

    public Optional<? extends com.exoscale.api.models.components.InstanceState> state() {
        return state;
    }

    /**
     * SSH key
     */
    public Optional<? extends com.exoscale.api.models.components.SshKey> sshKey() {
        return sshKey;
    }

    /**
     * Resource manager
     */
    public Optional<? extends com.exoscale.api.models.components.Manager> manager() {
        return manager;
    }

    /**
     * Instance IPv6 address
     */
    public Optional<? extends String> ipv6Address() {
        return ipv6Address;
    }

    /**
     * Instance ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Instance SSH Keys
     */
    public Optional<? extends java.util.List<com.exoscale.api.models.components.SshKey>> sshKeys() {
        return sshKeys;
    }

    /**
     * Instance creation date
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Instance public IPv4 address
     */
    public Optional<? extends String> publicIp() {
        return publicIp;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Instances withPublicIpAssignment(com.exoscale.api.models.components.PublicIpAssignment publicIpAssignment) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        this.publicIpAssignment = Optional.ofNullable(publicIpAssignment);
        return this;
    }

    public Instances withPublicIpAssignment(Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        this.publicIpAssignment = publicIpAssignment;
        return this;
    }

    public Instances withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public Instances withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    /**
     * Instance Security Groups
     */
    public Instances withSecurityGroups(java.util.List<com.exoscale.api.models.components.SecurityGroup> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = Optional.ofNullable(securityGroups);
        return this;
    }

    /**
     * Instance Security Groups
     */
    public Instances withSecurityGroups(Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroup>> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Instance name
     */
    public Instances withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Instance name
     */
    public Instances withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Compute instance type
     */
    public Instances withInstanceType(com.exoscale.api.models.components.InstanceType instanceType) {
        Utils.checkNotNull(instanceType, "instanceType");
        this.instanceType = Optional.ofNullable(instanceType);
        return this;
    }

    /**
     * Compute instance type
     */
    public Instances withInstanceType(Optional<? extends com.exoscale.api.models.components.InstanceType> instanceType) {
        Utils.checkNotNull(instanceType, "instanceType");
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Instance Private Networks
     */
    public Instances withPrivateNetworks(java.util.List<com.exoscale.api.models.components.PrivateNetwork> privateNetworks) {
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        this.privateNetworks = Optional.ofNullable(privateNetworks);
        return this;
    }

    /**
     * Instance Private Networks
     */
    public Instances withPrivateNetworks(Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetwork>> privateNetworks) {
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        this.privateNetworks = privateNetworks;
        return this;
    }

    /**
     * Instance template
     */
    public Instances withTemplate(com.exoscale.api.models.components.Template template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    /**
     * Instance template
     */
    public Instances withTemplate(Optional<? extends com.exoscale.api.models.components.Template> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    public Instances withState(com.exoscale.api.models.components.InstanceState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public Instances withState(Optional<? extends com.exoscale.api.models.components.InstanceState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * SSH key
     */
    public Instances withSshKey(com.exoscale.api.models.components.SshKey sshKey) {
        Utils.checkNotNull(sshKey, "sshKey");
        this.sshKey = Optional.ofNullable(sshKey);
        return this;
    }

    /**
     * SSH key
     */
    public Instances withSshKey(Optional<? extends com.exoscale.api.models.components.SshKey> sshKey) {
        Utils.checkNotNull(sshKey, "sshKey");
        this.sshKey = sshKey;
        return this;
    }

    /**
     * Resource manager
     */
    public Instances withManager(com.exoscale.api.models.components.Manager manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = Optional.ofNullable(manager);
        return this;
    }

    /**
     * Resource manager
     */
    public Instances withManager(Optional<? extends com.exoscale.api.models.components.Manager> manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = manager;
        return this;
    }

    /**
     * Instance IPv6 address
     */
    public Instances withIpv6Address(String ipv6Address) {
        Utils.checkNotNull(ipv6Address, "ipv6Address");
        this.ipv6Address = Optional.ofNullable(ipv6Address);
        return this;
    }

    /**
     * Instance IPv6 address
     */
    public Instances withIpv6Address(Optional<? extends String> ipv6Address) {
        Utils.checkNotNull(ipv6Address, "ipv6Address");
        this.ipv6Address = ipv6Address;
        return this;
    }

    /**
     * Instance ID
     */
    public Instances withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Instance ID
     */
    public Instances withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Instance SSH Keys
     */
    public Instances withSshKeys(java.util.List<com.exoscale.api.models.components.SshKey> sshKeys) {
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.sshKeys = Optional.ofNullable(sshKeys);
        return this;
    }

    /**
     * Instance SSH Keys
     */
    public Instances withSshKeys(Optional<? extends java.util.List<com.exoscale.api.models.components.SshKey>> sshKeys) {
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.sshKeys = sshKeys;
        return this;
    }

    /**
     * Instance creation date
     */
    public Instances withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Instance creation date
     */
    public Instances withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Instance public IPv4 address
     */
    public Instances withPublicIp(String publicIp) {
        Utils.checkNotNull(publicIp, "publicIp");
        this.publicIp = Optional.ofNullable(publicIp);
        return this;
    }

    /**
     * Instance public IPv4 address
     */
    public Instances withPublicIp(Optional<? extends String> publicIp) {
        Utils.checkNotNull(publicIp, "publicIp");
        this.publicIp = publicIp;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Instances other = (Instances) o;
        return 
            java.util.Objects.deepEquals(this.publicIpAssignment, other.publicIpAssignment) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.securityGroups, other.securityGroups) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.instanceType, other.instanceType) &&
            java.util.Objects.deepEquals(this.privateNetworks, other.privateNetworks) &&
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.sshKey, other.sshKey) &&
            java.util.Objects.deepEquals(this.manager, other.manager) &&
            java.util.Objects.deepEquals(this.ipv6Address, other.ipv6Address) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.sshKeys, other.sshKeys) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.publicIp, other.publicIp);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            publicIpAssignment,
            labels,
            securityGroups,
            name,
            instanceType,
            privateNetworks,
            template,
            state,
            sshKey,
            manager,
            ipv6Address,
            id,
            sshKeys,
            createdAt,
            publicIp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Instances.class,
                "publicIpAssignment", publicIpAssignment,
                "labels", labels,
                "securityGroups", securityGroups,
                "name", name,
                "instanceType", instanceType,
                "privateNetworks", privateNetworks,
                "template", template,
                "state", state,
                "sshKey", sshKey,
                "manager", manager,
                "ipv6Address", ipv6Address,
                "id", id,
                "sshKeys", sshKeys,
                "createdAt", createdAt,
                "publicIp", publicIp);
    }
    
    public final static class Builder {
 
        private Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroup>> securityGroups = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.InstanceType> instanceType = Optional.empty();
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetwork>> privateNetworks = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.Template> template = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.InstanceState> state = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.SshKey> sshKey = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.Manager> manager = Optional.empty();
 
        private Optional<? extends String> ipv6Address = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.SshKey>> sshKeys = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends String> publicIp = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder publicIpAssignment(com.exoscale.api.models.components.PublicIpAssignment publicIpAssignment) {
            Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
            this.publicIpAssignment = Optional.ofNullable(publicIpAssignment);
            return this;
        }

        public Builder publicIpAssignment(Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment) {
            Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
            this.publicIpAssignment = publicIpAssignment;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        /**
         * Instance Security Groups
         */
        public Builder securityGroups(java.util.List<com.exoscale.api.models.components.SecurityGroup> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = Optional.ofNullable(securityGroups);
            return this;
        }

        /**
         * Instance Security Groups
         */
        public Builder securityGroups(Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroup>> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = securityGroups;
            return this;
        }

        /**
         * Instance name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Instance name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Compute instance type
         */
        public Builder instanceType(com.exoscale.api.models.components.InstanceType instanceType) {
            Utils.checkNotNull(instanceType, "instanceType");
            this.instanceType = Optional.ofNullable(instanceType);
            return this;
        }

        /**
         * Compute instance type
         */
        public Builder instanceType(Optional<? extends com.exoscale.api.models.components.InstanceType> instanceType) {
            Utils.checkNotNull(instanceType, "instanceType");
            this.instanceType = instanceType;
            return this;
        }

        /**
         * Instance Private Networks
         */
        public Builder privateNetworks(java.util.List<com.exoscale.api.models.components.PrivateNetwork> privateNetworks) {
            Utils.checkNotNull(privateNetworks, "privateNetworks");
            this.privateNetworks = Optional.ofNullable(privateNetworks);
            return this;
        }

        /**
         * Instance Private Networks
         */
        public Builder privateNetworks(Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetwork>> privateNetworks) {
            Utils.checkNotNull(privateNetworks, "privateNetworks");
            this.privateNetworks = privateNetworks;
            return this;
        }

        /**
         * Instance template
         */
        public Builder template(com.exoscale.api.models.components.Template template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        /**
         * Instance template
         */
        public Builder template(Optional<? extends com.exoscale.api.models.components.Template> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        public Builder state(com.exoscale.api.models.components.InstanceState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends com.exoscale.api.models.components.InstanceState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * SSH key
         */
        public Builder sshKey(com.exoscale.api.models.components.SshKey sshKey) {
            Utils.checkNotNull(sshKey, "sshKey");
            this.sshKey = Optional.ofNullable(sshKey);
            return this;
        }

        /**
         * SSH key
         */
        public Builder sshKey(Optional<? extends com.exoscale.api.models.components.SshKey> sshKey) {
            Utils.checkNotNull(sshKey, "sshKey");
            this.sshKey = sshKey;
            return this;
        }

        /**
         * Resource manager
         */
        public Builder manager(com.exoscale.api.models.components.Manager manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = Optional.ofNullable(manager);
            return this;
        }

        /**
         * Resource manager
         */
        public Builder manager(Optional<? extends com.exoscale.api.models.components.Manager> manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = manager;
            return this;
        }

        /**
         * Instance IPv6 address
         */
        public Builder ipv6Address(String ipv6Address) {
            Utils.checkNotNull(ipv6Address, "ipv6Address");
            this.ipv6Address = Optional.ofNullable(ipv6Address);
            return this;
        }

        /**
         * Instance IPv6 address
         */
        public Builder ipv6Address(Optional<? extends String> ipv6Address) {
            Utils.checkNotNull(ipv6Address, "ipv6Address");
            this.ipv6Address = ipv6Address;
            return this;
        }

        /**
         * Instance ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Instance ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Instance SSH Keys
         */
        public Builder sshKeys(java.util.List<com.exoscale.api.models.components.SshKey> sshKeys) {
            Utils.checkNotNull(sshKeys, "sshKeys");
            this.sshKeys = Optional.ofNullable(sshKeys);
            return this;
        }

        /**
         * Instance SSH Keys
         */
        public Builder sshKeys(Optional<? extends java.util.List<com.exoscale.api.models.components.SshKey>> sshKeys) {
            Utils.checkNotNull(sshKeys, "sshKeys");
            this.sshKeys = sshKeys;
            return this;
        }

        /**
         * Instance creation date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Instance creation date
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Instance public IPv4 address
         */
        public Builder publicIp(String publicIp) {
            Utils.checkNotNull(publicIp, "publicIp");
            this.publicIp = Optional.ofNullable(publicIp);
            return this;
        }

        /**
         * Instance public IPv4 address
         */
        public Builder publicIp(Optional<? extends String> publicIp) {
            Utils.checkNotNull(publicIp, "publicIp");
            this.publicIp = publicIp;
            return this;
        }
        
        public Instances build() {
            return new Instances(
                publicIpAssignment,
                labels,
                securityGroups,
                name,
                instanceType,
                privateNetworks,
                template,
                state,
                sshKey,
                manager,
                ipv6Address,
                id,
                sshKeys,
                createdAt,
                publicIp);
        }
    }
}

