/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DbaasServiceKafkaConnectionInfo - Kafka connection information properties
 */

public class DbaasServiceKafkaConnectionInfo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodes")
    private Optional<? extends java.util.List<String>> nodes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access-cert")
    private Optional<? extends String> accessCert;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access-key")
    private Optional<? extends String> accessKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connect-uri")
    private Optional<? extends String> connectUri;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rest-uri")
    private Optional<? extends String> restUri;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registry-uri")
    private Optional<? extends String> registryUri;

    public DbaasServiceKafkaConnectionInfo(
            @JsonProperty("nodes") Optional<? extends java.util.List<String>> nodes,
            @JsonProperty("access-cert") Optional<? extends String> accessCert,
            @JsonProperty("access-key") Optional<? extends String> accessKey,
            @JsonProperty("connect-uri") Optional<? extends String> connectUri,
            @JsonProperty("rest-uri") Optional<? extends String> restUri,
            @JsonProperty("registry-uri") Optional<? extends String> registryUri) {
        Utils.checkNotNull(nodes, "nodes");
        Utils.checkNotNull(accessCert, "accessCert");
        Utils.checkNotNull(accessKey, "accessKey");
        Utils.checkNotNull(connectUri, "connectUri");
        Utils.checkNotNull(restUri, "restUri");
        Utils.checkNotNull(registryUri, "registryUri");
        this.nodes = nodes;
        this.accessCert = accessCert;
        this.accessKey = accessKey;
        this.connectUri = connectUri;
        this.restUri = restUri;
        this.registryUri = registryUri;
    }

    public Optional<? extends java.util.List<String>> nodes() {
        return nodes;
    }

    public Optional<? extends String> accessCert() {
        return accessCert;
    }

    public Optional<? extends String> accessKey() {
        return accessKey;
    }

    public Optional<? extends String> connectUri() {
        return connectUri;
    }

    public Optional<? extends String> restUri() {
        return restUri;
    }

    public Optional<? extends String> registryUri() {
        return registryUri;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DbaasServiceKafkaConnectionInfo withNodes(java.util.List<String> nodes) {
        Utils.checkNotNull(nodes, "nodes");
        this.nodes = Optional.ofNullable(nodes);
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withNodes(Optional<? extends java.util.List<String>> nodes) {
        Utils.checkNotNull(nodes, "nodes");
        this.nodes = nodes;
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withAccessCert(String accessCert) {
        Utils.checkNotNull(accessCert, "accessCert");
        this.accessCert = Optional.ofNullable(accessCert);
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withAccessCert(Optional<? extends String> accessCert) {
        Utils.checkNotNull(accessCert, "accessCert");
        this.accessCert = accessCert;
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withAccessKey(String accessKey) {
        Utils.checkNotNull(accessKey, "accessKey");
        this.accessKey = Optional.ofNullable(accessKey);
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withAccessKey(Optional<? extends String> accessKey) {
        Utils.checkNotNull(accessKey, "accessKey");
        this.accessKey = accessKey;
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withConnectUri(String connectUri) {
        Utils.checkNotNull(connectUri, "connectUri");
        this.connectUri = Optional.ofNullable(connectUri);
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withConnectUri(Optional<? extends String> connectUri) {
        Utils.checkNotNull(connectUri, "connectUri");
        this.connectUri = connectUri;
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withRestUri(String restUri) {
        Utils.checkNotNull(restUri, "restUri");
        this.restUri = Optional.ofNullable(restUri);
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withRestUri(Optional<? extends String> restUri) {
        Utils.checkNotNull(restUri, "restUri");
        this.restUri = restUri;
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withRegistryUri(String registryUri) {
        Utils.checkNotNull(registryUri, "registryUri");
        this.registryUri = Optional.ofNullable(registryUri);
        return this;
    }

    public DbaasServiceKafkaConnectionInfo withRegistryUri(Optional<? extends String> registryUri) {
        Utils.checkNotNull(registryUri, "registryUri");
        this.registryUri = registryUri;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceKafkaConnectionInfo other = (DbaasServiceKafkaConnectionInfo) o;
        return 
            java.util.Objects.deepEquals(this.nodes, other.nodes) &&
            java.util.Objects.deepEquals(this.accessCert, other.accessCert) &&
            java.util.Objects.deepEquals(this.accessKey, other.accessKey) &&
            java.util.Objects.deepEquals(this.connectUri, other.connectUri) &&
            java.util.Objects.deepEquals(this.restUri, other.restUri) &&
            java.util.Objects.deepEquals(this.registryUri, other.registryUri);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            nodes,
            accessCert,
            accessKey,
            connectUri,
            restUri,
            registryUri);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceKafkaConnectionInfo.class,
                "nodes", nodes,
                "accessCert", accessCert,
                "accessKey", accessKey,
                "connectUri", connectUri,
                "restUri", restUri,
                "registryUri", registryUri);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> nodes = Optional.empty();
 
        private Optional<? extends String> accessCert = Optional.empty();
 
        private Optional<? extends String> accessKey = Optional.empty();
 
        private Optional<? extends String> connectUri = Optional.empty();
 
        private Optional<? extends String> restUri = Optional.empty();
 
        private Optional<? extends String> registryUri = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder nodes(java.util.List<String> nodes) {
            Utils.checkNotNull(nodes, "nodes");
            this.nodes = Optional.ofNullable(nodes);
            return this;
        }

        public Builder nodes(Optional<? extends java.util.List<String>> nodes) {
            Utils.checkNotNull(nodes, "nodes");
            this.nodes = nodes;
            return this;
        }

        public Builder accessCert(String accessCert) {
            Utils.checkNotNull(accessCert, "accessCert");
            this.accessCert = Optional.ofNullable(accessCert);
            return this;
        }

        public Builder accessCert(Optional<? extends String> accessCert) {
            Utils.checkNotNull(accessCert, "accessCert");
            this.accessCert = accessCert;
            return this;
        }

        public Builder accessKey(String accessKey) {
            Utils.checkNotNull(accessKey, "accessKey");
            this.accessKey = Optional.ofNullable(accessKey);
            return this;
        }

        public Builder accessKey(Optional<? extends String> accessKey) {
            Utils.checkNotNull(accessKey, "accessKey");
            this.accessKey = accessKey;
            return this;
        }

        public Builder connectUri(String connectUri) {
            Utils.checkNotNull(connectUri, "connectUri");
            this.connectUri = Optional.ofNullable(connectUri);
            return this;
        }

        public Builder connectUri(Optional<? extends String> connectUri) {
            Utils.checkNotNull(connectUri, "connectUri");
            this.connectUri = connectUri;
            return this;
        }

        public Builder restUri(String restUri) {
            Utils.checkNotNull(restUri, "restUri");
            this.restUri = Optional.ofNullable(restUri);
            return this;
        }

        public Builder restUri(Optional<? extends String> restUri) {
            Utils.checkNotNull(restUri, "restUri");
            this.restUri = restUri;
            return this;
        }

        public Builder registryUri(String registryUri) {
            Utils.checkNotNull(registryUri, "registryUri");
            this.registryUri = Optional.ofNullable(registryUri);
            return this;
        }

        public Builder registryUri(Optional<? extends String> registryUri) {
            Utils.checkNotNull(registryUri, "registryUri");
            this.registryUri = registryUri;
            return this;
        }
        
        public DbaasServiceKafkaConnectionInfo build() {
            return new DbaasServiceKafkaConnectionInfo(
                nodes,
                accessCert,
                accessKey,
                connectUri,
                restUri,
                registryUri);
        }
    }
}

