/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * IamRole - IAM Role
 */

public class IamRole {

    /**
     * IAM Role ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * IAM Role name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * IAM Role description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * IAM Role permissions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Optional<? extends java.util.List<Permissions>> permissions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    /**
     * IAM Role mutability
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("editable")
    private Optional<? extends Boolean> editable;

    /**
     * Policy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policy")
    private Optional<? extends IamPolicy> policy;

    public IamRole(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("permissions") Optional<? extends java.util.List<Permissions>> permissions,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("editable") Optional<? extends Boolean> editable,
            @JsonProperty("policy") Optional<? extends IamPolicy> policy) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(editable, "editable");
        Utils.checkNotNull(policy, "policy");
        this.id = id;
        this.name = name;
        this.description = description;
        this.permissions = permissions;
        this.labels = labels;
        this.editable = editable;
        this.policy = policy;
    }

    /**
     * IAM Role ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * IAM Role name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * IAM Role description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * IAM Role permissions
     */
    public Optional<? extends java.util.List<Permissions>> permissions() {
        return permissions;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    /**
     * IAM Role mutability
     */
    public Optional<? extends Boolean> editable() {
        return editable;
    }

    /**
     * Policy
     */
    public Optional<? extends IamPolicy> policy() {
        return policy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * IAM Role ID
     */
    public IamRole withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * IAM Role ID
     */
    public IamRole withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * IAM Role name
     */
    public IamRole withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * IAM Role name
     */
    public IamRole withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * IAM Role description
     */
    public IamRole withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * IAM Role description
     */
    public IamRole withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * IAM Role permissions
     */
    public IamRole withPermissions(java.util.List<Permissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = Optional.ofNullable(permissions);
        return this;
    }

    /**
     * IAM Role permissions
     */
    public IamRole withPermissions(Optional<? extends java.util.List<Permissions>> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    public IamRole withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public IamRole withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    /**
     * IAM Role mutability
     */
    public IamRole withEditable(boolean editable) {
        Utils.checkNotNull(editable, "editable");
        this.editable = Optional.ofNullable(editable);
        return this;
    }

    /**
     * IAM Role mutability
     */
    public IamRole withEditable(Optional<? extends Boolean> editable) {
        Utils.checkNotNull(editable, "editable");
        this.editable = editable;
        return this;
    }

    /**
     * Policy
     */
    public IamRole withPolicy(IamPolicy policy) {
        Utils.checkNotNull(policy, "policy");
        this.policy = Optional.ofNullable(policy);
        return this;
    }

    /**
     * Policy
     */
    public IamRole withPolicy(Optional<? extends IamPolicy> policy) {
        Utils.checkNotNull(policy, "policy");
        this.policy = policy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IamRole other = (IamRole) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.permissions, other.permissions) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.editable, other.editable) &&
            java.util.Objects.deepEquals(this.policy, other.policy);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            name,
            description,
            permissions,
            labels,
            editable,
            policy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IamRole.class,
                "id", id,
                "name", name,
                "description", description,
                "permissions", permissions,
                "labels", labels,
                "editable", editable,
                "policy", policy);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends java.util.List<Permissions>> permissions = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends Boolean> editable = Optional.empty();
 
        private Optional<? extends IamPolicy> policy = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * IAM Role ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * IAM Role ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * IAM Role name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * IAM Role name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * IAM Role description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * IAM Role description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * IAM Role permissions
         */
        public Builder permissions(java.util.List<Permissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        /**
         * IAM Role permissions
         */
        public Builder permissions(Optional<? extends java.util.List<Permissions>> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        /**
         * IAM Role mutability
         */
        public Builder editable(boolean editable) {
            Utils.checkNotNull(editable, "editable");
            this.editable = Optional.ofNullable(editable);
            return this;
        }

        /**
         * IAM Role mutability
         */
        public Builder editable(Optional<? extends Boolean> editable) {
            Utils.checkNotNull(editable, "editable");
            this.editable = editable;
            return this;
        }

        /**
         * Policy
         */
        public Builder policy(IamPolicy policy) {
            Utils.checkNotNull(policy, "policy");
            this.policy = Optional.ofNullable(policy);
            return this;
        }

        /**
         * Policy
         */
        public Builder policy(Optional<? extends IamPolicy> policy) {
            Utils.checkNotNull(policy, "policy");
            this.policy = policy;
            return this;
        }
        
        public IamRole build() {
            return new IamRole(
                id,
                name,
                description,
                permissions,
                labels,
                editable,
                policy);
        }
    }
}

