/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OpenSearch Dashboards settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class UpdateDbaasServiceOpensearchRequestOpensearchDashboards {
  public static final String SERIALIZED_NAME_OPENSEARCH_REQUEST_TIMEOUT = "opensearch-request-timeout";
  @SerializedName(SERIALIZED_NAME_OPENSEARCH_REQUEST_TIMEOUT)
  private Long opensearchRequestTimeout;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_MAX_OLD_SPACE_SIZE = "max-old-space-size";
  @SerializedName(SERIALIZED_NAME_MAX_OLD_SPACE_SIZE)
  private Long maxOldSpaceSize;

  public UpdateDbaasServiceOpensearchRequestOpensearchDashboards() {
  }

  public UpdateDbaasServiceOpensearchRequestOpensearchDashboards opensearchRequestTimeout(Long opensearchRequestTimeout) {
    this.opensearchRequestTimeout = opensearchRequestTimeout;
    return this;
  }

   /**
   * Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch (default: 30000)
   * minimum: 5000
   * maximum: 120000
   * @return opensearchRequestTimeout
  **/
  @javax.annotation.Nullable
  public Long getOpensearchRequestTimeout() {
    return opensearchRequestTimeout;
  }

  public void setOpensearchRequestTimeout(Long opensearchRequestTimeout) {
    this.opensearchRequestTimeout = opensearchRequestTimeout;
  }


  public UpdateDbaasServiceOpensearchRequestOpensearchDashboards enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Enable or disable OpenSearch Dashboards (default: true)
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdateDbaasServiceOpensearchRequestOpensearchDashboards maxOldSpaceSize(Long maxOldSpaceSize) {
    this.maxOldSpaceSize = maxOldSpaceSize;
    return this;
  }

   /**
   * Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. (default: 128)
   * minimum: 64
   * maximum: 1024
   * @return maxOldSpaceSize
  **/
  @javax.annotation.Nullable
  public Long getMaxOldSpaceSize() {
    return maxOldSpaceSize;
  }

  public void setMaxOldSpaceSize(Long maxOldSpaceSize) {
    this.maxOldSpaceSize = maxOldSpaceSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDbaasServiceOpensearchRequestOpensearchDashboards updateDbaasServiceOpensearchRequestOpensearchDashboards = (UpdateDbaasServiceOpensearchRequestOpensearchDashboards) o;
    return Objects.equals(this.opensearchRequestTimeout, updateDbaasServiceOpensearchRequestOpensearchDashboards.opensearchRequestTimeout) &&
        Objects.equals(this.enabled, updateDbaasServiceOpensearchRequestOpensearchDashboards.enabled) &&
        Objects.equals(this.maxOldSpaceSize, updateDbaasServiceOpensearchRequestOpensearchDashboards.maxOldSpaceSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(opensearchRequestTimeout, enabled, maxOldSpaceSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDbaasServiceOpensearchRequestOpensearchDashboards {\n");
    sb.append("    opensearchRequestTimeout: ").append(toIndentedString(opensearchRequestTimeout)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    maxOldSpaceSize: ").append(toIndentedString(maxOldSpaceSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("opensearch-request-timeout");
    openapiFields.add("enabled");
    openapiFields.add("max-old-space-size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateDbaasServiceOpensearchRequestOpensearchDashboards
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDbaasServiceOpensearchRequestOpensearchDashboards.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDbaasServiceOpensearchRequestOpensearchDashboards is not found in the empty JSON string", UpdateDbaasServiceOpensearchRequestOpensearchDashboards.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDbaasServiceOpensearchRequestOpensearchDashboards.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDbaasServiceOpensearchRequestOpensearchDashboards` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDbaasServiceOpensearchRequestOpensearchDashboards.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDbaasServiceOpensearchRequestOpensearchDashboards' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDbaasServiceOpensearchRequestOpensearchDashboards> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDbaasServiceOpensearchRequestOpensearchDashboards.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDbaasServiceOpensearchRequestOpensearchDashboards>() {
           @Override
           public void write(JsonWriter out, UpdateDbaasServiceOpensearchRequestOpensearchDashboards value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDbaasServiceOpensearchRequestOpensearchDashboards read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateDbaasServiceOpensearchRequestOpensearchDashboards given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateDbaasServiceOpensearchRequestOpensearchDashboards
  * @throws IOException if the JSON string is invalid with respect to UpdateDbaasServiceOpensearchRequestOpensearchDashboards
  */
  public static UpdateDbaasServiceOpensearchRequestOpensearchDashboards fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDbaasServiceOpensearchRequestOpensearchDashboards.class);
  }

 /**
  * Convert an instance of UpdateDbaasServiceOpensearchRequestOpensearchDashboards to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

