/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateSksClusterRequestBody {

    /**
     * Cluster description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    /**
     * Cluster CNI
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cni")
    private Optional<? extends Cni> cni;

    /**
     * Enable auto upgrade of the control plane to the latest patch version available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto-upgrade")
    private Optional<? extends Boolean> autoUpgrade;

    /**
     * SKS Cluster OpenID config map
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oidc")
    private Optional<? extends com.exoscale.api.models.components.SksOidc> oidc;

    /**
     * Cluster name
     */
    @JsonProperty("name")
    private String name;

    /**
     * Cluster service level
     */
    @JsonProperty("level")
    private Level level;

    /**
     * Cluster addons
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addons")
    private Optional<? extends java.util.List<Addons>> addons;

    /**
     * Control plane Kubernetes version
     */
    @JsonProperty("version")
    private String version;

    public CreateSksClusterRequestBody(
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("cni") Optional<? extends Cni> cni,
            @JsonProperty("auto-upgrade") Optional<? extends Boolean> autoUpgrade,
            @JsonProperty("oidc") Optional<? extends com.exoscale.api.models.components.SksOidc> oidc,
            @JsonProperty("name") String name,
            @JsonProperty("level") Level level,
            @JsonProperty("addons") Optional<? extends java.util.List<Addons>> addons,
            @JsonProperty("version") String version) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(cni, "cni");
        Utils.checkNotNull(autoUpgrade, "autoUpgrade");
        Utils.checkNotNull(oidc, "oidc");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(level, "level");
        Utils.checkNotNull(addons, "addons");
        Utils.checkNotNull(version, "version");
        this.description = description;
        this.labels = labels;
        this.cni = cni;
        this.autoUpgrade = autoUpgrade;
        this.oidc = oidc;
        this.name = name;
        this.level = level;
        this.addons = addons;
        this.version = version;
    }

    /**
     * Cluster description
     */
    public Optional<? extends String> description() {
        return description;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    /**
     * Cluster CNI
     */
    public Optional<? extends Cni> cni() {
        return cni;
    }

    /**
     * Enable auto upgrade of the control plane to the latest patch version available
     */
    public Optional<? extends Boolean> autoUpgrade() {
        return autoUpgrade;
    }

    /**
     * SKS Cluster OpenID config map
     */
    public Optional<? extends com.exoscale.api.models.components.SksOidc> oidc() {
        return oidc;
    }

    /**
     * Cluster name
     */
    public String name() {
        return name;
    }

    /**
     * Cluster service level
     */
    public Level level() {
        return level;
    }

    /**
     * Cluster addons
     */
    public Optional<? extends java.util.List<Addons>> addons() {
        return addons;
    }

    /**
     * Control plane Kubernetes version
     */
    public String version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Cluster description
     */
    public CreateSksClusterRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Cluster description
     */
    public CreateSksClusterRequestBody withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public CreateSksClusterRequestBody withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public CreateSksClusterRequestBody withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    /**
     * Cluster CNI
     */
    public CreateSksClusterRequestBody withCni(Cni cni) {
        Utils.checkNotNull(cni, "cni");
        this.cni = Optional.ofNullable(cni);
        return this;
    }

    /**
     * Cluster CNI
     */
    public CreateSksClusterRequestBody withCni(Optional<? extends Cni> cni) {
        Utils.checkNotNull(cni, "cni");
        this.cni = cni;
        return this;
    }

    /**
     * Enable auto upgrade of the control plane to the latest patch version available
     */
    public CreateSksClusterRequestBody withAutoUpgrade(boolean autoUpgrade) {
        Utils.checkNotNull(autoUpgrade, "autoUpgrade");
        this.autoUpgrade = Optional.ofNullable(autoUpgrade);
        return this;
    }

    /**
     * Enable auto upgrade of the control plane to the latest patch version available
     */
    public CreateSksClusterRequestBody withAutoUpgrade(Optional<? extends Boolean> autoUpgrade) {
        Utils.checkNotNull(autoUpgrade, "autoUpgrade");
        this.autoUpgrade = autoUpgrade;
        return this;
    }

    /**
     * SKS Cluster OpenID config map
     */
    public CreateSksClusterRequestBody withOidc(com.exoscale.api.models.components.SksOidc oidc) {
        Utils.checkNotNull(oidc, "oidc");
        this.oidc = Optional.ofNullable(oidc);
        return this;
    }

    /**
     * SKS Cluster OpenID config map
     */
    public CreateSksClusterRequestBody withOidc(Optional<? extends com.exoscale.api.models.components.SksOidc> oidc) {
        Utils.checkNotNull(oidc, "oidc");
        this.oidc = oidc;
        return this;
    }

    /**
     * Cluster name
     */
    public CreateSksClusterRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Cluster service level
     */
    public CreateSksClusterRequestBody withLevel(Level level) {
        Utils.checkNotNull(level, "level");
        this.level = level;
        return this;
    }

    /**
     * Cluster addons
     */
    public CreateSksClusterRequestBody withAddons(java.util.List<Addons> addons) {
        Utils.checkNotNull(addons, "addons");
        this.addons = Optional.ofNullable(addons);
        return this;
    }

    /**
     * Cluster addons
     */
    public CreateSksClusterRequestBody withAddons(Optional<? extends java.util.List<Addons>> addons) {
        Utils.checkNotNull(addons, "addons");
        this.addons = addons;
        return this;
    }

    /**
     * Control plane Kubernetes version
     */
    public CreateSksClusterRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSksClusterRequestBody other = (CreateSksClusterRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.cni, other.cni) &&
            java.util.Objects.deepEquals(this.autoUpgrade, other.autoUpgrade) &&
            java.util.Objects.deepEquals(this.oidc, other.oidc) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.level, other.level) &&
            java.util.Objects.deepEquals(this.addons, other.addons) &&
            java.util.Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            labels,
            cni,
            autoUpgrade,
            oidc,
            name,
            level,
            addons,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateSksClusterRequestBody.class,
                "description", description,
                "labels", labels,
                "cni", cni,
                "autoUpgrade", autoUpgrade,
                "oidc", oidc,
                "name", name,
                "level", level,
                "addons", addons,
                "version", version);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends Cni> cni = Optional.empty();
 
        private Optional<? extends Boolean> autoUpgrade = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.SksOidc> oidc = Optional.empty();
 
        private String name;
 
        private Level level;
 
        private Optional<? extends java.util.List<Addons>> addons = Optional.empty();
 
        private String version;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Cluster description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Cluster description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        /**
         * Cluster CNI
         */
        public Builder cni(Cni cni) {
            Utils.checkNotNull(cni, "cni");
            this.cni = Optional.ofNullable(cni);
            return this;
        }

        /**
         * Cluster CNI
         */
        public Builder cni(Optional<? extends Cni> cni) {
            Utils.checkNotNull(cni, "cni");
            this.cni = cni;
            return this;
        }

        /**
         * Enable auto upgrade of the control plane to the latest patch version available
         */
        public Builder autoUpgrade(boolean autoUpgrade) {
            Utils.checkNotNull(autoUpgrade, "autoUpgrade");
            this.autoUpgrade = Optional.ofNullable(autoUpgrade);
            return this;
        }

        /**
         * Enable auto upgrade of the control plane to the latest patch version available
         */
        public Builder autoUpgrade(Optional<? extends Boolean> autoUpgrade) {
            Utils.checkNotNull(autoUpgrade, "autoUpgrade");
            this.autoUpgrade = autoUpgrade;
            return this;
        }

        /**
         * SKS Cluster OpenID config map
         */
        public Builder oidc(com.exoscale.api.models.components.SksOidc oidc) {
            Utils.checkNotNull(oidc, "oidc");
            this.oidc = Optional.ofNullable(oidc);
            return this;
        }

        /**
         * SKS Cluster OpenID config map
         */
        public Builder oidc(Optional<? extends com.exoscale.api.models.components.SksOidc> oidc) {
            Utils.checkNotNull(oidc, "oidc");
            this.oidc = oidc;
            return this;
        }

        /**
         * Cluster name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Cluster service level
         */
        public Builder level(Level level) {
            Utils.checkNotNull(level, "level");
            this.level = level;
            return this;
        }

        /**
         * Cluster addons
         */
        public Builder addons(java.util.List<Addons> addons) {
            Utils.checkNotNull(addons, "addons");
            this.addons = Optional.ofNullable(addons);
            return this;
        }

        /**
         * Cluster addons
         */
        public Builder addons(Optional<? extends java.util.List<Addons>> addons) {
            Utils.checkNotNull(addons, "addons");
            this.addons = addons;
            return this;
        }

        /**
         * Control plane Kubernetes version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public CreateSksClusterRequestBody build() {
            return new CreateSksClusterRequestBody(
                description,
                labels,
                cni,
                autoUpgrade,
                oidc,
                name,
                level,
                addons,
                version);
        }
    }
}

