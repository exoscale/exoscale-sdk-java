/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Pair;

import org.openapitools.client.model.CreateSksClusterRequest;
import org.openapitools.client.model.CreateSksNodepoolRequest;
import org.openapitools.client.model.EvictSksNodepoolMembersRequest;
import org.openapitools.client.model.GenerateSksClusterKubeconfig200Response;
import org.openapitools.client.model.GetSksClusterAuthorityCert200Response;
import org.openapitools.client.model.ListSksClusterVersions200Response;
import org.openapitools.client.model.ListSksClusters200Response;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.ScaleSksNodepoolRequest;
import org.openapitools.client.model.SksCluster;
import org.openapitools.client.model.SksKubeconfigRequest;
import org.openapitools.client.model.SksNodepool;
import java.util.UUID;
import org.openapitools.client.model.UpdateSksClusterRequest;
import org.openapitools.client.model.UpdateSksNodepoolRequest;
import org.openapitools.client.model.UpgradeSksClusterRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-02T12:56:21.011484+02:00[Europe/Vienna]", comments = "Generator version: 7.4.0")
public class SksApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public SksApi() {
    this(new ApiClient());
  }

  public SksApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create an SKS cluster
   * 
   * @param createSksClusterRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createSksCluster(CreateSksClusterRequest createSksClusterRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createSksClusterWithHttpInfo(createSksClusterRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an SKS cluster
   * 
   * @param createSksClusterRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createSksClusterWithHttpInfo(CreateSksClusterRequest createSksClusterRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSksClusterRequestBuilder(createSksClusterRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createSksCluster", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSksClusterRequestBuilder(CreateSksClusterRequest createSksClusterRequest) throws ApiException {
    // verify the required parameter 'createSksClusterRequest' is set
    if (createSksClusterRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createSksClusterRequest' when calling createSksCluster");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createSksClusterRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new SKS Nodepool
   * 
   * @param id  (required)
   * @param createSksNodepoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createSksNodepool(UUID id, CreateSksNodepoolRequest createSksNodepoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createSksNodepoolWithHttpInfo(id, createSksNodepoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a new SKS Nodepool
   * 
   * @param id  (required)
   * @param createSksNodepoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createSksNodepoolWithHttpInfo(UUID id, CreateSksNodepoolRequest createSksNodepoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSksNodepoolRequestBuilder(id, createSksNodepoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createSksNodepool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSksNodepoolRequestBuilder(UUID id, CreateSksNodepoolRequest createSksNodepoolRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createSksNodepool");
    }
    // verify the required parameter 'createSksNodepoolRequest' is set
    if (createSksNodepoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createSksNodepoolRequest' when calling createSksNodepool");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createSksNodepoolRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an SKS cluster
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteSksCluster(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteSksClusterWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete an SKS cluster
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteSksClusterWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSksClusterRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSksCluster", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSksClusterRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteSksCluster");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteSksNodepool(UUID id, UUID sksNodepoolId) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteSksNodepoolWithHttpInfo(id, sksNodepoolId);
    return localVarResponse.getData();
  }

  /**
   * Delete an SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteSksNodepoolWithHttpInfo(UUID id, UUID sksNodepoolId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSksNodepoolRequestBuilder(id, sksNodepoolId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSksNodepool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSksNodepoolRequestBuilder(UUID id, UUID sksNodepoolId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteSksNodepool");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling deleteSksNodepool");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Evict Nodepool members
   * This operation evicts the specified Compute instances member from the Nodepool, shrinking it to &#x60;&amp;lt;current nodepool size&amp;gt; - &amp;lt;# evicted members&amp;gt;&#x60;.
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param evictSksNodepoolMembersRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation evictSksNodepoolMembers(UUID id, UUID sksNodepoolId, EvictSksNodepoolMembersRequest evictSksNodepoolMembersRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = evictSksNodepoolMembersWithHttpInfo(id, sksNodepoolId, evictSksNodepoolMembersRequest);
    return localVarResponse.getData();
  }

  /**
   * Evict Nodepool members
   * This operation evicts the specified Compute instances member from the Nodepool, shrinking it to &#x60;&amp;lt;current nodepool size&amp;gt; - &amp;lt;# evicted members&amp;gt;&#x60;.
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param evictSksNodepoolMembersRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> evictSksNodepoolMembersWithHttpInfo(UUID id, UUID sksNodepoolId, EvictSksNodepoolMembersRequest evictSksNodepoolMembersRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evictSksNodepoolMembersRequestBuilder(id, sksNodepoolId, evictSksNodepoolMembersRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evictSksNodepoolMembers", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evictSksNodepoolMembersRequestBuilder(UUID id, UUID sksNodepoolId, EvictSksNodepoolMembersRequest evictSksNodepoolMembersRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling evictSksNodepoolMembers");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling evictSksNodepoolMembers");
    }
    // verify the required parameter 'evictSksNodepoolMembersRequest' is set
    if (evictSksNodepoolMembersRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'evictSksNodepoolMembersRequest' when calling evictSksNodepoolMembers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}:evict"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(evictSksNodepoolMembersRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Generate a new Kubeconfig file for a SKS cluster
   * This operation returns a Kubeconfig file encoded in base64.
   * @param id  (required)
   * @param sksKubeconfigRequest  (required)
   * @return GenerateSksClusterKubeconfig200Response
   * @throws ApiException if fails to make API call
   */
  public GenerateSksClusterKubeconfig200Response generateSksClusterKubeconfig(UUID id, SksKubeconfigRequest sksKubeconfigRequest) throws ApiException {
    ApiResponse<GenerateSksClusterKubeconfig200Response> localVarResponse = generateSksClusterKubeconfigWithHttpInfo(id, sksKubeconfigRequest);
    return localVarResponse.getData();
  }

  /**
   * Generate a new Kubeconfig file for a SKS cluster
   * This operation returns a Kubeconfig file encoded in base64.
   * @param id  (required)
   * @param sksKubeconfigRequest  (required)
   * @return ApiResponse&lt;GenerateSksClusterKubeconfig200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GenerateSksClusterKubeconfig200Response> generateSksClusterKubeconfigWithHttpInfo(UUID id, SksKubeconfigRequest sksKubeconfigRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = generateSksClusterKubeconfigRequestBuilder(id, sksKubeconfigRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("generateSksClusterKubeconfig", localVarResponse);
        }
        return new ApiResponse<GenerateSksClusterKubeconfig200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GenerateSksClusterKubeconfig200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder generateSksClusterKubeconfigRequestBuilder(UUID id, SksKubeconfigRequest sksKubeconfigRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling generateSksClusterKubeconfig");
    }
    // verify the required parameter 'sksKubeconfigRequest' is set
    if (sksKubeconfigRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'sksKubeconfigRequest' when calling generateSksClusterKubeconfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster-kubeconfig/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sksKubeconfigRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve SKS cluster details
   * 
   * @param id  (required)
   * @return SksCluster
   * @throws ApiException if fails to make API call
   */
  public SksCluster getSksCluster(UUID id) throws ApiException {
    ApiResponse<SksCluster> localVarResponse = getSksClusterWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve SKS cluster details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;SksCluster&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SksCluster> getSksClusterWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSksClusterRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSksCluster", localVarResponse);
        }
        return new ApiResponse<SksCluster>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SksCluster>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSksClusterRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSksCluster");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the certificate for a SKS cluster authority
   * This operation returns the certificate for the given SKS cluster authority encoded in base64.
   * @param id  (required)
   * @param authority  (required)
   * @return GetSksClusterAuthorityCert200Response
   * @throws ApiException if fails to make API call
   */
  public GetSksClusterAuthorityCert200Response getSksClusterAuthorityCert(UUID id, String authority) throws ApiException {
    ApiResponse<GetSksClusterAuthorityCert200Response> localVarResponse = getSksClusterAuthorityCertWithHttpInfo(id, authority);
    return localVarResponse.getData();
  }

  /**
   * Get the certificate for a SKS cluster authority
   * This operation returns the certificate for the given SKS cluster authority encoded in base64.
   * @param id  (required)
   * @param authority  (required)
   * @return ApiResponse&lt;GetSksClusterAuthorityCert200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetSksClusterAuthorityCert200Response> getSksClusterAuthorityCertWithHttpInfo(UUID id, String authority) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSksClusterAuthorityCertRequestBuilder(id, authority);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSksClusterAuthorityCert", localVarResponse);
        }
        return new ApiResponse<GetSksClusterAuthorityCert200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetSksClusterAuthorityCert200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSksClusterAuthorityCertRequestBuilder(UUID id, String authority) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSksClusterAuthorityCert");
    }
    // verify the required parameter 'authority' is set
    if (authority == null) {
      throw new ApiException(400, "Missing the required parameter 'authority' when calling getSksClusterAuthorityCert");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/authority/{authority}/cert"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{authority}", ApiClient.urlEncode(authority.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the latest inspection result
   * Helps troubleshoot common problems when deploying a kubernetes cluster. Inspections run every couple of minutes.
   * @param id  (required)
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> getSksClusterInspection(UUID id) throws ApiException {
    ApiResponse<Map<String, Object>> localVarResponse = getSksClusterInspectionWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get the latest inspection result
   * Helps troubleshoot common problems when deploying a kubernetes cluster. Inspections run every couple of minutes.
   * @param id  (required)
   * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Map<String, Object>> getSksClusterInspectionWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSksClusterInspectionRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSksClusterInspection", localVarResponse);
        }
        return new ApiResponse<Map<String, Object>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Map<String, Object>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSksClusterInspectionRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSksClusterInspection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/inspection"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve SKS Nodepool details
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @return SksNodepool
   * @throws ApiException if fails to make API call
   */
  public SksNodepool getSksNodepool(UUID id, UUID sksNodepoolId) throws ApiException {
    ApiResponse<SksNodepool> localVarResponse = getSksNodepoolWithHttpInfo(id, sksNodepoolId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve SKS Nodepool details
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @return ApiResponse&lt;SksNodepool&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SksNodepool> getSksNodepoolWithHttpInfo(UUID id, UUID sksNodepoolId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSksNodepoolRequestBuilder(id, sksNodepoolId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSksNodepool", localVarResponse);
        }
        return new ApiResponse<SksNodepool>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SksNodepool>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSksNodepoolRequestBuilder(UUID id, UUID sksNodepoolId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSksNodepool");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling getSksNodepool");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Resources that are scheduled to be removed in future kubernetes releases
   * This operation returns the deprecated resources for a given cluster
   * @param id  (required)
   * @return List&lt;Map&lt;String, String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Map<String, String>> listSksClusterDeprecatedResources(UUID id) throws ApiException {
    ApiResponse<List<Map<String, String>>> localVarResponse = listSksClusterDeprecatedResourcesWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Resources that are scheduled to be removed in future kubernetes releases
   * This operation returns the deprecated resources for a given cluster
   * @param id  (required)
   * @return ApiResponse&lt;List&lt;Map&lt;String, String&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Map<String, String>>> listSksClusterDeprecatedResourcesWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSksClusterDeprecatedResourcesRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSksClusterDeprecatedResources", localVarResponse);
        }
        return new ApiResponse<List<Map<String, String>>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Map<String, String>>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSksClusterDeprecatedResourcesRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listSksClusterDeprecatedResources");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster-deprecated-resources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List available versions for SKS clusters
   * 
   * @param includeDeprecated  (optional)
   * @return ListSksClusterVersions200Response
   * @throws ApiException if fails to make API call
   */
  public ListSksClusterVersions200Response listSksClusterVersions(String includeDeprecated) throws ApiException {
    ApiResponse<ListSksClusterVersions200Response> localVarResponse = listSksClusterVersionsWithHttpInfo(includeDeprecated);
    return localVarResponse.getData();
  }

  /**
   * List available versions for SKS clusters
   * 
   * @param includeDeprecated  (optional)
   * @return ApiResponse&lt;ListSksClusterVersions200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListSksClusterVersions200Response> listSksClusterVersionsWithHttpInfo(String includeDeprecated) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSksClusterVersionsRequestBuilder(includeDeprecated);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSksClusterVersions", localVarResponse);
        }
        return new ApiResponse<ListSksClusterVersions200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListSksClusterVersions200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSksClusterVersionsRequestBuilder(String includeDeprecated) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster-version";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "include-deprecated";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("include-deprecated", includeDeprecated));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List SKS clusters
   * 
   * @return ListSksClusters200Response
   * @throws ApiException if fails to make API call
   */
  public ListSksClusters200Response listSksClusters() throws ApiException {
    ApiResponse<ListSksClusters200Response> localVarResponse = listSksClustersWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List SKS clusters
   * 
   * @return ApiResponse&lt;ListSksClusters200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListSksClusters200Response> listSksClustersWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSksClustersRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSksClusters", localVarResponse);
        }
        return new ApiResponse<ListSksClusters200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListSksClusters200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSksClustersRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset an SKS cluster field to its default value
   * 
   * @param id  (required)
   * @param field  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetSksClusterField(UUID id, String field) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetSksClusterFieldWithHttpInfo(id, field);
    return localVarResponse.getData();
  }

  /**
   * Reset an SKS cluster field to its default value
   * 
   * @param id  (required)
   * @param field  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetSksClusterFieldWithHttpInfo(UUID id, String field) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetSksClusterFieldRequestBuilder(id, field);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetSksClusterField", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetSksClusterFieldRequestBuilder(UUID id, String field) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetSksClusterField");
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      throw new ApiException(400, "Missing the required parameter 'field' when calling resetSksClusterField");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/{field}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{field}", ApiClient.urlEncode(field.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset an SKS Nodepool field to its default value
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param field  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetSksNodepoolField(UUID id, UUID sksNodepoolId, String field) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetSksNodepoolFieldWithHttpInfo(id, sksNodepoolId, field);
    return localVarResponse.getData();
  }

  /**
   * Reset an SKS Nodepool field to its default value
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param field  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetSksNodepoolFieldWithHttpInfo(UUID id, UUID sksNodepoolId, String field) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetSksNodepoolFieldRequestBuilder(id, sksNodepoolId, field);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetSksNodepoolField", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetSksNodepoolFieldRequestBuilder(UUID id, UUID sksNodepoolId, String field) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetSksNodepoolField");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling resetSksNodepoolField");
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      throw new ApiException(400, "Missing the required parameter 'field' when calling resetSksNodepoolField");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}/{field}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()))
        .replace("{field}", ApiClient.urlEncode(field.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rotate Exoscale CCM credentials
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation rotateSksCcmCredentials(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = rotateSksCcmCredentialsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Rotate Exoscale CCM credentials
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> rotateSksCcmCredentialsWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rotateSksCcmCredentialsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rotateSksCcmCredentials", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rotateSksCcmCredentialsRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling rotateSksCcmCredentials");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/rotate-ccm-credentials"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rotate operators certificate authority
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation rotateSksOperatorsCa(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = rotateSksOperatorsCaWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Rotate operators certificate authority
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> rotateSksOperatorsCaWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rotateSksOperatorsCaRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rotateSksOperatorsCa", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rotateSksOperatorsCaRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling rotateSksOperatorsCa");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/rotate-operators-ca"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Scale a SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param scaleSksNodepoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation scaleSksNodepool(UUID id, UUID sksNodepoolId, ScaleSksNodepoolRequest scaleSksNodepoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = scaleSksNodepoolWithHttpInfo(id, sksNodepoolId, scaleSksNodepoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Scale a SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param scaleSksNodepoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> scaleSksNodepoolWithHttpInfo(UUID id, UUID sksNodepoolId, ScaleSksNodepoolRequest scaleSksNodepoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = scaleSksNodepoolRequestBuilder(id, sksNodepoolId, scaleSksNodepoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("scaleSksNodepool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder scaleSksNodepoolRequestBuilder(UUID id, UUID sksNodepoolId, ScaleSksNodepoolRequest scaleSksNodepoolRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling scaleSksNodepool");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling scaleSksNodepool");
    }
    // verify the required parameter 'scaleSksNodepoolRequest' is set
    if (scaleSksNodepoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'scaleSksNodepoolRequest' when calling scaleSksNodepool");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}:scale"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(scaleSksNodepoolRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update an SKS cluster
   * 
   * @param id  (required)
   * @param updateSksClusterRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateSksCluster(UUID id, UpdateSksClusterRequest updateSksClusterRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateSksClusterWithHttpInfo(id, updateSksClusterRequest);
    return localVarResponse.getData();
  }

  /**
   * Update an SKS cluster
   * 
   * @param id  (required)
   * @param updateSksClusterRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateSksClusterWithHttpInfo(UUID id, UpdateSksClusterRequest updateSksClusterRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSksClusterRequestBuilder(id, updateSksClusterRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateSksCluster", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSksClusterRequestBuilder(UUID id, UpdateSksClusterRequest updateSksClusterRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateSksCluster");
    }
    // verify the required parameter 'updateSksClusterRequest' is set
    if (updateSksClusterRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateSksClusterRequest' when calling updateSksCluster");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateSksClusterRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update an SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param updateSksNodepoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateSksNodepool(UUID id, UUID sksNodepoolId, UpdateSksNodepoolRequest updateSksNodepoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateSksNodepoolWithHttpInfo(id, sksNodepoolId, updateSksNodepoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Update an SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param updateSksNodepoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateSksNodepoolWithHttpInfo(UUID id, UUID sksNodepoolId, UpdateSksNodepoolRequest updateSksNodepoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSksNodepoolRequestBuilder(id, sksNodepoolId, updateSksNodepoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateSksNodepool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSksNodepoolRequestBuilder(UUID id, UUID sksNodepoolId, UpdateSksNodepoolRequest updateSksNodepoolRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateSksNodepool");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling updateSksNodepool");
    }
    // verify the required parameter 'updateSksNodepoolRequest' is set
    if (updateSksNodepoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateSksNodepoolRequest' when calling updateSksNodepool");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateSksNodepoolRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Upgrade an SKS cluster
   * 
   * @param id  (required)
   * @param upgradeSksClusterRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation upgradeSksCluster(UUID id, UpgradeSksClusterRequest upgradeSksClusterRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = upgradeSksClusterWithHttpInfo(id, upgradeSksClusterRequest);
    return localVarResponse.getData();
  }

  /**
   * Upgrade an SKS cluster
   * 
   * @param id  (required)
   * @param upgradeSksClusterRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> upgradeSksClusterWithHttpInfo(UUID id, UpgradeSksClusterRequest upgradeSksClusterRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = upgradeSksClusterRequestBuilder(id, upgradeSksClusterRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("upgradeSksCluster", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder upgradeSksClusterRequestBuilder(UUID id, UpgradeSksClusterRequest upgradeSksClusterRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling upgradeSksCluster");
    }
    // verify the required parameter 'upgradeSksClusterRequest' is set
    if (upgradeSksClusterRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'upgradeSksClusterRequest' when calling upgradeSksCluster");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/upgrade"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(upgradeSksClusterRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Upgrade a SKS cluster to pro
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation upgradeSksClusterServiceLevel(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = upgradeSksClusterServiceLevelWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Upgrade a SKS cluster to pro
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> upgradeSksClusterServiceLevelWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = upgradeSksClusterServiceLevelRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("upgradeSksClusterServiceLevel", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder upgradeSksClusterServiceLevelRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling upgradeSksClusterServiceLevel");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/upgrade-service-level"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
