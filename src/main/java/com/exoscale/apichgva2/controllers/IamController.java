/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.AccessKey;
import com.exoscale.apichgva2.models.AccessKeyKnownOperationsResponse;
import com.exoscale.apichgva2.models.AccessKeyOperationsResponse;
import com.exoscale.apichgva2.models.AccessKeyRequest;
import com.exoscale.apichgva2.models.AccessKeyResponse;
import com.exoscale.apichgva2.models.ApiKeyRequest;
import com.exoscale.apichgva2.models.ApiKeyResponse;
import com.exoscale.apichgva2.models.IamApiKey;
import com.exoscale.apichgva2.models.IamApiKeyCreated;
import com.exoscale.apichgva2.models.IamPolicy;
import com.exoscale.apichgva2.models.IamRole;
import com.exoscale.apichgva2.models.IamRoleRequest;
import com.exoscale.apichgva2.models.IamRoleRequest1;
import com.exoscale.apichgva2.models.IamRoleResponse;
import com.exoscale.apichgva2.models.Operation;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class IamController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public IamController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This operation revokes the specified IAM Access Key. Access Keys created by the revoked
     * Access Key will not be revoked.
     * @param  key  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation revokeAccessKey(
            final String key) throws ApiException, IOException {
        return prepareRevokeAccessKeyRequest(key).execute();
    }

    /**
     * This operation revokes the specified IAM Access Key. Access Keys created by the revoked
     * Access Key will not be revoked.
     * @param  key  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> revokeAccessKeyAsync(
            final String key) {
        try { 
            return prepareRevokeAccessKeyRequest(key).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for revokeAccessKey.
     */
    private ApiCall<Operation, ApiException> prepareRevokeAccessKeyRequest(
            final String key) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/access-key/{key}")
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  key  Required parameter: Example:
     * @return    Returns the AccessKey response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AccessKey getAccessKey(
            final String key) throws ApiException, IOException {
        return prepareGetAccessKeyRequest(key).execute();
    }

    /**
     * @param  key  Required parameter: Example:
     * @return    Returns the AccessKey response from the API call
     */
    public CompletableFuture<AccessKey> getAccessKeyAsync(
            final String key) {
        try { 
            return prepareGetAccessKeyRequest(key).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getAccessKey.
     */
    private ApiCall<AccessKey, ApiException> prepareGetAccessKeyRequest(
            final String key) throws IOException {
        return new ApiCall.Builder<AccessKey, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/access-key/{key}")
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AccessKey.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the AccessKeyResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AccessKeyResponse listAccessKeys() throws ApiException, IOException {
        return prepareListAccessKeysRequest().execute();
    }

    /**
     * @return    Returns the AccessKeyResponse response from the API call
     */
    public CompletableFuture<AccessKeyResponse> listAccessKeysAsync() {
        try { 
            return prepareListAccessKeysRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listAccessKeys.
     */
    private ApiCall<AccessKeyResponse, ApiException> prepareListAccessKeysRequest() throws IOException {
        return new ApiCall.Builder<AccessKeyResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/access-key")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AccessKeyResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation creates a legacy IAM Access Key, to create a key for use with IAM roles use
     * the api-key endpoint.The corresponding secret is only available in the response returned by
     * this operation, the caller must take care of storing it safely as there is no other way to
     * retrieve it.
     * @param  body  Required parameter: Example:
     * @return    Returns the AccessKey response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AccessKey createAccessKey(
            final AccessKeyRequest body) throws ApiException, IOException {
        return prepareCreateAccessKeyRequest(body).execute();
    }

    /**
     * This operation creates a legacy IAM Access Key, to create a key for use with IAM roles use
     * the api-key endpoint.The corresponding secret is only available in the response returned by
     * this operation, the caller must take care of storing it safely as there is no other way to
     * retrieve it.
     * @param  body  Required parameter: Example:
     * @return    Returns the AccessKey response from the API call
     */
    public CompletableFuture<AccessKey> createAccessKeyAsync(
            final AccessKeyRequest body) {
        try { 
            return prepareCreateAccessKeyRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createAccessKey.
     */
    private ApiCall<AccessKey, ApiException> prepareCreateAccessKeyRequest(
            final AccessKeyRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<AccessKey, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/access-key")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AccessKey.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the IamApiKeyCreated response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IamApiKeyCreated createApiKey(
            final ApiKeyRequest body) throws ApiException, IOException {
        return prepareCreateApiKeyRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the IamApiKeyCreated response from the API call
     */
    public CompletableFuture<IamApiKeyCreated> createApiKeyAsync(
            final ApiKeyRequest body) {
        try { 
            return prepareCreateApiKeyRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createApiKey.
     */
    private ApiCall<IamApiKeyCreated, ApiException> prepareCreateApiKeyRequest(
            final ApiKeyRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<IamApiKeyCreated, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/api-key")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IamApiKeyCreated.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the ApiKeyResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiKeyResponse listApiKeys() throws ApiException, IOException {
        return prepareListApiKeysRequest().execute();
    }

    /**
     * @return    Returns the ApiKeyResponse response from the API call
     */
    public CompletableFuture<ApiKeyResponse> listApiKeysAsync() {
        try { 
            return prepareListApiKeysRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listApiKeys.
     */
    private ApiCall<ApiKeyResponse, ApiException> prepareListApiKeysRequest() throws IOException {
        return new ApiCall.Builder<ApiKeyResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/api-key")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ApiKeyResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteApiKey(
            final String id) throws ApiException, IOException {
        return prepareDeleteApiKeyRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteApiKeyAsync(
            final String id) {
        try { 
            return prepareDeleteApiKeyRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteApiKey.
     */
    private ApiCall<Operation, ApiException> prepareDeleteApiKeyRequest(
            final String id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/api-key/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the IamApiKey response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IamApiKey getApiKey(
            final String id) throws ApiException, IOException {
        return prepareGetApiKeyRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the IamApiKey response from the API call
     */
    public CompletableFuture<IamApiKey> getApiKeyAsync(
            final String id) {
        try { 
            return prepareGetApiKeyRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getApiKey.
     */
    private ApiCall<IamApiKey, ApiException> prepareGetApiKeyRequest(
            final String id) throws IOException {
        return new ApiCall.Builder<IamApiKey, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/api-key/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IamApiKey.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the AccessKeyKnownOperationsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AccessKeyKnownOperationsResponse listAccessKeyKnownOperations() throws ApiException, IOException {
        return prepareListAccessKeyKnownOperationsRequest().execute();
    }

    /**
     * @return    Returns the AccessKeyKnownOperationsResponse response from the API call
     */
    public CompletableFuture<AccessKeyKnownOperationsResponse> listAccessKeyKnownOperationsAsync() {
        try { 
            return prepareListAccessKeyKnownOperationsRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listAccessKeyKnownOperations.
     */
    private ApiCall<AccessKeyKnownOperationsResponse, ApiException> prepareListAccessKeyKnownOperationsRequest() throws IOException {
        return new ApiCall.Builder<AccessKeyKnownOperationsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/access-key-known-operations")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AccessKeyKnownOperationsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateIamRole(
            final UUID id,
            final IamRoleRequest body) throws ApiException, IOException {
        return prepareUpdateIamRoleRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateIamRoleAsync(
            final UUID id,
            final IamRoleRequest body) {
        try { 
            return prepareUpdateIamRoleRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateIamRole.
     */
    private ApiCall<Operation, ApiException> prepareUpdateIamRoleRequest(
            final UUID id,
            final IamRoleRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/iam-role/{id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the IamRole response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IamRole getIamRole(
            final UUID id) throws ApiException, IOException {
        return prepareGetIamRoleRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the IamRole response from the API call
     */
    public CompletableFuture<IamRole> getIamRoleAsync(
            final UUID id) {
        try { 
            return prepareGetIamRoleRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getIamRole.
     */
    private ApiCall<IamRole, ApiException> prepareGetIamRoleRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<IamRole, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/iam-role/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IamRole.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteIamRole(
            final UUID id) throws ApiException, IOException {
        return prepareDeleteIamRoleRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteIamRoleAsync(
            final UUID id) {
        try { 
            return prepareDeleteIamRoleRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteIamRole.
     */
    private ApiCall<Operation, ApiException> prepareDeleteIamRoleRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/iam-role/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the IamPolicy response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IamPolicy getIamOrganizationPolicy() throws ApiException, IOException {
        return prepareGetIamOrganizationPolicyRequest().execute();
    }

    /**
     * @return    Returns the IamPolicy response from the API call
     */
    public CompletableFuture<IamPolicy> getIamOrganizationPolicyAsync() {
        try { 
            return prepareGetIamOrganizationPolicyRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getIamOrganizationPolicy.
     */
    private ApiCall<IamPolicy, ApiException> prepareGetIamOrganizationPolicyRequest() throws IOException {
        return new ApiCall.Builder<IamPolicy, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/iam-organization-policy")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IamPolicy.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateIamOrganizationPolicy(
            final IamPolicy body) throws ApiException, IOException {
        return prepareUpdateIamOrganizationPolicyRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateIamOrganizationPolicyAsync(
            final IamPolicy body) {
        try { 
            return prepareUpdateIamOrganizationPolicyRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateIamOrganizationPolicy.
     */
    private ApiCall<Operation, ApiException> prepareUpdateIamOrganizationPolicyRequest(
            final IamPolicy body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/iam-organization-policy")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the AccessKeyOperationsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AccessKeyOperationsResponse listAccessKeyOperations() throws ApiException, IOException {
        return prepareListAccessKeyOperationsRequest().execute();
    }

    /**
     * @return    Returns the AccessKeyOperationsResponse response from the API call
     */
    public CompletableFuture<AccessKeyOperationsResponse> listAccessKeyOperationsAsync() {
        try { 
            return prepareListAccessKeyOperationsRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listAccessKeyOperations.
     */
    private ApiCall<AccessKeyOperationsResponse, ApiException> prepareListAccessKeyOperationsRequest() throws IOException {
        return new ApiCall.Builder<AccessKeyOperationsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/access-key-operations")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AccessKeyOperationsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateIamRolePolicy(
            final UUID id,
            final IamPolicy body) throws ApiException, IOException {
        return prepareUpdateIamRolePolicyRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateIamRolePolicyAsync(
            final UUID id,
            final IamPolicy body) {
        try { 
            return prepareUpdateIamRolePolicyRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateIamRolePolicy.
     */
    private ApiCall<Operation, ApiException> prepareUpdateIamRolePolicyRequest(
            final UUID id,
            final IamPolicy body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/iam-role/{id}:policy")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the IamRoleResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IamRoleResponse listIamRoles() throws ApiException, IOException {
        return prepareListIamRolesRequest().execute();
    }

    /**
     * @return    Returns the IamRoleResponse response from the API call
     */
    public CompletableFuture<IamRoleResponse> listIamRolesAsync() {
        try { 
            return prepareListIamRolesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listIamRoles.
     */
    private ApiCall<IamRoleResponse, ApiException> prepareListIamRolesRequest() throws IOException {
        return new ApiCall.Builder<IamRoleResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/iam-role")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IamRoleResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createIamRole(
            final IamRoleRequest1 body) throws ApiException, IOException {
        return prepareCreateIamRoleRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createIamRoleAsync(
            final IamRoleRequest1 body) {
        try { 
            return prepareCreateIamRoleRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createIamRole.
     */
    private ApiCall<Operation, ApiException> prepareCreateIamRoleRequest(
            final IamRoleRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/iam-role")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}