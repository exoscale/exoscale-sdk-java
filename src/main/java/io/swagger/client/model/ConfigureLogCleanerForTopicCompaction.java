/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * ConfigureLogCleanerForTopicCompaction
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class ConfigureLogCleanerForTopicCompaction {
  @JsonProperty("log_cleaner_delete_retention_ms")
  private Integer logCleanerDeleteRetentionMs = null;

  @JsonProperty("log_cleaner_max_compaction_lag_ms")
  private Integer logCleanerMaxCompactionLagMs = null;

  @JsonProperty("log_cleaner_min_cleanable_ratio")
  private BigDecimal logCleanerMinCleanableRatio = null;

  @JsonProperty("log_cleaner_min_compaction_lag_ms")
  private Integer logCleanerMinCompactionLagMs = null;

  /**
   * The default cleanup policy for segments beyond the retention window
   */
  public enum LogCleanupPolicyEnum {
    DELETE("delete"),
    COMPACT("compact"),
    COMPACT_DELETE("compact,delete");

    private String value;

    LogCleanupPolicyEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static LogCleanupPolicyEnum fromValue(String input) {
      for (LogCleanupPolicyEnum b : LogCleanupPolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("log_cleanup_policy")
  private LogCleanupPolicyEnum logCleanupPolicy = null;

  public ConfigureLogCleanerForTopicCompaction logCleanerDeleteRetentionMs(Integer logCleanerDeleteRetentionMs) {
    this.logCleanerDeleteRetentionMs = logCleanerDeleteRetentionMs;
    return this;
  }

   /**
   * How long are delete records retained?
   * minimum: 0
   * maximum: 315569260000
   * @return logCleanerDeleteRetentionMs
  **/
  @Schema(example = "86400000", description = "How long are delete records retained?")
  public Integer getLogCleanerDeleteRetentionMs() {
    return logCleanerDeleteRetentionMs;
  }

  public void setLogCleanerDeleteRetentionMs(Integer logCleanerDeleteRetentionMs) {
    this.logCleanerDeleteRetentionMs = logCleanerDeleteRetentionMs;
  }

  public ConfigureLogCleanerForTopicCompaction logCleanerMaxCompactionLagMs(Integer logCleanerMaxCompactionLagMs) {
    this.logCleanerMaxCompactionLagMs = logCleanerMaxCompactionLagMs;
    return this;
  }

   /**
   * The maximum amount of time message will remain uncompacted. Only applicable for logs that are being compacted
   * minimum: 30000
   * maximum: 9223372036854775807
   * @return logCleanerMaxCompactionLagMs
  **/
  @Schema(description = "The maximum amount of time message will remain uncompacted. Only applicable for logs that are being compacted")
  public Integer getLogCleanerMaxCompactionLagMs() {
    return logCleanerMaxCompactionLagMs;
  }

  public void setLogCleanerMaxCompactionLagMs(Integer logCleanerMaxCompactionLagMs) {
    this.logCleanerMaxCompactionLagMs = logCleanerMaxCompactionLagMs;
  }

  public ConfigureLogCleanerForTopicCompaction logCleanerMinCleanableRatio(BigDecimal logCleanerMinCleanableRatio) {
    this.logCleanerMinCleanableRatio = logCleanerMinCleanableRatio;
    return this;
  }

   /**
   * Controls log compactor frequency. Larger value means more frequent compactions but also more space wasted for logs. Consider setting log.cleaner.max.compaction.lag.ms to enforce compactions sooner, instead of setting a very high value for this option.
   * minimum: 0
   * maximum: 0
   * @return logCleanerMinCleanableRatio
  **/
  @Schema(example = "0.5", description = "Controls log compactor frequency. Larger value means more frequent compactions but also more space wasted for logs. Consider setting log.cleaner.max.compaction.lag.ms to enforce compactions sooner, instead of setting a very high value for this option.")
  public BigDecimal getLogCleanerMinCleanableRatio() {
    return logCleanerMinCleanableRatio;
  }

  public void setLogCleanerMinCleanableRatio(BigDecimal logCleanerMinCleanableRatio) {
    this.logCleanerMinCleanableRatio = logCleanerMinCleanableRatio;
  }

  public ConfigureLogCleanerForTopicCompaction logCleanerMinCompactionLagMs(Integer logCleanerMinCompactionLagMs) {
    this.logCleanerMinCompactionLagMs = logCleanerMinCompactionLagMs;
    return this;
  }

   /**
   * The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
   * minimum: 0
   * maximum: 9223372036854775807
   * @return logCleanerMinCompactionLagMs
  **/
  @Schema(description = "The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.")
  public Integer getLogCleanerMinCompactionLagMs() {
    return logCleanerMinCompactionLagMs;
  }

  public void setLogCleanerMinCompactionLagMs(Integer logCleanerMinCompactionLagMs) {
    this.logCleanerMinCompactionLagMs = logCleanerMinCompactionLagMs;
  }

  public ConfigureLogCleanerForTopicCompaction logCleanupPolicy(LogCleanupPolicyEnum logCleanupPolicy) {
    this.logCleanupPolicy = logCleanupPolicy;
    return this;
  }

   /**
   * The default cleanup policy for segments beyond the retention window
   * @return logCleanupPolicy
  **/
  @Schema(example = "delete", description = "The default cleanup policy for segments beyond the retention window")
  public LogCleanupPolicyEnum getLogCleanupPolicy() {
    return logCleanupPolicy;
  }

  public void setLogCleanupPolicy(LogCleanupPolicyEnum logCleanupPolicy) {
    this.logCleanupPolicy = logCleanupPolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigureLogCleanerForTopicCompaction configureLogCleanerForTopicCompaction = (ConfigureLogCleanerForTopicCompaction) o;
    return Objects.equals(this.logCleanerDeleteRetentionMs, configureLogCleanerForTopicCompaction.logCleanerDeleteRetentionMs) &&
        Objects.equals(this.logCleanerMaxCompactionLagMs, configureLogCleanerForTopicCompaction.logCleanerMaxCompactionLagMs) &&
        Objects.equals(this.logCleanerMinCleanableRatio, configureLogCleanerForTopicCompaction.logCleanerMinCleanableRatio) &&
        Objects.equals(this.logCleanerMinCompactionLagMs, configureLogCleanerForTopicCompaction.logCleanerMinCompactionLagMs) &&
        Objects.equals(this.logCleanupPolicy, configureLogCleanerForTopicCompaction.logCleanupPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logCleanerDeleteRetentionMs, logCleanerMaxCompactionLagMs, logCleanerMinCleanableRatio, logCleanerMinCompactionLagMs, logCleanupPolicy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigureLogCleanerForTopicCompaction {\n");
    
    sb.append("    logCleanerDeleteRetentionMs: ").append(toIndentedString(logCleanerDeleteRetentionMs)).append("\n");
    sb.append("    logCleanerMaxCompactionLagMs: ").append(toIndentedString(logCleanerMaxCompactionLagMs)).append("\n");
    sb.append("    logCleanerMinCleanableRatio: ").append(toIndentedString(logCleanerMinCleanableRatio)).append("\n");
    sb.append("    logCleanerMinCompactionLagMs: ").append(toIndentedString(logCleanerMinCompactionLagMs)).append("\n");
    sb.append("    logCleanupPolicy: ").append(toIndentedString(logCleanupPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
