/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateBlockStorageVolumeRequestBody {

    /**
     * Volume name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Volume size in GB.
     *                             When a snapshot ID is supplied, this defaults to the size of the source volume, but can be set to a larger value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Long> size;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    /**
     * Target block storage snapshot
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block-storage-snapshot")
    private Optional<? extends com.exoscale.api.models.components.BlockStorageSnapshotTarget> blockStorageSnapshot;

    public CreateBlockStorageVolumeRequestBody(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("size") Optional<? extends Long> size,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("block-storage-snapshot") Optional<? extends com.exoscale.api.models.components.BlockStorageSnapshotTarget> blockStorageSnapshot) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(blockStorageSnapshot, "blockStorageSnapshot");
        this.name = name;
        this.size = size;
        this.labels = labels;
        this.blockStorageSnapshot = blockStorageSnapshot;
    }

    /**
     * Volume name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Volume size in GB.
     *                             When a snapshot ID is supplied, this defaults to the size of the source volume, but can be set to a larger value.
     */
    public Optional<? extends Long> size() {
        return size;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    /**
     * Target block storage snapshot
     */
    public Optional<? extends com.exoscale.api.models.components.BlockStorageSnapshotTarget> blockStorageSnapshot() {
        return blockStorageSnapshot;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Volume name
     */
    public CreateBlockStorageVolumeRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Volume name
     */
    public CreateBlockStorageVolumeRequestBody withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Volume size in GB.
     *                             When a snapshot ID is supplied, this defaults to the size of the source volume, but can be set to a larger value.
     */
    public CreateBlockStorageVolumeRequestBody withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Volume size in GB.
     *                             When a snapshot ID is supplied, this defaults to the size of the source volume, but can be set to a larger value.
     */
    public CreateBlockStorageVolumeRequestBody withSize(Optional<? extends Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public CreateBlockStorageVolumeRequestBody withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public CreateBlockStorageVolumeRequestBody withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    /**
     * Target block storage snapshot
     */
    public CreateBlockStorageVolumeRequestBody withBlockStorageSnapshot(com.exoscale.api.models.components.BlockStorageSnapshotTarget blockStorageSnapshot) {
        Utils.checkNotNull(blockStorageSnapshot, "blockStorageSnapshot");
        this.blockStorageSnapshot = Optional.ofNullable(blockStorageSnapshot);
        return this;
    }

    /**
     * Target block storage snapshot
     */
    public CreateBlockStorageVolumeRequestBody withBlockStorageSnapshot(Optional<? extends com.exoscale.api.models.components.BlockStorageSnapshotTarget> blockStorageSnapshot) {
        Utils.checkNotNull(blockStorageSnapshot, "blockStorageSnapshot");
        this.blockStorageSnapshot = blockStorageSnapshot;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateBlockStorageVolumeRequestBody other = (CreateBlockStorageVolumeRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.blockStorageSnapshot, other.blockStorageSnapshot);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            size,
            labels,
            blockStorageSnapshot);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateBlockStorageVolumeRequestBody.class,
                "name", name,
                "size", size,
                "labels", labels,
                "blockStorageSnapshot", blockStorageSnapshot);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends Long> size = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.BlockStorageSnapshotTarget> blockStorageSnapshot = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Volume name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Volume name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Volume size in GB.
         *                             When a snapshot ID is supplied, this defaults to the size of the source volume, but can be set to a larger value.
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Volume size in GB.
         *                             When a snapshot ID is supplied, this defaults to the size of the source volume, but can be set to a larger value.
         */
        public Builder size(Optional<? extends Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        /**
         * Target block storage snapshot
         */
        public Builder blockStorageSnapshot(com.exoscale.api.models.components.BlockStorageSnapshotTarget blockStorageSnapshot) {
            Utils.checkNotNull(blockStorageSnapshot, "blockStorageSnapshot");
            this.blockStorageSnapshot = Optional.ofNullable(blockStorageSnapshot);
            return this;
        }

        /**
         * Target block storage snapshot
         */
        public Builder blockStorageSnapshot(Optional<? extends com.exoscale.api.models.components.BlockStorageSnapshotTarget> blockStorageSnapshot) {
            Utils.checkNotNull(blockStorageSnapshot, "blockStorageSnapshot");
            this.blockStorageSnapshot = blockStorageSnapshot;
            return this;
        }
        
        public CreateBlockStorageVolumeRequestBody build() {
            return new CreateBlockStorageVolumeRequestBody(
                name,
                size,
                labels,
                blockStorageSnapshot);
        }
    }
}

