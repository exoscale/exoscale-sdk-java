/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DbaasOpensearchAclConfig {

    /**
     * List of OpenSearch ACLs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acls")
    private Optional<? extends java.util.List<Acls>> acls;

    /**
     * Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acl-enabled")
    private Optional<? extends Boolean> aclEnabled;

    /**
     * Enable to enforce index rules in a limited fashion for requests that use the _mget, _msearch, and _bulk APIs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extended-acl-enabled")
    private Optional<? extends Boolean> extendedAclEnabled;

    public DbaasOpensearchAclConfig(
            @JsonProperty("acls") Optional<? extends java.util.List<Acls>> acls,
            @JsonProperty("acl-enabled") Optional<? extends Boolean> aclEnabled,
            @JsonProperty("extended-acl-enabled") Optional<? extends Boolean> extendedAclEnabled) {
        Utils.checkNotNull(acls, "acls");
        Utils.checkNotNull(aclEnabled, "aclEnabled");
        Utils.checkNotNull(extendedAclEnabled, "extendedAclEnabled");
        this.acls = acls;
        this.aclEnabled = aclEnabled;
        this.extendedAclEnabled = extendedAclEnabled;
    }

    /**
     * List of OpenSearch ACLs
     */
    public Optional<? extends java.util.List<Acls>> acls() {
        return acls;
    }

    /**
     * Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access.
     */
    public Optional<? extends Boolean> aclEnabled() {
        return aclEnabled;
    }

    /**
     * Enable to enforce index rules in a limited fashion for requests that use the _mget, _msearch, and _bulk APIs
     */
    public Optional<? extends Boolean> extendedAclEnabled() {
        return extendedAclEnabled;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of OpenSearch ACLs
     */
    public DbaasOpensearchAclConfig withAcls(java.util.List<Acls> acls) {
        Utils.checkNotNull(acls, "acls");
        this.acls = Optional.ofNullable(acls);
        return this;
    }

    /**
     * List of OpenSearch ACLs
     */
    public DbaasOpensearchAclConfig withAcls(Optional<? extends java.util.List<Acls>> acls) {
        Utils.checkNotNull(acls, "acls");
        this.acls = acls;
        return this;
    }

    /**
     * Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access.
     */
    public DbaasOpensearchAclConfig withAclEnabled(boolean aclEnabled) {
        Utils.checkNotNull(aclEnabled, "aclEnabled");
        this.aclEnabled = Optional.ofNullable(aclEnabled);
        return this;
    }

    /**
     * Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access.
     */
    public DbaasOpensearchAclConfig withAclEnabled(Optional<? extends Boolean> aclEnabled) {
        Utils.checkNotNull(aclEnabled, "aclEnabled");
        this.aclEnabled = aclEnabled;
        return this;
    }

    /**
     * Enable to enforce index rules in a limited fashion for requests that use the _mget, _msearch, and _bulk APIs
     */
    public DbaasOpensearchAclConfig withExtendedAclEnabled(boolean extendedAclEnabled) {
        Utils.checkNotNull(extendedAclEnabled, "extendedAclEnabled");
        this.extendedAclEnabled = Optional.ofNullable(extendedAclEnabled);
        return this;
    }

    /**
     * Enable to enforce index rules in a limited fashion for requests that use the _mget, _msearch, and _bulk APIs
     */
    public DbaasOpensearchAclConfig withExtendedAclEnabled(Optional<? extends Boolean> extendedAclEnabled) {
        Utils.checkNotNull(extendedAclEnabled, "extendedAclEnabled");
        this.extendedAclEnabled = extendedAclEnabled;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasOpensearchAclConfig other = (DbaasOpensearchAclConfig) o;
        return 
            java.util.Objects.deepEquals(this.acls, other.acls) &&
            java.util.Objects.deepEquals(this.aclEnabled, other.aclEnabled) &&
            java.util.Objects.deepEquals(this.extendedAclEnabled, other.extendedAclEnabled);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            acls,
            aclEnabled,
            extendedAclEnabled);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasOpensearchAclConfig.class,
                "acls", acls,
                "aclEnabled", aclEnabled,
                "extendedAclEnabled", extendedAclEnabled);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<Acls>> acls = Optional.empty();
 
        private Optional<? extends Boolean> aclEnabled = Optional.empty();
 
        private Optional<? extends Boolean> extendedAclEnabled = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of OpenSearch ACLs
         */
        public Builder acls(java.util.List<Acls> acls) {
            Utils.checkNotNull(acls, "acls");
            this.acls = Optional.ofNullable(acls);
            return this;
        }

        /**
         * List of OpenSearch ACLs
         */
        public Builder acls(Optional<? extends java.util.List<Acls>> acls) {
            Utils.checkNotNull(acls, "acls");
            this.acls = acls;
            return this;
        }

        /**
         * Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access.
         */
        public Builder aclEnabled(boolean aclEnabled) {
            Utils.checkNotNull(aclEnabled, "aclEnabled");
            this.aclEnabled = Optional.ofNullable(aclEnabled);
            return this;
        }

        /**
         * Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access.
         */
        public Builder aclEnabled(Optional<? extends Boolean> aclEnabled) {
            Utils.checkNotNull(aclEnabled, "aclEnabled");
            this.aclEnabled = aclEnabled;
            return this;
        }

        /**
         * Enable to enforce index rules in a limited fashion for requests that use the _mget, _msearch, and _bulk APIs
         */
        public Builder extendedAclEnabled(boolean extendedAclEnabled) {
            Utils.checkNotNull(extendedAclEnabled, "extendedAclEnabled");
            this.extendedAclEnabled = Optional.ofNullable(extendedAclEnabled);
            return this;
        }

        /**
         * Enable to enforce index rules in a limited fashion for requests that use the _mget, _msearch, and _bulk APIs
         */
        public Builder extendedAclEnabled(Optional<? extends Boolean> extendedAclEnabled) {
            Utils.checkNotNull(extendedAclEnabled, "extendedAclEnabled");
            this.extendedAclEnabled = extendedAclEnabled;
            return this;
        }
        
        public DbaasOpensearchAclConfig build() {
            return new DbaasOpensearchAclConfig(
                acls,
                aclEnabled,
                extendedAclEnabled);
        }
    }
}

