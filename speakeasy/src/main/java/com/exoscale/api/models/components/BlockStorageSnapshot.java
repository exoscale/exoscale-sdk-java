/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * BlockStorageSnapshot - Block storage snapshot
 */

public class BlockStorageSnapshot {

    /**
     * Snapshot ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Snapshot name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Snapshot size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Long> size;

    /**
     * Snapshot creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * Snapshot state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends BlockStorageSnapshotState> state;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    /**
     * Target block storage volume
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block-storage-volume")
    private Optional<? extends BlockStorageVolumeTarget> blockStorageVolume;

    public BlockStorageSnapshot(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("size") Optional<? extends Long> size,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("state") Optional<? extends BlockStorageSnapshotState> state,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("block-storage-volume") Optional<? extends BlockStorageVolumeTarget> blockStorageVolume) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(blockStorageVolume, "blockStorageVolume");
        this.id = id;
        this.name = name;
        this.size = size;
        this.createdAt = createdAt;
        this.state = state;
        this.labels = labels;
        this.blockStorageVolume = blockStorageVolume;
    }

    /**
     * Snapshot ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Snapshot name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Snapshot size
     */
    public Optional<? extends Long> size() {
        return size;
    }

    /**
     * Snapshot creation date
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Snapshot state
     */
    public Optional<? extends BlockStorageSnapshotState> state() {
        return state;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    /**
     * Target block storage volume
     */
    public Optional<? extends BlockStorageVolumeTarget> blockStorageVolume() {
        return blockStorageVolume;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Snapshot ID
     */
    public BlockStorageSnapshot withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Snapshot ID
     */
    public BlockStorageSnapshot withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Snapshot name
     */
    public BlockStorageSnapshot withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Snapshot name
     */
    public BlockStorageSnapshot withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Snapshot size
     */
    public BlockStorageSnapshot withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Snapshot size
     */
    public BlockStorageSnapshot withSize(Optional<? extends Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Snapshot creation date
     */
    public BlockStorageSnapshot withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Snapshot creation date
     */
    public BlockStorageSnapshot withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Snapshot state
     */
    public BlockStorageSnapshot withState(BlockStorageSnapshotState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * Snapshot state
     */
    public BlockStorageSnapshot withState(Optional<? extends BlockStorageSnapshotState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public BlockStorageSnapshot withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public BlockStorageSnapshot withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    /**
     * Target block storage volume
     */
    public BlockStorageSnapshot withBlockStorageVolume(BlockStorageVolumeTarget blockStorageVolume) {
        Utils.checkNotNull(blockStorageVolume, "blockStorageVolume");
        this.blockStorageVolume = Optional.ofNullable(blockStorageVolume);
        return this;
    }

    /**
     * Target block storage volume
     */
    public BlockStorageSnapshot withBlockStorageVolume(Optional<? extends BlockStorageVolumeTarget> blockStorageVolume) {
        Utils.checkNotNull(blockStorageVolume, "blockStorageVolume");
        this.blockStorageVolume = blockStorageVolume;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BlockStorageSnapshot other = (BlockStorageSnapshot) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.blockStorageVolume, other.blockStorageVolume);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            name,
            size,
            createdAt,
            state,
            labels,
            blockStorageVolume);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BlockStorageSnapshot.class,
                "id", id,
                "name", name,
                "size", size,
                "createdAt", createdAt,
                "state", state,
                "labels", labels,
                "blockStorageVolume", blockStorageVolume);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends Long> size = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends BlockStorageSnapshotState> state = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends BlockStorageVolumeTarget> blockStorageVolume = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Snapshot ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Snapshot ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Snapshot name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Snapshot name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Snapshot size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Snapshot size
         */
        public Builder size(Optional<? extends Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * Snapshot creation date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Snapshot creation date
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Snapshot state
         */
        public Builder state(BlockStorageSnapshotState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Snapshot state
         */
        public Builder state(Optional<? extends BlockStorageSnapshotState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        /**
         * Target block storage volume
         */
        public Builder blockStorageVolume(BlockStorageVolumeTarget blockStorageVolume) {
            Utils.checkNotNull(blockStorageVolume, "blockStorageVolume");
            this.blockStorageVolume = Optional.ofNullable(blockStorageVolume);
            return this;
        }

        /**
         * Target block storage volume
         */
        public Builder blockStorageVolume(Optional<? extends BlockStorageVolumeTarget> blockStorageVolume) {
            Utils.checkNotNull(blockStorageVolume, "blockStorageVolume");
            this.blockStorageVolume = blockStorageVolume;
            return this;
        }
        
        public BlockStorageSnapshot build() {
            return new BlockStorageSnapshot(
                id,
                name,
                size,
                createdAt,
                state,
                labels,
                blockStorageVolume);
        }
    }
}

