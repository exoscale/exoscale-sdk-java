/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * InstanceInput - Instance
 */

public class InstanceInput {

    /**
     * Instance Anti-affinity Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anti-affinity-groups")
    private Optional<? extends java.util.List<AntiAffinityGroupInput>> antiAffinityGroups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public-ip-assignment")
    private Optional<? extends PublicIpAssignment> publicIpAssignment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    /**
     * Instance Security Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security-groups")
    private Optional<? extends java.util.List<SecurityGroupInput>> securityGroups;

    /**
     * Instance Elastic IPs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("elastic-ips")
    private Optional<? extends java.util.List<ElasticIpInput>> elasticIps;

    /**
     * Instance name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Compute instance type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance-type")
    private Optional<? extends InstanceTypeInput> instanceType;

    /**
     * Instance Private Networks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private-networks")
    private Optional<? extends java.util.List<PrivateNetworkInput>> privateNetworks;

    /**
     * Instance template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends TemplateInput> template;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends InstanceState> state;

    /**
     * SSH key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh-key")
    private Optional<? extends SshKeyInput> sshKey;

    /**
     * Instance Cloud-init user-data (base64 encoded)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user-data")
    private Optional<? extends String> userData;

    /**
     * Resource manager
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager")
    private Optional<? extends Manager> manager;

    /**
     * Deploy target
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deploy-target")
    private Optional<? extends DeployTarget> deployTarget;

    /**
     * Instance Snapshots
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshots")
    private Optional<? extends java.util.List<SnapshotInput>> snapshots;

    /**
     * Instance disk size in GB
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disk-size")
    private Optional<? extends Long> diskSize;

    /**
     * Instance SSH Keys
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh-keys")
    private Optional<? extends java.util.List<SshKeyInput>> sshKeys;

    public InstanceInput(
            @JsonProperty("anti-affinity-groups") Optional<? extends java.util.List<AntiAffinityGroupInput>> antiAffinityGroups,
            @JsonProperty("public-ip-assignment") Optional<? extends PublicIpAssignment> publicIpAssignment,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("security-groups") Optional<? extends java.util.List<SecurityGroupInput>> securityGroups,
            @JsonProperty("elastic-ips") Optional<? extends java.util.List<ElasticIpInput>> elasticIps,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("instance-type") Optional<? extends InstanceTypeInput> instanceType,
            @JsonProperty("private-networks") Optional<? extends java.util.List<PrivateNetworkInput>> privateNetworks,
            @JsonProperty("template") Optional<? extends TemplateInput> template,
            @JsonProperty("state") Optional<? extends InstanceState> state,
            @JsonProperty("ssh-key") Optional<? extends SshKeyInput> sshKey,
            @JsonProperty("user-data") Optional<? extends String> userData,
            @JsonProperty("manager") Optional<? extends Manager> manager,
            @JsonProperty("deploy-target") Optional<? extends DeployTarget> deployTarget,
            @JsonProperty("snapshots") Optional<? extends java.util.List<SnapshotInput>> snapshots,
            @JsonProperty("disk-size") Optional<? extends Long> diskSize,
            @JsonProperty("ssh-keys") Optional<? extends java.util.List<SshKeyInput>> sshKeys) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(securityGroups, "securityGroups");
        Utils.checkNotNull(elasticIps, "elasticIps");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(instanceType, "instanceType");
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(sshKey, "sshKey");
        Utils.checkNotNull(userData, "userData");
        Utils.checkNotNull(manager, "manager");
        Utils.checkNotNull(deployTarget, "deployTarget");
        Utils.checkNotNull(snapshots, "snapshots");
        Utils.checkNotNull(diskSize, "diskSize");
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.antiAffinityGroups = antiAffinityGroups;
        this.publicIpAssignment = publicIpAssignment;
        this.labels = labels;
        this.securityGroups = securityGroups;
        this.elasticIps = elasticIps;
        this.name = name;
        this.instanceType = instanceType;
        this.privateNetworks = privateNetworks;
        this.template = template;
        this.state = state;
        this.sshKey = sshKey;
        this.userData = userData;
        this.manager = manager;
        this.deployTarget = deployTarget;
        this.snapshots = snapshots;
        this.diskSize = diskSize;
        this.sshKeys = sshKeys;
    }

    /**
     * Instance Anti-affinity Groups
     */
    public Optional<? extends java.util.List<AntiAffinityGroupInput>> antiAffinityGroups() {
        return antiAffinityGroups;
    }

    public Optional<? extends PublicIpAssignment> publicIpAssignment() {
        return publicIpAssignment;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    /**
     * Instance Security Groups
     */
    public Optional<? extends java.util.List<SecurityGroupInput>> securityGroups() {
        return securityGroups;
    }

    /**
     * Instance Elastic IPs
     */
    public Optional<? extends java.util.List<ElasticIpInput>> elasticIps() {
        return elasticIps;
    }

    /**
     * Instance name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Compute instance type
     */
    public Optional<? extends InstanceTypeInput> instanceType() {
        return instanceType;
    }

    /**
     * Instance Private Networks
     */
    public Optional<? extends java.util.List<PrivateNetworkInput>> privateNetworks() {
        return privateNetworks;
    }

    /**
     * Instance template
     */
    public Optional<? extends TemplateInput> template() {
        return template;
    }

    public Optional<? extends InstanceState> state() {
        return state;
    }

    /**
     * SSH key
     */
    public Optional<? extends SshKeyInput> sshKey() {
        return sshKey;
    }

    /**
     * Instance Cloud-init user-data (base64 encoded)
     */
    public Optional<? extends String> userData() {
        return userData;
    }

    /**
     * Resource manager
     */
    public Optional<? extends Manager> manager() {
        return manager;
    }

    /**
     * Deploy target
     */
    public Optional<? extends DeployTarget> deployTarget() {
        return deployTarget;
    }

    /**
     * Instance Snapshots
     */
    public Optional<? extends java.util.List<SnapshotInput>> snapshots() {
        return snapshots;
    }

    /**
     * Instance disk size in GB
     */
    public Optional<? extends Long> diskSize() {
        return diskSize;
    }

    /**
     * Instance SSH Keys
     */
    public Optional<? extends java.util.List<SshKeyInput>> sshKeys() {
        return sshKeys;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Instance Anti-affinity Groups
     */
    public InstanceInput withAntiAffinityGroups(java.util.List<AntiAffinityGroupInput> antiAffinityGroups) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        this.antiAffinityGroups = Optional.ofNullable(antiAffinityGroups);
        return this;
    }

    /**
     * Instance Anti-affinity Groups
     */
    public InstanceInput withAntiAffinityGroups(Optional<? extends java.util.List<AntiAffinityGroupInput>> antiAffinityGroups) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        this.antiAffinityGroups = antiAffinityGroups;
        return this;
    }

    public InstanceInput withPublicIpAssignment(PublicIpAssignment publicIpAssignment) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        this.publicIpAssignment = Optional.ofNullable(publicIpAssignment);
        return this;
    }

    public InstanceInput withPublicIpAssignment(Optional<? extends PublicIpAssignment> publicIpAssignment) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        this.publicIpAssignment = publicIpAssignment;
        return this;
    }

    public InstanceInput withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public InstanceInput withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    /**
     * Instance Security Groups
     */
    public InstanceInput withSecurityGroups(java.util.List<SecurityGroupInput> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = Optional.ofNullable(securityGroups);
        return this;
    }

    /**
     * Instance Security Groups
     */
    public InstanceInput withSecurityGroups(Optional<? extends java.util.List<SecurityGroupInput>> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Instance Elastic IPs
     */
    public InstanceInput withElasticIps(java.util.List<ElasticIpInput> elasticIps) {
        Utils.checkNotNull(elasticIps, "elasticIps");
        this.elasticIps = Optional.ofNullable(elasticIps);
        return this;
    }

    /**
     * Instance Elastic IPs
     */
    public InstanceInput withElasticIps(Optional<? extends java.util.List<ElasticIpInput>> elasticIps) {
        Utils.checkNotNull(elasticIps, "elasticIps");
        this.elasticIps = elasticIps;
        return this;
    }

    /**
     * Instance name
     */
    public InstanceInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Instance name
     */
    public InstanceInput withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Compute instance type
     */
    public InstanceInput withInstanceType(InstanceTypeInput instanceType) {
        Utils.checkNotNull(instanceType, "instanceType");
        this.instanceType = Optional.ofNullable(instanceType);
        return this;
    }

    /**
     * Compute instance type
     */
    public InstanceInput withInstanceType(Optional<? extends InstanceTypeInput> instanceType) {
        Utils.checkNotNull(instanceType, "instanceType");
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Instance Private Networks
     */
    public InstanceInput withPrivateNetworks(java.util.List<PrivateNetworkInput> privateNetworks) {
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        this.privateNetworks = Optional.ofNullable(privateNetworks);
        return this;
    }

    /**
     * Instance Private Networks
     */
    public InstanceInput withPrivateNetworks(Optional<? extends java.util.List<PrivateNetworkInput>> privateNetworks) {
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        this.privateNetworks = privateNetworks;
        return this;
    }

    /**
     * Instance template
     */
    public InstanceInput withTemplate(TemplateInput template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    /**
     * Instance template
     */
    public InstanceInput withTemplate(Optional<? extends TemplateInput> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    public InstanceInput withState(InstanceState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public InstanceInput withState(Optional<? extends InstanceState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * SSH key
     */
    public InstanceInput withSshKey(SshKeyInput sshKey) {
        Utils.checkNotNull(sshKey, "sshKey");
        this.sshKey = Optional.ofNullable(sshKey);
        return this;
    }

    /**
     * SSH key
     */
    public InstanceInput withSshKey(Optional<? extends SshKeyInput> sshKey) {
        Utils.checkNotNull(sshKey, "sshKey");
        this.sshKey = sshKey;
        return this;
    }

    /**
     * Instance Cloud-init user-data (base64 encoded)
     */
    public InstanceInput withUserData(String userData) {
        Utils.checkNotNull(userData, "userData");
        this.userData = Optional.ofNullable(userData);
        return this;
    }

    /**
     * Instance Cloud-init user-data (base64 encoded)
     */
    public InstanceInput withUserData(Optional<? extends String> userData) {
        Utils.checkNotNull(userData, "userData");
        this.userData = userData;
        return this;
    }

    /**
     * Resource manager
     */
    public InstanceInput withManager(Manager manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = Optional.ofNullable(manager);
        return this;
    }

    /**
     * Resource manager
     */
    public InstanceInput withManager(Optional<? extends Manager> manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = manager;
        return this;
    }

    /**
     * Deploy target
     */
    public InstanceInput withDeployTarget(DeployTarget deployTarget) {
        Utils.checkNotNull(deployTarget, "deployTarget");
        this.deployTarget = Optional.ofNullable(deployTarget);
        return this;
    }

    /**
     * Deploy target
     */
    public InstanceInput withDeployTarget(Optional<? extends DeployTarget> deployTarget) {
        Utils.checkNotNull(deployTarget, "deployTarget");
        this.deployTarget = deployTarget;
        return this;
    }

    /**
     * Instance Snapshots
     */
    public InstanceInput withSnapshots(java.util.List<SnapshotInput> snapshots) {
        Utils.checkNotNull(snapshots, "snapshots");
        this.snapshots = Optional.ofNullable(snapshots);
        return this;
    }

    /**
     * Instance Snapshots
     */
    public InstanceInput withSnapshots(Optional<? extends java.util.List<SnapshotInput>> snapshots) {
        Utils.checkNotNull(snapshots, "snapshots");
        this.snapshots = snapshots;
        return this;
    }

    /**
     * Instance disk size in GB
     */
    public InstanceInput withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = Optional.ofNullable(diskSize);
        return this;
    }

    /**
     * Instance disk size in GB
     */
    public InstanceInput withDiskSize(Optional<? extends Long> diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }

    /**
     * Instance SSH Keys
     */
    public InstanceInput withSshKeys(java.util.List<SshKeyInput> sshKeys) {
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.sshKeys = Optional.ofNullable(sshKeys);
        return this;
    }

    /**
     * Instance SSH Keys
     */
    public InstanceInput withSshKeys(Optional<? extends java.util.List<SshKeyInput>> sshKeys) {
        Utils.checkNotNull(sshKeys, "sshKeys");
        this.sshKeys = sshKeys;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InstanceInput other = (InstanceInput) o;
        return 
            java.util.Objects.deepEquals(this.antiAffinityGroups, other.antiAffinityGroups) &&
            java.util.Objects.deepEquals(this.publicIpAssignment, other.publicIpAssignment) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.securityGroups, other.securityGroups) &&
            java.util.Objects.deepEquals(this.elasticIps, other.elasticIps) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.instanceType, other.instanceType) &&
            java.util.Objects.deepEquals(this.privateNetworks, other.privateNetworks) &&
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.sshKey, other.sshKey) &&
            java.util.Objects.deepEquals(this.userData, other.userData) &&
            java.util.Objects.deepEquals(this.manager, other.manager) &&
            java.util.Objects.deepEquals(this.deployTarget, other.deployTarget) &&
            java.util.Objects.deepEquals(this.snapshots, other.snapshots) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize) &&
            java.util.Objects.deepEquals(this.sshKeys, other.sshKeys);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            antiAffinityGroups,
            publicIpAssignment,
            labels,
            securityGroups,
            elasticIps,
            name,
            instanceType,
            privateNetworks,
            template,
            state,
            sshKey,
            userData,
            manager,
            deployTarget,
            snapshots,
            diskSize,
            sshKeys);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InstanceInput.class,
                "antiAffinityGroups", antiAffinityGroups,
                "publicIpAssignment", publicIpAssignment,
                "labels", labels,
                "securityGroups", securityGroups,
                "elasticIps", elasticIps,
                "name", name,
                "instanceType", instanceType,
                "privateNetworks", privateNetworks,
                "template", template,
                "state", state,
                "sshKey", sshKey,
                "userData", userData,
                "manager", manager,
                "deployTarget", deployTarget,
                "snapshots", snapshots,
                "diskSize", diskSize,
                "sshKeys", sshKeys);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<AntiAffinityGroupInput>> antiAffinityGroups = Optional.empty();
 
        private Optional<? extends PublicIpAssignment> publicIpAssignment = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends java.util.List<SecurityGroupInput>> securityGroups = Optional.empty();
 
        private Optional<? extends java.util.List<ElasticIpInput>> elasticIps = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends InstanceTypeInput> instanceType = Optional.empty();
 
        private Optional<? extends java.util.List<PrivateNetworkInput>> privateNetworks = Optional.empty();
 
        private Optional<? extends TemplateInput> template = Optional.empty();
 
        private Optional<? extends InstanceState> state = Optional.empty();
 
        private Optional<? extends SshKeyInput> sshKey = Optional.empty();
 
        private Optional<? extends String> userData = Optional.empty();
 
        private Optional<? extends Manager> manager = Optional.empty();
 
        private Optional<? extends DeployTarget> deployTarget = Optional.empty();
 
        private Optional<? extends java.util.List<SnapshotInput>> snapshots = Optional.empty();
 
        private Optional<? extends Long> diskSize = Optional.empty();
 
        private Optional<? extends java.util.List<SshKeyInput>> sshKeys = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Instance Anti-affinity Groups
         */
        public Builder antiAffinityGroups(java.util.List<AntiAffinityGroupInput> antiAffinityGroups) {
            Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
            this.antiAffinityGroups = Optional.ofNullable(antiAffinityGroups);
            return this;
        }

        /**
         * Instance Anti-affinity Groups
         */
        public Builder antiAffinityGroups(Optional<? extends java.util.List<AntiAffinityGroupInput>> antiAffinityGroups) {
            Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
            this.antiAffinityGroups = antiAffinityGroups;
            return this;
        }

        public Builder publicIpAssignment(PublicIpAssignment publicIpAssignment) {
            Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
            this.publicIpAssignment = Optional.ofNullable(publicIpAssignment);
            return this;
        }

        public Builder publicIpAssignment(Optional<? extends PublicIpAssignment> publicIpAssignment) {
            Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
            this.publicIpAssignment = publicIpAssignment;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        /**
         * Instance Security Groups
         */
        public Builder securityGroups(java.util.List<SecurityGroupInput> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = Optional.ofNullable(securityGroups);
            return this;
        }

        /**
         * Instance Security Groups
         */
        public Builder securityGroups(Optional<? extends java.util.List<SecurityGroupInput>> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = securityGroups;
            return this;
        }

        /**
         * Instance Elastic IPs
         */
        public Builder elasticIps(java.util.List<ElasticIpInput> elasticIps) {
            Utils.checkNotNull(elasticIps, "elasticIps");
            this.elasticIps = Optional.ofNullable(elasticIps);
            return this;
        }

        /**
         * Instance Elastic IPs
         */
        public Builder elasticIps(Optional<? extends java.util.List<ElasticIpInput>> elasticIps) {
            Utils.checkNotNull(elasticIps, "elasticIps");
            this.elasticIps = elasticIps;
            return this;
        }

        /**
         * Instance name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Instance name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Compute instance type
         */
        public Builder instanceType(InstanceTypeInput instanceType) {
            Utils.checkNotNull(instanceType, "instanceType");
            this.instanceType = Optional.ofNullable(instanceType);
            return this;
        }

        /**
         * Compute instance type
         */
        public Builder instanceType(Optional<? extends InstanceTypeInput> instanceType) {
            Utils.checkNotNull(instanceType, "instanceType");
            this.instanceType = instanceType;
            return this;
        }

        /**
         * Instance Private Networks
         */
        public Builder privateNetworks(java.util.List<PrivateNetworkInput> privateNetworks) {
            Utils.checkNotNull(privateNetworks, "privateNetworks");
            this.privateNetworks = Optional.ofNullable(privateNetworks);
            return this;
        }

        /**
         * Instance Private Networks
         */
        public Builder privateNetworks(Optional<? extends java.util.List<PrivateNetworkInput>> privateNetworks) {
            Utils.checkNotNull(privateNetworks, "privateNetworks");
            this.privateNetworks = privateNetworks;
            return this;
        }

        /**
         * Instance template
         */
        public Builder template(TemplateInput template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        /**
         * Instance template
         */
        public Builder template(Optional<? extends TemplateInput> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        public Builder state(InstanceState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends InstanceState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * SSH key
         */
        public Builder sshKey(SshKeyInput sshKey) {
            Utils.checkNotNull(sshKey, "sshKey");
            this.sshKey = Optional.ofNullable(sshKey);
            return this;
        }

        /**
         * SSH key
         */
        public Builder sshKey(Optional<? extends SshKeyInput> sshKey) {
            Utils.checkNotNull(sshKey, "sshKey");
            this.sshKey = sshKey;
            return this;
        }

        /**
         * Instance Cloud-init user-data (base64 encoded)
         */
        public Builder userData(String userData) {
            Utils.checkNotNull(userData, "userData");
            this.userData = Optional.ofNullable(userData);
            return this;
        }

        /**
         * Instance Cloud-init user-data (base64 encoded)
         */
        public Builder userData(Optional<? extends String> userData) {
            Utils.checkNotNull(userData, "userData");
            this.userData = userData;
            return this;
        }

        /**
         * Resource manager
         */
        public Builder manager(Manager manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = Optional.ofNullable(manager);
            return this;
        }

        /**
         * Resource manager
         */
        public Builder manager(Optional<? extends Manager> manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = manager;
            return this;
        }

        /**
         * Deploy target
         */
        public Builder deployTarget(DeployTarget deployTarget) {
            Utils.checkNotNull(deployTarget, "deployTarget");
            this.deployTarget = Optional.ofNullable(deployTarget);
            return this;
        }

        /**
         * Deploy target
         */
        public Builder deployTarget(Optional<? extends DeployTarget> deployTarget) {
            Utils.checkNotNull(deployTarget, "deployTarget");
            this.deployTarget = deployTarget;
            return this;
        }

        /**
         * Instance Snapshots
         */
        public Builder snapshots(java.util.List<SnapshotInput> snapshots) {
            Utils.checkNotNull(snapshots, "snapshots");
            this.snapshots = Optional.ofNullable(snapshots);
            return this;
        }

        /**
         * Instance Snapshots
         */
        public Builder snapshots(Optional<? extends java.util.List<SnapshotInput>> snapshots) {
            Utils.checkNotNull(snapshots, "snapshots");
            this.snapshots = snapshots;
            return this;
        }

        /**
         * Instance disk size in GB
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = Optional.ofNullable(diskSize);
            return this;
        }

        /**
         * Instance disk size in GB
         */
        public Builder diskSize(Optional<? extends Long> diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }

        /**
         * Instance SSH Keys
         */
        public Builder sshKeys(java.util.List<SshKeyInput> sshKeys) {
            Utils.checkNotNull(sshKeys, "sshKeys");
            this.sshKeys = Optional.ofNullable(sshKeys);
            return this;
        }

        /**
         * Instance SSH Keys
         */
        public Builder sshKeys(Optional<? extends java.util.List<SshKeyInput>> sshKeys) {
            Utils.checkNotNull(sshKeys, "sshKeys");
            this.sshKeys = sshKeys;
            return this;
        }
        
        public InstanceInput build() {
            return new InstanceInput(
                antiAffinityGroups,
                publicIpAssignment,
                labels,
                securityGroups,
                elasticIps,
                name,
                instanceType,
                privateNetworks,
                template,
                state,
                sshKey,
                userData,
                manager,
                deployTarget,
                snapshots,
                diskSize,
                sshKeys);
        }
    }
}

