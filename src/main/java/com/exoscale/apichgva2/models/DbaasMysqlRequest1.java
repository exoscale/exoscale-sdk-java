/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for DbaasMysqlRequest1 type.
 */
public class DbaasMysqlRequest1 {
    private BackupSchedule2 backupSchedule;
    private List<Integration> integrations;
    private List<String> ipFilter;
    private Boolean terminationProtection;
    private String forkFromService;
    private String recoveryBackupTime;
    private MysqlConfConfigurationValues mysqlSettings;
    private Maintenance maintenance;
    private String adminUsername;
    private String version;
    private String plan;
    private String adminPassword;
    private Migration migration;
    private Long binlogRetentionPeriod;

    /**
     * Default constructor.
     */
    public DbaasMysqlRequest1() {
    }

    /**
     * Initialization constructor.
     * @param  plan  String value for plan.
     * @param  backupSchedule  BackupSchedule2 value for backupSchedule.
     * @param  integrations  List of Integration value for integrations.
     * @param  ipFilter  List of String value for ipFilter.
     * @param  terminationProtection  Boolean value for terminationProtection.
     * @param  forkFromService  String value for forkFromService.
     * @param  recoveryBackupTime  String value for recoveryBackupTime.
     * @param  mysqlSettings  MysqlConfConfigurationValues value for mysqlSettings.
     * @param  maintenance  Maintenance value for maintenance.
     * @param  adminUsername  String value for adminUsername.
     * @param  version  String value for version.
     * @param  adminPassword  String value for adminPassword.
     * @param  migration  Migration value for migration.
     * @param  binlogRetentionPeriod  Long value for binlogRetentionPeriod.
     */
    public DbaasMysqlRequest1(
            String plan,
            BackupSchedule2 backupSchedule,
            List<Integration> integrations,
            List<String> ipFilter,
            Boolean terminationProtection,
            String forkFromService,
            String recoveryBackupTime,
            MysqlConfConfigurationValues mysqlSettings,
            Maintenance maintenance,
            String adminUsername,
            String version,
            String adminPassword,
            Migration migration,
            Long binlogRetentionPeriod) {
        this.backupSchedule = backupSchedule;
        this.integrations = integrations;
        this.ipFilter = ipFilter;
        this.terminationProtection = terminationProtection;
        this.forkFromService = forkFromService;
        this.recoveryBackupTime = recoveryBackupTime;
        this.mysqlSettings = mysqlSettings;
        this.maintenance = maintenance;
        this.adminUsername = adminUsername;
        this.version = version;
        this.plan = plan;
        this.adminPassword = adminPassword;
        this.migration = migration;
        this.binlogRetentionPeriod = binlogRetentionPeriod;
    }

    /**
     * Getter for BackupSchedule.
     * @return Returns the BackupSchedule2
     */
    @JsonGetter("backup-schedule")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public BackupSchedule2 getBackupSchedule() {
        return backupSchedule;
    }

    /**
     * Setter for BackupSchedule.
     * @param backupSchedule Value for BackupSchedule2
     */
    @JsonSetter("backup-schedule")
    public void setBackupSchedule(BackupSchedule2 backupSchedule) {
        this.backupSchedule = backupSchedule;
    }

    /**
     * Getter for Integrations.
     * Service integrations to be enabled when creating the service.
     * @return Returns the List of Integration
     */
    @JsonGetter("integrations")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Integration> getIntegrations() {
        return integrations;
    }

    /**
     * Setter for Integrations.
     * Service integrations to be enabled when creating the service.
     * @param integrations Value for List of Integration
     */
    @JsonSetter("integrations")
    public void setIntegrations(List<Integration> integrations) {
        this.integrations = integrations;
    }

    /**
     * Getter for IpFilter.
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     * @return Returns the List of String
     */
    @JsonGetter("ip-filter")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getIpFilter() {
        return ipFilter;
    }

    /**
     * Setter for IpFilter.
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     * @param ipFilter Value for List of String
     */
    @JsonSetter("ip-filter")
    public void setIpFilter(List<String> ipFilter) {
        this.ipFilter = ipFilter;
    }

    /**
     * Getter for TerminationProtection.
     * Service is protected against termination and powering off
     * @return Returns the Boolean
     */
    @JsonGetter("termination-protection")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTerminationProtection() {
        return terminationProtection;
    }

    /**
     * Setter for TerminationProtection.
     * Service is protected against termination and powering off
     * @param terminationProtection Value for Boolean
     */
    @JsonSetter("termination-protection")
    public void setTerminationProtection(Boolean terminationProtection) {
        this.terminationProtection = terminationProtection;
    }

    /**
     * Getter for ForkFromService.
     * @return Returns the String
     */
    @JsonGetter("fork-from-service")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getForkFromService() {
        return forkFromService;
    }

    /**
     * Setter for ForkFromService.
     * @param forkFromService Value for String
     */
    @JsonSetter("fork-from-service")
    public void setForkFromService(String forkFromService) {
        this.forkFromService = forkFromService;
    }

    /**
     * Getter for RecoveryBackupTime.
     * ISO time of a backup to recover from for services that support arbitrary times
     * @return Returns the String
     */
    @JsonGetter("recovery-backup-time")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRecoveryBackupTime() {
        return recoveryBackupTime;
    }

    /**
     * Setter for RecoveryBackupTime.
     * ISO time of a backup to recover from for services that support arbitrary times
     * @param recoveryBackupTime Value for String
     */
    @JsonSetter("recovery-backup-time")
    public void setRecoveryBackupTime(String recoveryBackupTime) {
        this.recoveryBackupTime = recoveryBackupTime;
    }

    /**
     * Getter for MysqlSettings.
     * @return Returns the MysqlConfConfigurationValues
     */
    @JsonGetter("mysql-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MysqlConfConfigurationValues getMysqlSettings() {
        return mysqlSettings;
    }

    /**
     * Setter for MysqlSettings.
     * @param mysqlSettings Value for MysqlConfConfigurationValues
     */
    @JsonSetter("mysql-settings")
    public void setMysqlSettings(MysqlConfConfigurationValues mysqlSettings) {
        this.mysqlSettings = mysqlSettings;
    }

    /**
     * Getter for Maintenance.
     * Automatic maintenance settings
     * @return Returns the Maintenance
     */
    @JsonGetter("maintenance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Maintenance getMaintenance() {
        return maintenance;
    }

    /**
     * Setter for Maintenance.
     * Automatic maintenance settings
     * @param maintenance Value for Maintenance
     */
    @JsonSetter("maintenance")
    public void setMaintenance(Maintenance maintenance) {
        this.maintenance = maintenance;
    }

    /**
     * Getter for AdminUsername.
     * Custom username for admin user. This must be set only when a new service is being created.
     * @return Returns the String
     */
    @JsonGetter("admin-username")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAdminUsername() {
        return adminUsername;
    }

    /**
     * Setter for AdminUsername.
     * Custom username for admin user. This must be set only when a new service is being created.
     * @param adminUsername Value for String
     */
    @JsonSetter("admin-username")
    public void setAdminUsername(String adminUsername) {
        this.adminUsername = adminUsername;
    }

    /**
     * Getter for Version.
     * MySQL major version
     * @return Returns the String
     */
    @JsonGetter("version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVersion() {
        return version;
    }

    /**
     * Setter for Version.
     * MySQL major version
     * @param version Value for String
     */
    @JsonSetter("version")
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Getter for Plan.
     * Subscription plan
     * @return Returns the String
     */
    @JsonGetter("plan")
    public String getPlan() {
        return plan;
    }

    /**
     * Setter for Plan.
     * Subscription plan
     * @param plan Value for String
     */
    @JsonSetter("plan")
    public void setPlan(String plan) {
        this.plan = plan;
    }

    /**
     * Getter for AdminPassword.
     * Custom password for admin user. Defaults to random string. This must be set only when a new
     * service is being created.
     * @return Returns the String
     */
    @JsonGetter("admin-password")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAdminPassword() {
        return adminPassword;
    }

    /**
     * Setter for AdminPassword.
     * Custom password for admin user. Defaults to random string. This must be set only when a new
     * service is being created.
     * @param adminPassword Value for String
     */
    @JsonSetter("admin-password")
    public void setAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
    }

    /**
     * Getter for Migration.
     * Migrate data from existing server
     * @return Returns the Migration
     */
    @JsonGetter("migration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Migration getMigration() {
        return migration;
    }

    /**
     * Setter for Migration.
     * Migrate data from existing server
     * @param migration Value for Migration
     */
    @JsonSetter("migration")
    public void setMigration(Migration migration) {
        this.migration = migration;
    }

    /**
     * Getter for BinlogRetentionPeriod.
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be
     * extended for services that require binlog entries for longer than the default for example if
     * using the MySQL Debezium Kafka connector.
     * @return Returns the Long
     */
    @JsonGetter("binlog-retention-period")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getBinlogRetentionPeriod() {
        return binlogRetentionPeriod;
    }

    /**
     * Setter for BinlogRetentionPeriod.
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be
     * extended for services that require binlog entries for longer than the default for example if
     * using the MySQL Debezium Kafka connector.
     * @param binlogRetentionPeriod Value for Long
     */
    @JsonSetter("binlog-retention-period")
    public void setBinlogRetentionPeriod(Long binlogRetentionPeriod) {
        this.binlogRetentionPeriod = binlogRetentionPeriod;
    }

    /**
     * Converts this DbaasMysqlRequest1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DbaasMysqlRequest1 [" + "plan=" + plan + ", backupSchedule=" + backupSchedule
                + ", integrations=" + integrations + ", ipFilter=" + ipFilter
                + ", terminationProtection=" + terminationProtection + ", forkFromService="
                + forkFromService + ", recoveryBackupTime=" + recoveryBackupTime
                + ", mysqlSettings=" + mysqlSettings + ", maintenance=" + maintenance
                + ", adminUsername=" + adminUsername + ", version=" + version + ", adminPassword="
                + adminPassword + ", migration=" + migration + ", binlogRetentionPeriod="
                + binlogRetentionPeriod + "]";
    }

    /**
     * Builds a new {@link DbaasMysqlRequest1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DbaasMysqlRequest1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(plan)
                .backupSchedule(getBackupSchedule())
                .integrations(getIntegrations())
                .ipFilter(getIpFilter())
                .terminationProtection(getTerminationProtection())
                .forkFromService(getForkFromService())
                .recoveryBackupTime(getRecoveryBackupTime())
                .mysqlSettings(getMysqlSettings())
                .maintenance(getMaintenance())
                .adminUsername(getAdminUsername())
                .version(getVersion())
                .adminPassword(getAdminPassword())
                .migration(getMigration())
                .binlogRetentionPeriod(getBinlogRetentionPeriod());
        return builder;
    }

    /**
     * Class to build instances of {@link DbaasMysqlRequest1}.
     */
    public static class Builder {
        private String plan;
        private BackupSchedule2 backupSchedule;
        private List<Integration> integrations;
        private List<String> ipFilter;
        private Boolean terminationProtection;
        private String forkFromService;
        private String recoveryBackupTime;
        private MysqlConfConfigurationValues mysqlSettings;
        private Maintenance maintenance;
        private String adminUsername;
        private String version;
        private String adminPassword;
        private Migration migration;
        private Long binlogRetentionPeriod;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  plan  String value for plan.
         */
        public Builder(String plan) {
            this.plan = plan;
        }

        /**
         * Setter for plan.
         * @param  plan  String value for plan.
         * @return Builder
         */
        public Builder plan(String plan) {
            this.plan = plan;
            return this;
        }

        /**
         * Setter for backupSchedule.
         * @param  backupSchedule  BackupSchedule2 value for backupSchedule.
         * @return Builder
         */
        public Builder backupSchedule(BackupSchedule2 backupSchedule) {
            this.backupSchedule = backupSchedule;
            return this;
        }

        /**
         * Setter for integrations.
         * @param  integrations  List of Integration value for integrations.
         * @return Builder
         */
        public Builder integrations(List<Integration> integrations) {
            this.integrations = integrations;
            return this;
        }

        /**
         * Setter for ipFilter.
         * @param  ipFilter  List of String value for ipFilter.
         * @return Builder
         */
        public Builder ipFilter(List<String> ipFilter) {
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * Setter for terminationProtection.
         * @param  terminationProtection  Boolean value for terminationProtection.
         * @return Builder
         */
        public Builder terminationProtection(Boolean terminationProtection) {
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Setter for forkFromService.
         * @param  forkFromService  String value for forkFromService.
         * @return Builder
         */
        public Builder forkFromService(String forkFromService) {
            this.forkFromService = forkFromService;
            return this;
        }

        /**
         * Setter for recoveryBackupTime.
         * @param  recoveryBackupTime  String value for recoveryBackupTime.
         * @return Builder
         */
        public Builder recoveryBackupTime(String recoveryBackupTime) {
            this.recoveryBackupTime = recoveryBackupTime;
            return this;
        }

        /**
         * Setter for mysqlSettings.
         * @param  mysqlSettings  MysqlConfConfigurationValues value for mysqlSettings.
         * @return Builder
         */
        public Builder mysqlSettings(MysqlConfConfigurationValues mysqlSettings) {
            this.mysqlSettings = mysqlSettings;
            return this;
        }

        /**
         * Setter for maintenance.
         * @param  maintenance  Maintenance value for maintenance.
         * @return Builder
         */
        public Builder maintenance(Maintenance maintenance) {
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Setter for adminUsername.
         * @param  adminUsername  String value for adminUsername.
         * @return Builder
         */
        public Builder adminUsername(String adminUsername) {
            this.adminUsername = adminUsername;
            return this;
        }

        /**
         * Setter for version.
         * @param  version  String value for version.
         * @return Builder
         */
        public Builder version(String version) {
            this.version = version;
            return this;
        }

        /**
         * Setter for adminPassword.
         * @param  adminPassword  String value for adminPassword.
         * @return Builder
         */
        public Builder adminPassword(String adminPassword) {
            this.adminPassword = adminPassword;
            return this;
        }

        /**
         * Setter for migration.
         * @param  migration  Migration value for migration.
         * @return Builder
         */
        public Builder migration(Migration migration) {
            this.migration = migration;
            return this;
        }

        /**
         * Setter for binlogRetentionPeriod.
         * @param  binlogRetentionPeriod  Long value for binlogRetentionPeriod.
         * @return Builder
         */
        public Builder binlogRetentionPeriod(Long binlogRetentionPeriod) {
            this.binlogRetentionPeriod = binlogRetentionPeriod;
            return this;
        }

        /**
         * Builds a new {@link DbaasMysqlRequest1} object using the set fields.
         * @return {@link DbaasMysqlRequest1}
         */
        public DbaasMysqlRequest1 build() {
            return new DbaasMysqlRequest1(plan, backupSchedule, integrations, ipFilter,
                    terminationProtection, forkFromService, recoveryBackupTime, mysqlSettings,
                    maintenance, adminUsername, version, adminPassword, migration,
                    binlogRetentionPeriod);
        }
    }
}
