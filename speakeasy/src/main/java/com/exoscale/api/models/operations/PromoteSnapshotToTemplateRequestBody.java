/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class PromoteSnapshotToTemplateRequestBody {

    /**
     * Template name
     */
    @JsonProperty("name")
    private String name;

    /**
     * Template description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Template default user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default-user")
    private Optional<? extends String> defaultUser;

    /**
     * Enable SSH key-based login in the template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh-key-enabled")
    private Optional<? extends Boolean> sshKeyEnabled;

    /**
     * Enable password-based login in the template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password-enabled")
    private Optional<? extends Boolean> passwordEnabled;

    public PromoteSnapshotToTemplateRequestBody(
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("default-user") Optional<? extends String> defaultUser,
            @JsonProperty("ssh-key-enabled") Optional<? extends Boolean> sshKeyEnabled,
            @JsonProperty("password-enabled") Optional<? extends Boolean> passwordEnabled) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(defaultUser, "defaultUser");
        Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.name = name;
        this.description = description;
        this.defaultUser = defaultUser;
        this.sshKeyEnabled = sshKeyEnabled;
        this.passwordEnabled = passwordEnabled;
    }

    /**
     * Template name
     */
    public String name() {
        return name;
    }

    /**
     * Template description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Template default user
     */
    public Optional<? extends String> defaultUser() {
        return defaultUser;
    }

    /**
     * Enable SSH key-based login in the template
     */
    public Optional<? extends Boolean> sshKeyEnabled() {
        return sshKeyEnabled;
    }

    /**
     * Enable password-based login in the template
     */
    public Optional<? extends Boolean> passwordEnabled() {
        return passwordEnabled;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Template name
     */
    public PromoteSnapshotToTemplateRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Template description
     */
    public PromoteSnapshotToTemplateRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Template description
     */
    public PromoteSnapshotToTemplateRequestBody withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Template default user
     */
    public PromoteSnapshotToTemplateRequestBody withDefaultUser(String defaultUser) {
        Utils.checkNotNull(defaultUser, "defaultUser");
        this.defaultUser = Optional.ofNullable(defaultUser);
        return this;
    }

    /**
     * Template default user
     */
    public PromoteSnapshotToTemplateRequestBody withDefaultUser(Optional<? extends String> defaultUser) {
        Utils.checkNotNull(defaultUser, "defaultUser");
        this.defaultUser = defaultUser;
        return this;
    }

    /**
     * Enable SSH key-based login in the template
     */
    public PromoteSnapshotToTemplateRequestBody withSshKeyEnabled(boolean sshKeyEnabled) {
        Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
        this.sshKeyEnabled = Optional.ofNullable(sshKeyEnabled);
        return this;
    }

    /**
     * Enable SSH key-based login in the template
     */
    public PromoteSnapshotToTemplateRequestBody withSshKeyEnabled(Optional<? extends Boolean> sshKeyEnabled) {
        Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
        this.sshKeyEnabled = sshKeyEnabled;
        return this;
    }

    /**
     * Enable password-based login in the template
     */
    public PromoteSnapshotToTemplateRequestBody withPasswordEnabled(boolean passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = Optional.ofNullable(passwordEnabled);
        return this;
    }

    /**
     * Enable password-based login in the template
     */
    public PromoteSnapshotToTemplateRequestBody withPasswordEnabled(Optional<? extends Boolean> passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = passwordEnabled;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PromoteSnapshotToTemplateRequestBody other = (PromoteSnapshotToTemplateRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.defaultUser, other.defaultUser) &&
            java.util.Objects.deepEquals(this.sshKeyEnabled, other.sshKeyEnabled) &&
            java.util.Objects.deepEquals(this.passwordEnabled, other.passwordEnabled);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            description,
            defaultUser,
            sshKeyEnabled,
            passwordEnabled);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PromoteSnapshotToTemplateRequestBody.class,
                "name", name,
                "description", description,
                "defaultUser", defaultUser,
                "sshKeyEnabled", sshKeyEnabled,
                "passwordEnabled", passwordEnabled);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends String> defaultUser = Optional.empty();
 
        private Optional<? extends Boolean> sshKeyEnabled = Optional.empty();
 
        private Optional<? extends Boolean> passwordEnabled = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Template name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Template description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Template description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Template default user
         */
        public Builder defaultUser(String defaultUser) {
            Utils.checkNotNull(defaultUser, "defaultUser");
            this.defaultUser = Optional.ofNullable(defaultUser);
            return this;
        }

        /**
         * Template default user
         */
        public Builder defaultUser(Optional<? extends String> defaultUser) {
            Utils.checkNotNull(defaultUser, "defaultUser");
            this.defaultUser = defaultUser;
            return this;
        }

        /**
         * Enable SSH key-based login in the template
         */
        public Builder sshKeyEnabled(boolean sshKeyEnabled) {
            Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
            this.sshKeyEnabled = Optional.ofNullable(sshKeyEnabled);
            return this;
        }

        /**
         * Enable SSH key-based login in the template
         */
        public Builder sshKeyEnabled(Optional<? extends Boolean> sshKeyEnabled) {
            Utils.checkNotNull(sshKeyEnabled, "sshKeyEnabled");
            this.sshKeyEnabled = sshKeyEnabled;
            return this;
        }

        /**
         * Enable password-based login in the template
         */
        public Builder passwordEnabled(boolean passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = Optional.ofNullable(passwordEnabled);
            return this;
        }

        /**
         * Enable password-based login in the template
         */
        public Builder passwordEnabled(Optional<? extends Boolean> passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = passwordEnabled;
            return this;
        }
        
        public PromoteSnapshotToTemplateRequestBody build() {
            return new PromoteSnapshotToTemplateRequestBody(
                name,
                description,
                defaultUser,
                sshKeyEnabled,
                passwordEnabled);
        }
    }
}

