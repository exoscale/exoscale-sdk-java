/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * IamApiKeyCreated - IAM API Key
 */

public class IamApiKeyCreated {

    /**
     * IAM API Key name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * IAM API Key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    /**
     * IAM API Key Secret
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    private Optional<? extends String> secret;

    /**
     * IAM API Key Role ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role-id")
    private Optional<? extends String> roleId;

    public IamApiKeyCreated(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("secret") Optional<? extends String> secret,
            @JsonProperty("role-id") Optional<? extends String> roleId) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(secret, "secret");
        Utils.checkNotNull(roleId, "roleId");
        this.name = name;
        this.key = key;
        this.secret = secret;
        this.roleId = roleId;
    }

    /**
     * IAM API Key name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * IAM API Key
     */
    public Optional<? extends String> key() {
        return key;
    }

    /**
     * IAM API Key Secret
     */
    public Optional<? extends String> secret() {
        return secret;
    }

    /**
     * IAM API Key Role ID
     */
    public Optional<? extends String> roleId() {
        return roleId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * IAM API Key name
     */
    public IamApiKeyCreated withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * IAM API Key name
     */
    public IamApiKeyCreated withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * IAM API Key
     */
    public IamApiKeyCreated withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    /**
     * IAM API Key
     */
    public IamApiKeyCreated withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * IAM API Key Secret
     */
    public IamApiKeyCreated withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = Optional.ofNullable(secret);
        return this;
    }

    /**
     * IAM API Key Secret
     */
    public IamApiKeyCreated withSecret(Optional<? extends String> secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    /**
     * IAM API Key Role ID
     */
    public IamApiKeyCreated withRoleId(String roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = Optional.ofNullable(roleId);
        return this;
    }

    /**
     * IAM API Key Role ID
     */
    public IamApiKeyCreated withRoleId(Optional<? extends String> roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = roleId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IamApiKeyCreated other = (IamApiKeyCreated) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.secret, other.secret) &&
            java.util.Objects.deepEquals(this.roleId, other.roleId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            key,
            secret,
            roleId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IamApiKeyCreated.class,
                "name", name,
                "key", key,
                "secret", secret,
                "roleId", roleId);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends String> secret = Optional.empty();
 
        private Optional<? extends String> roleId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * IAM API Key name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * IAM API Key name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * IAM API Key
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        /**
         * IAM API Key
         */
        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * IAM API Key Secret
         */
        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = Optional.ofNullable(secret);
            return this;
        }

        /**
         * IAM API Key Secret
         */
        public Builder secret(Optional<? extends String> secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }

        /**
         * IAM API Key Role ID
         */
        public Builder roleId(String roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = Optional.ofNullable(roleId);
            return this;
        }

        /**
         * IAM API Key Role ID
         */
        public Builder roleId(Optional<? extends String> roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = roleId;
            return this;
        }
        
        public IamApiKeyCreated build() {
            return new IamApiKeyCreated(
                name,
                key,
                secret,
                roleId);
        }
    }
}

