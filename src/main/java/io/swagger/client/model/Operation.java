/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.OperationReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.UUID;
/**
 * Operation
 */
@Schema(description = "Operation")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class Operation {
  @JsonProperty("id")
  private UUID id = null;

  /**
   * Operation failure reason
   */
  public enum ReasonEnum {
    INCORRECT("incorrect"),
    UNKNOWN("unknown"),
    UNAVAILABLE("unavailable"),
    FORBIDDEN("forbidden"),
    BUSY("busy"),
    FAULT("fault"),
    PARTIAL("partial"),
    NOT_FOUND("not-found"),
    INTERRUPTED("interrupted"),
    UNSUPPORTED("unsupported"),
    CONFLICT("conflict");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ReasonEnum fromValue(String input) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("reason")
  private ReasonEnum reason = null;

  @JsonProperty("reference")
  private OperationReference reference = null;

  @JsonProperty("message")
  private String message = null;

  /**
   * Operation status
   */
  public enum StateEnum {
    FAILURE("failure"),
    PENDING("pending"),
    SUCCESS("success"),
    TIMEOUT("timeout");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String input) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private StateEnum state = null;

   /**
   * Operation ID
   * @return id
  **/
  @Schema(description = "Operation ID")
  public UUID getId() {
    return id;
  }

   /**
   * Operation failure reason
   * @return reason
  **/
  @Schema(description = "Operation failure reason")
  public ReasonEnum getReason() {
    return reason;
  }

  public Operation reference(OperationReference reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @Schema(description = "")
  public OperationReference getReference() {
    return reference;
  }

  public void setReference(OperationReference reference) {
    this.reference = reference;
  }

   /**
   * Operation message
   * @return message
  **/
  @Schema(description = "Operation message")
  public String getMessage() {
    return message;
  }

   /**
   * Operation status
   * @return state
  **/
  @Schema(description = "Operation status")
  public StateEnum getState() {
    return state;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Operation operation = (Operation) o;
    return Objects.equals(this.id, operation.id) &&
        Objects.equals(this.reason, operation.reason) &&
        Objects.equals(this.reference, operation.reference) &&
        Objects.equals(this.message, operation.message) &&
        Objects.equals(this.state, operation.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, reason, reference, message, state);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Operation {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
