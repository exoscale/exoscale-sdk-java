/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ZoneName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Compute instance type
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class InstanceType {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * Instance type size
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    LARGE("large"),
    
    HUGE("huge"),
    
    JUMBO("jumbo"),
    
    MEDIUM("medium"),
    
    MEGA("mega"),
    
    SMALL("small"),
    
    EXTRA_LARGE("extra-large"),
    
    TITAN("titan"),
    
    MICRO("micro"),
    
    COLOSSUS("colossus"),
    
    TINY("tiny");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private SizeEnum size;

  /**
   * Instance type family
   */
  @JsonAdapter(FamilyEnum.Adapter.class)
  public enum FamilyEnum {
    GPU3("gpu3"),
    
    GPU2("gpu2"),
    
    GPU("gpu"),
    
    MEMORY("memory"),
    
    STORAGE("storage"),
    
    STANDARD("standard"),
    
    COLOSSUS("colossus"),
    
    CPU("cpu");

    private String value;

    FamilyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FamilyEnum fromValue(String value) {
      for (FamilyEnum b : FamilyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FamilyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FamilyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FamilyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FamilyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FamilyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private FamilyEnum family;

  public static final String SERIALIZED_NAME_CPUS = "cpus";
  @SerializedName(SERIALIZED_NAME_CPUS)
  private Long cpus;

  public static final String SERIALIZED_NAME_GPUS = "gpus";
  @SerializedName(SERIALIZED_NAME_GPUS)
  private Long gpus;

  public static final String SERIALIZED_NAME_AUTHORIZED = "authorized";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED)
  private Boolean authorized;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private Long memory;

  public static final String SERIALIZED_NAME_ZONES = "zones";
  @SerializedName(SERIALIZED_NAME_ZONES)
  private List<ZoneName> zones = new ArrayList<>();

  public InstanceType() {
  }

  public InstanceType(
     UUID id, 
     SizeEnum size, 
     FamilyEnum family, 
     Long cpus, 
     Long gpus, 
     Boolean authorized, 
     Long memory, 
     List<ZoneName> zones
  ) {
    this();
    this.id = id;
    this.size = size;
    this.family = family;
    this.cpus = cpus;
    this.gpus = gpus;
    this.authorized = authorized;
    this.memory = memory;
    this.zones = zones;
  }

   /**
   * Instance type ID
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



   /**
   * Instance type size
   * @return size
  **/
  @javax.annotation.Nullable
  public SizeEnum getSize() {
    return size;
  }



   /**
   * Instance type family
   * @return family
  **/
  @javax.annotation.Nullable
  public FamilyEnum getFamily() {
    return family;
  }



   /**
   * CPU count
   * minimum: 0
   * @return cpus
  **/
  @javax.annotation.Nullable
  public Long getCpus() {
    return cpus;
  }



   /**
   * GPU count
   * minimum: 0
   * @return gpus
  **/
  @javax.annotation.Nullable
  public Long getGpus() {
    return gpus;
  }



   /**
   * Requires authorization or publicly available
   * @return authorized
  **/
  @javax.annotation.Nullable
  public Boolean getAuthorized() {
    return authorized;
  }



   /**
   * Available memory
   * minimum: 0
   * @return memory
  **/
  @javax.annotation.Nullable
  public Long getMemory() {
    return memory;
  }



   /**
   * Instance Type available zones
   * @return zones
  **/
  @javax.annotation.Nullable
  public List<ZoneName> getZones() {
    return zones;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceType instanceType = (InstanceType) o;
    return Objects.equals(this.id, instanceType.id) &&
        Objects.equals(this.size, instanceType.size) &&
        Objects.equals(this.family, instanceType.family) &&
        Objects.equals(this.cpus, instanceType.cpus) &&
        Objects.equals(this.gpus, instanceType.gpus) &&
        Objects.equals(this.authorized, instanceType.authorized) &&
        Objects.equals(this.memory, instanceType.memory) &&
        Objects.equals(this.zones, instanceType.zones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, size, family, cpus, gpus, authorized, memory, zones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceType {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    cpus: ").append(toIndentedString(cpus)).append("\n");
    sb.append("    gpus: ").append(toIndentedString(gpus)).append("\n");
    sb.append("    authorized: ").append(toIndentedString(authorized)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    zones: ").append(toIndentedString(zones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("size");
    openapiFields.add("family");
    openapiFields.add("cpus");
    openapiFields.add("gpus");
    openapiFields.add("authorized");
    openapiFields.add("memory");
    openapiFields.add("zones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InstanceType
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceType is not found in the empty JSON string", InstanceType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        SizeEnum.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) && !jsonObj.get("family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family").toString()));
      }
      // validate the optional field `family`
      if (jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) {
        FamilyEnum.validateJsonElement(jsonObj.get("family"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("zones") != null && !jsonObj.get("zones").isJsonNull() && !jsonObj.get("zones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zones` to be an array in the JSON string but got `%s`", jsonObj.get("zones").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceType.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceType>() {
           @Override
           public void write(JsonWriter out, InstanceType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstanceType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstanceType
  * @throws IOException if the JSON string is invalid with respect to InstanceType
  */
  public static InstanceType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceType.class);
  }

 /**
  * Convert an instance of InstanceType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

