/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DbaasNodeState - Automatic maintenance settings
 */

public class DbaasNodeState {

    /**
     * Name of the service node
     */
    @JsonProperty("name")
    private String name;

    /**
     * Extra information regarding the progress for current state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("progress-updates")
    private Optional<? extends java.util.List<DbaasNodeStateProgressUpdate>> progressUpdates;

    /**
     * Role of this node. Only returned for a subset of service types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    private Optional<? extends Role> role;

    /**
     * Current state of the service node
     */
    @JsonProperty("state")
    private DbaasNodeStateState state;

    public DbaasNodeState(
            @JsonProperty("name") String name,
            @JsonProperty("progress-updates") Optional<? extends java.util.List<DbaasNodeStateProgressUpdate>> progressUpdates,
            @JsonProperty("role") Optional<? extends Role> role,
            @JsonProperty("state") DbaasNodeStateState state) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(progressUpdates, "progressUpdates");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(state, "state");
        this.name = name;
        this.progressUpdates = progressUpdates;
        this.role = role;
        this.state = state;
    }

    /**
     * Name of the service node
     */
    public String name() {
        return name;
    }

    /**
     * Extra information regarding the progress for current state
     */
    public Optional<? extends java.util.List<DbaasNodeStateProgressUpdate>> progressUpdates() {
        return progressUpdates;
    }

    /**
     * Role of this node. Only returned for a subset of service types
     */
    public Optional<? extends Role> role() {
        return role;
    }

    /**
     * Current state of the service node
     */
    public DbaasNodeStateState state() {
        return state;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the service node
     */
    public DbaasNodeState withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Extra information regarding the progress for current state
     */
    public DbaasNodeState withProgressUpdates(java.util.List<DbaasNodeStateProgressUpdate> progressUpdates) {
        Utils.checkNotNull(progressUpdates, "progressUpdates");
        this.progressUpdates = Optional.ofNullable(progressUpdates);
        return this;
    }

    /**
     * Extra information regarding the progress for current state
     */
    public DbaasNodeState withProgressUpdates(Optional<? extends java.util.List<DbaasNodeStateProgressUpdate>> progressUpdates) {
        Utils.checkNotNull(progressUpdates, "progressUpdates");
        this.progressUpdates = progressUpdates;
        return this;
    }

    /**
     * Role of this node. Only returned for a subset of service types
     */
    public DbaasNodeState withRole(Role role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    /**
     * Role of this node. Only returned for a subset of service types
     */
    public DbaasNodeState withRole(Optional<? extends Role> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    /**
     * Current state of the service node
     */
    public DbaasNodeState withState(DbaasNodeStateState state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasNodeState other = (DbaasNodeState) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.progressUpdates, other.progressUpdates) &&
            java.util.Objects.deepEquals(this.role, other.role) &&
            java.util.Objects.deepEquals(this.state, other.state);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            progressUpdates,
            role,
            state);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasNodeState.class,
                "name", name,
                "progressUpdates", progressUpdates,
                "role", role,
                "state", state);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<? extends java.util.List<DbaasNodeStateProgressUpdate>> progressUpdates = Optional.empty();
 
        private Optional<? extends Role> role = Optional.empty();
 
        private DbaasNodeStateState state;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the service node
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Extra information regarding the progress for current state
         */
        public Builder progressUpdates(java.util.List<DbaasNodeStateProgressUpdate> progressUpdates) {
            Utils.checkNotNull(progressUpdates, "progressUpdates");
            this.progressUpdates = Optional.ofNullable(progressUpdates);
            return this;
        }

        /**
         * Extra information regarding the progress for current state
         */
        public Builder progressUpdates(Optional<? extends java.util.List<DbaasNodeStateProgressUpdate>> progressUpdates) {
            Utils.checkNotNull(progressUpdates, "progressUpdates");
            this.progressUpdates = progressUpdates;
            return this;
        }

        /**
         * Role of this node. Only returned for a subset of service types
         */
        public Builder role(Role role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        /**
         * Role of this node. Only returned for a subset of service types
         */
        public Builder role(Optional<? extends Role> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        /**
         * Current state of the service node
         */
        public Builder state(DbaasNodeStateState state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }
        
        public DbaasNodeState build() {
            return new DbaasNodeState(
                name,
                progressUpdates,
                role,
                state);
        }
    }
}

