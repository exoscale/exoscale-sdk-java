/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.api;

import com.exoscale.model.CreateDbaasIntegrationRequest;
import com.exoscale.model.CreateDbaasKafkaUserRequest;
import com.exoscale.model.CreateDbaasMysqlDatabaseRequest;
import com.exoscale.model.CreateDbaasMysqlUserRequest;
import com.exoscale.model.CreateDbaasPgConnectionPoolRequest;
import com.exoscale.model.CreateDbaasPgDatabaseRequest;
import com.exoscale.model.CreateDbaasPgUpgradeCheckRequest;
import com.exoscale.model.CreateDbaasPostgresUserRequest;
import com.exoscale.model.CreateDbaasServiceGrafanaRequest;
import com.exoscale.model.CreateDbaasServiceKafkaRequest;
import com.exoscale.model.CreateDbaasServiceMysqlRequest;
import com.exoscale.model.CreateDbaasServiceOpensearchRequest;
import com.exoscale.model.CreateDbaasServicePgRequest;
import com.exoscale.model.CreateDbaasServiceRedisRequest;
import com.exoscale.model.CreateDbaasTaskMigrationCheckRequest;
import com.exoscale.model.DbaasIntegration;
import com.exoscale.model.DbaasKafkaAcls;
import com.exoscale.model.DbaasKafkaSchemaRegistryAclEntry;
import com.exoscale.model.DbaasKafkaTopicAclEntry;
import com.exoscale.model.DbaasMigrationStatus;
import com.exoscale.model.DbaasOpensearchAclConfig;
import com.exoscale.model.DbaasPostgresUsers;
import com.exoscale.model.DbaasServiceGrafana;
import com.exoscale.model.DbaasServiceKafka;
import com.exoscale.model.DbaasServiceLogs;
import com.exoscale.model.DbaasServiceMysql;
import com.exoscale.model.DbaasServiceOpensearch;
import com.exoscale.model.DbaasServicePg;
import com.exoscale.model.DbaasServiceRedis;
import com.exoscale.model.DbaasServiceType;
import com.exoscale.model.DbaasTask;
import com.exoscale.model.GetDbaasCaCertificate200Response;
import com.exoscale.model.GetDbaasServiceLogsRequest;
import com.exoscale.model.GetDbaasServiceMetrics200Response;
import com.exoscale.model.GetDbaasServiceMetricsRequest;
import com.exoscale.model.GetDbaasSettingsGrafana200Response;
import com.exoscale.model.GetDbaasSettingsKafka200Response;
import com.exoscale.model.GetDbaasSettingsMysql200Response;
import com.exoscale.model.GetDbaasSettingsOpensearch200Response;
import com.exoscale.model.GetDbaasSettingsPg200Response;
import com.exoscale.model.GetDbaasSettingsRedis200Response;
import com.exoscale.model.ListDbaasIntegrationSettings200Response;
import com.exoscale.model.ListDbaasIntegrationTypes200Response;
import com.exoscale.model.ListDbaasServiceTypes200Response;
import com.exoscale.model.ListDbaasServices200Response;
import com.exoscale.model.Operation;
import com.exoscale.model.ResetDbaasMysqlUserPasswordRequest;
import com.exoscale.model.ResetDbaasOpensearchUserPasswordRequest;
import java.util.UUID;
import com.exoscale.model.UpdateDbaasIntegrationRequest;
import com.exoscale.model.UpdateDbaasPgConnectionPoolRequest;
import com.exoscale.model.UpdateDbaasPostgresAllowReplicationRequest;
import com.exoscale.model.UpdateDbaasServiceGrafanaRequest;
import com.exoscale.model.UpdateDbaasServiceKafkaRequest;
import com.exoscale.model.UpdateDbaasServiceMysqlRequest;
import com.exoscale.model.UpdateDbaasServiceOpensearchRequest;
import com.exoscale.model.UpdateDbaasServicePgRequest;
import com.exoscale.model.UpdateDbaasServiceRedisRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for DbaasApi
 */
@Ignore
public class DbaasApiTest {

    private final DbaasApi api = new DbaasApi();

    
    /**
     * Create a new DBaaS integration between two services
     *
     * Create a new DBaaS integration between two services
     */
    @Test
    public void createDbaasIntegrationTest()  {
        CreateDbaasIntegrationRequest createDbaasIntegrationRequest = null;
        Operation response = api.createDbaasIntegration(createDbaasIntegrationRequest).block();

        // TODO: test validations
    }
    
    /**
     * Add a Kafka Schema Registry ACL entry
     *
     * 
     */
    @Test
    public void createDbaasKafkaSchemaRegistryAclConfigTest()  {
        String name = null;
        DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry = null;
        Operation response = api.createDbaasKafkaSchemaRegistryAclConfig(name, dbaasKafkaSchemaRegistryAclEntry).block();

        // TODO: test validations
    }
    
    /**
     * Add a Kafka topic ACL entry
     *
     * 
     */
    @Test
    public void createDbaasKafkaTopicAclConfigTest()  {
        String name = null;
        DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry = null;
        Operation response = api.createDbaasKafkaTopicAclConfig(name, dbaasKafkaTopicAclEntry).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Kafka user
     *
     * 
     */
    @Test
    public void createDbaasKafkaUserTest()  {
        String serviceName = null;
        CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest = null;
        Operation response = api.createDbaasKafkaUser(serviceName, createDbaasKafkaUserRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS MySQL database
     *
     * 
     */
    @Test
    public void createDbaasMysqlDatabaseTest()  {
        String serviceName = null;
        CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest = null;
        Operation response = api.createDbaasMysqlDatabase(serviceName, createDbaasMysqlDatabaseRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS MySQL user
     *
     * 
     */
    @Test
    public void createDbaasMysqlUserTest()  {
        String serviceName = null;
        CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest = null;
        Operation response = api.createDbaasMysqlUser(serviceName, createDbaasMysqlUserRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS OpenSearch user
     *
     * 
     */
    @Test
    public void createDbaasOpensearchUserTest()  {
        String serviceName = null;
        CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest = null;
        Operation response = api.createDbaasOpensearchUser(serviceName, createDbaasKafkaUserRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS PostgreSQL connection pool
     *
     * 
     */
    @Test
    public void createDbaasPgConnectionPoolTest()  {
        String serviceName = null;
        CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest = null;
        Operation response = api.createDbaasPgConnectionPool(serviceName, createDbaasPgConnectionPoolRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Postgres database
     *
     * 
     */
    @Test
    public void createDbaasPgDatabaseTest()  {
        String serviceName = null;
        CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest = null;
        Operation response = api.createDbaasPgDatabase(serviceName, createDbaasPgDatabaseRequest).block();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Check whether you can upgrade Postgres service to a newer version
     */
    @Test
    public void createDbaasPgUpgradeCheckTest()  {
        String service = null;
        CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest = null;
        DbaasTask response = api.createDbaasPgUpgradeCheck(service, createDbaasPgUpgradeCheckRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Postgres user
     *
     * 
     */
    @Test
    public void createDbaasPostgresUserTest()  {
        String serviceName = null;
        CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest = null;
        Operation response = api.createDbaasPostgresUser(serviceName, createDbaasPostgresUserRequest).block();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a DBaaS Grafana service
     */
    @Test
    public void createDbaasServiceGrafanaTest()  {
        String name = null;
        CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest = null;
        Operation response = api.createDbaasServiceGrafana(name, createDbaasServiceGrafanaRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Kafka service
     *
     * Create a DBaaS Kafka service
     */
    @Test
    public void createDbaasServiceKafkaTest()  {
        String name = null;
        CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest = null;
        Operation response = api.createDbaasServiceKafka(name, createDbaasServiceKafkaRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS MySQL service
     *
     * Create a DBaaS MySQL service
     */
    @Test
    public void createDbaasServiceMysqlTest()  {
        String name = null;
        CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest = null;
        Operation response = api.createDbaasServiceMysql(name, createDbaasServiceMysqlRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS OpenSearch service
     *
     * Create a DBaaS OpenSearch service
     */
    @Test
    public void createDbaasServiceOpensearchTest()  {
        String name = null;
        CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest = null;
        Operation response = api.createDbaasServiceOpensearch(name, createDbaasServiceOpensearchRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS PostgreSQL service
     *
     * 
     */
    @Test
    public void createDbaasServicePgTest()  {
        String name = null;
        CreateDbaasServicePgRequest createDbaasServicePgRequest = null;
        Operation response = api.createDbaasServicePg(name, createDbaasServicePgRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS Redis service
     *
     * Create a DBaaS Redis service
     */
    @Test
    public void createDbaasServiceRedisTest()  {
        String name = null;
        CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest = null;
        Operation response = api.createDbaasServiceRedis(name, createDbaasServiceRedisRequest).block();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a DBaaS task to check migration
     */
    @Test
    public void createDbaasTaskMigrationCheckTest()  {
        String service = null;
        CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest = null;
        Operation response = api.createDbaasTaskMigrationCheck(service, createDbaasTaskMigrationCheckRequest).block();

        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS Integration
     *
     * Delete a DBaaS Integration
     */
    @Test
    public void deleteDbaasIntegrationTest()  {
        UUID id = null;
        Operation response = api.deleteDbaasIntegration(id).block();

        // TODO: test validations
    }
    
    /**
     * Delete a Kafka ACL entry
     *
     * 
     */
    @Test
    public void deleteDbaasKafkaSchemaRegistryAclConfigTest()  {
        String name = null;
        String aclId = null;
        Operation response = api.deleteDbaasKafkaSchemaRegistryAclConfig(name, aclId).block();

        // TODO: test validations
    }
    
    /**
     * Delete a Kafka ACL entry
     *
     * 
     */
    @Test
    public void deleteDbaasKafkaTopicAclConfigTest()  {
        String name = null;
        String aclId = null;
        Operation response = api.deleteDbaasKafkaTopicAclConfig(name, aclId).block();

        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS kafka user
     *
     * 
     */
    @Test
    public void deleteDbaasKafkaUserTest()  {
        String serviceName = null;
        String username = null;
        Operation response = api.deleteDbaasKafkaUser(serviceName, username).block();

        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS MySQL database
     *
     * 
     */
    @Test
    public void deleteDbaasMysqlDatabaseTest()  {
        String serviceName = null;
        String databaseName = null;
        Operation response = api.deleteDbaasMysqlDatabase(serviceName, databaseName).block();

        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS MySQL user
     *
     * 
     */
    @Test
    public void deleteDbaasMysqlUserTest()  {
        String serviceName = null;
        String username = null;
        Operation response = api.deleteDbaasMysqlUser(serviceName, username).block();

        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS OpenSearch user
     *
     * 
     */
    @Test
    public void deleteDbaasOpensearchUserTest()  {
        String serviceName = null;
        String username = null;
        Operation response = api.deleteDbaasOpensearchUser(serviceName, username).block();

        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS PostgreSQL connection pool
     *
     * 
     */
    @Test
    public void deleteDbaasPgConnectionPoolTest()  {
        String serviceName = null;
        String connectionPoolName = null;
        Operation response = api.deleteDbaasPgConnectionPool(serviceName, connectionPoolName).block();

        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS Postgres database
     *
     * 
     */
    @Test
    public void deleteDbaasPgDatabaseTest()  {
        String serviceName = null;
        String databaseName = null;
        Operation response = api.deleteDbaasPgDatabase(serviceName, databaseName).block();

        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS Postgres user
     *
     * 
     */
    @Test
    public void deleteDbaasPostgresUserTest()  {
        String serviceName = null;
        String username = null;
        Operation response = api.deleteDbaasPostgresUser(serviceName, username).block();

        // TODO: test validations
    }
    
    /**
     * Delete a DBaaS service
     *
     * Delete a DBaaS service
     */
    @Test
    public void deleteDbaasServiceTest()  {
        String name = null;
        Operation response = api.deleteDbaasService(name).block();

        // TODO: test validations
    }
    
    /**
     * Delete a Grafana service
     *
     * 
     */
    @Test
    public void deleteDbaasServiceGrafanaTest()  {
        String name = null;
        Operation response = api.deleteDbaasServiceGrafana(name).block();

        // TODO: test validations
    }
    
    /**
     * Delete a Kafka service
     *
     * 
     */
    @Test
    public void deleteDbaasServiceKafkaTest()  {
        String name = null;
        Operation response = api.deleteDbaasServiceKafka(name).block();

        // TODO: test validations
    }
    
    /**
     * Delete a MySQL service
     *
     * 
     */
    @Test
    public void deleteDbaasServiceMysqlTest()  {
        String name = null;
        Operation response = api.deleteDbaasServiceMysql(name).block();

        // TODO: test validations
    }
    
    /**
     * Delete a OpenSearch service
     *
     * 
     */
    @Test
    public void deleteDbaasServiceOpensearchTest()  {
        String name = null;
        Operation response = api.deleteDbaasServiceOpensearch(name).block();

        // TODO: test validations
    }
    
    /**
     * Delete a Postgres service
     *
     * 
     */
    @Test
    public void deleteDbaasServicePgTest()  {
        String name = null;
        Operation response = api.deleteDbaasServicePg(name).block();

        // TODO: test validations
    }
    
    /**
     * Delete a Redis service
     *
     * 
     */
    @Test
    public void deleteDbaasServiceRedisTest()  {
        String name = null;
        Operation response = api.deleteDbaasServiceRedis(name).block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS CA Certificate
     *
     * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
     */
    @Test
    public void getDbaasCaCertificateTest()  {
        GetDbaasCaCertificate200Response response = api.getDbaasCaCertificate().block();

        // TODO: test validations
    }
    
    /**
     * Get a DBaaS Integration
     *
     * Get a DBaaS Integration
     */
    @Test
    public void getDbaasIntegrationTest()  {
        UUID id = null;
        DbaasIntegration response = api.getDbaasIntegration(id).block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS kafka ACL configuration
     *
     * 
     */
    @Test
    public void getDbaasKafkaAclConfigTest()  {
        String name = null;
        DbaasKafkaAcls response = api.getDbaasKafkaAclConfig(name).block();

        // TODO: test validations
    }
    
    /**
     * Get a DBaaS migration status
     *
     * Get a DBaaS migration status
     */
    @Test
    public void getDbaasMigrationStatusTest()  {
        String name = null;
        DbaasMigrationStatus response = api.getDbaasMigrationStatus(name).block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS OpenSearch ACL configuration
     *
     * 
     */
    @Test
    public void getDbaasOpensearchAclConfigTest()  {
        String name = null;
        DbaasOpensearchAclConfig response = api.getDbaasOpensearchAclConfig(name).block();

        // TODO: test validations
    }
    
    /**
     * Get a DBaaS Grafana service
     *
     * 
     */
    @Test
    public void getDbaasServiceGrafanaTest()  {
        String name = null;
        DbaasServiceGrafana response = api.getDbaasServiceGrafana(name).block();

        // TODO: test validations
    }
    
    /**
     * Get a DBaaS Kafka service
     *
     * 
     */
    @Test
    public void getDbaasServiceKafkaTest()  {
        String name = null;
        DbaasServiceKafka response = api.getDbaasServiceKafka(name).block();

        // TODO: test validations
    }
    
    /**
     * Get logs of DBaaS service
     *
     * Get logs of DBaaS service
     */
    @Test
    public void getDbaasServiceLogsTest()  {
        String serviceName = null;
        GetDbaasServiceLogsRequest getDbaasServiceLogsRequest = null;
        DbaasServiceLogs response = api.getDbaasServiceLogs(serviceName, getDbaasServiceLogsRequest).block();

        // TODO: test validations
    }
    
    /**
     * Get metrics of DBaaS service
     *
     * Get metrics of DBaaS service
     */
    @Test
    public void getDbaasServiceMetricsTest()  {
        String serviceName = null;
        GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest = null;
        GetDbaasServiceMetrics200Response response = api.getDbaasServiceMetrics(serviceName, getDbaasServiceMetricsRequest).block();

        // TODO: test validations
    }
    
    /**
     * Get a DBaaS MySQL service
     *
     * Get a DBaaS MySQL service
     */
    @Test
    public void getDbaasServiceMysqlTest()  {
        String name = null;
        DbaasServiceMysql response = api.getDbaasServiceMysql(name).block();

        // TODO: test validations
    }
    
    /**
     * Get a DBaaS OpenSearch service
     *
     * Get a DBaaS OpenSearch service
     */
    @Test
    public void getDbaasServiceOpensearchTest()  {
        String name = null;
        DbaasServiceOpensearch response = api.getDbaasServiceOpensearch(name).block();

        // TODO: test validations
    }
    
    /**
     * Get a DBaaS PostgreSQL service
     *
     * Get a DBaaS PostgreSQL service
     */
    @Test
    public void getDbaasServicePgTest()  {
        String name = null;
        DbaasServicePg response = api.getDbaasServicePg(name).block();

        // TODO: test validations
    }
    
    /**
     * Get a DBaaS Redis service
     *
     * Get a DBaaS Redis service
     */
    @Test
    public void getDbaasServiceRedisTest()  {
        String name = null;
        DbaasServiceRedis response = api.getDbaasServiceRedis(name).block();

        // TODO: test validations
    }
    
    /**
     * Get a DBaaS service type
     *
     * Get a DBaaS service type
     */
    @Test
    public void getDbaasServiceTypeTest()  {
        String serviceTypeName = null;
        DbaasServiceType response = api.getDbaasServiceType(serviceTypeName).block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS Grafana settings
     *
     * Get DBaaS Grafana settings
     */
    @Test
    public void getDbaasSettingsGrafanaTest()  {
        GetDbaasSettingsGrafana200Response response = api.getDbaasSettingsGrafana().block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS Kafka settings
     *
     * Get DBaaS Kafka settings
     */
    @Test
    public void getDbaasSettingsKafkaTest()  {
        GetDbaasSettingsKafka200Response response = api.getDbaasSettingsKafka().block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS MySQL settings
     *
     * Get DBaaS MySQL settings
     */
    @Test
    public void getDbaasSettingsMysqlTest()  {
        GetDbaasSettingsMysql200Response response = api.getDbaasSettingsMysql().block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS OpenSearch settings
     *
     * Get DBaaS OpenSearch settings
     */
    @Test
    public void getDbaasSettingsOpensearchTest()  {
        GetDbaasSettingsOpensearch200Response response = api.getDbaasSettingsOpensearch().block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS PostgreSQL settings
     *
     * Get DBaaS PostgreSQL settings
     */
    @Test
    public void getDbaasSettingsPgTest()  {
        GetDbaasSettingsPg200Response response = api.getDbaasSettingsPg().block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS Redis settings
     *
     * Returns the default settings for Redis.
     */
    @Test
    public void getDbaasSettingsRedisTest()  {
        GetDbaasSettingsRedis200Response response = api.getDbaasSettingsRedis().block();

        // TODO: test validations
    }
    
    /**
     * Get a DBaaS task
     *
     * Get a DBaaS task
     */
    @Test
    public void getDbaasTaskTest()  {
        String service = null;
        UUID id = null;
        DbaasTask response = api.getDbaasTask(service, id).block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS integration settings
     *
     * Get DBaaS integration settings
     */
    @Test
    public void listDbaasIntegrationSettingsTest()  {
        String integrationType = null;
        String sourceType = null;
        String destType = null;
        ListDbaasIntegrationSettings200Response response = api.listDbaasIntegrationSettings(integrationType, sourceType, destType).block();

        // TODO: test validations
    }
    
    /**
     * Get DBaaS integration types
     *
     * Get DBaaS integration types
     */
    @Test
    public void listDbaasIntegrationTypesTest()  {
        ListDbaasIntegrationTypes200Response response = api.listDbaasIntegrationTypes().block();

        // TODO: test validations
    }
    
    /**
     * DBaaS Service Types
     *
     * List available service types for DBaaS
     */
    @Test
    public void listDbaasServiceTypesTest()  {
        ListDbaasServiceTypes200Response response = api.listDbaasServiceTypes().block();

        // TODO: test validations
    }
    
    /**
     * List DBaaS services
     *
     * List DBaaS services
     */
    @Test
    public void listDbaasServicesTest()  {
        ListDbaasServices200Response response = api.listDbaasServices().block();

        // TODO: test validations
    }
    
    /**
     * Reset the credentials of a DBaaS Kafka user
     *
     * If no password is provided one will be generated automatically.
     */
    @Test
    public void resetDbaasKafkaUserPasswordTest()  {
        String serviceName = null;
        String username = null;
        ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest = null;
        Operation response = api.resetDbaasKafkaUserPassword(serviceName, username, resetDbaasOpensearchUserPasswordRequest).block();

        // TODO: test validations
    }
    
    /**
     * Reset the credentials of a DBaaS mysql user
     *
     * If no password is provided one will be generated automatically.
     */
    @Test
    public void resetDbaasMysqlUserPasswordTest()  {
        String serviceName = null;
        String username = null;
        ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest = null;
        Operation response = api.resetDbaasMysqlUserPassword(serviceName, username, resetDbaasMysqlUserPasswordRequest).block();

        // TODO: test validations
    }
    
    /**
     * Reset the credentials of a DBaaS OpenSearch user
     *
     * If no password is provided one will be generated automatically.
     */
    @Test
    public void resetDbaasOpensearchUserPasswordTest()  {
        String serviceName = null;
        String username = null;
        ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest = null;
        Operation response = api.resetDbaasOpensearchUserPassword(serviceName, username, resetDbaasOpensearchUserPasswordRequest).block();

        // TODO: test validations
    }
    
    /**
     * Reset the credentials of a DBaaS Postgres user
     *
     * If no password is provided one will be generated automatically.
     */
    @Test
    public void resetDbaasPostgresUserPasswordTest()  {
        String serviceName = null;
        String username = null;
        ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest = null;
        Operation response = api.resetDbaasPostgresUserPassword(serviceName, username, resetDbaasOpensearchUserPasswordRequest).block();

        // TODO: test validations
    }
    
    /**
     * Initiate Grafana maintenance update
     *
     * 
     */
    @Test
    public void startDbaasGrafanaMaintenanceTest()  {
        String name = null;
        Operation response = api.startDbaasGrafanaMaintenance(name).block();

        // TODO: test validations
    }
    
    /**
     * Initiate Kafka maintenance update
     *
     * 
     */
    @Test
    public void startDbaasKafkaMaintenanceTest()  {
        String name = null;
        Operation response = api.startDbaasKafkaMaintenance(name).block();

        // TODO: test validations
    }
    
    /**
     * Initiate MySQL maintenance update
     *
     * 
     */
    @Test
    public void startDbaasMysqlMaintenanceTest()  {
        String name = null;
        Operation response = api.startDbaasMysqlMaintenance(name).block();

        // TODO: test validations
    }
    
    /**
     * Initiate OpenSearch maintenance update
     *
     * 
     */
    @Test
    public void startDbaasOpensearchMaintenanceTest()  {
        String name = null;
        Operation response = api.startDbaasOpensearchMaintenance(name).block();

        // TODO: test validations
    }
    
    /**
     * Initiate PostgreSQL maintenance update
     *
     * 
     */
    @Test
    public void startDbaasPgMaintenanceTest()  {
        String name = null;
        Operation response = api.startDbaasPgMaintenance(name).block();

        // TODO: test validations
    }
    
    /**
     * Initiate Redis maintenance update
     *
     * 
     */
    @Test
    public void startDbaasRedisMaintenanceTest()  {
        String name = null;
        Operation response = api.startDbaasRedisMaintenance(name).block();

        // TODO: test validations
    }
    
    /**
     * Stop a DBaaS MySQL migration
     *
     * 
     */
    @Test
    public void stopDbaasMysqlMigrationTest()  {
        String name = null;
        Operation response = api.stopDbaasMysqlMigration(name).block();

        // TODO: test validations
    }
    
    /**
     * Stop a DBaaS PostgreSQL migration
     *
     * 
     */
    @Test
    public void stopDbaasPgMigrationTest()  {
        String name = null;
        Operation response = api.stopDbaasPgMigration(name).block();

        // TODO: test validations
    }
    
    /**
     * Stop a DBaaS Redis migration
     *
     * 
     */
    @Test
    public void stopDbaasRedisMigrationTest()  {
        String name = null;
        Operation response = api.stopDbaasRedisMigration(name).block();

        // TODO: test validations
    }
    
    /**
     * Update a existing DBaaS integration
     *
     * Update a existing DBaaS integration
     */
    @Test
    public void updateDbaasIntegrationTest()  {
        UUID id = null;
        UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest = null;
        Operation response = api.updateDbaasIntegration(id, updateDbaasIntegrationRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a DBaaS OpenSearch ACL configuration
     *
     * 
     */
    @Test
    public void updateDbaasOpensearchAclConfigTest()  {
        String name = null;
        DbaasOpensearchAclConfig dbaasOpensearchAclConfig = null;
        Operation response = api.updateDbaasOpensearchAclConfig(name, dbaasOpensearchAclConfig).block();

        // TODO: test validations
    }
    
    /**
     * Update a DBaaS PostgreSQL connection pool
     *
     * 
     */
    @Test
    public void updateDbaasPgConnectionPoolTest()  {
        String serviceName = null;
        String connectionPoolName = null;
        UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest = null;
        Operation response = api.updateDbaasPgConnectionPool(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update access control for one service user
     *
     * 
     */
    @Test
    public void updateDbaasPostgresAllowReplicationTest()  {
        String serviceName = null;
        String username = null;
        UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest = null;
        DbaasPostgresUsers response = api.updateDbaasPostgresAllowReplication(serviceName, username, updateDbaasPostgresAllowReplicationRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update a DBaaS Grafana service
     *
     * 
     */
    @Test
    public void updateDbaasServiceGrafanaTest()  {
        String name = null;
        UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest = null;
        Operation response = api.updateDbaasServiceGrafana(name, updateDbaasServiceGrafanaRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update a DBaaS Kafka service
     *
     * Update a DBaaS Kafka service
     */
    @Test
    public void updateDbaasServiceKafkaTest()  {
        String name = null;
        UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest = null;
        Operation response = api.updateDbaasServiceKafka(name, updateDbaasServiceKafkaRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update a DBaaS MySQL service
     *
     * Update a DBaaS MySQL service
     */
    @Test
    public void updateDbaasServiceMysqlTest()  {
        String name = null;
        UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest = null;
        Operation response = api.updateDbaasServiceMysql(name, updateDbaasServiceMysqlRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update a DBaaS OpenSearch service
     *
     * Update a DBaaS OpenSearch service
     */
    @Test
    public void updateDbaasServiceOpensearchTest()  {
        String name = null;
        UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest = null;
        Operation response = api.updateDbaasServiceOpensearch(name, updateDbaasServiceOpensearchRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update a DBaaS PostgreSQL service
     *
     * Update a DBaaS PostgreSQL service
     */
    @Test
    public void updateDbaasServicePgTest()  {
        String name = null;
        UpdateDbaasServicePgRequest updateDbaasServicePgRequest = null;
        Operation response = api.updateDbaasServicePg(name, updateDbaasServicePgRequest).block();

        // TODO: test validations
    }
    
    /**
     * Update a DBaaS Redis service
     *
     * Update a DBaaS Redis service
     */
    @Test
    public void updateDbaasServiceRedisTest()  {
        String name = null;
        UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest = null;
        Operation response = api.updateDbaasServiceRedis(name, updateDbaasServiceRedisRequest).block();

        // TODO: test validations
    }
    
}
