/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.AuthorityEnum;
import com.exoscale.apichgva2.models.Field1Enum;
import com.exoscale.apichgva2.models.Field6Enum;
import com.exoscale.apichgva2.models.Operation;
import com.exoscale.apichgva2.models.SksCluster;
import com.exoscale.apichgva2.models.SksClusterAuthorityCertResponse;
import com.exoscale.apichgva2.models.SksClusterKubeconfigResponse;
import com.exoscale.apichgva2.models.SksClusterNodepoolEvictRequest;
import com.exoscale.apichgva2.models.SksClusterNodepoolRequest;
import com.exoscale.apichgva2.models.SksClusterNodepoolRequest1;
import com.exoscale.apichgva2.models.SksClusterNodepoolScaleRequest;
import com.exoscale.apichgva2.models.SksClusterRequest;
import com.exoscale.apichgva2.models.SksClusterRequest1;
import com.exoscale.apichgva2.models.SksClusterResponse;
import com.exoscale.apichgva2.models.SksClusterUpgradeRequest;
import com.exoscale.apichgva2.models.SksClusterVersionResponse;
import com.exoscale.apichgva2.models.SksKubeconfigRequest;
import com.exoscale.apichgva2.models.SksNodepool;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SksController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SksController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This operation returns a Kubeconfig file encoded in base64.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the SksClusterKubeconfigResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SksClusterKubeconfigResponse generateSksClusterKubeconfig(
            final UUID id,
            final SksKubeconfigRequest body) throws ApiException, IOException {
        return prepareGenerateSksClusterKubeconfigRequest(id, body).execute();
    }

    /**
     * This operation returns a Kubeconfig file encoded in base64.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the SksClusterKubeconfigResponse response from the API call
     */
    public CompletableFuture<SksClusterKubeconfigResponse> generateSksClusterKubeconfigAsync(
            final UUID id,
            final SksKubeconfigRequest body) {
        try { 
            return prepareGenerateSksClusterKubeconfigRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for generateSksClusterKubeconfig.
     */
    private ApiCall<SksClusterKubeconfigResponse, ApiException> prepareGenerateSksClusterKubeconfigRequest(
            final UUID id,
            final SksKubeconfigRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<SksClusterKubeconfigResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster-kubeconfig/{id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SksClusterKubeconfigResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateSksNodepool(
            final UUID id,
            final UUID sksNodepoolId,
            final SksClusterNodepoolRequest body) throws ApiException, IOException {
        return prepareUpdateSksNodepoolRequest(id, sksNodepoolId, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateSksNodepoolAsync(
            final UUID id,
            final UUID sksNodepoolId,
            final SksClusterNodepoolRequest body) {
        try { 
            return prepareUpdateSksNodepoolRequest(id, sksNodepoolId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateSksNodepool.
     */
    private ApiCall<Operation, ApiException> prepareUpdateSksNodepoolRequest(
            final UUID id,
            final UUID sksNodepoolId,
            final SksClusterNodepoolRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/nodepool/{sks-nodepool-id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("sks-nodepool-id").value(sksNodepoolId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @return    Returns the SksNodepool response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SksNodepool getSksNodepool(
            final UUID id,
            final UUID sksNodepoolId) throws ApiException, IOException {
        return prepareGetSksNodepoolRequest(id, sksNodepoolId).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @return    Returns the SksNodepool response from the API call
     */
    public CompletableFuture<SksNodepool> getSksNodepoolAsync(
            final UUID id,
            final UUID sksNodepoolId) {
        try { 
            return prepareGetSksNodepoolRequest(id, sksNodepoolId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getSksNodepool.
     */
    private ApiCall<SksNodepool, ApiException> prepareGetSksNodepoolRequest(
            final UUID id,
            final UUID sksNodepoolId) throws IOException {
        return new ApiCall.Builder<SksNodepool, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/nodepool/{sks-nodepool-id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("sks-nodepool-id").value(sksNodepoolId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SksNodepool.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteSksNodepool(
            final UUID id,
            final UUID sksNodepoolId) throws ApiException, IOException {
        return prepareDeleteSksNodepoolRequest(id, sksNodepoolId).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteSksNodepoolAsync(
            final UUID id,
            final UUID sksNodepoolId) {
        try { 
            return prepareDeleteSksNodepoolRequest(id, sksNodepoolId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteSksNodepool.
     */
    private ApiCall<Operation, ApiException> prepareDeleteSksNodepoolRequest(
            final UUID id,
            final UUID sksNodepoolId) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/nodepool/{sks-nodepool-id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("sks-nodepool-id").value(sksNodepoolId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation returns the certificate for the given SKS cluster authority encoded in base64.
     * @param  id  Required parameter: Example:
     * @param  authority  Required parameter: Example:
     * @return    Returns the SksClusterAuthorityCertResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SksClusterAuthorityCertResponse getSksClusterAuthorityCert(
            final UUID id,
            final AuthorityEnum authority) throws ApiException, IOException {
        return prepareGetSksClusterAuthorityCertRequest(id, authority).execute();
    }

    /**
     * This operation returns the certificate for the given SKS cluster authority encoded in base64.
     * @param  id  Required parameter: Example:
     * @param  authority  Required parameter: Example:
     * @return    Returns the SksClusterAuthorityCertResponse response from the API call
     */
    public CompletableFuture<SksClusterAuthorityCertResponse> getSksClusterAuthorityCertAsync(
            final UUID id,
            final AuthorityEnum authority) {
        try { 
            return prepareGetSksClusterAuthorityCertRequest(id, authority).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getSksClusterAuthorityCert.
     */
    private ApiCall<SksClusterAuthorityCertResponse, ApiException> prepareGetSksClusterAuthorityCertRequest(
            final UUID id,
            final AuthorityEnum authority) throws IOException {
        return new ApiCall.Builder<SksClusterAuthorityCertResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/authority/{authority}/cert")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("authority").value((authority != null) ? authority.value() : null)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SksClusterAuthorityCertResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation returns the deprecated resources for a given cluster.
     * @param  id  Required parameter: Example:
     * @return    Returns the List of String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<String> listSksClusterDeprecatedResources(
            final UUID id) throws ApiException, IOException {
        return prepareListSksClusterDeprecatedResourcesRequest(id).execute();
    }

    /**
     * This operation returns the deprecated resources for a given cluster.
     * @param  id  Required parameter: Example:
     * @return    Returns the List of String response from the API call
     */
    public CompletableFuture<List<String>> listSksClusterDeprecatedResourcesAsync(
            final UUID id) {
        try { 
            return prepareListSksClusterDeprecatedResourcesRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listSksClusterDeprecatedResources.
     */
    private ApiCall<List<String>, ApiException> prepareListSksClusterDeprecatedResourcesRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<List<String>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster-deprecated-resources/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        String[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation scaleSksNodepool(
            final UUID id,
            final UUID sksNodepoolId,
            final SksClusterNodepoolScaleRequest body) throws ApiException, IOException {
        return prepareScaleSksNodepoolRequest(id, sksNodepoolId, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> scaleSksNodepoolAsync(
            final UUID id,
            final UUID sksNodepoolId,
            final SksClusterNodepoolScaleRequest body) {
        try { 
            return prepareScaleSksNodepoolRequest(id, sksNodepoolId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for scaleSksNodepool.
     */
    private ApiCall<Operation, ApiException> prepareScaleSksNodepoolRequest(
            final UUID id,
            final UUID sksNodepoolId,
            final SksClusterNodepoolScaleRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/nodepool/{sks-nodepool-id}:scale")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("sks-nodepool-id").value(sksNodepoolId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation upgradeSksClusterServiceLevel(
            final UUID id) throws ApiException, IOException {
        return prepareUpgradeSksClusterServiceLevelRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> upgradeSksClusterServiceLevelAsync(
            final UUID id) {
        try { 
            return prepareUpgradeSksClusterServiceLevelRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for upgradeSksClusterServiceLevel.
     */
    private ApiCall<Operation, ApiException> prepareUpgradeSksClusterServiceLevelRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/upgrade-service-level")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation evicts the specified Compute instances member from the Nodepool, shrinking it
     * to `&lt;current nodepool size&gt; - &lt;# evicted members&gt;`.
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation evictSksNodepoolMembers(
            final UUID id,
            final UUID sksNodepoolId,
            final SksClusterNodepoolEvictRequest body) throws ApiException, IOException {
        return prepareEvictSksNodepoolMembersRequest(id, sksNodepoolId, body).execute();
    }

    /**
     * This operation evicts the specified Compute instances member from the Nodepool, shrinking it
     * to `&lt;current nodepool size&gt; - &lt;# evicted members&gt;`.
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> evictSksNodepoolMembersAsync(
            final UUID id,
            final UUID sksNodepoolId,
            final SksClusterNodepoolEvictRequest body) {
        try { 
            return prepareEvictSksNodepoolMembersRequest(id, sksNodepoolId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for evictSksNodepoolMembers.
     */
    private ApiCall<Operation, ApiException> prepareEvictSksNodepoolMembersRequest(
            final UUID id,
            final UUID sksNodepoolId,
            final SksClusterNodepoolEvictRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/nodepool/{sks-nodepool-id}:evict")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("sks-nodepool-id").value(sksNodepoolId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createSksCluster(
            final SksClusterRequest body) throws ApiException, IOException {
        return prepareCreateSksClusterRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createSksClusterAsync(
            final SksClusterRequest body) {
        try { 
            return prepareCreateSksClusterRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createSksCluster.
     */
    private ApiCall<Operation, ApiException> prepareCreateSksClusterRequest(
            final SksClusterRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the SksClusterResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SksClusterResponse listSksClusters() throws ApiException, IOException {
        return prepareListSksClustersRequest().execute();
    }

    /**
     * @return    Returns the SksClusterResponse response from the API call
     */
    public CompletableFuture<SksClusterResponse> listSksClustersAsync() {
        try { 
            return prepareListSksClustersRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listSksClusters.
     */
    private ApiCall<SksClusterResponse, ApiException> prepareListSksClustersRequest() throws IOException {
        return new ApiCall.Builder<SksClusterResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SksClusterResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteSksCluster(
            final UUID id) throws ApiException, IOException {
        return prepareDeleteSksClusterRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteSksClusterAsync(
            final UUID id) {
        try { 
            return prepareDeleteSksClusterRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteSksCluster.
     */
    private ApiCall<Operation, ApiException> prepareDeleteSksClusterRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the SksCluster response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SksCluster getSksCluster(
            final UUID id) throws ApiException, IOException {
        return prepareGetSksClusterRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the SksCluster response from the API call
     */
    public CompletableFuture<SksCluster> getSksClusterAsync(
            final UUID id) {
        try { 
            return prepareGetSksClusterRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getSksCluster.
     */
    private ApiCall<SksCluster, ApiException> prepareGetSksClusterRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<SksCluster, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SksCluster.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateSksCluster(
            final UUID id,
            final SksClusterRequest1 body) throws ApiException, IOException {
        return prepareUpdateSksClusterRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateSksClusterAsync(
            final UUID id,
            final SksClusterRequest1 body) {
        try { 
            return prepareUpdateSksClusterRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateSksCluster.
     */
    private ApiCall<Operation, ApiException> prepareUpdateSksClusterRequest(
            final UUID id,
            final SksClusterRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Helps troubleshoot common problems when deploying a kubernetes cluster. Inspections run every
     * couple of minutes.
     * @param  id  Required parameter: Example:
     * @return    Returns the Map of String, Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, Object> getSksClusterInspection(
            final UUID id) throws ApiException, IOException {
        return prepareGetSksClusterInspectionRequest(id).execute();
    }

    /**
     * Helps troubleshoot common problems when deploying a kubernetes cluster. Inspections run every
     * couple of minutes.
     * @param  id  Required parameter: Example:
     * @return    Returns the Map of String, Object response from the API call
     */
    public CompletableFuture<Map<String, Object>> getSksClusterInspectionAsync(
            final UUID id) {
        try { 
            return prepareGetSksClusterInspectionRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getSksClusterInspection.
     */
    private ApiCall<Map<String, Object>, ApiException> prepareGetSksClusterInspectionRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Map<String, Object>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/inspection")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response,
                                        new TypeReference<Map<String, Object>>(){}))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation rotateSksCcmCredentials(
            final UUID id) throws ApiException, IOException {
        return prepareRotateSksCcmCredentialsRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> rotateSksCcmCredentialsAsync(
            final UUID id) {
        try { 
            return prepareRotateSksCcmCredentialsRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for rotateSksCcmCredentials.
     */
    private ApiCall<Operation, ApiException> prepareRotateSksCcmCredentialsRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/rotate-ccm-credentials")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  field  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation resetSksClusterField(
            final UUID id,
            final Field1Enum field) throws ApiException, IOException {
        return prepareResetSksClusterFieldRequest(id, field).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  field  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> resetSksClusterFieldAsync(
            final UUID id,
            final Field1Enum field) {
        try { 
            return prepareResetSksClusterFieldRequest(id, field).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resetSksClusterField.
     */
    private ApiCall<Operation, ApiException> prepareResetSksClusterFieldRequest(
            final UUID id,
            final Field1Enum field) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/{field}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("field").value((field != null) ? field.value() : null)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createSksNodepool(
            final UUID id,
            final SksClusterNodepoolRequest1 body) throws ApiException, IOException {
        return prepareCreateSksNodepoolRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createSksNodepoolAsync(
            final UUID id,
            final SksClusterNodepoolRequest1 body) {
        try { 
            return prepareCreateSksNodepoolRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createSksNodepool.
     */
    private ApiCall<Operation, ApiException> prepareCreateSksNodepoolRequest(
            final UUID id,
            final SksClusterNodepoolRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/nodepool")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @param  field  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation resetSksNodepoolField(
            final UUID id,
            final UUID sksNodepoolId,
            final Field6Enum field) throws ApiException, IOException {
        return prepareResetSksNodepoolFieldRequest(id, sksNodepoolId, field).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  sksNodepoolId  Required parameter: Example:
     * @param  field  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> resetSksNodepoolFieldAsync(
            final UUID id,
            final UUID sksNodepoolId,
            final Field6Enum field) {
        try { 
            return prepareResetSksNodepoolFieldRequest(id, sksNodepoolId, field).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resetSksNodepoolField.
     */
    private ApiCall<Operation, ApiException> prepareResetSksNodepoolFieldRequest(
            final UUID id,
            final UUID sksNodepoolId,
            final Field6Enum field) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/nodepool/{sks-nodepool-id}/{field}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("sks-nodepool-id").value(sksNodepoolId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("field").value((field != null) ? field.value() : null)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation rotateSksOperatorsCa(
            final UUID id) throws ApiException, IOException {
        return prepareRotateSksOperatorsCaRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> rotateSksOperatorsCaAsync(
            final UUID id) {
        try { 
            return prepareRotateSksOperatorsCaRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for rotateSksOperatorsCa.
     */
    private ApiCall<Operation, ApiException> prepareRotateSksOperatorsCaRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/rotate-operators-ca")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  includeDeprecated  Optional parameter: Example:
     * @return    Returns the SksClusterVersionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SksClusterVersionResponse listSksClusterVersions(
            final String includeDeprecated) throws ApiException, IOException {
        return prepareListSksClusterVersionsRequest(includeDeprecated).execute();
    }

    /**
     * @param  includeDeprecated  Optional parameter: Example:
     * @return    Returns the SksClusterVersionResponse response from the API call
     */
    public CompletableFuture<SksClusterVersionResponse> listSksClusterVersionsAsync(
            final String includeDeprecated) {
        try { 
            return prepareListSksClusterVersionsRequest(includeDeprecated).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listSksClusterVersions.
     */
    private ApiCall<SksClusterVersionResponse, ApiException> prepareListSksClusterVersionsRequest(
            final String includeDeprecated) throws IOException {
        return new ApiCall.Builder<SksClusterVersionResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster-version")
                        .queryParam(param -> param.key("include-deprecated")
                                .value(includeDeprecated).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SksClusterVersionResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation upgradeSksCluster(
            final UUID id,
            final SksClusterUpgradeRequest body) throws ApiException, IOException {
        return prepareUpgradeSksClusterRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> upgradeSksClusterAsync(
            final UUID id,
            final SksClusterUpgradeRequest body) {
        try { 
            return prepareUpgradeSksClusterRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for upgradeSksCluster.
     */
    private ApiCall<Operation, ApiException> prepareUpgradeSksClusterRequest(
            final UUID id,
            final SksClusterUpgradeRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sks-cluster/{id}/upgrade")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}