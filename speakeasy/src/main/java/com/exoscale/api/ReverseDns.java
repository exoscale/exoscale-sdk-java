/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api;

import com.exoscale.api.models.errors.SDKError;
import com.exoscale.api.models.operations.SDKMethodInterfaces.*;
import com.exoscale.api.utils.HTTPClient;
import com.exoscale.api.utils.HTTPRequest;
import com.exoscale.api.utils.JSON;
import com.exoscale.api.utils.SerializedBody;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ReverseDns implements
            MethodCallGetReverseDnsElasticIp,
            MethodCallUpdateReverseDnsElasticIp,
            MethodCallDeleteReverseDnsElasticIp,
            MethodCallUpdateReverseDnsInstance,
            MethodCallGetReverseDnsInstance,
            MethodCallDeleteReverseDnsInstance {

    private final SDKConfiguration sdkConfiguration;

    ReverseDns(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.exoscale.api.models.operations.GetReverseDnsElasticIpRequestBuilder getReverseDnsElasticIp() {
        return new com.exoscale.api.models.operations.GetReverseDnsElasticIpRequestBuilder(this);
    }

    /**
     * Query the PTR DNS records for an elastic IP
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetReverseDnsElasticIpResponse getReverseDnsElasticIp(
            String id) throws Exception {
        com.exoscale.api.models.operations.GetReverseDnsElasticIpRequest request =
            com.exoscale.api.models.operations.GetReverseDnsElasticIpRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetReverseDnsElasticIpRequest.class,
                baseUrl,
                "/reverse-dns/elastic-ip/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetReverseDnsElasticIpResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetReverseDnsElasticIpResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetReverseDnsElasticIpResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.ReverseDnsRecord out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.ReverseDnsRecord>() {});
                res.withReverseDnsRecord(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateReverseDnsElasticIpRequestBuilder updateReverseDnsElasticIp() {
        return new com.exoscale.api.models.operations.UpdateReverseDnsElasticIpRequestBuilder(this);
    }

    /**
     * Update/Create the PTR DNS record for an elastic IP
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateReverseDnsElasticIpResponse updateReverseDnsElasticIp(
            String id,
            com.exoscale.api.models.operations.UpdateReverseDnsElasticIpRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateReverseDnsElasticIpRequest request =
            com.exoscale.api.models.operations.UpdateReverseDnsElasticIpRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateReverseDnsElasticIpRequest.class,
                baseUrl,
                "/reverse-dns/elastic-ip/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateReverseDnsElasticIpResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateReverseDnsElasticIpResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateReverseDnsElasticIpResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteReverseDnsElasticIpRequestBuilder deleteReverseDnsElasticIp() {
        return new com.exoscale.api.models.operations.DeleteReverseDnsElasticIpRequestBuilder(this);
    }

    /**
     * Delete the PTR DNS record for an elastic IP
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteReverseDnsElasticIpResponse deleteReverseDnsElasticIp(
            String id) throws Exception {
        com.exoscale.api.models.operations.DeleteReverseDnsElasticIpRequest request =
            com.exoscale.api.models.operations.DeleteReverseDnsElasticIpRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteReverseDnsElasticIpRequest.class,
                baseUrl,
                "/reverse-dns/elastic-ip/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteReverseDnsElasticIpResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteReverseDnsElasticIpResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteReverseDnsElasticIpResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.UpdateReverseDnsInstanceRequestBuilder updateReverseDnsInstance() {
        return new com.exoscale.api.models.operations.UpdateReverseDnsInstanceRequestBuilder(this);
    }

    /**
     * Update/Create the PTR DNS record for an instance
     * @param id
     * @param requestBody
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.UpdateReverseDnsInstanceResponse updateReverseDnsInstance(
            String id,
            com.exoscale.api.models.operations.UpdateReverseDnsInstanceRequestBody requestBody) throws Exception {
        com.exoscale.api.models.operations.UpdateReverseDnsInstanceRequest request =
            com.exoscale.api.models.operations.UpdateReverseDnsInstanceRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.UpdateReverseDnsInstanceRequest.class,
                baseUrl,
                "/reverse-dns/instance/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = com.exoscale.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.UpdateReverseDnsInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.UpdateReverseDnsInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.UpdateReverseDnsInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.GetReverseDnsInstanceRequestBuilder getReverseDnsInstance() {
        return new com.exoscale.api.models.operations.GetReverseDnsInstanceRequestBuilder(this);
    }

    /**
     * Query the PTR DNS records for an instance
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.GetReverseDnsInstanceResponse getReverseDnsInstance(
            String id) throws Exception {
        com.exoscale.api.models.operations.GetReverseDnsInstanceRequest request =
            com.exoscale.api.models.operations.GetReverseDnsInstanceRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.GetReverseDnsInstanceRequest.class,
                baseUrl,
                "/reverse-dns/instance/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.GetReverseDnsInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.GetReverseDnsInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.GetReverseDnsInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.ReverseDnsRecord out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.ReverseDnsRecord>() {});
                res.withReverseDnsRecord(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.exoscale.api.models.operations.DeleteReverseDnsInstanceRequestBuilder deleteReverseDnsInstance() {
        return new com.exoscale.api.models.operations.DeleteReverseDnsInstanceRequestBuilder(this);
    }

    /**
     * Delete the PTR DNS record for an instance
     * @param id
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.DeleteReverseDnsInstanceResponse deleteReverseDnsInstance(
            String id) throws Exception {
        com.exoscale.api.models.operations.DeleteReverseDnsInstanceRequest request =
            com.exoscale.api.models.operations.DeleteReverseDnsInstanceRequest
                .builder()
                .id(id)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.DeleteReverseDnsInstanceRequest.class,
                baseUrl,
                "/reverse-dns/instance/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.DeleteReverseDnsInstanceResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.DeleteReverseDnsInstanceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.DeleteReverseDnsInstanceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
