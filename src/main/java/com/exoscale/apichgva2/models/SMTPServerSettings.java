/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for SMTPServerSettings type.
 */
public class SMTPServerSettings {
    private String host;
    private int port;
    private Boolean skipVerify;
    private OptionalNullable<String> username;
    private OptionalNullable<String> password;
    private String fromAddress;
    private OptionalNullable<String> fromName;
    private EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum starttlsPolicy;

    /**
     * Default constructor.
     */
    public SMTPServerSettings() {
    }

    /**
     * Initialization constructor.
     * @param  host  String value for host.
     * @param  port  int value for port.
     * @param  fromAddress  String value for fromAddress.
     * @param  skipVerify  Boolean value for skipVerify.
     * @param  username  String value for username.
     * @param  password  String value for password.
     * @param  fromName  String value for fromName.
     * @param  starttlsPolicy
     *         EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum
     *         value for starttlsPolicy.
     */
    public SMTPServerSettings(
            String host,
            int port,
            String fromAddress,
            Boolean skipVerify,
            String username,
            String password,
            String fromName,
            EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum starttlsPolicy) {
        this.host = host;
        this.port = port;
        this.skipVerify = skipVerify;
        this.username = OptionalNullable.of(username);
        this.password = OptionalNullable.of(password);
        this.fromAddress = fromAddress;
        this.fromName = OptionalNullable.of(fromName);
        this.starttlsPolicy = starttlsPolicy;
    }

    /**
     * Initialization constructor.
     * @param  host  String value for host.
     * @param  port  int value for port.
     * @param  fromAddress  String value for fromAddress.
     * @param  skipVerify  Boolean value for skipVerify.
     * @param  username  String value for username.
     * @param  password  String value for password.
     * @param  fromName  String value for fromName.
     * @param  starttlsPolicy
     *         EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum
     *         value for starttlsPolicy.
     */

    protected SMTPServerSettings(String host, int port, String fromAddress, Boolean skipVerify,
            OptionalNullable<String> username, OptionalNullable<String> password,
            OptionalNullable<String> fromName,
            EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum starttlsPolicy) {
        this.host = host;
        this.port = port;
        this.skipVerify = skipVerify;
        this.username = username;
        this.password = password;
        this.fromAddress = fromAddress;
        this.fromName = fromName;
        this.starttlsPolicy = starttlsPolicy;
    }

    /**
     * Getter for Host.
     * @return Returns the String
     */
    @JsonGetter("host")
    public String getHost() {
        return host;
    }

    /**
     * Setter for Host.
     * @param host Value for String
     */
    @JsonSetter("host")
    public void setHost(String host) {
        this.host = host;
    }

    /**
     * Getter for Port.
     * @return Returns the int
     */
    @JsonGetter("port")
    public int getPort() {
        return port;
    }

    /**
     * Setter for Port.
     * @param port Value for int
     */
    @JsonSetter("port")
    public void setPort(int port) {
        this.port = port;
    }

    /**
     * Getter for SkipVerify.
     * @return Returns the Boolean
     */
    @JsonGetter("skip_verify")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSkipVerify() {
        return skipVerify;
    }

    /**
     * Setter for SkipVerify.
     * @param skipVerify Value for Boolean
     */
    @JsonSetter("skip_verify")
    public void setSkipVerify(Boolean skipVerify) {
        this.skipVerify = skipVerify;
    }

    /**
     * Internal Getter for Username.
     * @return Returns the Internal String
     */
    @JsonGetter("username")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUsername() {
        return this.username;
    }

    /**
     * Getter for Username.
     * @return Returns the String
     */
    public String getUsername() {
        return OptionalNullable.getFrom(username);
    }

    /**
     * Setter for Username.
     * @param username Value for String
     */
    @JsonSetter("username")
    public void setUsername(String username) {
        this.username = OptionalNullable.of(username);
    }

    /**
     * UnSetter for Username.
     */
    public void unsetUsername() {
        username = null;
    }

    /**
     * Internal Getter for Password.
     * @return Returns the Internal String
     */
    @JsonGetter("password")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPassword() {
        return this.password;
    }

    /**
     * Getter for Password.
     * @return Returns the String
     */
    public String getPassword() {
        return OptionalNullable.getFrom(password);
    }

    /**
     * Setter for Password.
     * @param password Value for String
     */
    @JsonSetter("password")
    public void setPassword(String password) {
        this.password = OptionalNullable.of(password);
    }

    /**
     * UnSetter for Password.
     */
    public void unsetPassword() {
        password = null;
    }

    /**
     * Getter for FromAddress.
     * @return Returns the String
     */
    @JsonGetter("from_address")
    public String getFromAddress() {
        return fromAddress;
    }

    /**
     * Setter for FromAddress.
     * @param fromAddress Value for String
     */
    @JsonSetter("from_address")
    public void setFromAddress(String fromAddress) {
        this.fromAddress = fromAddress;
    }

    /**
     * Internal Getter for FromName.
     * @return Returns the Internal String
     */
    @JsonGetter("from_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFromName() {
        return this.fromName;
    }

    /**
     * Getter for FromName.
     * @return Returns the String
     */
    public String getFromName() {
        return OptionalNullable.getFrom(fromName);
    }

    /**
     * Setter for FromName.
     * @param fromName Value for String
     */
    @JsonSetter("from_name")
    public void setFromName(String fromName) {
        this.fromName = OptionalNullable.of(fromName);
    }

    /**
     * UnSetter for FromName.
     */
    public void unsetFromName() {
        fromName = null;
    }

    /**
     * Getter for StarttlsPolicy.
     * @return Returns the EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum
     */
    @JsonGetter("starttls_policy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum getStarttlsPolicy() {
        return starttlsPolicy;
    }

    /**
     * Setter for StarttlsPolicy.
     * @param starttlsPolicy Value for EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum
     */
    @JsonSetter("starttls_policy")
    public void setStarttlsPolicy(EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum starttlsPolicy) {
        this.starttlsPolicy = starttlsPolicy;
    }

    /**
     * Converts this SMTPServerSettings into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SMTPServerSettings [" + "host=" + host + ", port=" + port + ", fromAddress="
                + fromAddress + ", skipVerify=" + skipVerify + ", username=" + username
                + ", password=" + password + ", fromName=" + fromName + ", starttlsPolicy="
                + starttlsPolicy + "]";
    }

    /**
     * Builds a new {@link SMTPServerSettings.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SMTPServerSettings.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(host, port, fromAddress)
                .skipVerify(getSkipVerify())
                .starttlsPolicy(getStarttlsPolicy());
        builder.username = internalGetUsername();
        builder.password = internalGetPassword();
        builder.fromName = internalGetFromName();
        return builder;
    }

    /**
     * Class to build instances of {@link SMTPServerSettings}.
     */
    public static class Builder {
        private String host;
        private int port;
        private String fromAddress;
        private Boolean skipVerify;
        private OptionalNullable<String> username;
        private OptionalNullable<String> password;
        private OptionalNullable<String> fromName;
        private EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum starttlsPolicy;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  host  String value for host.
         * @param  port  int value for port.
         * @param  fromAddress  String value for fromAddress.
         */
        public Builder(String host, int port, String fromAddress) {
            this.host = host;
            this.port = port;
            this.fromAddress = fromAddress;
        }

        /**
         * Setter for host.
         * @param  host  String value for host.
         * @return Builder
         */
        public Builder host(String host) {
            this.host = host;
            return this;
        }

        /**
         * Setter for port.
         * @param  port  int value for port.
         * @return Builder
         */
        public Builder port(int port) {
            this.port = port;
            return this;
        }

        /**
         * Setter for fromAddress.
         * @param  fromAddress  String value for fromAddress.
         * @return Builder
         */
        public Builder fromAddress(String fromAddress) {
            this.fromAddress = fromAddress;
            return this;
        }

        /**
         * Setter for skipVerify.
         * @param  skipVerify  Boolean value for skipVerify.
         * @return Builder
         */
        public Builder skipVerify(Boolean skipVerify) {
            this.skipVerify = skipVerify;
            return this;
        }

        /**
         * Setter for username.
         * @param  username  String value for username.
         * @return Builder
         */
        public Builder username(String username) {
            this.username = OptionalNullable.of(username);
            return this;
        }

        /**
         * UnSetter for username.
         * @return Builder
         */
        public Builder unsetUsername() {
            username = null;
            return this;
        }

        /**
         * Setter for password.
         * @param  password  String value for password.
         * @return Builder
         */
        public Builder password(String password) {
            this.password = OptionalNullable.of(password);
            return this;
        }

        /**
         * UnSetter for password.
         * @return Builder
         */
        public Builder unsetPassword() {
            password = null;
            return this;
        }

        /**
         * Setter for fromName.
         * @param  fromName  String value for fromName.
         * @return Builder
         */
        public Builder fromName(String fromName) {
            this.fromName = OptionalNullable.of(fromName);
            return this;
        }

        /**
         * UnSetter for fromName.
         * @return Builder
         */
        public Builder unsetFromName() {
            fromName = null;
            return this;
        }

        /**
         * Setter for starttlsPolicy.
         * @param  starttlsPolicy
         *         EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum
         *         value for starttlsPolicy.
         * @return Builder
         */
        public Builder starttlsPolicy(
                EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLSEnum starttlsPolicy) {
            this.starttlsPolicy = starttlsPolicy;
            return this;
        }

        /**
         * Builds a new {@link SMTPServerSettings} object using the set fields.
         * @return {@link SMTPServerSettings}
         */
        public SMTPServerSettings build() {
            return new SMTPServerSettings(host, port, fromAddress, skipVerify, username, password,
                    fromName, starttlsPolicy);
        }
    }
}
