/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.IdNodepoolBody;
import io.swagger.client.model.IdUpgradeBody;
import io.swagger.client.model.InlineResponse20017;
import io.swagger.client.model.InlineResponse20029;
import io.swagger.client.model.InlineResponse20037;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.NodepoolSksnodepoolidBody;
import io.swagger.client.model.NodepoolSksnodepoolidevictBody;
import io.swagger.client.model.NodepoolSksnodepoolidscaleBody;
import io.swagger.client.model.Operation;
import io.swagger.client.model.SksCluster;
import io.swagger.client.model.SksClusterDeprecatedResource;
import io.swagger.client.model.SksKubeconfigRequest;
import io.swagger.client.model.SksNodepool;
import io.swagger.client.model.SksclusterBody;
import io.swagger.client.model.SksclusterIdBody;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SksApi
 */
@Ignore
public class SksApiTest {

    private final SksApi api = new SksApi();

    /**
     * Create an SKS cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSksClusterTest() {
        SksclusterBody body = null;
        Operation response = api.createSksCluster(body);

        // TODO: test validations
    }
    /**
     * Create a new SKS Nodepool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSksNodepoolTest() {
        IdNodepoolBody body = null;
        UUID id = null;
        Operation response = api.createSksNodepool(body, id);

        // TODO: test validations
    }
    /**
     * Delete an SKS cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSksClusterTest() {
        UUID id = null;
        Operation response = api.deleteSksCluster(id);

        // TODO: test validations
    }
    /**
     * Delete an SKS Nodepool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSksNodepoolTest() {
        UUID id = null;
        UUID sksNodepoolId = null;
        Operation response = api.deleteSksNodepool(id, sksNodepoolId);

        // TODO: test validations
    }
    /**
     * Evict Nodepool members
     *
     * This operation evicts the specified Compute instances member from the Nodepool, shrinking it to &#x60;&amp;lt;current nodepool size&amp;gt; - &amp;lt;# evicted members&amp;gt;&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void evictSksNodepoolMembersTest() {
        NodepoolSksnodepoolidevictBody body = null;
        UUID id = null;
        UUID sksNodepoolId = null;
        Operation response = api.evictSksNodepoolMembers(body, id, sksNodepoolId);

        // TODO: test validations
    }
    /**
     * Generate a new Kubeconfig file for a SKS cluster
     *
     * This operation returns a Kubeconfig file encoded in base64.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateSksClusterKubeconfigTest() {
        SksKubeconfigRequest body = null;
        UUID id = null;
        InlineResponse2008 response = api.generateSksClusterKubeconfig(body, id);

        // TODO: test validations
    }
    /**
     * Retrieve SKS cluster details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSksClusterTest() {
        UUID id = null;
        SksCluster response = api.getSksCluster(id);

        // TODO: test validations
    }
    /**
     * Get the certificate for a SKS cluster authority
     *
     * This operation returns the certificate for the given SKS cluster authority encoded in base64.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSksClusterAuthorityCertTest() {
        UUID id = null;
        String authority = null;
        InlineResponse20017 response = api.getSksClusterAuthorityCert(id, authority);

        // TODO: test validations
    }
    /**
     * Get the latest inspection result
     *
     * Helps troubleshoot common problems when deploying a kubernetes cluster. Inspections run every couple of minutes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSksClusterInspectionTest() {
        UUID id = null;
        Map<String, Object> response = api.getSksClusterInspection(id);

        // TODO: test validations
    }
    /**
     * Retrieve SKS Nodepool details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSksNodepoolTest() {
        UUID id = null;
        UUID sksNodepoolId = null;
        SksNodepool response = api.getSksNodepool(id, sksNodepoolId);

        // TODO: test validations
    }
    /**
     * Resources that are scheduled to be removed in future kubernetes releases
     *
     * This operation returns the deprecated resources for a given cluster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSksClusterDeprecatedResourcesTest() {
        UUID id = null;
        List<SksClusterDeprecatedResource> response = api.listSksClusterDeprecatedResources(id);

        // TODO: test validations
    }
    /**
     * List available versions for SKS clusters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSksClusterVersionsTest() {
        String includeDeprecated = null;
        InlineResponse20037 response = api.listSksClusterVersions(includeDeprecated);

        // TODO: test validations
    }
    /**
     * List SKS clusters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSksClustersTest() {
        InlineResponse20029 response = api.listSksClusters();

        // TODO: test validations
    }
    /**
     * Reset an SKS cluster field to its default value
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetSksClusterFieldTest() {
        UUID id = null;
        String field = null;
        Operation response = api.resetSksClusterField(id, field);

        // TODO: test validations
    }
    /**
     * Reset an SKS Nodepool field to its default value
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetSksNodepoolFieldTest() {
        UUID id = null;
        UUID sksNodepoolId = null;
        String field = null;
        Operation response = api.resetSksNodepoolField(id, sksNodepoolId, field);

        // TODO: test validations
    }
    /**
     * Rotate Exoscale CCM credentials
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rotateSksCcmCredentialsTest() {
        UUID id = null;
        Operation response = api.rotateSksCcmCredentials(id);

        // TODO: test validations
    }
    /**
     * Rotate operators certificate authority
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rotateSksOperatorsCaTest() {
        UUID id = null;
        Operation response = api.rotateSksOperatorsCa(id);

        // TODO: test validations
    }
    /**
     * Scale a SKS Nodepool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scaleSksNodepoolTest() {
        NodepoolSksnodepoolidscaleBody body = null;
        UUID id = null;
        UUID sksNodepoolId = null;
        Operation response = api.scaleSksNodepool(body, id, sksNodepoolId);

        // TODO: test validations
    }
    /**
     * Update an SKS cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSksClusterTest() {
        SksclusterIdBody body = null;
        UUID id = null;
        Operation response = api.updateSksCluster(body, id);

        // TODO: test validations
    }
    /**
     * Update an SKS Nodepool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSksNodepoolTest() {
        NodepoolSksnodepoolidBody body = null;
        UUID id = null;
        UUID sksNodepoolId = null;
        Operation response = api.updateSksNodepool(body, id, sksNodepoolId);

        // TODO: test validations
    }
    /**
     * Upgrade an SKS cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeSksClusterTest() {
        IdUpgradeBody body = null;
        UUID id = null;
        Operation response = api.upgradeSksCluster(body, id);

        // TODO: test validations
    }
    /**
     * Upgrade a SKS cluster to pro
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeSksClusterServiceLevelTest() {
        UUID id = null;
        Operation response = api.upgradeSksClusterServiceLevel(id);

        // TODO: test validations
    }
}
