/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * AuthenticationMethods - Kafka authentication methods
 */

public class AuthenticationMethods {

    /**
     * Whether certificate/SSL authentication is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificate")
    private Optional<? extends Boolean> certificate;

    /**
     * Whether SASL authentication is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sasl")
    private Optional<? extends Boolean> sasl;

    public AuthenticationMethods(
            @JsonProperty("certificate") Optional<? extends Boolean> certificate,
            @JsonProperty("sasl") Optional<? extends Boolean> sasl) {
        Utils.checkNotNull(certificate, "certificate");
        Utils.checkNotNull(sasl, "sasl");
        this.certificate = certificate;
        this.sasl = sasl;
    }

    /**
     * Whether certificate/SSL authentication is enabled
     */
    public Optional<? extends Boolean> certificate() {
        return certificate;
    }

    /**
     * Whether SASL authentication is enabled
     */
    public Optional<? extends Boolean> sasl() {
        return sasl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Whether certificate/SSL authentication is enabled
     */
    public AuthenticationMethods withCertificate(boolean certificate) {
        Utils.checkNotNull(certificate, "certificate");
        this.certificate = Optional.ofNullable(certificate);
        return this;
    }

    /**
     * Whether certificate/SSL authentication is enabled
     */
    public AuthenticationMethods withCertificate(Optional<? extends Boolean> certificate) {
        Utils.checkNotNull(certificate, "certificate");
        this.certificate = certificate;
        return this;
    }

    /**
     * Whether SASL authentication is enabled
     */
    public AuthenticationMethods withSasl(boolean sasl) {
        Utils.checkNotNull(sasl, "sasl");
        this.sasl = Optional.ofNullable(sasl);
        return this;
    }

    /**
     * Whether SASL authentication is enabled
     */
    public AuthenticationMethods withSasl(Optional<? extends Boolean> sasl) {
        Utils.checkNotNull(sasl, "sasl");
        this.sasl = sasl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthenticationMethods other = (AuthenticationMethods) o;
        return 
            java.util.Objects.deepEquals(this.certificate, other.certificate) &&
            java.util.Objects.deepEquals(this.sasl, other.sasl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            certificate,
            sasl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthenticationMethods.class,
                "certificate", certificate,
                "sasl", sasl);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> certificate = Optional.empty();
 
        private Optional<? extends Boolean> sasl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether certificate/SSL authentication is enabled
         */
        public Builder certificate(boolean certificate) {
            Utils.checkNotNull(certificate, "certificate");
            this.certificate = Optional.ofNullable(certificate);
            return this;
        }

        /**
         * Whether certificate/SSL authentication is enabled
         */
        public Builder certificate(Optional<? extends Boolean> certificate) {
            Utils.checkNotNull(certificate, "certificate");
            this.certificate = certificate;
            return this;
        }

        /**
         * Whether SASL authentication is enabled
         */
        public Builder sasl(boolean sasl) {
            Utils.checkNotNull(sasl, "sasl");
            this.sasl = Optional.ofNullable(sasl);
            return this;
        }

        /**
         * Whether SASL authentication is enabled
         */
        public Builder sasl(Optional<? extends Boolean> sasl) {
            Utils.checkNotNull(sasl, "sasl");
            this.sasl = sasl;
            return this;
        }
        
        public AuthenticationMethods build() {
            return new AuthenticationMethods(
                certificate,
                sasl);
        }
    }
}

