/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutovacuumSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class AutovacuumSettings {
  public static final String SERIALIZED_NAME_LOG_AUTOVACUUM_MIN_DURATION = "log_autovacuum_min_duration";
  @SerializedName(SERIALIZED_NAME_LOG_AUTOVACUUM_MIN_DURATION)
  private Integer logAutovacuumMinDuration;

  public static final String SERIALIZED_NAME_AUTOVACUUM_VACUUM_COST_LIMIT = "autovacuum_vacuum_cost_limit";
  @SerializedName(SERIALIZED_NAME_AUTOVACUUM_VACUUM_COST_LIMIT)
  private Integer autovacuumVacuumCostLimit;

  public static final String SERIALIZED_NAME_AUTOVACUUM_MAX_WORKERS = "autovacuum_max_workers";
  @SerializedName(SERIALIZED_NAME_AUTOVACUUM_MAX_WORKERS)
  private Integer autovacuumMaxWorkers;

  public static final String SERIALIZED_NAME_AUTOVACUUM_VACUUM_THRESHOLD = "autovacuum_vacuum_threshold";
  @SerializedName(SERIALIZED_NAME_AUTOVACUUM_VACUUM_THRESHOLD)
  private Integer autovacuumVacuumThreshold;

  public static final String SERIALIZED_NAME_AUTOVACUUM_NAPTIME = "autovacuum_naptime";
  @SerializedName(SERIALIZED_NAME_AUTOVACUUM_NAPTIME)
  private Integer autovacuumNaptime;

  public static final String SERIALIZED_NAME_AUTOVACUUM_VACUUM_SCALE_FACTOR = "autovacuum_vacuum_scale_factor";
  @SerializedName(SERIALIZED_NAME_AUTOVACUUM_VACUUM_SCALE_FACTOR)
  private BigDecimal autovacuumVacuumScaleFactor;

  public static final String SERIALIZED_NAME_AUTOVACUUM_VACUUM_COST_DELAY = "autovacuum_vacuum_cost_delay";
  @SerializedName(SERIALIZED_NAME_AUTOVACUUM_VACUUM_COST_DELAY)
  private Integer autovacuumVacuumCostDelay;

  public static final String SERIALIZED_NAME_AUTOVACUUM_ANALYZE_SCALE_FACTOR = "autovacuum_analyze_scale_factor";
  @SerializedName(SERIALIZED_NAME_AUTOVACUUM_ANALYZE_SCALE_FACTOR)
  private BigDecimal autovacuumAnalyzeScaleFactor;

  public static final String SERIALIZED_NAME_AUTOVACUUM_ANALYZE_THRESHOLD = "autovacuum_analyze_threshold";
  @SerializedName(SERIALIZED_NAME_AUTOVACUUM_ANALYZE_THRESHOLD)
  private Integer autovacuumAnalyzeThreshold;

  public static final String SERIALIZED_NAME_AUTOVACUUM_FREEZE_MAX_AGE = "autovacuum_freeze_max_age";
  @SerializedName(SERIALIZED_NAME_AUTOVACUUM_FREEZE_MAX_AGE)
  private Integer autovacuumFreezeMaxAge;

  public AutovacuumSettings() {
  }

  public AutovacuumSettings logAutovacuumMinDuration(Integer logAutovacuumMinDuration) {
    this.logAutovacuumMinDuration = logAutovacuumMinDuration;
    return this;
  }

   /**
   * Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
   * minimum: -1
   * maximum: 2147483647
   * @return logAutovacuumMinDuration
  **/
  @javax.annotation.Nullable
  public Integer getLogAutovacuumMinDuration() {
    return logAutovacuumMinDuration;
  }

  public void setLogAutovacuumMinDuration(Integer logAutovacuumMinDuration) {
    this.logAutovacuumMinDuration = logAutovacuumMinDuration;
  }


  public AutovacuumSettings autovacuumVacuumCostLimit(Integer autovacuumVacuumCostLimit) {
    this.autovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
    return this;
  }

   /**
   * Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
   * minimum: -1
   * maximum: 10000
   * @return autovacuumVacuumCostLimit
  **/
  @javax.annotation.Nullable
  public Integer getAutovacuumVacuumCostLimit() {
    return autovacuumVacuumCostLimit;
  }

  public void setAutovacuumVacuumCostLimit(Integer autovacuumVacuumCostLimit) {
    this.autovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
  }


  public AutovacuumSettings autovacuumMaxWorkers(Integer autovacuumMaxWorkers) {
    this.autovacuumMaxWorkers = autovacuumMaxWorkers;
    return this;
  }

   /**
   * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
   * minimum: 1
   * maximum: 20
   * @return autovacuumMaxWorkers
  **/
  @javax.annotation.Nullable
  public Integer getAutovacuumMaxWorkers() {
    return autovacuumMaxWorkers;
  }

  public void setAutovacuumMaxWorkers(Integer autovacuumMaxWorkers) {
    this.autovacuumMaxWorkers = autovacuumMaxWorkers;
  }


  public AutovacuumSettings autovacuumVacuumThreshold(Integer autovacuumVacuumThreshold) {
    this.autovacuumVacuumThreshold = autovacuumVacuumThreshold;
    return this;
  }

   /**
   * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples
   * minimum: 0
   * maximum: 2147483647
   * @return autovacuumVacuumThreshold
  **/
  @javax.annotation.Nullable
  public Integer getAutovacuumVacuumThreshold() {
    return autovacuumVacuumThreshold;
  }

  public void setAutovacuumVacuumThreshold(Integer autovacuumVacuumThreshold) {
    this.autovacuumVacuumThreshold = autovacuumVacuumThreshold;
  }


  public AutovacuumSettings autovacuumNaptime(Integer autovacuumNaptime) {
    this.autovacuumNaptime = autovacuumNaptime;
    return this;
  }

   /**
   * Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
   * minimum: 1
   * maximum: 86400
   * @return autovacuumNaptime
  **/
  @javax.annotation.Nullable
  public Integer getAutovacuumNaptime() {
    return autovacuumNaptime;
  }

  public void setAutovacuumNaptime(Integer autovacuumNaptime) {
    this.autovacuumNaptime = autovacuumNaptime;
  }


  public AutovacuumSettings autovacuumVacuumScaleFactor(BigDecimal autovacuumVacuumScaleFactor) {
    this.autovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
    return this;
  }

   /**
   * Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
   * minimum: 0.0
   * maximum: 1.0
   * @return autovacuumVacuumScaleFactor
  **/
  @javax.annotation.Nullable
  public BigDecimal getAutovacuumVacuumScaleFactor() {
    return autovacuumVacuumScaleFactor;
  }

  public void setAutovacuumVacuumScaleFactor(BigDecimal autovacuumVacuumScaleFactor) {
    this.autovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
  }


  public AutovacuumSettings autovacuumVacuumCostDelay(Integer autovacuumVacuumCostDelay) {
    this.autovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
    return this;
  }

   /**
   * Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds
   * minimum: -1
   * maximum: 100
   * @return autovacuumVacuumCostDelay
  **/
  @javax.annotation.Nullable
  public Integer getAutovacuumVacuumCostDelay() {
    return autovacuumVacuumCostDelay;
  }

  public void setAutovacuumVacuumCostDelay(Integer autovacuumVacuumCostDelay) {
    this.autovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
  }


  public AutovacuumSettings autovacuumAnalyzeScaleFactor(BigDecimal autovacuumAnalyzeScaleFactor) {
    this.autovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
    return this;
  }

   /**
   * Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
   * minimum: 0.0
   * maximum: 1.0
   * @return autovacuumAnalyzeScaleFactor
  **/
  @javax.annotation.Nullable
  public BigDecimal getAutovacuumAnalyzeScaleFactor() {
    return autovacuumAnalyzeScaleFactor;
  }

  public void setAutovacuumAnalyzeScaleFactor(BigDecimal autovacuumAnalyzeScaleFactor) {
    this.autovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
  }


  public AutovacuumSettings autovacuumAnalyzeThreshold(Integer autovacuumAnalyzeThreshold) {
    this.autovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
    return this;
  }

   /**
   * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an  ANALYZE in any one table. The default is 50 tuples.
   * minimum: 0
   * maximum: 2147483647
   * @return autovacuumAnalyzeThreshold
  **/
  @javax.annotation.Nullable
  public Integer getAutovacuumAnalyzeThreshold() {
    return autovacuumAnalyzeThreshold;
  }

  public void setAutovacuumAnalyzeThreshold(Integer autovacuumAnalyzeThreshold) {
    this.autovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
  }


  public AutovacuumSettings autovacuumFreezeMaxAge(Integer autovacuumFreezeMaxAge) {
    this.autovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
    return this;
  }

   /**
   * Specifies the maximum age (in transactions) that a table&#39;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
   * minimum: 200000000
   * maximum: 1500000000
   * @return autovacuumFreezeMaxAge
  **/
  @javax.annotation.Nullable
  public Integer getAutovacuumFreezeMaxAge() {
    return autovacuumFreezeMaxAge;
  }

  public void setAutovacuumFreezeMaxAge(Integer autovacuumFreezeMaxAge) {
    this.autovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutovacuumSettings autovacuumSettings = (AutovacuumSettings) o;
    return Objects.equals(this.logAutovacuumMinDuration, autovacuumSettings.logAutovacuumMinDuration) &&
        Objects.equals(this.autovacuumVacuumCostLimit, autovacuumSettings.autovacuumVacuumCostLimit) &&
        Objects.equals(this.autovacuumMaxWorkers, autovacuumSettings.autovacuumMaxWorkers) &&
        Objects.equals(this.autovacuumVacuumThreshold, autovacuumSettings.autovacuumVacuumThreshold) &&
        Objects.equals(this.autovacuumNaptime, autovacuumSettings.autovacuumNaptime) &&
        Objects.equals(this.autovacuumVacuumScaleFactor, autovacuumSettings.autovacuumVacuumScaleFactor) &&
        Objects.equals(this.autovacuumVacuumCostDelay, autovacuumSettings.autovacuumVacuumCostDelay) &&
        Objects.equals(this.autovacuumAnalyzeScaleFactor, autovacuumSettings.autovacuumAnalyzeScaleFactor) &&
        Objects.equals(this.autovacuumAnalyzeThreshold, autovacuumSettings.autovacuumAnalyzeThreshold) &&
        Objects.equals(this.autovacuumFreezeMaxAge, autovacuumSettings.autovacuumFreezeMaxAge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logAutovacuumMinDuration, autovacuumVacuumCostLimit, autovacuumMaxWorkers, autovacuumVacuumThreshold, autovacuumNaptime, autovacuumVacuumScaleFactor, autovacuumVacuumCostDelay, autovacuumAnalyzeScaleFactor, autovacuumAnalyzeThreshold, autovacuumFreezeMaxAge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutovacuumSettings {\n");
    sb.append("    logAutovacuumMinDuration: ").append(toIndentedString(logAutovacuumMinDuration)).append("\n");
    sb.append("    autovacuumVacuumCostLimit: ").append(toIndentedString(autovacuumVacuumCostLimit)).append("\n");
    sb.append("    autovacuumMaxWorkers: ").append(toIndentedString(autovacuumMaxWorkers)).append("\n");
    sb.append("    autovacuumVacuumThreshold: ").append(toIndentedString(autovacuumVacuumThreshold)).append("\n");
    sb.append("    autovacuumNaptime: ").append(toIndentedString(autovacuumNaptime)).append("\n");
    sb.append("    autovacuumVacuumScaleFactor: ").append(toIndentedString(autovacuumVacuumScaleFactor)).append("\n");
    sb.append("    autovacuumVacuumCostDelay: ").append(toIndentedString(autovacuumVacuumCostDelay)).append("\n");
    sb.append("    autovacuumAnalyzeScaleFactor: ").append(toIndentedString(autovacuumAnalyzeScaleFactor)).append("\n");
    sb.append("    autovacuumAnalyzeThreshold: ").append(toIndentedString(autovacuumAnalyzeThreshold)).append("\n");
    sb.append("    autovacuumFreezeMaxAge: ").append(toIndentedString(autovacuumFreezeMaxAge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("log_autovacuum_min_duration");
    openapiFields.add("autovacuum_vacuum_cost_limit");
    openapiFields.add("autovacuum_max_workers");
    openapiFields.add("autovacuum_vacuum_threshold");
    openapiFields.add("autovacuum_naptime");
    openapiFields.add("autovacuum_vacuum_scale_factor");
    openapiFields.add("autovacuum_vacuum_cost_delay");
    openapiFields.add("autovacuum_analyze_scale_factor");
    openapiFields.add("autovacuum_analyze_threshold");
    openapiFields.add("autovacuum_freeze_max_age");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AutovacuumSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutovacuumSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutovacuumSettings is not found in the empty JSON string", AutovacuumSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutovacuumSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutovacuumSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutovacuumSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutovacuumSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutovacuumSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutovacuumSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AutovacuumSettings>() {
           @Override
           public void write(JsonWriter out, AutovacuumSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutovacuumSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AutovacuumSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AutovacuumSettings
  * @throws IOException if the JSON string is invalid with respect to AutovacuumSettings
  */
  public static AutovacuumSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutovacuumSettings.class);
  }

 /**
  * Convert an instance of AutovacuumSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

