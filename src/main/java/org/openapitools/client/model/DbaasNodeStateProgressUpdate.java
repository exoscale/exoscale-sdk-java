/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Extra information regarding the progress for current state
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasNodeStateProgressUpdate {
  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed;

  public static final String SERIALIZED_NAME_CURRENT = "current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private Long current;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Long max;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Long min;

  /**
   * Key identifying this phase
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    STREAM("stream"),
    
    BASEBACKUP("basebackup"),
    
    PREPARE("prepare"),
    
    FINALIZE("finalize");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String value) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhaseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhaseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private PhaseEnum phase;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public DbaasNodeStateProgressUpdate() {
  }

  public DbaasNodeStateProgressUpdate completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

   /**
   * Indicates whether this phase has been completed or not
   * @return completed
  **/
  @javax.annotation.Nonnull
  public Boolean getCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }


  public DbaasNodeStateProgressUpdate current(Long current) {
    this.current = current;
    return this;
  }

   /**
   * Current progress for this phase. May be missing or null.
   * minimum: 0
   * @return current
  **/
  @javax.annotation.Nullable
  public Long getCurrent() {
    return current;
  }

  public void setCurrent(Long current) {
    this.current = current;
  }


  public DbaasNodeStateProgressUpdate max(Long max) {
    this.max = max;
    return this;
  }

   /**
   * Maximum progress value for this phase. May be missing or null. May change.
   * minimum: 0
   * @return max
  **/
  @javax.annotation.Nullable
  public Long getMax() {
    return max;
  }

  public void setMax(Long max) {
    this.max = max;
  }


  public DbaasNodeStateProgressUpdate min(Long min) {
    this.min = min;
    return this;
  }

   /**
   * Minimum progress value for this phase. May be missing or null.
   * minimum: 0
   * @return min
  **/
  @javax.annotation.Nullable
  public Long getMin() {
    return min;
  }

  public void setMin(Long min) {
    this.min = min;
  }


  public DbaasNodeStateProgressUpdate phase(PhaseEnum phase) {
    this.phase = phase;
    return this;
  }

   /**
   * Key identifying this phase
   * @return phase
  **/
  @javax.annotation.Nonnull
  public PhaseEnum getPhase() {
    return phase;
  }

  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }


  public DbaasNodeStateProgressUpdate unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * Unit for current/min/max values. New units may be added.                         If null should be treated as generic unit
   * @return unit
  **/
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasNodeStateProgressUpdate dbaasNodeStateProgressUpdate = (DbaasNodeStateProgressUpdate) o;
    return Objects.equals(this.completed, dbaasNodeStateProgressUpdate.completed) &&
        Objects.equals(this.current, dbaasNodeStateProgressUpdate.current) &&
        Objects.equals(this.max, dbaasNodeStateProgressUpdate.max) &&
        Objects.equals(this.min, dbaasNodeStateProgressUpdate.min) &&
        Objects.equals(this.phase, dbaasNodeStateProgressUpdate.phase) &&
        Objects.equals(this.unit, dbaasNodeStateProgressUpdate.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completed, current, max, min, phase, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasNodeStateProgressUpdate {\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completed");
    openapiFields.add("current");
    openapiFields.add("max");
    openapiFields.add("min");
    openapiFields.add("phase");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("completed");
    openapiRequiredFields.add("phase");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasNodeStateProgressUpdate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasNodeStateProgressUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasNodeStateProgressUpdate is not found in the empty JSON string", DbaasNodeStateProgressUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasNodeStateProgressUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasNodeStateProgressUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DbaasNodeStateProgressUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
      // validate the required field `phase`
      PhaseEnum.validateJsonElement(jsonObj.get("phase"));
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasNodeStateProgressUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasNodeStateProgressUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasNodeStateProgressUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasNodeStateProgressUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasNodeStateProgressUpdate>() {
           @Override
           public void write(JsonWriter out, DbaasNodeStateProgressUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasNodeStateProgressUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasNodeStateProgressUpdate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasNodeStateProgressUpdate
  * @throws IOException if the JSON string is invalid with respect to DbaasNodeStateProgressUpdate
  */
  public static DbaasNodeStateProgressUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasNodeStateProgressUpdate.class);
  }

 /**
  * Convert an instance of DbaasNodeStateProgressUpdate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

