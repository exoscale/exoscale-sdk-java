/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DbaasServiceKafkaComponents {

    /**
     * Service component name
     */
    @JsonProperty("component")
    private String component;

    /**
     * DNS name for connecting to the service component
     */
    @JsonProperty("host")
    private String host;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-authentication-method")
    private Optional<? extends EnumKafkaAuthMethod> kafkaAuthenticationMethod;

    /**
     * Port number for connecting to the service component
     */
    @JsonProperty("port")
    private long port;

    @JsonProperty("route")
    private EnumComponentRoute route;

    @JsonProperty("usage")
    private EnumComponentUsage usage;

    public DbaasServiceKafkaComponents(
            @JsonProperty("component") String component,
            @JsonProperty("host") String host,
            @JsonProperty("kafka-authentication-method") Optional<? extends EnumKafkaAuthMethod> kafkaAuthenticationMethod,
            @JsonProperty("port") long port,
            @JsonProperty("route") EnumComponentRoute route,
            @JsonProperty("usage") EnumComponentUsage usage) {
        Utils.checkNotNull(component, "component");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(kafkaAuthenticationMethod, "kafkaAuthenticationMethod");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(route, "route");
        Utils.checkNotNull(usage, "usage");
        this.component = component;
        this.host = host;
        this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
        this.port = port;
        this.route = route;
        this.usage = usage;
    }

    /**
     * Service component name
     */
    public String component() {
        return component;
    }

    /**
     * DNS name for connecting to the service component
     */
    public String host() {
        return host;
    }

    public Optional<? extends EnumKafkaAuthMethod> kafkaAuthenticationMethod() {
        return kafkaAuthenticationMethod;
    }

    /**
     * Port number for connecting to the service component
     */
    public long port() {
        return port;
    }

    public EnumComponentRoute route() {
        return route;
    }

    public EnumComponentUsage usage() {
        return usage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Service component name
     */
    public DbaasServiceKafkaComponents withComponent(String component) {
        Utils.checkNotNull(component, "component");
        this.component = component;
        return this;
    }

    /**
     * DNS name for connecting to the service component
     */
    public DbaasServiceKafkaComponents withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    public DbaasServiceKafkaComponents withKafkaAuthenticationMethod(EnumKafkaAuthMethod kafkaAuthenticationMethod) {
        Utils.checkNotNull(kafkaAuthenticationMethod, "kafkaAuthenticationMethod");
        this.kafkaAuthenticationMethod = Optional.ofNullable(kafkaAuthenticationMethod);
        return this;
    }

    public DbaasServiceKafkaComponents withKafkaAuthenticationMethod(Optional<? extends EnumKafkaAuthMethod> kafkaAuthenticationMethod) {
        Utils.checkNotNull(kafkaAuthenticationMethod, "kafkaAuthenticationMethod");
        this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
        return this;
    }

    /**
     * Port number for connecting to the service component
     */
    public DbaasServiceKafkaComponents withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    public DbaasServiceKafkaComponents withRoute(EnumComponentRoute route) {
        Utils.checkNotNull(route, "route");
        this.route = route;
        return this;
    }

    public DbaasServiceKafkaComponents withUsage(EnumComponentUsage usage) {
        Utils.checkNotNull(usage, "usage");
        this.usage = usage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceKafkaComponents other = (DbaasServiceKafkaComponents) o;
        return 
            java.util.Objects.deepEquals(this.component, other.component) &&
            java.util.Objects.deepEquals(this.host, other.host) &&
            java.util.Objects.deepEquals(this.kafkaAuthenticationMethod, other.kafkaAuthenticationMethod) &&
            java.util.Objects.deepEquals(this.port, other.port) &&
            java.util.Objects.deepEquals(this.route, other.route) &&
            java.util.Objects.deepEquals(this.usage, other.usage);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            component,
            host,
            kafkaAuthenticationMethod,
            port,
            route,
            usage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceKafkaComponents.class,
                "component", component,
                "host", host,
                "kafkaAuthenticationMethod", kafkaAuthenticationMethod,
                "port", port,
                "route", route,
                "usage", usage);
    }
    
    public final static class Builder {
 
        private String component;
 
        private String host;
 
        private Optional<? extends EnumKafkaAuthMethod> kafkaAuthenticationMethod = Optional.empty();
 
        private Long port;
 
        private EnumComponentRoute route;
 
        private EnumComponentUsage usage;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Service component name
         */
        public Builder component(String component) {
            Utils.checkNotNull(component, "component");
            this.component = component;
            return this;
        }

        /**
         * DNS name for connecting to the service component
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        public Builder kafkaAuthenticationMethod(EnumKafkaAuthMethod kafkaAuthenticationMethod) {
            Utils.checkNotNull(kafkaAuthenticationMethod, "kafkaAuthenticationMethod");
            this.kafkaAuthenticationMethod = Optional.ofNullable(kafkaAuthenticationMethod);
            return this;
        }

        public Builder kafkaAuthenticationMethod(Optional<? extends EnumKafkaAuthMethod> kafkaAuthenticationMethod) {
            Utils.checkNotNull(kafkaAuthenticationMethod, "kafkaAuthenticationMethod");
            this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
            return this;
        }

        /**
         * Port number for connecting to the service component
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        public Builder route(EnumComponentRoute route) {
            Utils.checkNotNull(route, "route");
            this.route = route;
            return this;
        }

        public Builder usage(EnumComponentUsage usage) {
            Utils.checkNotNull(usage, "usage");
            this.usage = usage;
            return this;
        }
        
        public DbaasServiceKafkaComponents build() {
            return new DbaasServiceKafkaComponents(
                component,
                host,
                kafkaAuthenticationMethod,
                port,
                route,
                usage);
        }
    }
}

