/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateDbaasServiceKafkaRequestBody {

    /**
     * Kafka authentication methods
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication-methods")
    private Optional<? extends AuthenticationMethods> authenticationMethods;

    /**
     * Enable Kafka-REST service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-rest-enabled")
    private Optional<? extends Boolean> kafkaRestEnabled;

    /**
     * Allow clients to connect to kafka_connect from the public internet for service nodes that are in a project VPC or another type of private network
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-connect-enabled")
    private Optional<? extends Boolean> kafkaConnectEnabled;

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip-filter")
    private Optional<? extends java.util.List<String>> ipFilter;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema-registry-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaSchemaRegistry> schemaRegistrySettings;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-rest-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaRest> kafkaRestSettings;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-connect-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaConnect> kafkaConnectSettings;

    /**
     * Automatic maintenance settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenance")
    private Optional<? extends CreateDbaasServiceKafkaMaintenance> maintenance;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-settings")
    private Optional<? extends com.exoscale.api.models.components.JsonSchemaKafka> kafkaSettings;

    /**
     * Enable Schema-Registry service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema-registry-enabled")
    private Optional<? extends Boolean> schemaRegistryEnabled;

    /**
     * Kafka major version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    /**
     * Subscription plan
     */
    @JsonProperty("plan")
    private String plan;

    public CreateDbaasServiceKafkaRequestBody(
            @JsonProperty("authentication-methods") Optional<? extends AuthenticationMethods> authenticationMethods,
            @JsonProperty("kafka-rest-enabled") Optional<? extends Boolean> kafkaRestEnabled,
            @JsonProperty("kafka-connect-enabled") Optional<? extends Boolean> kafkaConnectEnabled,
            @JsonProperty("ip-filter") Optional<? extends java.util.List<String>> ipFilter,
            @JsonProperty("schema-registry-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaSchemaRegistry> schemaRegistrySettings,
            @JsonProperty("kafka-rest-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaRest> kafkaRestSettings,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("kafka-connect-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaConnect> kafkaConnectSettings,
            @JsonProperty("maintenance") Optional<? extends CreateDbaasServiceKafkaMaintenance> maintenance,
            @JsonProperty("kafka-settings") Optional<? extends com.exoscale.api.models.components.JsonSchemaKafka> kafkaSettings,
            @JsonProperty("schema-registry-enabled") Optional<? extends Boolean> schemaRegistryEnabled,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("plan") String plan) {
        Utils.checkNotNull(authenticationMethods, "authenticationMethods");
        Utils.checkNotNull(kafkaRestEnabled, "kafkaRestEnabled");
        Utils.checkNotNull(kafkaConnectEnabled, "kafkaConnectEnabled");
        Utils.checkNotNull(ipFilter, "ipFilter");
        Utils.checkNotNull(schemaRegistrySettings, "schemaRegistrySettings");
        Utils.checkNotNull(kafkaRestSettings, "kafkaRestSettings");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(kafkaConnectSettings, "kafkaConnectSettings");
        Utils.checkNotNull(maintenance, "maintenance");
        Utils.checkNotNull(kafkaSettings, "kafkaSettings");
        Utils.checkNotNull(schemaRegistryEnabled, "schemaRegistryEnabled");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(plan, "plan");
        this.authenticationMethods = authenticationMethods;
        this.kafkaRestEnabled = kafkaRestEnabled;
        this.kafkaConnectEnabled = kafkaConnectEnabled;
        this.ipFilter = ipFilter;
        this.schemaRegistrySettings = schemaRegistrySettings;
        this.kafkaRestSettings = kafkaRestSettings;
        this.terminationProtection = terminationProtection;
        this.kafkaConnectSettings = kafkaConnectSettings;
        this.maintenance = maintenance;
        this.kafkaSettings = kafkaSettings;
        this.schemaRegistryEnabled = schemaRegistryEnabled;
        this.version = version;
        this.plan = plan;
    }

    /**
     * Kafka authentication methods
     */
    public Optional<? extends AuthenticationMethods> authenticationMethods() {
        return authenticationMethods;
    }

    /**
     * Enable Kafka-REST service
     */
    public Optional<? extends Boolean> kafkaRestEnabled() {
        return kafkaRestEnabled;
    }

    /**
     * Allow clients to connect to kafka_connect from the public internet for service nodes that are in a project VPC or another type of private network
     */
    public Optional<? extends Boolean> kafkaConnectEnabled() {
        return kafkaConnectEnabled;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public Optional<? extends java.util.List<String>> ipFilter() {
        return ipFilter;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaSchemaRegistry> schemaRegistrySettings() {
        return schemaRegistrySettings;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaRest> kafkaRestSettings() {
        return kafkaRestSettings;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaConnect> kafkaConnectSettings() {
        return kafkaConnectSettings;
    }

    /**
     * Automatic maintenance settings
     */
    public Optional<? extends CreateDbaasServiceKafkaMaintenance> maintenance() {
        return maintenance;
    }

    public Optional<? extends com.exoscale.api.models.components.JsonSchemaKafka> kafkaSettings() {
        return kafkaSettings;
    }

    /**
     * Enable Schema-Registry service
     */
    public Optional<? extends Boolean> schemaRegistryEnabled() {
        return schemaRegistryEnabled;
    }

    /**
     * Kafka major version
     */
    public Optional<? extends String> version() {
        return version;
    }

    /**
     * Subscription plan
     */
    public String plan() {
        return plan;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Kafka authentication methods
     */
    public CreateDbaasServiceKafkaRequestBody withAuthenticationMethods(AuthenticationMethods authenticationMethods) {
        Utils.checkNotNull(authenticationMethods, "authenticationMethods");
        this.authenticationMethods = Optional.ofNullable(authenticationMethods);
        return this;
    }

    /**
     * Kafka authentication methods
     */
    public CreateDbaasServiceKafkaRequestBody withAuthenticationMethods(Optional<? extends AuthenticationMethods> authenticationMethods) {
        Utils.checkNotNull(authenticationMethods, "authenticationMethods");
        this.authenticationMethods = authenticationMethods;
        return this;
    }

    /**
     * Enable Kafka-REST service
     */
    public CreateDbaasServiceKafkaRequestBody withKafkaRestEnabled(boolean kafkaRestEnabled) {
        Utils.checkNotNull(kafkaRestEnabled, "kafkaRestEnabled");
        this.kafkaRestEnabled = Optional.ofNullable(kafkaRestEnabled);
        return this;
    }

    /**
     * Enable Kafka-REST service
     */
    public CreateDbaasServiceKafkaRequestBody withKafkaRestEnabled(Optional<? extends Boolean> kafkaRestEnabled) {
        Utils.checkNotNull(kafkaRestEnabled, "kafkaRestEnabled");
        this.kafkaRestEnabled = kafkaRestEnabled;
        return this;
    }

    /**
     * Allow clients to connect to kafka_connect from the public internet for service nodes that are in a project VPC or another type of private network
     */
    public CreateDbaasServiceKafkaRequestBody withKafkaConnectEnabled(boolean kafkaConnectEnabled) {
        Utils.checkNotNull(kafkaConnectEnabled, "kafkaConnectEnabled");
        this.kafkaConnectEnabled = Optional.ofNullable(kafkaConnectEnabled);
        return this;
    }

    /**
     * Allow clients to connect to kafka_connect from the public internet for service nodes that are in a project VPC or another type of private network
     */
    public CreateDbaasServiceKafkaRequestBody withKafkaConnectEnabled(Optional<? extends Boolean> kafkaConnectEnabled) {
        Utils.checkNotNull(kafkaConnectEnabled, "kafkaConnectEnabled");
        this.kafkaConnectEnabled = kafkaConnectEnabled;
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public CreateDbaasServiceKafkaRequestBody withIpFilter(java.util.List<String> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = Optional.ofNullable(ipFilter);
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public CreateDbaasServiceKafkaRequestBody withIpFilter(Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = ipFilter;
        return this;
    }

    public CreateDbaasServiceKafkaRequestBody withSchemaRegistrySettings(com.exoscale.api.models.components.JsonSchemaSchemaRegistry schemaRegistrySettings) {
        Utils.checkNotNull(schemaRegistrySettings, "schemaRegistrySettings");
        this.schemaRegistrySettings = Optional.ofNullable(schemaRegistrySettings);
        return this;
    }

    public CreateDbaasServiceKafkaRequestBody withSchemaRegistrySettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaSchemaRegistry> schemaRegistrySettings) {
        Utils.checkNotNull(schemaRegistrySettings, "schemaRegistrySettings");
        this.schemaRegistrySettings = schemaRegistrySettings;
        return this;
    }

    public CreateDbaasServiceKafkaRequestBody withKafkaRestSettings(com.exoscale.api.models.components.JsonSchemaKafkaRest kafkaRestSettings) {
        Utils.checkNotNull(kafkaRestSettings, "kafkaRestSettings");
        this.kafkaRestSettings = Optional.ofNullable(kafkaRestSettings);
        return this;
    }

    public CreateDbaasServiceKafkaRequestBody withKafkaRestSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaRest> kafkaRestSettings) {
        Utils.checkNotNull(kafkaRestSettings, "kafkaRestSettings");
        this.kafkaRestSettings = kafkaRestSettings;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public CreateDbaasServiceKafkaRequestBody withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public CreateDbaasServiceKafkaRequestBody withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    public CreateDbaasServiceKafkaRequestBody withKafkaConnectSettings(com.exoscale.api.models.components.JsonSchemaKafkaConnect kafkaConnectSettings) {
        Utils.checkNotNull(kafkaConnectSettings, "kafkaConnectSettings");
        this.kafkaConnectSettings = Optional.ofNullable(kafkaConnectSettings);
        return this;
    }

    public CreateDbaasServiceKafkaRequestBody withKafkaConnectSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaConnect> kafkaConnectSettings) {
        Utils.checkNotNull(kafkaConnectSettings, "kafkaConnectSettings");
        this.kafkaConnectSettings = kafkaConnectSettings;
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public CreateDbaasServiceKafkaRequestBody withMaintenance(CreateDbaasServiceKafkaMaintenance maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = Optional.ofNullable(maintenance);
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public CreateDbaasServiceKafkaRequestBody withMaintenance(Optional<? extends CreateDbaasServiceKafkaMaintenance> maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = maintenance;
        return this;
    }

    public CreateDbaasServiceKafkaRequestBody withKafkaSettings(com.exoscale.api.models.components.JsonSchemaKafka kafkaSettings) {
        Utils.checkNotNull(kafkaSettings, "kafkaSettings");
        this.kafkaSettings = Optional.ofNullable(kafkaSettings);
        return this;
    }

    public CreateDbaasServiceKafkaRequestBody withKafkaSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaKafka> kafkaSettings) {
        Utils.checkNotNull(kafkaSettings, "kafkaSettings");
        this.kafkaSettings = kafkaSettings;
        return this;
    }

    /**
     * Enable Schema-Registry service
     */
    public CreateDbaasServiceKafkaRequestBody withSchemaRegistryEnabled(boolean schemaRegistryEnabled) {
        Utils.checkNotNull(schemaRegistryEnabled, "schemaRegistryEnabled");
        this.schemaRegistryEnabled = Optional.ofNullable(schemaRegistryEnabled);
        return this;
    }

    /**
     * Enable Schema-Registry service
     */
    public CreateDbaasServiceKafkaRequestBody withSchemaRegistryEnabled(Optional<? extends Boolean> schemaRegistryEnabled) {
        Utils.checkNotNull(schemaRegistryEnabled, "schemaRegistryEnabled");
        this.schemaRegistryEnabled = schemaRegistryEnabled;
        return this;
    }

    /**
     * Kafka major version
     */
    public CreateDbaasServiceKafkaRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * Kafka major version
     */
    public CreateDbaasServiceKafkaRequestBody withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Subscription plan
     */
    public CreateDbaasServiceKafkaRequestBody withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDbaasServiceKafkaRequestBody other = (CreateDbaasServiceKafkaRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.authenticationMethods, other.authenticationMethods) &&
            java.util.Objects.deepEquals(this.kafkaRestEnabled, other.kafkaRestEnabled) &&
            java.util.Objects.deepEquals(this.kafkaConnectEnabled, other.kafkaConnectEnabled) &&
            java.util.Objects.deepEquals(this.ipFilter, other.ipFilter) &&
            java.util.Objects.deepEquals(this.schemaRegistrySettings, other.schemaRegistrySettings) &&
            java.util.Objects.deepEquals(this.kafkaRestSettings, other.kafkaRestSettings) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.kafkaConnectSettings, other.kafkaConnectSettings) &&
            java.util.Objects.deepEquals(this.maintenance, other.maintenance) &&
            java.util.Objects.deepEquals(this.kafkaSettings, other.kafkaSettings) &&
            java.util.Objects.deepEquals(this.schemaRegistryEnabled, other.schemaRegistryEnabled) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.plan, other.plan);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            authenticationMethods,
            kafkaRestEnabled,
            kafkaConnectEnabled,
            ipFilter,
            schemaRegistrySettings,
            kafkaRestSettings,
            terminationProtection,
            kafkaConnectSettings,
            maintenance,
            kafkaSettings,
            schemaRegistryEnabled,
            version,
            plan);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDbaasServiceKafkaRequestBody.class,
                "authenticationMethods", authenticationMethods,
                "kafkaRestEnabled", kafkaRestEnabled,
                "kafkaConnectEnabled", kafkaConnectEnabled,
                "ipFilter", ipFilter,
                "schemaRegistrySettings", schemaRegistrySettings,
                "kafkaRestSettings", kafkaRestSettings,
                "terminationProtection", terminationProtection,
                "kafkaConnectSettings", kafkaConnectSettings,
                "maintenance", maintenance,
                "kafkaSettings", kafkaSettings,
                "schemaRegistryEnabled", schemaRegistryEnabled,
                "version", version,
                "plan", plan);
    }
    
    public final static class Builder {
 
        private Optional<? extends AuthenticationMethods> authenticationMethods = Optional.empty();
 
        private Optional<? extends Boolean> kafkaRestEnabled = Optional.empty();
 
        private Optional<? extends Boolean> kafkaConnectEnabled = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ipFilter = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaSchemaRegistry> schemaRegistrySettings = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaRest> kafkaRestSettings = Optional.empty();
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaConnect> kafkaConnectSettings = Optional.empty();
 
        private Optional<? extends CreateDbaasServiceKafkaMaintenance> maintenance = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.JsonSchemaKafka> kafkaSettings = Optional.empty();
 
        private Optional<? extends Boolean> schemaRegistryEnabled = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private String plan;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Kafka authentication methods
         */
        public Builder authenticationMethods(AuthenticationMethods authenticationMethods) {
            Utils.checkNotNull(authenticationMethods, "authenticationMethods");
            this.authenticationMethods = Optional.ofNullable(authenticationMethods);
            return this;
        }

        /**
         * Kafka authentication methods
         */
        public Builder authenticationMethods(Optional<? extends AuthenticationMethods> authenticationMethods) {
            Utils.checkNotNull(authenticationMethods, "authenticationMethods");
            this.authenticationMethods = authenticationMethods;
            return this;
        }

        /**
         * Enable Kafka-REST service
         */
        public Builder kafkaRestEnabled(boolean kafkaRestEnabled) {
            Utils.checkNotNull(kafkaRestEnabled, "kafkaRestEnabled");
            this.kafkaRestEnabled = Optional.ofNullable(kafkaRestEnabled);
            return this;
        }

        /**
         * Enable Kafka-REST service
         */
        public Builder kafkaRestEnabled(Optional<? extends Boolean> kafkaRestEnabled) {
            Utils.checkNotNull(kafkaRestEnabled, "kafkaRestEnabled");
            this.kafkaRestEnabled = kafkaRestEnabled;
            return this;
        }

        /**
         * Allow clients to connect to kafka_connect from the public internet for service nodes that are in a project VPC or another type of private network
         */
        public Builder kafkaConnectEnabled(boolean kafkaConnectEnabled) {
            Utils.checkNotNull(kafkaConnectEnabled, "kafkaConnectEnabled");
            this.kafkaConnectEnabled = Optional.ofNullable(kafkaConnectEnabled);
            return this;
        }

        /**
         * Allow clients to connect to kafka_connect from the public internet for service nodes that are in a project VPC or another type of private network
         */
        public Builder kafkaConnectEnabled(Optional<? extends Boolean> kafkaConnectEnabled) {
            Utils.checkNotNull(kafkaConnectEnabled, "kafkaConnectEnabled");
            this.kafkaConnectEnabled = kafkaConnectEnabled;
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(java.util.List<String> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = Optional.ofNullable(ipFilter);
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(Optional<? extends java.util.List<String>> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = ipFilter;
            return this;
        }

        public Builder schemaRegistrySettings(com.exoscale.api.models.components.JsonSchemaSchemaRegistry schemaRegistrySettings) {
            Utils.checkNotNull(schemaRegistrySettings, "schemaRegistrySettings");
            this.schemaRegistrySettings = Optional.ofNullable(schemaRegistrySettings);
            return this;
        }

        public Builder schemaRegistrySettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaSchemaRegistry> schemaRegistrySettings) {
            Utils.checkNotNull(schemaRegistrySettings, "schemaRegistrySettings");
            this.schemaRegistrySettings = schemaRegistrySettings;
            return this;
        }

        public Builder kafkaRestSettings(com.exoscale.api.models.components.JsonSchemaKafkaRest kafkaRestSettings) {
            Utils.checkNotNull(kafkaRestSettings, "kafkaRestSettings");
            this.kafkaRestSettings = Optional.ofNullable(kafkaRestSettings);
            return this;
        }

        public Builder kafkaRestSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaRest> kafkaRestSettings) {
            Utils.checkNotNull(kafkaRestSettings, "kafkaRestSettings");
            this.kafkaRestSettings = kafkaRestSettings;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        public Builder kafkaConnectSettings(com.exoscale.api.models.components.JsonSchemaKafkaConnect kafkaConnectSettings) {
            Utils.checkNotNull(kafkaConnectSettings, "kafkaConnectSettings");
            this.kafkaConnectSettings = Optional.ofNullable(kafkaConnectSettings);
            return this;
        }

        public Builder kafkaConnectSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaKafkaConnect> kafkaConnectSettings) {
            Utils.checkNotNull(kafkaConnectSettings, "kafkaConnectSettings");
            this.kafkaConnectSettings = kafkaConnectSettings;
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(CreateDbaasServiceKafkaMaintenance maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = Optional.ofNullable(maintenance);
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Optional<? extends CreateDbaasServiceKafkaMaintenance> maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = maintenance;
            return this;
        }

        public Builder kafkaSettings(com.exoscale.api.models.components.JsonSchemaKafka kafkaSettings) {
            Utils.checkNotNull(kafkaSettings, "kafkaSettings");
            this.kafkaSettings = Optional.ofNullable(kafkaSettings);
            return this;
        }

        public Builder kafkaSettings(Optional<? extends com.exoscale.api.models.components.JsonSchemaKafka> kafkaSettings) {
            Utils.checkNotNull(kafkaSettings, "kafkaSettings");
            this.kafkaSettings = kafkaSettings;
            return this;
        }

        /**
         * Enable Schema-Registry service
         */
        public Builder schemaRegistryEnabled(boolean schemaRegistryEnabled) {
            Utils.checkNotNull(schemaRegistryEnabled, "schemaRegistryEnabled");
            this.schemaRegistryEnabled = Optional.ofNullable(schemaRegistryEnabled);
            return this;
        }

        /**
         * Enable Schema-Registry service
         */
        public Builder schemaRegistryEnabled(Optional<? extends Boolean> schemaRegistryEnabled) {
            Utils.checkNotNull(schemaRegistryEnabled, "schemaRegistryEnabled");
            this.schemaRegistryEnabled = schemaRegistryEnabled;
            return this;
        }

        /**
         * Kafka major version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * Kafka major version
         */
        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }
        
        public CreateDbaasServiceKafkaRequestBody build() {
            return new CreateDbaasServiceKafkaRequestBody(
                authenticationMethods,
                kafkaRestEnabled,
                kafkaConnectEnabled,
                ipFilter,
                schemaRegistrySettings,
                kafkaRestSettings,
                terminationProtection,
                kafkaConnectSettings,
                maintenance,
                kafkaSettings,
                schemaRegistryEnabled,
                version,
                plan);
        }
    }
}

