/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JsonSchemaSchemaRegistry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class JsonSchemaSchemaRegistry {
  public static final String SERIALIZED_NAME_TOPIC_NAME = "topic_name";
  @SerializedName(SERIALIZED_NAME_TOPIC_NAME)
  private String topicName;

  public static final String SERIALIZED_NAME_LEADER_ELIGIBILITY = "leader_eligibility";
  @SerializedName(SERIALIZED_NAME_LEADER_ELIGIBILITY)
  private Boolean leaderEligibility;

  public JsonSchemaSchemaRegistry() {
  }

  public JsonSchemaSchemaRegistry topicName(String topicName) {
    this.topicName = topicName;
    return this;
  }

   /**
   * The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy. Please note that changing this configuration in an existing Schema Registry / Karapace setup leads to previous schemas being inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of order. It&#39;s only possible to do the switch while Schema Registry / Karapace is disabled. Defaults to &#x60;_schemas&#x60;.
   * @return topicName
  **/
  @javax.annotation.Nullable
  public String getTopicName() {
    return topicName;
  }

  public void setTopicName(String topicName) {
    this.topicName = topicName;
  }


  public JsonSchemaSchemaRegistry leaderEligibility(Boolean leaderEligibility) {
    this.leaderEligibility = leaderEligibility;
    return this;
  }

   /**
   * If true, Karapace / Schema Registry on the service nodes can participate in leader election. It might be needed to disable this when the schemas topic is replicated to a secondary cluster and Karapace / Schema Registry there must not participate in leader election. Defaults to &#x60;true&#x60;.
   * @return leaderEligibility
  **/
  @javax.annotation.Nullable
  public Boolean getLeaderEligibility() {
    return leaderEligibility;
  }

  public void setLeaderEligibility(Boolean leaderEligibility) {
    this.leaderEligibility = leaderEligibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchemaSchemaRegistry jsonSchemaSchemaRegistry = (JsonSchemaSchemaRegistry) o;
    return Objects.equals(this.topicName, jsonSchemaSchemaRegistry.topicName) &&
        Objects.equals(this.leaderEligibility, jsonSchemaSchemaRegistry.leaderEligibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(topicName, leaderEligibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchemaSchemaRegistry {\n");
    sb.append("    topicName: ").append(toIndentedString(topicName)).append("\n");
    sb.append("    leaderEligibility: ").append(toIndentedString(leaderEligibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("topic_name");
    openapiFields.add("leader_eligibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to JsonSchemaSchemaRegistry
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JsonSchemaSchemaRegistry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonSchemaSchemaRegistry is not found in the empty JSON string", JsonSchemaSchemaRegistry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JsonSchemaSchemaRegistry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JsonSchemaSchemaRegistry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("topic_name") != null && !jsonObj.get("topic_name").isJsonNull()) && !jsonObj.get("topic_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonSchemaSchemaRegistry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonSchemaSchemaRegistry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonSchemaSchemaRegistry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonSchemaSchemaRegistry.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonSchemaSchemaRegistry>() {
           @Override
           public void write(JsonWriter out, JsonSchemaSchemaRegistry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonSchemaSchemaRegistry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JsonSchemaSchemaRegistry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JsonSchemaSchemaRegistry
  * @throws IOException if the JSON string is invalid with respect to JsonSchemaSchemaRegistry
  */
  public static JsonSchemaSchemaRegistry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonSchemaSchemaRegistry.class);
  }

 /**
  * Convert an instance of JsonSchemaSchemaRegistry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

