/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Icmp - ICMP details (default: -1 (ANY))
 */

public class Icmp {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<? extends Long> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends Long> type;

    public Icmp(
            @JsonProperty("code") Optional<? extends Long> code,
            @JsonProperty("type") Optional<? extends Long> type) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(type, "type");
        this.code = code;
        this.type = type;
    }

    public Optional<? extends Long> code() {
        return code;
    }

    public Optional<? extends Long> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Icmp withCode(long code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    public Icmp withCode(Optional<? extends Long> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public Icmp withType(long type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public Icmp withType(Optional<? extends Long> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Icmp other = (Icmp) o;
        return 
            java.util.Objects.deepEquals(this.code, other.code) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            code,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Icmp.class,
                "code", code,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> code = Optional.empty();
 
        private Optional<? extends Long> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(long code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        public Builder code(Optional<? extends Long> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder type(long type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends Long> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Icmp build() {
            return new Icmp(
                code,
                type);
        }
    }
}

