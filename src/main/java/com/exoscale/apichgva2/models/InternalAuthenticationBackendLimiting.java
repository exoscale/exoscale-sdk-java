/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for InternalAuthenticationBackendLimiting type.
 */
public class InternalAuthenticationBackendLimiting {
    private InternalAuthenticationBackendLimitingTypeEnum type;
    private InternalAuthenticationBackendLimitingAuthenticationBackendEnum authenticationBackend;
    private Integer allowedTries;
    private Integer timeWindowSeconds;
    private Integer blockExpirySeconds;
    private Integer maxBlockedClients;
    private Integer maxTrackedClients;

    /**
     * Default constructor.
     */
    public InternalAuthenticationBackendLimiting() {
    }

    /**
     * Initialization constructor.
     * @param  type  InternalAuthenticationBackendLimitingTypeEnum value for type.
     * @param  authenticationBackend  InternalAuthenticationBackendLimitingAuthenticationBackendEnum
     *         value for authenticationBackend.
     * @param  allowedTries  Integer value for allowedTries.
     * @param  timeWindowSeconds  Integer value for timeWindowSeconds.
     * @param  blockExpirySeconds  Integer value for blockExpirySeconds.
     * @param  maxBlockedClients  Integer value for maxBlockedClients.
     * @param  maxTrackedClients  Integer value for maxTrackedClients.
     */
    public InternalAuthenticationBackendLimiting(
            InternalAuthenticationBackendLimitingTypeEnum type,
            InternalAuthenticationBackendLimitingAuthenticationBackendEnum authenticationBackend,
            Integer allowedTries,
            Integer timeWindowSeconds,
            Integer blockExpirySeconds,
            Integer maxBlockedClients,
            Integer maxTrackedClients) {
        this.type = type;
        this.authenticationBackend = authenticationBackend;
        this.allowedTries = allowedTries;
        this.timeWindowSeconds = timeWindowSeconds;
        this.blockExpirySeconds = blockExpirySeconds;
        this.maxBlockedClients = maxBlockedClients;
        this.maxTrackedClients = maxTrackedClients;
    }

    /**
     * Getter for Type.
     * The type of rate limiting
     * @return Returns the InternalAuthenticationBackendLimitingTypeEnum
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InternalAuthenticationBackendLimitingTypeEnum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The type of rate limiting
     * @param type Value for InternalAuthenticationBackendLimitingTypeEnum
     */
    @JsonSetter("type")
    public void setType(InternalAuthenticationBackendLimitingTypeEnum type) {
        this.type = type;
    }

    /**
     * Getter for AuthenticationBackend.
     * The internal backend. Enter `internal`
     * @return Returns the InternalAuthenticationBackendLimitingAuthenticationBackendEnum
     */
    @JsonGetter("authentication_backend")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InternalAuthenticationBackendLimitingAuthenticationBackendEnum getAuthenticationBackend() {
        return authenticationBackend;
    }

    /**
     * Setter for AuthenticationBackend.
     * The internal backend. Enter `internal`
     * @param authenticationBackend Value for InternalAuthenticationBackendLimitingAuthenticationBackendEnum
     */
    @JsonSetter("authentication_backend")
    public void setAuthenticationBackend(InternalAuthenticationBackendLimitingAuthenticationBackendEnum authenticationBackend) {
        this.authenticationBackend = authenticationBackend;
    }

    /**
     * Getter for AllowedTries.
     * The number of login attempts allowed before login is blocked
     * @return Returns the Integer
     */
    @JsonGetter("allowed_tries")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAllowedTries() {
        return allowedTries;
    }

    /**
     * Setter for AllowedTries.
     * The number of login attempts allowed before login is blocked
     * @param allowedTries Value for Integer
     */
    @JsonSetter("allowed_tries")
    public void setAllowedTries(Integer allowedTries) {
        this.allowedTries = allowedTries;
    }

    /**
     * Getter for TimeWindowSeconds.
     * The window of time in which the value for `allowed_tries` is enforced
     * @return Returns the Integer
     */
    @JsonGetter("time_window_seconds")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTimeWindowSeconds() {
        return timeWindowSeconds;
    }

    /**
     * Setter for TimeWindowSeconds.
     * The window of time in which the value for `allowed_tries` is enforced
     * @param timeWindowSeconds Value for Integer
     */
    @JsonSetter("time_window_seconds")
    public void setTimeWindowSeconds(Integer timeWindowSeconds) {
        this.timeWindowSeconds = timeWindowSeconds;
    }

    /**
     * Getter for BlockExpirySeconds.
     * The duration of time that login remains blocked after a failed login
     * @return Returns the Integer
     */
    @JsonGetter("block_expiry_seconds")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getBlockExpirySeconds() {
        return blockExpirySeconds;
    }

    /**
     * Setter for BlockExpirySeconds.
     * The duration of time that login remains blocked after a failed login
     * @param blockExpirySeconds Value for Integer
     */
    @JsonSetter("block_expiry_seconds")
    public void setBlockExpirySeconds(Integer blockExpirySeconds) {
        this.blockExpirySeconds = blockExpirySeconds;
    }

    /**
     * Getter for MaxBlockedClients.
     * The maximum number of blocked IP addresses
     * @return Returns the Integer
     */
    @JsonGetter("max_blocked_clients")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxBlockedClients() {
        return maxBlockedClients;
    }

    /**
     * Setter for MaxBlockedClients.
     * The maximum number of blocked IP addresses
     * @param maxBlockedClients Value for Integer
     */
    @JsonSetter("max_blocked_clients")
    public void setMaxBlockedClients(Integer maxBlockedClients) {
        this.maxBlockedClients = maxBlockedClients;
    }

    /**
     * Getter for MaxTrackedClients.
     * The maximum number of tracked IP addresses that have failed login
     * @return Returns the Integer
     */
    @JsonGetter("max_tracked_clients")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxTrackedClients() {
        return maxTrackedClients;
    }

    /**
     * Setter for MaxTrackedClients.
     * The maximum number of tracked IP addresses that have failed login
     * @param maxTrackedClients Value for Integer
     */
    @JsonSetter("max_tracked_clients")
    public void setMaxTrackedClients(Integer maxTrackedClients) {
        this.maxTrackedClients = maxTrackedClients;
    }

    /**
     * Converts this InternalAuthenticationBackendLimiting into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "InternalAuthenticationBackendLimiting [" + "type=" + type
                + ", authenticationBackend=" + authenticationBackend + ", allowedTries="
                + allowedTries + ", timeWindowSeconds=" + timeWindowSeconds
                + ", blockExpirySeconds=" + blockExpirySeconds + ", maxBlockedClients="
                + maxBlockedClients + ", maxTrackedClients=" + maxTrackedClients + "]";
    }

    /**
     * Builds a new {@link InternalAuthenticationBackendLimiting.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link InternalAuthenticationBackendLimiting.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .type(getType())
                .authenticationBackend(getAuthenticationBackend())
                .allowedTries(getAllowedTries())
                .timeWindowSeconds(getTimeWindowSeconds())
                .blockExpirySeconds(getBlockExpirySeconds())
                .maxBlockedClients(getMaxBlockedClients())
                .maxTrackedClients(getMaxTrackedClients());
        return builder;
    }

    /**
     * Class to build instances of {@link InternalAuthenticationBackendLimiting}.
     */
    public static class Builder {
        private InternalAuthenticationBackendLimitingTypeEnum type;
        private InternalAuthenticationBackendLimitingAuthenticationBackendEnum authenticationBackend;
        private Integer allowedTries;
        private Integer timeWindowSeconds;
        private Integer blockExpirySeconds;
        private Integer maxBlockedClients;
        private Integer maxTrackedClients;



        /**
         * Setter for type.
         * @param  type  InternalAuthenticationBackendLimitingTypeEnum value for type.
         * @return Builder
         */
        public Builder type(InternalAuthenticationBackendLimitingTypeEnum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for authenticationBackend.
         * @param  authenticationBackend
         *         InternalAuthenticationBackendLimitingAuthenticationBackendEnum value for
         *         authenticationBackend.
         * @return Builder
         */
        public Builder authenticationBackend(
                InternalAuthenticationBackendLimitingAuthenticationBackendEnum authenticationBackend) {
            this.authenticationBackend = authenticationBackend;
            return this;
        }

        /**
         * Setter for allowedTries.
         * @param  allowedTries  Integer value for allowedTries.
         * @return Builder
         */
        public Builder allowedTries(Integer allowedTries) {
            this.allowedTries = allowedTries;
            return this;
        }

        /**
         * Setter for timeWindowSeconds.
         * @param  timeWindowSeconds  Integer value for timeWindowSeconds.
         * @return Builder
         */
        public Builder timeWindowSeconds(Integer timeWindowSeconds) {
            this.timeWindowSeconds = timeWindowSeconds;
            return this;
        }

        /**
         * Setter for blockExpirySeconds.
         * @param  blockExpirySeconds  Integer value for blockExpirySeconds.
         * @return Builder
         */
        public Builder blockExpirySeconds(Integer blockExpirySeconds) {
            this.blockExpirySeconds = blockExpirySeconds;
            return this;
        }

        /**
         * Setter for maxBlockedClients.
         * @param  maxBlockedClients  Integer value for maxBlockedClients.
         * @return Builder
         */
        public Builder maxBlockedClients(Integer maxBlockedClients) {
            this.maxBlockedClients = maxBlockedClients;
            return this;
        }

        /**
         * Setter for maxTrackedClients.
         * @param  maxTrackedClients  Integer value for maxTrackedClients.
         * @return Builder
         */
        public Builder maxTrackedClients(Integer maxTrackedClients) {
            this.maxTrackedClients = maxTrackedClients;
            return this;
        }

        /**
         * Builds a new {@link InternalAuthenticationBackendLimiting} object using the set fields.
         * @return {@link InternalAuthenticationBackendLimiting}
         */
        public InternalAuthenticationBackendLimiting build() {
            return new InternalAuthenticationBackendLimiting(type, authenticationBackend,
                    allowedTries, timeWindowSeconds, blockExpirySeconds, maxBlockedClients,
                    maxTrackedClients);
        }
    }
}
