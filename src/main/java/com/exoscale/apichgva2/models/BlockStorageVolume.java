/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.exoscale.apichgva2.DateTimeHelper;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * This is a model class for BlockStorageVolume type.
 */
public class BlockStorageVolume {
    private Map<String, String> labels;
    private InstanceTarget instance;
    private String name;
    private State9Enum state;
    private Long size;
    private Long blocksize;
    private List<BlockStorageSnapshotTarget> blockStorageSnapshots;
    private UUID id;
    private LocalDateTime createdAt;

    /**
     * Default constructor.
     */
    public BlockStorageVolume() {
    }

    /**
     * Initialization constructor.
     * @param  labels  Map of String, value for labels.
     * @param  instance  InstanceTarget value for instance.
     * @param  name  String value for name.
     * @param  state  State9Enum value for state.
     * @param  size  Long value for size.
     * @param  blocksize  Long value for blocksize.
     * @param  blockStorageSnapshots  List of BlockStorageSnapshotTarget value for
     *         blockStorageSnapshots.
     * @param  id  UUID value for id.
     * @param  createdAt  LocalDateTime value for createdAt.
     */
    public BlockStorageVolume(
            Map<String, String> labels,
            InstanceTarget instance,
            String name,
            State9Enum state,
            Long size,
            Long blocksize,
            List<BlockStorageSnapshotTarget> blockStorageSnapshots,
            UUID id,
            LocalDateTime createdAt) {
        this.labels = labels;
        this.instance = instance;
        this.name = name;
        this.state = state;
        this.size = size;
        this.blocksize = blocksize;
        this.blockStorageSnapshots = blockStorageSnapshots;
        this.id = id;
        this.createdAt = createdAt;
    }

    /**
     * Getter for Labels.
     * @return Returns the Map of String, String
     */
    @JsonGetter("labels")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getLabels() {
        return labels;
    }

    /**
     * Setter for Labels.
     * @param labels Value for Map of String, String
     */
    @JsonSetter("labels")
    public void setLabels(Map<String, String> labels) {
        this.labels = labels;
    }

    /**
     * Getter for Instance.
     * Target Instance
     * @return Returns the InstanceTarget
     */
    @JsonGetter("instance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InstanceTarget getInstance() {
        return instance;
    }

    /**
     * Setter for Instance.
     * Target Instance
     * @param instance Value for InstanceTarget
     */
    @JsonSetter("instance")
    public void setInstance(InstanceTarget instance) {
        this.instance = instance;
    }

    /**
     * Getter for Name.
     * Volume name
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Volume name
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for State.
     * Volume state
     * @return Returns the State9Enum
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public State9Enum getState() {
        return state;
    }

    /**
     * Setter for State.
     * Volume state
     * @param state Value for State9Enum
     */
    @JsonSetter("state")
    public void setState(State9Enum state) {
        this.state = state;
    }

    /**
     * Getter for Size.
     * Volume size
     * @return Returns the Long
     */
    @JsonGetter("size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * Volume size
     * @param size Value for Long
     */
    @JsonSetter("size")
    public void setSize(Long size) {
        this.size = size;
    }

    /**
     * Getter for Blocksize.
     * Volume block size
     * @return Returns the Long
     */
    @JsonGetter("blocksize")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getBlocksize() {
        return blocksize;
    }

    /**
     * Setter for Blocksize.
     * Volume block size
     * @param blocksize Value for Long
     */
    @JsonSetter("blocksize")
    public void setBlocksize(Long blocksize) {
        this.blocksize = blocksize;
    }

    /**
     * Getter for BlockStorageSnapshots.
     * Volume snapshots, if any
     * @return Returns the List of BlockStorageSnapshotTarget
     */
    @JsonGetter("block-storage-snapshots")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<BlockStorageSnapshotTarget> getBlockStorageSnapshots() {
        return blockStorageSnapshots;
    }

    /**
     * Setter for BlockStorageSnapshots.
     * Volume snapshots, if any
     * @param blockStorageSnapshots Value for List of BlockStorageSnapshotTarget
     */
    @JsonSetter("block-storage-snapshots")
    public void setBlockStorageSnapshots(List<BlockStorageSnapshotTarget> blockStorageSnapshots) {
        this.blockStorageSnapshots = blockStorageSnapshots;
    }

    /**
     * Getter for Id.
     * Volume ID
     * @return Returns the UUID
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public UUID getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Volume ID
     * @param id Value for UUID
     */
    @JsonSetter("id")
    public void setId(UUID id) {
        this.id = id;
    }

    /**
     * Getter for CreatedAt.
     * Volume creation date
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created-at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * Volume creation date
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created-at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Converts this BlockStorageVolume into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BlockStorageVolume [" + "labels=" + labels + ", instance=" + instance + ", name="
                + name + ", state=" + state + ", size=" + size + ", blocksize=" + blocksize
                + ", blockStorageSnapshots=" + blockStorageSnapshots + ", id=" + id + ", createdAt="
                + createdAt + "]";
    }

    /**
     * Builds a new {@link BlockStorageVolume.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BlockStorageVolume.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .labels(getLabels())
                .instance(getInstance())
                .name(getName())
                .state(getState())
                .size(getSize())
                .blocksize(getBlocksize())
                .blockStorageSnapshots(getBlockStorageSnapshots())
                .id(getId())
                .createdAt(getCreatedAt());
        return builder;
    }

    /**
     * Class to build instances of {@link BlockStorageVolume}.
     */
    public static class Builder {
        private Map<String, String> labels;
        private InstanceTarget instance;
        private String name;
        private State9Enum state;
        private Long size;
        private Long blocksize;
        private List<BlockStorageSnapshotTarget> blockStorageSnapshots;
        private UUID id;
        private LocalDateTime createdAt;



        /**
         * Setter for labels.
         * @param  labels  Map of String, value for labels.
         * @return Builder
         */
        public Builder labels(Map<String, String> labels) {
            this.labels = labels;
            return this;
        }

        /**
         * Setter for instance.
         * @param  instance  InstanceTarget value for instance.
         * @return Builder
         */
        public Builder instance(InstanceTarget instance) {
            this.instance = instance;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  State9Enum value for state.
         * @return Builder
         */
        public Builder state(State9Enum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  Long value for size.
         * @return Builder
         */
        public Builder size(Long size) {
            this.size = size;
            return this;
        }

        /**
         * Setter for blocksize.
         * @param  blocksize  Long value for blocksize.
         * @return Builder
         */
        public Builder blocksize(Long blocksize) {
            this.blocksize = blocksize;
            return this;
        }

        /**
         * Setter for blockStorageSnapshots.
         * @param  blockStorageSnapshots  List of BlockStorageSnapshotTarget value for
         *         blockStorageSnapshots.
         * @return Builder
         */
        public Builder blockStorageSnapshots(
                List<BlockStorageSnapshotTarget> blockStorageSnapshots) {
            this.blockStorageSnapshots = blockStorageSnapshots;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  UUID value for id.
         * @return Builder
         */
        public Builder id(UUID id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Builds a new {@link BlockStorageVolume} object using the set fields.
         * @return {@link BlockStorageVolume}
         */
        public BlockStorageVolume build() {
            return new BlockStorageVolume(labels, instance, name, state, size, blocksize,
                    blockStorageSnapshots, id, createdAt);
        }
    }
}
