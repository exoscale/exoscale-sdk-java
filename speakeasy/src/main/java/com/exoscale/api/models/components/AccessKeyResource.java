/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * AccessKeyResource - Access key resource
 */

public class AccessKeyResource {

    /**
     * Resource domain
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    private Optional<? extends Domain> domain;

    /**
     * Resource type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource-type")
    private Optional<? extends ResourceType> resourceType;

    /**
     * Resource name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource-name")
    private Optional<? extends String> resourceName;

    public AccessKeyResource(
            @JsonProperty("domain") Optional<? extends Domain> domain,
            @JsonProperty("resource-type") Optional<? extends ResourceType> resourceType,
            @JsonProperty("resource-name") Optional<? extends String> resourceName) {
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(resourceType, "resourceType");
        Utils.checkNotNull(resourceName, "resourceName");
        this.domain = domain;
        this.resourceType = resourceType;
        this.resourceName = resourceName;
    }

    /**
     * Resource domain
     */
    public Optional<? extends Domain> domain() {
        return domain;
    }

    /**
     * Resource type
     */
    public Optional<? extends ResourceType> resourceType() {
        return resourceType;
    }

    /**
     * Resource name
     */
    public Optional<? extends String> resourceName() {
        return resourceName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Resource domain
     */
    public AccessKeyResource withDomain(Domain domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = Optional.ofNullable(domain);
        return this;
    }

    /**
     * Resource domain
     */
    public AccessKeyResource withDomain(Optional<? extends Domain> domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    /**
     * Resource type
     */
    public AccessKeyResource withResourceType(ResourceType resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = Optional.ofNullable(resourceType);
        return this;
    }

    /**
     * Resource type
     */
    public AccessKeyResource withResourceType(Optional<? extends ResourceType> resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Resource name
     */
    public AccessKeyResource withResourceName(String resourceName) {
        Utils.checkNotNull(resourceName, "resourceName");
        this.resourceName = Optional.ofNullable(resourceName);
        return this;
    }

    /**
     * Resource name
     */
    public AccessKeyResource withResourceName(Optional<? extends String> resourceName) {
        Utils.checkNotNull(resourceName, "resourceName");
        this.resourceName = resourceName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccessKeyResource other = (AccessKeyResource) o;
        return 
            java.util.Objects.deepEquals(this.domain, other.domain) &&
            java.util.Objects.deepEquals(this.resourceType, other.resourceType) &&
            java.util.Objects.deepEquals(this.resourceName, other.resourceName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            domain,
            resourceType,
            resourceName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccessKeyResource.class,
                "domain", domain,
                "resourceType", resourceType,
                "resourceName", resourceName);
    }
    
    public final static class Builder {
 
        private Optional<? extends Domain> domain = Optional.empty();
 
        private Optional<? extends ResourceType> resourceType = Optional.empty();
 
        private Optional<? extends String> resourceName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Resource domain
         */
        public Builder domain(Domain domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = Optional.ofNullable(domain);
            return this;
        }

        /**
         * Resource domain
         */
        public Builder domain(Optional<? extends Domain> domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        /**
         * Resource type
         */
        public Builder resourceType(ResourceType resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = Optional.ofNullable(resourceType);
            return this;
        }

        /**
         * Resource type
         */
        public Builder resourceType(Optional<? extends ResourceType> resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = resourceType;
            return this;
        }

        /**
         * Resource name
         */
        public Builder resourceName(String resourceName) {
            Utils.checkNotNull(resourceName, "resourceName");
            this.resourceName = Optional.ofNullable(resourceName);
            return this;
        }

        /**
         * Resource name
         */
        public Builder resourceName(Optional<? extends String> resourceName) {
            Utils.checkNotNull(resourceName, "resourceName");
            this.resourceName = resourceName;
            return this;
        }
        
        public AccessKeyResource build() {
            return new AccessKeyResource(
                domain,
                resourceType,
                resourceName);
        }
    }
}

