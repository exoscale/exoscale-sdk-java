/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DbaasPlan - DBaaS plan
 */

public class DbaasPlan {

    /**
     * DBaaS plan name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * DBaaS plan node count
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-count")
    private Optional<? extends Long> nodeCount;

    /**
     * DBaaS plan CPU count per node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-cpu-count")
    private Optional<? extends Long> nodeCpuCount;

    /**
     * DBaaS plan disk space
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disk-space")
    private Optional<? extends Long> diskSpace;

    /**
     * DBaaS plan memory count per node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-memory")
    private Optional<? extends Long> nodeMemory;

    /**
     * DBaaS plan max memory allocated percentage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max-memory-percent")
    private Optional<? extends Long> maxMemoryPercent;

    /**
     * DBaaS plan backup config
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup-config")
    private Optional<? extends DbaasBackupConfig> backupConfig;

    /**
     * Requires authorization or publicly available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorized")
    private Optional<? extends Boolean> authorized;

    public DbaasPlan(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("node-count") Optional<? extends Long> nodeCount,
            @JsonProperty("node-cpu-count") Optional<? extends Long> nodeCpuCount,
            @JsonProperty("disk-space") Optional<? extends Long> diskSpace,
            @JsonProperty("node-memory") Optional<? extends Long> nodeMemory,
            @JsonProperty("max-memory-percent") Optional<? extends Long> maxMemoryPercent,
            @JsonProperty("backup-config") Optional<? extends DbaasBackupConfig> backupConfig,
            @JsonProperty("authorized") Optional<? extends Boolean> authorized) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(nodeCount, "nodeCount");
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        Utils.checkNotNull(diskSpace, "diskSpace");
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        Utils.checkNotNull(maxMemoryPercent, "maxMemoryPercent");
        Utils.checkNotNull(backupConfig, "backupConfig");
        Utils.checkNotNull(authorized, "authorized");
        this.name = name;
        this.nodeCount = nodeCount;
        this.nodeCpuCount = nodeCpuCount;
        this.diskSpace = diskSpace;
        this.nodeMemory = nodeMemory;
        this.maxMemoryPercent = maxMemoryPercent;
        this.backupConfig = backupConfig;
        this.authorized = authorized;
    }

    /**
     * DBaaS plan name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * DBaaS plan node count
     */
    public Optional<? extends Long> nodeCount() {
        return nodeCount;
    }

    /**
     * DBaaS plan CPU count per node
     */
    public Optional<? extends Long> nodeCpuCount() {
        return nodeCpuCount;
    }

    /**
     * DBaaS plan disk space
     */
    public Optional<? extends Long> diskSpace() {
        return diskSpace;
    }

    /**
     * DBaaS plan memory count per node
     */
    public Optional<? extends Long> nodeMemory() {
        return nodeMemory;
    }

    /**
     * DBaaS plan max memory allocated percentage
     */
    public Optional<? extends Long> maxMemoryPercent() {
        return maxMemoryPercent;
    }

    /**
     * DBaaS plan backup config
     */
    public Optional<? extends DbaasBackupConfig> backupConfig() {
        return backupConfig;
    }

    /**
     * Requires authorization or publicly available
     */
    public Optional<? extends Boolean> authorized() {
        return authorized;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * DBaaS plan name
     */
    public DbaasPlan withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * DBaaS plan name
     */
    public DbaasPlan withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * DBaaS plan node count
     */
    public DbaasPlan withNodeCount(long nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = Optional.ofNullable(nodeCount);
        return this;
    }

    /**
     * DBaaS plan node count
     */
    public DbaasPlan withNodeCount(Optional<? extends Long> nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * DBaaS plan CPU count per node
     */
    public DbaasPlan withNodeCpuCount(long nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
        return this;
    }

    /**
     * DBaaS plan CPU count per node
     */
    public DbaasPlan withNodeCpuCount(Optional<? extends Long> nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = nodeCpuCount;
        return this;
    }

    /**
     * DBaaS plan disk space
     */
    public DbaasPlan withDiskSpace(long diskSpace) {
        Utils.checkNotNull(diskSpace, "diskSpace");
        this.diskSpace = Optional.ofNullable(diskSpace);
        return this;
    }

    /**
     * DBaaS plan disk space
     */
    public DbaasPlan withDiskSpace(Optional<? extends Long> diskSpace) {
        Utils.checkNotNull(diskSpace, "diskSpace");
        this.diskSpace = diskSpace;
        return this;
    }

    /**
     * DBaaS plan memory count per node
     */
    public DbaasPlan withNodeMemory(long nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = Optional.ofNullable(nodeMemory);
        return this;
    }

    /**
     * DBaaS plan memory count per node
     */
    public DbaasPlan withNodeMemory(Optional<? extends Long> nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = nodeMemory;
        return this;
    }

    /**
     * DBaaS plan max memory allocated percentage
     */
    public DbaasPlan withMaxMemoryPercent(long maxMemoryPercent) {
        Utils.checkNotNull(maxMemoryPercent, "maxMemoryPercent");
        this.maxMemoryPercent = Optional.ofNullable(maxMemoryPercent);
        return this;
    }

    /**
     * DBaaS plan max memory allocated percentage
     */
    public DbaasPlan withMaxMemoryPercent(Optional<? extends Long> maxMemoryPercent) {
        Utils.checkNotNull(maxMemoryPercent, "maxMemoryPercent");
        this.maxMemoryPercent = maxMemoryPercent;
        return this;
    }

    /**
     * DBaaS plan backup config
     */
    public DbaasPlan withBackupConfig(DbaasBackupConfig backupConfig) {
        Utils.checkNotNull(backupConfig, "backupConfig");
        this.backupConfig = Optional.ofNullable(backupConfig);
        return this;
    }

    /**
     * DBaaS plan backup config
     */
    public DbaasPlan withBackupConfig(Optional<? extends DbaasBackupConfig> backupConfig) {
        Utils.checkNotNull(backupConfig, "backupConfig");
        this.backupConfig = backupConfig;
        return this;
    }

    /**
     * Requires authorization or publicly available
     */
    public DbaasPlan withAuthorized(boolean authorized) {
        Utils.checkNotNull(authorized, "authorized");
        this.authorized = Optional.ofNullable(authorized);
        return this;
    }

    /**
     * Requires authorization or publicly available
     */
    public DbaasPlan withAuthorized(Optional<? extends Boolean> authorized) {
        Utils.checkNotNull(authorized, "authorized");
        this.authorized = authorized;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasPlan other = (DbaasPlan) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.nodeCount, other.nodeCount) &&
            java.util.Objects.deepEquals(this.nodeCpuCount, other.nodeCpuCount) &&
            java.util.Objects.deepEquals(this.diskSpace, other.diskSpace) &&
            java.util.Objects.deepEquals(this.nodeMemory, other.nodeMemory) &&
            java.util.Objects.deepEquals(this.maxMemoryPercent, other.maxMemoryPercent) &&
            java.util.Objects.deepEquals(this.backupConfig, other.backupConfig) &&
            java.util.Objects.deepEquals(this.authorized, other.authorized);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            nodeCount,
            nodeCpuCount,
            diskSpace,
            nodeMemory,
            maxMemoryPercent,
            backupConfig,
            authorized);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasPlan.class,
                "name", name,
                "nodeCount", nodeCount,
                "nodeCpuCount", nodeCpuCount,
                "diskSpace", diskSpace,
                "nodeMemory", nodeMemory,
                "maxMemoryPercent", maxMemoryPercent,
                "backupConfig", backupConfig,
                "authorized", authorized);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends Long> nodeCount = Optional.empty();
 
        private Optional<? extends Long> nodeCpuCount = Optional.empty();
 
        private Optional<? extends Long> diskSpace = Optional.empty();
 
        private Optional<? extends Long> nodeMemory = Optional.empty();
 
        private Optional<? extends Long> maxMemoryPercent = Optional.empty();
 
        private Optional<? extends DbaasBackupConfig> backupConfig = Optional.empty();
 
        private Optional<? extends Boolean> authorized = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * DBaaS plan name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * DBaaS plan name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * DBaaS plan node count
         */
        public Builder nodeCount(long nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = Optional.ofNullable(nodeCount);
            return this;
        }

        /**
         * DBaaS plan node count
         */
        public Builder nodeCount(Optional<? extends Long> nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = nodeCount;
            return this;
        }

        /**
         * DBaaS plan CPU count per node
         */
        public Builder nodeCpuCount(long nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
            return this;
        }

        /**
         * DBaaS plan CPU count per node
         */
        public Builder nodeCpuCount(Optional<? extends Long> nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = nodeCpuCount;
            return this;
        }

        /**
         * DBaaS plan disk space
         */
        public Builder diskSpace(long diskSpace) {
            Utils.checkNotNull(diskSpace, "diskSpace");
            this.diskSpace = Optional.ofNullable(diskSpace);
            return this;
        }

        /**
         * DBaaS plan disk space
         */
        public Builder diskSpace(Optional<? extends Long> diskSpace) {
            Utils.checkNotNull(diskSpace, "diskSpace");
            this.diskSpace = diskSpace;
            return this;
        }

        /**
         * DBaaS plan memory count per node
         */
        public Builder nodeMemory(long nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = Optional.ofNullable(nodeMemory);
            return this;
        }

        /**
         * DBaaS plan memory count per node
         */
        public Builder nodeMemory(Optional<? extends Long> nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = nodeMemory;
            return this;
        }

        /**
         * DBaaS plan max memory allocated percentage
         */
        public Builder maxMemoryPercent(long maxMemoryPercent) {
            Utils.checkNotNull(maxMemoryPercent, "maxMemoryPercent");
            this.maxMemoryPercent = Optional.ofNullable(maxMemoryPercent);
            return this;
        }

        /**
         * DBaaS plan max memory allocated percentage
         */
        public Builder maxMemoryPercent(Optional<? extends Long> maxMemoryPercent) {
            Utils.checkNotNull(maxMemoryPercent, "maxMemoryPercent");
            this.maxMemoryPercent = maxMemoryPercent;
            return this;
        }

        /**
         * DBaaS plan backup config
         */
        public Builder backupConfig(DbaasBackupConfig backupConfig) {
            Utils.checkNotNull(backupConfig, "backupConfig");
            this.backupConfig = Optional.ofNullable(backupConfig);
            return this;
        }

        /**
         * DBaaS plan backup config
         */
        public Builder backupConfig(Optional<? extends DbaasBackupConfig> backupConfig) {
            Utils.checkNotNull(backupConfig, "backupConfig");
            this.backupConfig = backupConfig;
            return this;
        }

        /**
         * Requires authorization or publicly available
         */
        public Builder authorized(boolean authorized) {
            Utils.checkNotNull(authorized, "authorized");
            this.authorized = Optional.ofNullable(authorized);
            return this;
        }

        /**
         * Requires authorization or publicly available
         */
        public Builder authorized(Optional<? extends Boolean> authorized) {
            Utils.checkNotNull(authorized, "authorized");
            this.authorized = authorized;
            return this;
        }
        
        public DbaasPlan build() {
            return new DbaasPlan(
                name,
                nodeCount,
                nodeCpuCount,
                diskSpace,
                nodeMemory,
                maxMemoryPercent,
                backupConfig,
                authorized);
        }
    }
}

