/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * SosBucketUsage - SOS Bucket usage
 */

public class SosBucketUsage {

    /**
     * SOS Bucket name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * SOS Bucket creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone-name")
    private Optional<? extends ZoneName> zoneName;

    /**
     * SOS Bucket size in B
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Long> size;

    public SosBucketUsage(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("zone-name") Optional<? extends ZoneName> zoneName,
            @JsonProperty("size") Optional<? extends Long> size) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(zoneName, "zoneName");
        Utils.checkNotNull(size, "size");
        this.name = name;
        this.createdAt = createdAt;
        this.zoneName = zoneName;
        this.size = size;
    }

    /**
     * SOS Bucket name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * SOS Bucket creation date
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    public Optional<? extends ZoneName> zoneName() {
        return zoneName;
    }

    /**
     * SOS Bucket size in B
     */
    public Optional<? extends Long> size() {
        return size;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * SOS Bucket name
     */
    public SosBucketUsage withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * SOS Bucket name
     */
    public SosBucketUsage withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * SOS Bucket creation date
     */
    public SosBucketUsage withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * SOS Bucket creation date
     */
    public SosBucketUsage withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public SosBucketUsage withZoneName(ZoneName zoneName) {
        Utils.checkNotNull(zoneName, "zoneName");
        this.zoneName = Optional.ofNullable(zoneName);
        return this;
    }

    public SosBucketUsage withZoneName(Optional<? extends ZoneName> zoneName) {
        Utils.checkNotNull(zoneName, "zoneName");
        this.zoneName = zoneName;
        return this;
    }

    /**
     * SOS Bucket size in B
     */
    public SosBucketUsage withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * SOS Bucket size in B
     */
    public SosBucketUsage withSize(Optional<? extends Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SosBucketUsage other = (SosBucketUsage) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.zoneName, other.zoneName) &&
            java.util.Objects.deepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            createdAt,
            zoneName,
            size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SosBucketUsage.class,
                "name", name,
                "createdAt", createdAt,
                "zoneName", zoneName,
                "size", size);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends ZoneName> zoneName = Optional.empty();
 
        private Optional<? extends Long> size = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * SOS Bucket name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * SOS Bucket name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * SOS Bucket creation date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * SOS Bucket creation date
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder zoneName(ZoneName zoneName) {
            Utils.checkNotNull(zoneName, "zoneName");
            this.zoneName = Optional.ofNullable(zoneName);
            return this;
        }

        public Builder zoneName(Optional<? extends ZoneName> zoneName) {
            Utils.checkNotNull(zoneName, "zoneName");
            this.zoneName = zoneName;
            return this;
        }

        /**
         * SOS Bucket size in B
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * SOS Bucket size in B
         */
        public Builder size(Optional<? extends Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }
        
        public SosBucketUsage build() {
            return new SosBucketUsage(
                name,
                createdAt,
                zoneName,
                size);
        }
    }
}

