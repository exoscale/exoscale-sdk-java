/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateSksNodepoolRequestBody {

    /**
     * Nodepool Anti-affinity Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anti-affinity-groups")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups;

    /**
     * Nodepool description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taints")
    private Optional<? extends java.util.Map<String, com.exoscale.api.models.components.SksNodepoolTaint>> taints;

    /**
     * Nodepool Security Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security-groups")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups;

    /**
     * Nodepool name
     */
    @JsonProperty("name")
    private String name;

    /**
     * Compute instance type
     */
    @JsonProperty("instance-type")
    private com.exoscale.api.models.components.InstanceTypeInput instanceType;

    /**
     * Nodepool Private Networks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private-networks")
    private Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetworkInput>> privateNetworks;

    /**
     * Number of instances
     */
    @JsonProperty("size")
    private long size;

    /**
     * Kubelet image GC options
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kubelet-image-gc")
    private Optional<? extends com.exoscale.api.models.components.KubeletImageGc> kubeletImageGc;

    /**
     * Prefix to apply to instances names (default: pool)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance-prefix")
    private Optional<? extends String> instancePrefix;

    /**
     * Deploy target
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deploy-target")
    private Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget;

    /**
     * Nodepool addons
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addons")
    private Optional<? extends java.util.List<CreateSksNodepoolAddons>> addons;

    /**
     * Nodepool instances disk size in GB
     */
    @JsonProperty("disk-size")
    private long diskSize;

    public CreateSksNodepoolRequestBody(
            @JsonProperty("anti-affinity-groups") Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("taints") Optional<? extends java.util.Map<String, com.exoscale.api.models.components.SksNodepoolTaint>> taints,
            @JsonProperty("security-groups") Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups,
            @JsonProperty("name") String name,
            @JsonProperty("instance-type") com.exoscale.api.models.components.InstanceTypeInput instanceType,
            @JsonProperty("private-networks") Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetworkInput>> privateNetworks,
            @JsonProperty("size") long size,
            @JsonProperty("kubelet-image-gc") Optional<? extends com.exoscale.api.models.components.KubeletImageGc> kubeletImageGc,
            @JsonProperty("instance-prefix") Optional<? extends String> instancePrefix,
            @JsonProperty("deploy-target") Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget,
            @JsonProperty("addons") Optional<? extends java.util.List<CreateSksNodepoolAddons>> addons,
            @JsonProperty("disk-size") long diskSize) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(taints, "taints");
        Utils.checkNotNull(securityGroups, "securityGroups");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(instanceType, "instanceType");
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(kubeletImageGc, "kubeletImageGc");
        Utils.checkNotNull(instancePrefix, "instancePrefix");
        Utils.checkNotNull(deployTarget, "deployTarget");
        Utils.checkNotNull(addons, "addons");
        Utils.checkNotNull(diskSize, "diskSize");
        this.antiAffinityGroups = antiAffinityGroups;
        this.description = description;
        this.labels = labels;
        this.taints = taints;
        this.securityGroups = securityGroups;
        this.name = name;
        this.instanceType = instanceType;
        this.privateNetworks = privateNetworks;
        this.size = size;
        this.kubeletImageGc = kubeletImageGc;
        this.instancePrefix = instancePrefix;
        this.deployTarget = deployTarget;
        this.addons = addons;
        this.diskSize = diskSize;
    }

    /**
     * Nodepool Anti-affinity Groups
     */
    public Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups() {
        return antiAffinityGroups;
    }

    /**
     * Nodepool description
     */
    public Optional<? extends String> description() {
        return description;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    public Optional<? extends java.util.Map<String, com.exoscale.api.models.components.SksNodepoolTaint>> taints() {
        return taints;
    }

    /**
     * Nodepool Security Groups
     */
    public Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups() {
        return securityGroups;
    }

    /**
     * Nodepool name
     */
    public String name() {
        return name;
    }

    /**
     * Compute instance type
     */
    public com.exoscale.api.models.components.InstanceTypeInput instanceType() {
        return instanceType;
    }

    /**
     * Nodepool Private Networks
     */
    public Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetworkInput>> privateNetworks() {
        return privateNetworks;
    }

    /**
     * Number of instances
     */
    public long size() {
        return size;
    }

    /**
     * Kubelet image GC options
     */
    public Optional<? extends com.exoscale.api.models.components.KubeletImageGc> kubeletImageGc() {
        return kubeletImageGc;
    }

    /**
     * Prefix to apply to instances names (default: pool)
     */
    public Optional<? extends String> instancePrefix() {
        return instancePrefix;
    }

    /**
     * Deploy target
     */
    public Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget() {
        return deployTarget;
    }

    /**
     * Nodepool addons
     */
    public Optional<? extends java.util.List<CreateSksNodepoolAddons>> addons() {
        return addons;
    }

    /**
     * Nodepool instances disk size in GB
     */
    public long diskSize() {
        return diskSize;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Nodepool Anti-affinity Groups
     */
    public CreateSksNodepoolRequestBody withAntiAffinityGroups(java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput> antiAffinityGroups) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        this.antiAffinityGroups = Optional.ofNullable(antiAffinityGroups);
        return this;
    }

    /**
     * Nodepool Anti-affinity Groups
     */
    public CreateSksNodepoolRequestBody withAntiAffinityGroups(Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        this.antiAffinityGroups = antiAffinityGroups;
        return this;
    }

    /**
     * Nodepool description
     */
    public CreateSksNodepoolRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Nodepool description
     */
    public CreateSksNodepoolRequestBody withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public CreateSksNodepoolRequestBody withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public CreateSksNodepoolRequestBody withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    public CreateSksNodepoolRequestBody withTaints(java.util.Map<String, com.exoscale.api.models.components.SksNodepoolTaint> taints) {
        Utils.checkNotNull(taints, "taints");
        this.taints = Optional.ofNullable(taints);
        return this;
    }

    public CreateSksNodepoolRequestBody withTaints(Optional<? extends java.util.Map<String, com.exoscale.api.models.components.SksNodepoolTaint>> taints) {
        Utils.checkNotNull(taints, "taints");
        this.taints = taints;
        return this;
    }

    /**
     * Nodepool Security Groups
     */
    public CreateSksNodepoolRequestBody withSecurityGroups(java.util.List<com.exoscale.api.models.components.SecurityGroupInput> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = Optional.ofNullable(securityGroups);
        return this;
    }

    /**
     * Nodepool Security Groups
     */
    public CreateSksNodepoolRequestBody withSecurityGroups(Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Nodepool name
     */
    public CreateSksNodepoolRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Compute instance type
     */
    public CreateSksNodepoolRequestBody withInstanceType(com.exoscale.api.models.components.InstanceTypeInput instanceType) {
        Utils.checkNotNull(instanceType, "instanceType");
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Nodepool Private Networks
     */
    public CreateSksNodepoolRequestBody withPrivateNetworks(java.util.List<com.exoscale.api.models.components.PrivateNetworkInput> privateNetworks) {
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        this.privateNetworks = Optional.ofNullable(privateNetworks);
        return this;
    }

    /**
     * Nodepool Private Networks
     */
    public CreateSksNodepoolRequestBody withPrivateNetworks(Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetworkInput>> privateNetworks) {
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        this.privateNetworks = privateNetworks;
        return this;
    }

    /**
     * Number of instances
     */
    public CreateSksNodepoolRequestBody withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Kubelet image GC options
     */
    public CreateSksNodepoolRequestBody withKubeletImageGc(com.exoscale.api.models.components.KubeletImageGc kubeletImageGc) {
        Utils.checkNotNull(kubeletImageGc, "kubeletImageGc");
        this.kubeletImageGc = Optional.ofNullable(kubeletImageGc);
        return this;
    }

    /**
     * Kubelet image GC options
     */
    public CreateSksNodepoolRequestBody withKubeletImageGc(Optional<? extends com.exoscale.api.models.components.KubeletImageGc> kubeletImageGc) {
        Utils.checkNotNull(kubeletImageGc, "kubeletImageGc");
        this.kubeletImageGc = kubeletImageGc;
        return this;
    }

    /**
     * Prefix to apply to instances names (default: pool)
     */
    public CreateSksNodepoolRequestBody withInstancePrefix(String instancePrefix) {
        Utils.checkNotNull(instancePrefix, "instancePrefix");
        this.instancePrefix = Optional.ofNullable(instancePrefix);
        return this;
    }

    /**
     * Prefix to apply to instances names (default: pool)
     */
    public CreateSksNodepoolRequestBody withInstancePrefix(Optional<? extends String> instancePrefix) {
        Utils.checkNotNull(instancePrefix, "instancePrefix");
        this.instancePrefix = instancePrefix;
        return this;
    }

    /**
     * Deploy target
     */
    public CreateSksNodepoolRequestBody withDeployTarget(com.exoscale.api.models.components.DeployTarget deployTarget) {
        Utils.checkNotNull(deployTarget, "deployTarget");
        this.deployTarget = Optional.ofNullable(deployTarget);
        return this;
    }

    /**
     * Deploy target
     */
    public CreateSksNodepoolRequestBody withDeployTarget(Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget) {
        Utils.checkNotNull(deployTarget, "deployTarget");
        this.deployTarget = deployTarget;
        return this;
    }

    /**
     * Nodepool addons
     */
    public CreateSksNodepoolRequestBody withAddons(java.util.List<CreateSksNodepoolAddons> addons) {
        Utils.checkNotNull(addons, "addons");
        this.addons = Optional.ofNullable(addons);
        return this;
    }

    /**
     * Nodepool addons
     */
    public CreateSksNodepoolRequestBody withAddons(Optional<? extends java.util.List<CreateSksNodepoolAddons>> addons) {
        Utils.checkNotNull(addons, "addons");
        this.addons = addons;
        return this;
    }

    /**
     * Nodepool instances disk size in GB
     */
    public CreateSksNodepoolRequestBody withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSksNodepoolRequestBody other = (CreateSksNodepoolRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.antiAffinityGroups, other.antiAffinityGroups) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.taints, other.taints) &&
            java.util.Objects.deepEquals(this.securityGroups, other.securityGroups) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.instanceType, other.instanceType) &&
            java.util.Objects.deepEquals(this.privateNetworks, other.privateNetworks) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.kubeletImageGc, other.kubeletImageGc) &&
            java.util.Objects.deepEquals(this.instancePrefix, other.instancePrefix) &&
            java.util.Objects.deepEquals(this.deployTarget, other.deployTarget) &&
            java.util.Objects.deepEquals(this.addons, other.addons) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            antiAffinityGroups,
            description,
            labels,
            taints,
            securityGroups,
            name,
            instanceType,
            privateNetworks,
            size,
            kubeletImageGc,
            instancePrefix,
            deployTarget,
            addons,
            diskSize);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateSksNodepoolRequestBody.class,
                "antiAffinityGroups", antiAffinityGroups,
                "description", description,
                "labels", labels,
                "taints", taints,
                "securityGroups", securityGroups,
                "name", name,
                "instanceType", instanceType,
                "privateNetworks", privateNetworks,
                "size", size,
                "kubeletImageGc", kubeletImageGc,
                "instancePrefix", instancePrefix,
                "deployTarget", deployTarget,
                "addons", addons,
                "diskSize", diskSize);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends java.util.Map<String, com.exoscale.api.models.components.SksNodepoolTaint>> taints = Optional.empty();
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups = Optional.empty();
 
        private String name;
 
        private com.exoscale.api.models.components.InstanceTypeInput instanceType;
 
        private Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetworkInput>> privateNetworks = Optional.empty();
 
        private Long size;
 
        private Optional<? extends com.exoscale.api.models.components.KubeletImageGc> kubeletImageGc = Optional.empty();
 
        private Optional<? extends String> instancePrefix = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget = Optional.empty();
 
        private Optional<? extends java.util.List<CreateSksNodepoolAddons>> addons = Optional.empty();
 
        private Long diskSize;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Nodepool Anti-affinity Groups
         */
        public Builder antiAffinityGroups(java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput> antiAffinityGroups) {
            Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
            this.antiAffinityGroups = Optional.ofNullable(antiAffinityGroups);
            return this;
        }

        /**
         * Nodepool Anti-affinity Groups
         */
        public Builder antiAffinityGroups(Optional<? extends java.util.List<com.exoscale.api.models.components.AntiAffinityGroupInput>> antiAffinityGroups) {
            Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
            this.antiAffinityGroups = antiAffinityGroups;
            return this;
        }

        /**
         * Nodepool description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Nodepool description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        public Builder taints(java.util.Map<String, com.exoscale.api.models.components.SksNodepoolTaint> taints) {
            Utils.checkNotNull(taints, "taints");
            this.taints = Optional.ofNullable(taints);
            return this;
        }

        public Builder taints(Optional<? extends java.util.Map<String, com.exoscale.api.models.components.SksNodepoolTaint>> taints) {
            Utils.checkNotNull(taints, "taints");
            this.taints = taints;
            return this;
        }

        /**
         * Nodepool Security Groups
         */
        public Builder securityGroups(java.util.List<com.exoscale.api.models.components.SecurityGroupInput> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = Optional.ofNullable(securityGroups);
            return this;
        }

        /**
         * Nodepool Security Groups
         */
        public Builder securityGroups(Optional<? extends java.util.List<com.exoscale.api.models.components.SecurityGroupInput>> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = securityGroups;
            return this;
        }

        /**
         * Nodepool name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Compute instance type
         */
        public Builder instanceType(com.exoscale.api.models.components.InstanceTypeInput instanceType) {
            Utils.checkNotNull(instanceType, "instanceType");
            this.instanceType = instanceType;
            return this;
        }

        /**
         * Nodepool Private Networks
         */
        public Builder privateNetworks(java.util.List<com.exoscale.api.models.components.PrivateNetworkInput> privateNetworks) {
            Utils.checkNotNull(privateNetworks, "privateNetworks");
            this.privateNetworks = Optional.ofNullable(privateNetworks);
            return this;
        }

        /**
         * Nodepool Private Networks
         */
        public Builder privateNetworks(Optional<? extends java.util.List<com.exoscale.api.models.components.PrivateNetworkInput>> privateNetworks) {
            Utils.checkNotNull(privateNetworks, "privateNetworks");
            this.privateNetworks = privateNetworks;
            return this;
        }

        /**
         * Number of instances
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * Kubelet image GC options
         */
        public Builder kubeletImageGc(com.exoscale.api.models.components.KubeletImageGc kubeletImageGc) {
            Utils.checkNotNull(kubeletImageGc, "kubeletImageGc");
            this.kubeletImageGc = Optional.ofNullable(kubeletImageGc);
            return this;
        }

        /**
         * Kubelet image GC options
         */
        public Builder kubeletImageGc(Optional<? extends com.exoscale.api.models.components.KubeletImageGc> kubeletImageGc) {
            Utils.checkNotNull(kubeletImageGc, "kubeletImageGc");
            this.kubeletImageGc = kubeletImageGc;
            return this;
        }

        /**
         * Prefix to apply to instances names (default: pool)
         */
        public Builder instancePrefix(String instancePrefix) {
            Utils.checkNotNull(instancePrefix, "instancePrefix");
            this.instancePrefix = Optional.ofNullable(instancePrefix);
            return this;
        }

        /**
         * Prefix to apply to instances names (default: pool)
         */
        public Builder instancePrefix(Optional<? extends String> instancePrefix) {
            Utils.checkNotNull(instancePrefix, "instancePrefix");
            this.instancePrefix = instancePrefix;
            return this;
        }

        /**
         * Deploy target
         */
        public Builder deployTarget(com.exoscale.api.models.components.DeployTarget deployTarget) {
            Utils.checkNotNull(deployTarget, "deployTarget");
            this.deployTarget = Optional.ofNullable(deployTarget);
            return this;
        }

        /**
         * Deploy target
         */
        public Builder deployTarget(Optional<? extends com.exoscale.api.models.components.DeployTarget> deployTarget) {
            Utils.checkNotNull(deployTarget, "deployTarget");
            this.deployTarget = deployTarget;
            return this;
        }

        /**
         * Nodepool addons
         */
        public Builder addons(java.util.List<CreateSksNodepoolAddons> addons) {
            Utils.checkNotNull(addons, "addons");
            this.addons = Optional.ofNullable(addons);
            return this;
        }

        /**
         * Nodepool addons
         */
        public Builder addons(Optional<? extends java.util.List<CreateSksNodepoolAddons>> addons) {
            Utils.checkNotNull(addons, "addons");
            this.addons = addons;
            return this;
        }

        /**
         * Nodepool instances disk size in GB
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }
        
        public CreateSksNodepoolRequestBody build() {
            return new CreateSksNodepoolRequestBody(
                antiAffinityGroups,
                description,
                labels,
                taints,
                securityGroups,
                name,
                instanceType,
                privateNetworks,
                size,
                kubeletImageGc,
                instancePrefix,
                deployTarget,
                addons,
                diskSize);
        }
    }
}

