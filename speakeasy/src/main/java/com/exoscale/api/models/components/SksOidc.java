/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * SksOidc - SKS Cluster OpenID config map
 */

public class SksOidc {

    /**
     * OpenID client ID
     */
    @JsonProperty("client-id")
    private String clientId;

    /**
     * OpenID provider URL
     */
    @JsonProperty("issuer-url")
    private String issuerUrl;

    /**
     * JWT claim to use as the user name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username-claim")
    private Optional<? extends String> usernameClaim;

    /**
     * Prefix prepended to username claims
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username-prefix")
    private Optional<? extends String> usernamePrefix;

    /**
     * JWT claim to use as the user's group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups-claim")
    private Optional<? extends String> groupsClaim;

    /**
     * Prefix prepended to group claims
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups-prefix")
    private Optional<? extends String> groupsPrefix;

    /**
     * A key value map that describes a required claim in the ID Token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required-claim")
    private Optional<? extends java.util.Map<String, String>> requiredClaim;

    public SksOidc(
            @JsonProperty("client-id") String clientId,
            @JsonProperty("issuer-url") String issuerUrl,
            @JsonProperty("username-claim") Optional<? extends String> usernameClaim,
            @JsonProperty("username-prefix") Optional<? extends String> usernamePrefix,
            @JsonProperty("groups-claim") Optional<? extends String> groupsClaim,
            @JsonProperty("groups-prefix") Optional<? extends String> groupsPrefix,
            @JsonProperty("required-claim") Optional<? extends java.util.Map<String, String>> requiredClaim) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(issuerUrl, "issuerUrl");
        Utils.checkNotNull(usernameClaim, "usernameClaim");
        Utils.checkNotNull(usernamePrefix, "usernamePrefix");
        Utils.checkNotNull(groupsClaim, "groupsClaim");
        Utils.checkNotNull(groupsPrefix, "groupsPrefix");
        Utils.checkNotNull(requiredClaim, "requiredClaim");
        this.clientId = clientId;
        this.issuerUrl = issuerUrl;
        this.usernameClaim = usernameClaim;
        this.usernamePrefix = usernamePrefix;
        this.groupsClaim = groupsClaim;
        this.groupsPrefix = groupsPrefix;
        this.requiredClaim = requiredClaim;
    }

    /**
     * OpenID client ID
     */
    public String clientId() {
        return clientId;
    }

    /**
     * OpenID provider URL
     */
    public String issuerUrl() {
        return issuerUrl;
    }

    /**
     * JWT claim to use as the user name
     */
    public Optional<? extends String> usernameClaim() {
        return usernameClaim;
    }

    /**
     * Prefix prepended to username claims
     */
    public Optional<? extends String> usernamePrefix() {
        return usernamePrefix;
    }

    /**
     * JWT claim to use as the user's group
     */
    public Optional<? extends String> groupsClaim() {
        return groupsClaim;
    }

    /**
     * Prefix prepended to group claims
     */
    public Optional<? extends String> groupsPrefix() {
        return groupsPrefix;
    }

    /**
     * A key value map that describes a required claim in the ID Token
     */
    public Optional<? extends java.util.Map<String, String>> requiredClaim() {
        return requiredClaim;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * OpenID client ID
     */
    public SksOidc withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * OpenID provider URL
     */
    public SksOidc withIssuerUrl(String issuerUrl) {
        Utils.checkNotNull(issuerUrl, "issuerUrl");
        this.issuerUrl = issuerUrl;
        return this;
    }

    /**
     * JWT claim to use as the user name
     */
    public SksOidc withUsernameClaim(String usernameClaim) {
        Utils.checkNotNull(usernameClaim, "usernameClaim");
        this.usernameClaim = Optional.ofNullable(usernameClaim);
        return this;
    }

    /**
     * JWT claim to use as the user name
     */
    public SksOidc withUsernameClaim(Optional<? extends String> usernameClaim) {
        Utils.checkNotNull(usernameClaim, "usernameClaim");
        this.usernameClaim = usernameClaim;
        return this;
    }

    /**
     * Prefix prepended to username claims
     */
    public SksOidc withUsernamePrefix(String usernamePrefix) {
        Utils.checkNotNull(usernamePrefix, "usernamePrefix");
        this.usernamePrefix = Optional.ofNullable(usernamePrefix);
        return this;
    }

    /**
     * Prefix prepended to username claims
     */
    public SksOidc withUsernamePrefix(Optional<? extends String> usernamePrefix) {
        Utils.checkNotNull(usernamePrefix, "usernamePrefix");
        this.usernamePrefix = usernamePrefix;
        return this;
    }

    /**
     * JWT claim to use as the user's group
     */
    public SksOidc withGroupsClaim(String groupsClaim) {
        Utils.checkNotNull(groupsClaim, "groupsClaim");
        this.groupsClaim = Optional.ofNullable(groupsClaim);
        return this;
    }

    /**
     * JWT claim to use as the user's group
     */
    public SksOidc withGroupsClaim(Optional<? extends String> groupsClaim) {
        Utils.checkNotNull(groupsClaim, "groupsClaim");
        this.groupsClaim = groupsClaim;
        return this;
    }

    /**
     * Prefix prepended to group claims
     */
    public SksOidc withGroupsPrefix(String groupsPrefix) {
        Utils.checkNotNull(groupsPrefix, "groupsPrefix");
        this.groupsPrefix = Optional.ofNullable(groupsPrefix);
        return this;
    }

    /**
     * Prefix prepended to group claims
     */
    public SksOidc withGroupsPrefix(Optional<? extends String> groupsPrefix) {
        Utils.checkNotNull(groupsPrefix, "groupsPrefix");
        this.groupsPrefix = groupsPrefix;
        return this;
    }

    /**
     * A key value map that describes a required claim in the ID Token
     */
    public SksOidc withRequiredClaim(java.util.Map<String, String> requiredClaim) {
        Utils.checkNotNull(requiredClaim, "requiredClaim");
        this.requiredClaim = Optional.ofNullable(requiredClaim);
        return this;
    }

    /**
     * A key value map that describes a required claim in the ID Token
     */
    public SksOidc withRequiredClaim(Optional<? extends java.util.Map<String, String>> requiredClaim) {
        Utils.checkNotNull(requiredClaim, "requiredClaim");
        this.requiredClaim = requiredClaim;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SksOidc other = (SksOidc) o;
        return 
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.issuerUrl, other.issuerUrl) &&
            java.util.Objects.deepEquals(this.usernameClaim, other.usernameClaim) &&
            java.util.Objects.deepEquals(this.usernamePrefix, other.usernamePrefix) &&
            java.util.Objects.deepEquals(this.groupsClaim, other.groupsClaim) &&
            java.util.Objects.deepEquals(this.groupsPrefix, other.groupsPrefix) &&
            java.util.Objects.deepEquals(this.requiredClaim, other.requiredClaim);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            clientId,
            issuerUrl,
            usernameClaim,
            usernamePrefix,
            groupsClaim,
            groupsPrefix,
            requiredClaim);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SksOidc.class,
                "clientId", clientId,
                "issuerUrl", issuerUrl,
                "usernameClaim", usernameClaim,
                "usernamePrefix", usernamePrefix,
                "groupsClaim", groupsClaim,
                "groupsPrefix", groupsPrefix,
                "requiredClaim", requiredClaim);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String issuerUrl;
 
        private Optional<? extends String> usernameClaim = Optional.empty();
 
        private Optional<? extends String> usernamePrefix = Optional.empty();
 
        private Optional<? extends String> groupsClaim = Optional.empty();
 
        private Optional<? extends String> groupsPrefix = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> requiredClaim = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * OpenID client ID
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * OpenID provider URL
         */
        public Builder issuerUrl(String issuerUrl) {
            Utils.checkNotNull(issuerUrl, "issuerUrl");
            this.issuerUrl = issuerUrl;
            return this;
        }

        /**
         * JWT claim to use as the user name
         */
        public Builder usernameClaim(String usernameClaim) {
            Utils.checkNotNull(usernameClaim, "usernameClaim");
            this.usernameClaim = Optional.ofNullable(usernameClaim);
            return this;
        }

        /**
         * JWT claim to use as the user name
         */
        public Builder usernameClaim(Optional<? extends String> usernameClaim) {
            Utils.checkNotNull(usernameClaim, "usernameClaim");
            this.usernameClaim = usernameClaim;
            return this;
        }

        /**
         * Prefix prepended to username claims
         */
        public Builder usernamePrefix(String usernamePrefix) {
            Utils.checkNotNull(usernamePrefix, "usernamePrefix");
            this.usernamePrefix = Optional.ofNullable(usernamePrefix);
            return this;
        }

        /**
         * Prefix prepended to username claims
         */
        public Builder usernamePrefix(Optional<? extends String> usernamePrefix) {
            Utils.checkNotNull(usernamePrefix, "usernamePrefix");
            this.usernamePrefix = usernamePrefix;
            return this;
        }

        /**
         * JWT claim to use as the user's group
         */
        public Builder groupsClaim(String groupsClaim) {
            Utils.checkNotNull(groupsClaim, "groupsClaim");
            this.groupsClaim = Optional.ofNullable(groupsClaim);
            return this;
        }

        /**
         * JWT claim to use as the user's group
         */
        public Builder groupsClaim(Optional<? extends String> groupsClaim) {
            Utils.checkNotNull(groupsClaim, "groupsClaim");
            this.groupsClaim = groupsClaim;
            return this;
        }

        /**
         * Prefix prepended to group claims
         */
        public Builder groupsPrefix(String groupsPrefix) {
            Utils.checkNotNull(groupsPrefix, "groupsPrefix");
            this.groupsPrefix = Optional.ofNullable(groupsPrefix);
            return this;
        }

        /**
         * Prefix prepended to group claims
         */
        public Builder groupsPrefix(Optional<? extends String> groupsPrefix) {
            Utils.checkNotNull(groupsPrefix, "groupsPrefix");
            this.groupsPrefix = groupsPrefix;
            return this;
        }

        /**
         * A key value map that describes a required claim in the ID Token
         */
        public Builder requiredClaim(java.util.Map<String, String> requiredClaim) {
            Utils.checkNotNull(requiredClaim, "requiredClaim");
            this.requiredClaim = Optional.ofNullable(requiredClaim);
            return this;
        }

        /**
         * A key value map that describes a required claim in the ID Token
         */
        public Builder requiredClaim(Optional<? extends java.util.Map<String, String>> requiredClaim) {
            Utils.checkNotNull(requiredClaim, "requiredClaim");
            this.requiredClaim = requiredClaim;
            return this;
        }
        
        public SksOidc build() {
            return new SksOidc(
                clientId,
                issuerUrl,
                usernameClaim,
                usernamePrefix,
                groupsClaim,
                groupsPrefix,
                requiredClaim);
        }
    }
}

