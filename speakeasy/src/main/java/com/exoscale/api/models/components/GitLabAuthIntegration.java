/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GitLabAuthIntegration {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_sign_up")
    private Optional<? extends Boolean> allowSignUp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_url")
    private Optional<? extends String> apiUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_url")
    private Optional<? extends String> authUrl;

    @JsonProperty("client_id")
    private String clientId;

    @JsonProperty("client_secret")
    private String clientSecret;

    @JsonProperty("allowed_groups")
    private java.util.List<String> allowedGroups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_url")
    private Optional<? extends String> tokenUrl;

    public GitLabAuthIntegration(
            @JsonProperty("allow_sign_up") Optional<? extends Boolean> allowSignUp,
            @JsonProperty("api_url") Optional<? extends String> apiUrl,
            @JsonProperty("auth_url") Optional<? extends String> authUrl,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("allowed_groups") java.util.List<String> allowedGroups,
            @JsonProperty("token_url") Optional<? extends String> tokenUrl) {
        Utils.checkNotNull(allowSignUp, "allowSignUp");
        Utils.checkNotNull(apiUrl, "apiUrl");
        Utils.checkNotNull(authUrl, "authUrl");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(allowedGroups, "allowedGroups");
        Utils.checkNotNull(tokenUrl, "tokenUrl");
        this.allowSignUp = allowSignUp;
        this.apiUrl = apiUrl;
        this.authUrl = authUrl;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.allowedGroups = allowedGroups;
        this.tokenUrl = tokenUrl;
    }

    public Optional<? extends Boolean> allowSignUp() {
        return allowSignUp;
    }

    public Optional<? extends String> apiUrl() {
        return apiUrl;
    }

    public Optional<? extends String> authUrl() {
        return authUrl;
    }

    public String clientId() {
        return clientId;
    }

    public String clientSecret() {
        return clientSecret;
    }

    public java.util.List<String> allowedGroups() {
        return allowedGroups;
    }

    public Optional<? extends String> tokenUrl() {
        return tokenUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GitLabAuthIntegration withAllowSignUp(boolean allowSignUp) {
        Utils.checkNotNull(allowSignUp, "allowSignUp");
        this.allowSignUp = Optional.ofNullable(allowSignUp);
        return this;
    }

    public GitLabAuthIntegration withAllowSignUp(Optional<? extends Boolean> allowSignUp) {
        Utils.checkNotNull(allowSignUp, "allowSignUp");
        this.allowSignUp = allowSignUp;
        return this;
    }

    public GitLabAuthIntegration withApiUrl(String apiUrl) {
        Utils.checkNotNull(apiUrl, "apiUrl");
        this.apiUrl = Optional.ofNullable(apiUrl);
        return this;
    }

    public GitLabAuthIntegration withApiUrl(Optional<? extends String> apiUrl) {
        Utils.checkNotNull(apiUrl, "apiUrl");
        this.apiUrl = apiUrl;
        return this;
    }

    public GitLabAuthIntegration withAuthUrl(String authUrl) {
        Utils.checkNotNull(authUrl, "authUrl");
        this.authUrl = Optional.ofNullable(authUrl);
        return this;
    }

    public GitLabAuthIntegration withAuthUrl(Optional<? extends String> authUrl) {
        Utils.checkNotNull(authUrl, "authUrl");
        this.authUrl = authUrl;
        return this;
    }

    public GitLabAuthIntegration withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public GitLabAuthIntegration withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    public GitLabAuthIntegration withAllowedGroups(java.util.List<String> allowedGroups) {
        Utils.checkNotNull(allowedGroups, "allowedGroups");
        this.allowedGroups = allowedGroups;
        return this;
    }

    public GitLabAuthIntegration withTokenUrl(String tokenUrl) {
        Utils.checkNotNull(tokenUrl, "tokenUrl");
        this.tokenUrl = Optional.ofNullable(tokenUrl);
        return this;
    }

    public GitLabAuthIntegration withTokenUrl(Optional<? extends String> tokenUrl) {
        Utils.checkNotNull(tokenUrl, "tokenUrl");
        this.tokenUrl = tokenUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GitLabAuthIntegration other = (GitLabAuthIntegration) o;
        return 
            java.util.Objects.deepEquals(this.allowSignUp, other.allowSignUp) &&
            java.util.Objects.deepEquals(this.apiUrl, other.apiUrl) &&
            java.util.Objects.deepEquals(this.authUrl, other.authUrl) &&
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.allowedGroups, other.allowedGroups) &&
            java.util.Objects.deepEquals(this.tokenUrl, other.tokenUrl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            allowSignUp,
            apiUrl,
            authUrl,
            clientId,
            clientSecret,
            allowedGroups,
            tokenUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GitLabAuthIntegration.class,
                "allowSignUp", allowSignUp,
                "apiUrl", apiUrl,
                "authUrl", authUrl,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "allowedGroups", allowedGroups,
                "tokenUrl", tokenUrl);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> allowSignUp = Optional.empty();
 
        private Optional<? extends String> apiUrl = Optional.empty();
 
        private Optional<? extends String> authUrl = Optional.empty();
 
        private String clientId;
 
        private String clientSecret;
 
        private java.util.List<String> allowedGroups;
 
        private Optional<? extends String> tokenUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder allowSignUp(boolean allowSignUp) {
            Utils.checkNotNull(allowSignUp, "allowSignUp");
            this.allowSignUp = Optional.ofNullable(allowSignUp);
            return this;
        }

        public Builder allowSignUp(Optional<? extends Boolean> allowSignUp) {
            Utils.checkNotNull(allowSignUp, "allowSignUp");
            this.allowSignUp = allowSignUp;
            return this;
        }

        public Builder apiUrl(String apiUrl) {
            Utils.checkNotNull(apiUrl, "apiUrl");
            this.apiUrl = Optional.ofNullable(apiUrl);
            return this;
        }

        public Builder apiUrl(Optional<? extends String> apiUrl) {
            Utils.checkNotNull(apiUrl, "apiUrl");
            this.apiUrl = apiUrl;
            return this;
        }

        public Builder authUrl(String authUrl) {
            Utils.checkNotNull(authUrl, "authUrl");
            this.authUrl = Optional.ofNullable(authUrl);
            return this;
        }

        public Builder authUrl(Optional<? extends String> authUrl) {
            Utils.checkNotNull(authUrl, "authUrl");
            this.authUrl = authUrl;
            return this;
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        public Builder allowedGroups(java.util.List<String> allowedGroups) {
            Utils.checkNotNull(allowedGroups, "allowedGroups");
            this.allowedGroups = allowedGroups;
            return this;
        }

        public Builder tokenUrl(String tokenUrl) {
            Utils.checkNotNull(tokenUrl, "tokenUrl");
            this.tokenUrl = Optional.ofNullable(tokenUrl);
            return this;
        }

        public Builder tokenUrl(Optional<? extends String> tokenUrl) {
            Utils.checkNotNull(tokenUrl, "tokenUrl");
            this.tokenUrl = tokenUrl;
            return this;
        }
        
        public GitLabAuthIntegration build() {
            return new GitLabAuthIntegration(
                allowSignUp,
                apiUrl,
                authUrl,
                clientId,
                clientSecret,
                allowedGroups,
                tokenUrl);
        }
    }
}

