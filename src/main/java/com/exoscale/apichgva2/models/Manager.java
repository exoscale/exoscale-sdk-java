/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.UUID;

/**
 * This is a model class for Manager type.
 */
public class Manager {
    private UUID id;
    private TypeEnum type;

    /**
     * Default constructor.
     */
    public Manager() {
    }

    /**
     * Initialization constructor.
     * @param  id  UUID value for id.
     * @param  type  TypeEnum value for type.
     */
    public Manager(
            UUID id,
            TypeEnum type) {
        this.id = id;
        this.type = type;
    }

    /**
     * Getter for Id.
     * Manager ID
     * @return Returns the UUID
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public UUID getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Manager ID
     * @param id Value for UUID
     */
    @JsonSetter("id")
    public void setId(UUID id) {
        this.id = id;
    }

    /**
     * Getter for Type.
     * Manager type
     * @return Returns the TypeEnum
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TypeEnum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * Manager type
     * @param type Value for TypeEnum
     */
    @JsonSetter("type")
    public void setType(TypeEnum type) {
        this.type = type;
    }

    /**
     * Converts this Manager into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Manager [" + "id=" + id + ", type=" + type + "]";
    }

    /**
     * Builds a new {@link Manager.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Manager.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .type(getType());
        return builder;
    }

    /**
     * Class to build instances of {@link Manager}.
     */
    public static class Builder {
        private UUID id;
        private TypeEnum type;



        /**
         * Setter for id.
         * @param  id  UUID value for id.
         * @return Builder
         */
        public Builder id(UUID id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  TypeEnum value for type.
         * @return Builder
         */
        public Builder type(TypeEnum type) {
            this.type = type;
            return this;
        }

        /**
         * Builds a new {@link Manager} object using the set fields.
         * @return {@link Manager}
         */
        public Manager build() {
            return new Manager(id, type);
        }
    }
}
