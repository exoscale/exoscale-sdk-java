/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Reference - Related resource reference
 */

public class Reference {

    /**
     * Reference ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Link to the referenced resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link")
    private Optional<? extends String> link;

    /**
     * Command name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("command")
    private Optional<? extends String> command;

    public Reference(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("link") Optional<? extends String> link,
            @JsonProperty("command") Optional<? extends String> command) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(link, "link");
        Utils.checkNotNull(command, "command");
        this.id = id;
        this.link = link;
        this.command = command;
    }

    /**
     * Reference ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Link to the referenced resource
     */
    public Optional<? extends String> link() {
        return link;
    }

    /**
     * Command name
     */
    public Optional<? extends String> command() {
        return command;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Reference ID
     */
    public Reference withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Reference ID
     */
    public Reference withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Link to the referenced resource
     */
    public Reference withLink(String link) {
        Utils.checkNotNull(link, "link");
        this.link = Optional.ofNullable(link);
        return this;
    }

    /**
     * Link to the referenced resource
     */
    public Reference withLink(Optional<? extends String> link) {
        Utils.checkNotNull(link, "link");
        this.link = link;
        return this;
    }

    /**
     * Command name
     */
    public Reference withCommand(String command) {
        Utils.checkNotNull(command, "command");
        this.command = Optional.ofNullable(command);
        return this;
    }

    /**
     * Command name
     */
    public Reference withCommand(Optional<? extends String> command) {
        Utils.checkNotNull(command, "command");
        this.command = command;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Reference other = (Reference) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.link, other.link) &&
            java.util.Objects.deepEquals(this.command, other.command);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            link,
            command);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Reference.class,
                "id", id,
                "link", link,
                "command", command);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> link = Optional.empty();
 
        private Optional<? extends String> command = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Reference ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Reference ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Link to the referenced resource
         */
        public Builder link(String link) {
            Utils.checkNotNull(link, "link");
            this.link = Optional.ofNullable(link);
            return this;
        }

        /**
         * Link to the referenced resource
         */
        public Builder link(Optional<? extends String> link) {
            Utils.checkNotNull(link, "link");
            this.link = link;
            return this;
        }

        /**
         * Command name
         */
        public Builder command(String command) {
            Utils.checkNotNull(command, "command");
            this.command = Optional.ofNullable(command);
            return this;
        }

        /**
         * Command name
         */
        public Builder command(Optional<? extends String> command) {
            Utils.checkNotNull(command, "command");
            this.command = command;
            return this;
        }
        
        public Reference build() {
            return new Reference(
                id,
                link,
                command);
        }
    }
}

