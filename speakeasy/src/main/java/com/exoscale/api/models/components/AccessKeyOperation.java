/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * AccessKeyOperation - Access key operation
 */

public class AccessKeyOperation {

    /**
     * Name of the operation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operation")
    private Optional<? extends String> operation;

    /**
     * Tags associated with the operation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends java.util.List<String>> tags;

    public AccessKeyOperation(
            @JsonProperty("operation") Optional<? extends String> operation,
            @JsonProperty("tags") Optional<? extends java.util.List<String>> tags) {
        Utils.checkNotNull(operation, "operation");
        Utils.checkNotNull(tags, "tags");
        this.operation = operation;
        this.tags = tags;
    }

    /**
     * Name of the operation
     */
    public Optional<? extends String> operation() {
        return operation;
    }

    /**
     * Tags associated with the operation
     */
    public Optional<? extends java.util.List<String>> tags() {
        return tags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the operation
     */
    public AccessKeyOperation withOperation(String operation) {
        Utils.checkNotNull(operation, "operation");
        this.operation = Optional.ofNullable(operation);
        return this;
    }

    /**
     * Name of the operation
     */
    public AccessKeyOperation withOperation(Optional<? extends String> operation) {
        Utils.checkNotNull(operation, "operation");
        this.operation = operation;
        return this;
    }

    /**
     * Tags associated with the operation
     */
    public AccessKeyOperation withTags(java.util.List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    /**
     * Tags associated with the operation
     */
    public AccessKeyOperation withTags(Optional<? extends java.util.List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccessKeyOperation other = (AccessKeyOperation) o;
        return 
            java.util.Objects.deepEquals(this.operation, other.operation) &&
            java.util.Objects.deepEquals(this.tags, other.tags);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            operation,
            tags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccessKeyOperation.class,
                "operation", operation,
                "tags", tags);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> operation = Optional.empty();
 
        private Optional<? extends java.util.List<String>> tags = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the operation
         */
        public Builder operation(String operation) {
            Utils.checkNotNull(operation, "operation");
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        /**
         * Name of the operation
         */
        public Builder operation(Optional<? extends String> operation) {
            Utils.checkNotNull(operation, "operation");
            this.operation = operation;
            return this;
        }

        /**
         * Tags associated with the operation
         */
        public Builder tags(java.util.List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        /**
         * Tags associated with the operation
         */
        public Builder tags(Optional<? extends java.util.List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }
        
        public AccessKeyOperation build() {
            return new AccessKeyOperation(
                operation,
                tags);
        }
    }
}

