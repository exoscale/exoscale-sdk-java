/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.SosBucketsUsageResponse;
import com.exoscale.apichgva2.models.SosPresignedUrlResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SosController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SosController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @return    Returns the SosBucketsUsageResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SosBucketsUsageResponse listSosBucketsUsage() throws ApiException, IOException {
        return prepareListSosBucketsUsageRequest().execute();
    }

    /**
     * @return    Returns the SosBucketsUsageResponse response from the API call
     */
    public CompletableFuture<SosBucketsUsageResponse> listSosBucketsUsageAsync() {
        try { 
            return prepareListSosBucketsUsageRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listSosBucketsUsage.
     */
    private ApiCall<SosBucketsUsageResponse, ApiException> prepareListSosBucketsUsageRequest() throws IOException {
        return new ApiCall.Builder<SosBucketsUsageResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sos-buckets-usage")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SosBucketsUsageResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Generates Presigned Download URL for SOS object.
     * @param  bucket  Required parameter: Example:
     * @param  key  Optional parameter: Example:
     * @return    Returns the SosPresignedUrlResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SosPresignedUrlResponse getSosPresignedUrl(
            final String bucket,
            final String key) throws ApiException, IOException {
        return prepareGetSosPresignedUrlRequest(bucket, key).execute();
    }

    /**
     * Generates Presigned Download URL for SOS object.
     * @param  bucket  Required parameter: Example:
     * @param  key  Optional parameter: Example:
     * @return    Returns the SosPresignedUrlResponse response from the API call
     */
    public CompletableFuture<SosPresignedUrlResponse> getSosPresignedUrlAsync(
            final String bucket,
            final String key) {
        try { 
            return prepareGetSosPresignedUrlRequest(bucket, key).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getSosPresignedUrl.
     */
    private ApiCall<SosPresignedUrlResponse, ApiException> prepareGetSosPresignedUrlRequest(
            final String bucket,
            final String key) throws IOException {
        return new ApiCall.Builder<SosPresignedUrlResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/sos/{bucket}/presigned-url")
                        .queryParam(param -> param.key("key")
                                .value(key).isRequired(false))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SosPresignedUrlResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}