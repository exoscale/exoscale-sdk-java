/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DbaasOpensearchAclConfigAclsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DbaasOpensearchAclConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasOpensearchAclConfig {
  public static final String SERIALIZED_NAME_ACLS = "acls";
  @SerializedName(SERIALIZED_NAME_ACLS)
  private List<DbaasOpensearchAclConfigAclsInner> acls = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACL_ENABLED = "acl-enabled";
  @SerializedName(SERIALIZED_NAME_ACL_ENABLED)
  private Boolean aclEnabled;

  public static final String SERIALIZED_NAME_EXTENDED_ACL_ENABLED = "extended-acl-enabled";
  @SerializedName(SERIALIZED_NAME_EXTENDED_ACL_ENABLED)
  private Boolean extendedAclEnabled;

  public DbaasOpensearchAclConfig() {
  }

  public DbaasOpensearchAclConfig acls(List<DbaasOpensearchAclConfigAclsInner> acls) {
    this.acls = acls;
    return this;
  }

  public DbaasOpensearchAclConfig addAclsItem(DbaasOpensearchAclConfigAclsInner aclsItem) {
    if (this.acls == null) {
      this.acls = new ArrayList<>();
    }
    this.acls.add(aclsItem);
    return this;
  }

   /**
   * List of OpenSearch ACLs
   * @return acls
  **/
  @javax.annotation.Nullable
  public List<DbaasOpensearchAclConfigAclsInner> getAcls() {
    return acls;
  }

  public void setAcls(List<DbaasOpensearchAclConfigAclsInner> acls) {
    this.acls = acls;
  }


  public DbaasOpensearchAclConfig aclEnabled(Boolean aclEnabled) {
    this.aclEnabled = aclEnabled;
    return this;
  }

   /**
   * Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access.
   * @return aclEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getAclEnabled() {
    return aclEnabled;
  }

  public void setAclEnabled(Boolean aclEnabled) {
    this.aclEnabled = aclEnabled;
  }


  public DbaasOpensearchAclConfig extendedAclEnabled(Boolean extendedAclEnabled) {
    this.extendedAclEnabled = extendedAclEnabled;
    return this;
  }

   /**
   * Enable to enforce index rules in a limited fashion for requests that use the _mget, _msearch, and _bulk APIs
   * @return extendedAclEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getExtendedAclEnabled() {
    return extendedAclEnabled;
  }

  public void setExtendedAclEnabled(Boolean extendedAclEnabled) {
    this.extendedAclEnabled = extendedAclEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasOpensearchAclConfig dbaasOpensearchAclConfig = (DbaasOpensearchAclConfig) o;
    return Objects.equals(this.acls, dbaasOpensearchAclConfig.acls) &&
        Objects.equals(this.aclEnabled, dbaasOpensearchAclConfig.aclEnabled) &&
        Objects.equals(this.extendedAclEnabled, dbaasOpensearchAclConfig.extendedAclEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acls, aclEnabled, extendedAclEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasOpensearchAclConfig {\n");
    sb.append("    acls: ").append(toIndentedString(acls)).append("\n");
    sb.append("    aclEnabled: ").append(toIndentedString(aclEnabled)).append("\n");
    sb.append("    extendedAclEnabled: ").append(toIndentedString(extendedAclEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acls");
    openapiFields.add("acl-enabled");
    openapiFields.add("extended-acl-enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasOpensearchAclConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasOpensearchAclConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasOpensearchAclConfig is not found in the empty JSON string", DbaasOpensearchAclConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasOpensearchAclConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasOpensearchAclConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("acls") != null && !jsonObj.get("acls").isJsonNull()) {
        JsonArray jsonArrayacls = jsonObj.getAsJsonArray("acls");
        if (jsonArrayacls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acls` to be an array in the JSON string but got `%s`", jsonObj.get("acls").toString()));
          }

          // validate the optional field `acls` (array)
          for (int i = 0; i < jsonArrayacls.size(); i++) {
            DbaasOpensearchAclConfigAclsInner.validateJsonElement(jsonArrayacls.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasOpensearchAclConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasOpensearchAclConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasOpensearchAclConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasOpensearchAclConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasOpensearchAclConfig>() {
           @Override
           public void write(JsonWriter out, DbaasOpensearchAclConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasOpensearchAclConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasOpensearchAclConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasOpensearchAclConfig
  * @throws IOException if the JSON string is invalid with respect to DbaasOpensearchAclConfig
  */
  public static DbaasOpensearchAclConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasOpensearchAclConfig.class);
  }

 /**
  * Convert an instance of DbaasOpensearchAclConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

