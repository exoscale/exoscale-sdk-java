/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GrafanaDateFormatSpecifications
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class GrafanaDateFormatSpecifications {
  public static final String SERIALIZED_NAME_FULL_DATE = "full_date";
  @SerializedName(SERIALIZED_NAME_FULL_DATE)
  private String fullDate;

  public static final String SERIALIZED_NAME_INTERVAL_SECOND = "interval_second";
  @SerializedName(SERIALIZED_NAME_INTERVAL_SECOND)
  private String intervalSecond;

  public static final String SERIALIZED_NAME_INTERVAL_MINUTE = "interval_minute";
  @SerializedName(SERIALIZED_NAME_INTERVAL_MINUTE)
  private String intervalMinute;

  public static final String SERIALIZED_NAME_INTERVAL_HOUR = "interval_hour";
  @SerializedName(SERIALIZED_NAME_INTERVAL_HOUR)
  private String intervalHour;

  public static final String SERIALIZED_NAME_INTERVAL_DAY = "interval_day";
  @SerializedName(SERIALIZED_NAME_INTERVAL_DAY)
  private String intervalDay;

  public static final String SERIALIZED_NAME_INTERVAL_MONTH = "interval_month";
  @SerializedName(SERIALIZED_NAME_INTERVAL_MONTH)
  private String intervalMonth;

  public static final String SERIALIZED_NAME_INTERVAL_YEAR = "interval_year";
  @SerializedName(SERIALIZED_NAME_INTERVAL_YEAR)
  private String intervalYear;

  public static final String SERIALIZED_NAME_DEFAULT_TIMEZONE = "default_timezone";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TIMEZONE)
  private String defaultTimezone;

  public GrafanaDateFormatSpecifications() {
  }

  public GrafanaDateFormatSpecifications fullDate(String fullDate) {
    this.fullDate = fullDate;
    return this;
  }

   /**
   * Get fullDate
   * @return fullDate
  **/
  @javax.annotation.Nullable
  public String getFullDate() {
    return fullDate;
  }

  public void setFullDate(String fullDate) {
    this.fullDate = fullDate;
  }


  public GrafanaDateFormatSpecifications intervalSecond(String intervalSecond) {
    this.intervalSecond = intervalSecond;
    return this;
  }

   /**
   * Get intervalSecond
   * @return intervalSecond
  **/
  @javax.annotation.Nullable
  public String getIntervalSecond() {
    return intervalSecond;
  }

  public void setIntervalSecond(String intervalSecond) {
    this.intervalSecond = intervalSecond;
  }


  public GrafanaDateFormatSpecifications intervalMinute(String intervalMinute) {
    this.intervalMinute = intervalMinute;
    return this;
  }

   /**
   * Get intervalMinute
   * @return intervalMinute
  **/
  @javax.annotation.Nullable
  public String getIntervalMinute() {
    return intervalMinute;
  }

  public void setIntervalMinute(String intervalMinute) {
    this.intervalMinute = intervalMinute;
  }


  public GrafanaDateFormatSpecifications intervalHour(String intervalHour) {
    this.intervalHour = intervalHour;
    return this;
  }

   /**
   * Get intervalHour
   * @return intervalHour
  **/
  @javax.annotation.Nullable
  public String getIntervalHour() {
    return intervalHour;
  }

  public void setIntervalHour(String intervalHour) {
    this.intervalHour = intervalHour;
  }


  public GrafanaDateFormatSpecifications intervalDay(String intervalDay) {
    this.intervalDay = intervalDay;
    return this;
  }

   /**
   * Get intervalDay
   * @return intervalDay
  **/
  @javax.annotation.Nullable
  public String getIntervalDay() {
    return intervalDay;
  }

  public void setIntervalDay(String intervalDay) {
    this.intervalDay = intervalDay;
  }


  public GrafanaDateFormatSpecifications intervalMonth(String intervalMonth) {
    this.intervalMonth = intervalMonth;
    return this;
  }

   /**
   * Get intervalMonth
   * @return intervalMonth
  **/
  @javax.annotation.Nullable
  public String getIntervalMonth() {
    return intervalMonth;
  }

  public void setIntervalMonth(String intervalMonth) {
    this.intervalMonth = intervalMonth;
  }


  public GrafanaDateFormatSpecifications intervalYear(String intervalYear) {
    this.intervalYear = intervalYear;
    return this;
  }

   /**
   * Get intervalYear
   * @return intervalYear
  **/
  @javax.annotation.Nullable
  public String getIntervalYear() {
    return intervalYear;
  }

  public void setIntervalYear(String intervalYear) {
    this.intervalYear = intervalYear;
  }


  public GrafanaDateFormatSpecifications defaultTimezone(String defaultTimezone) {
    this.defaultTimezone = defaultTimezone;
    return this;
  }

   /**
   * Get defaultTimezone
   * @return defaultTimezone
  **/
  @javax.annotation.Nullable
  public String getDefaultTimezone() {
    return defaultTimezone;
  }

  public void setDefaultTimezone(String defaultTimezone) {
    this.defaultTimezone = defaultTimezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrafanaDateFormatSpecifications grafanaDateFormatSpecifications = (GrafanaDateFormatSpecifications) o;
    return Objects.equals(this.fullDate, grafanaDateFormatSpecifications.fullDate) &&
        Objects.equals(this.intervalSecond, grafanaDateFormatSpecifications.intervalSecond) &&
        Objects.equals(this.intervalMinute, grafanaDateFormatSpecifications.intervalMinute) &&
        Objects.equals(this.intervalHour, grafanaDateFormatSpecifications.intervalHour) &&
        Objects.equals(this.intervalDay, grafanaDateFormatSpecifications.intervalDay) &&
        Objects.equals(this.intervalMonth, grafanaDateFormatSpecifications.intervalMonth) &&
        Objects.equals(this.intervalYear, grafanaDateFormatSpecifications.intervalYear) &&
        Objects.equals(this.defaultTimezone, grafanaDateFormatSpecifications.defaultTimezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullDate, intervalSecond, intervalMinute, intervalHour, intervalDay, intervalMonth, intervalYear, defaultTimezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrafanaDateFormatSpecifications {\n");
    sb.append("    fullDate: ").append(toIndentedString(fullDate)).append("\n");
    sb.append("    intervalSecond: ").append(toIndentedString(intervalSecond)).append("\n");
    sb.append("    intervalMinute: ").append(toIndentedString(intervalMinute)).append("\n");
    sb.append("    intervalHour: ").append(toIndentedString(intervalHour)).append("\n");
    sb.append("    intervalDay: ").append(toIndentedString(intervalDay)).append("\n");
    sb.append("    intervalMonth: ").append(toIndentedString(intervalMonth)).append("\n");
    sb.append("    intervalYear: ").append(toIndentedString(intervalYear)).append("\n");
    sb.append("    defaultTimezone: ").append(toIndentedString(defaultTimezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("full_date");
    openapiFields.add("interval_second");
    openapiFields.add("interval_minute");
    openapiFields.add("interval_hour");
    openapiFields.add("interval_day");
    openapiFields.add("interval_month");
    openapiFields.add("interval_year");
    openapiFields.add("default_timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GrafanaDateFormatSpecifications
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrafanaDateFormatSpecifications.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrafanaDateFormatSpecifications is not found in the empty JSON string", GrafanaDateFormatSpecifications.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrafanaDateFormatSpecifications.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrafanaDateFormatSpecifications` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("full_date") != null && !jsonObj.get("full_date").isJsonNull()) && !jsonObj.get("full_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_date").toString()));
      }
      if ((jsonObj.get("interval_second") != null && !jsonObj.get("interval_second").isJsonNull()) && !jsonObj.get("interval_second").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval_second` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval_second").toString()));
      }
      if ((jsonObj.get("interval_minute") != null && !jsonObj.get("interval_minute").isJsonNull()) && !jsonObj.get("interval_minute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval_minute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval_minute").toString()));
      }
      if ((jsonObj.get("interval_hour") != null && !jsonObj.get("interval_hour").isJsonNull()) && !jsonObj.get("interval_hour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval_hour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval_hour").toString()));
      }
      if ((jsonObj.get("interval_day") != null && !jsonObj.get("interval_day").isJsonNull()) && !jsonObj.get("interval_day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval_day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval_day").toString()));
      }
      if ((jsonObj.get("interval_month") != null && !jsonObj.get("interval_month").isJsonNull()) && !jsonObj.get("interval_month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval_month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval_month").toString()));
      }
      if ((jsonObj.get("interval_year") != null && !jsonObj.get("interval_year").isJsonNull()) && !jsonObj.get("interval_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval_year").toString()));
      }
      if ((jsonObj.get("default_timezone") != null && !jsonObj.get("default_timezone").isJsonNull()) && !jsonObj.get("default_timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrafanaDateFormatSpecifications.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrafanaDateFormatSpecifications' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrafanaDateFormatSpecifications> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrafanaDateFormatSpecifications.class));

       return (TypeAdapter<T>) new TypeAdapter<GrafanaDateFormatSpecifications>() {
           @Override
           public void write(JsonWriter out, GrafanaDateFormatSpecifications value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrafanaDateFormatSpecifications read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GrafanaDateFormatSpecifications given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GrafanaDateFormatSpecifications
  * @throws IOException if the JSON string is invalid with respect to GrafanaDateFormatSpecifications
  */
  public static GrafanaDateFormatSpecifications fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrafanaDateFormatSpecifications.class);
  }

 /**
  * Convert an instance of GrafanaDateFormatSpecifications to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

