/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * SMTPServerSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class SMTPServerSettings {
  @JsonProperty("host")
  private String host = null;

  @JsonProperty("port")
  private Integer port = null;

  @JsonProperty("skip_verify")
  private Boolean skipVerify = null;

  @JsonProperty("username")
  private String username = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("from_address")
  private String fromAddress = null;

  @JsonProperty("from_name")
  private String fromName = null;

  /**
   * Gets or Sets starttlsPolicy
   */
  public enum StarttlsPolicyEnum {
    OPPORTUNISTICSTARTTLS("OpportunisticStartTLS"),
    MANDATORYSTARTTLS("MandatoryStartTLS"),
    NOSTARTTLS("NoStartTLS");

    private String value;

    StarttlsPolicyEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StarttlsPolicyEnum fromValue(String input) {
      for (StarttlsPolicyEnum b : StarttlsPolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("starttls_policy")
  private StarttlsPolicyEnum starttlsPolicy = null;

  public SMTPServerSettings host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(example = "smtp.example.com", required = true, description = "")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public SMTPServerSettings port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @Schema(example = "25", required = true, description = "")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public SMTPServerSettings skipVerify(Boolean skipVerify) {
    this.skipVerify = skipVerify;
    return this;
  }

   /**
   * Get skipVerify
   * @return skipVerify
  **/
  @Schema(example = "false", description = "")
  public Boolean isSkipVerify() {
    return skipVerify;
  }

  public void setSkipVerify(Boolean skipVerify) {
    this.skipVerify = skipVerify;
  }

  public SMTPServerSettings username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(example = "smtpuser", description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public SMTPServerSettings password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @Schema(example = "ein0eemeev5eeth3Ahfu", description = "")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public SMTPServerSettings fromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
    return this;
  }

   /**
   * Get fromAddress
   * @return fromAddress
  **/
  @Schema(example = "yourgrafanauser@yourdomain.example.com", required = true, description = "")
  public String getFromAddress() {
    return fromAddress;
  }

  public void setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
  }

  public SMTPServerSettings fromName(String fromName) {
    this.fromName = fromName;
    return this;
  }

   /**
   * Get fromName
   * @return fromName
  **/
  @Schema(example = "Company Grafana", description = "")
  public String getFromName() {
    return fromName;
  }

  public void setFromName(String fromName) {
    this.fromName = fromName;
  }

  public SMTPServerSettings starttlsPolicy(StarttlsPolicyEnum starttlsPolicy) {
    this.starttlsPolicy = starttlsPolicy;
    return this;
  }

   /**
   * Get starttlsPolicy
   * @return starttlsPolicy
  **/
  @Schema(example = "NoStartTLS", description = "")
  public StarttlsPolicyEnum getStarttlsPolicy() {
    return starttlsPolicy;
  }

  public void setStarttlsPolicy(StarttlsPolicyEnum starttlsPolicy) {
    this.starttlsPolicy = starttlsPolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SMTPServerSettings smTPServerSettings = (SMTPServerSettings) o;
    return Objects.equals(this.host, smTPServerSettings.host) &&
        Objects.equals(this.port, smTPServerSettings.port) &&
        Objects.equals(this.skipVerify, smTPServerSettings.skipVerify) &&
        Objects.equals(this.username, smTPServerSettings.username) &&
        Objects.equals(this.password, smTPServerSettings.password) &&
        Objects.equals(this.fromAddress, smTPServerSettings.fromAddress) &&
        Objects.equals(this.fromName, smTPServerSettings.fromName) &&
        Objects.equals(this.starttlsPolicy, smTPServerSettings.starttlsPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, port, skipVerify, username, password, fromAddress, fromName, starttlsPolicy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SMTPServerSettings {\n");
    
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    skipVerify: ").append(toIndentedString(skipVerify)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    starttlsPolicy: ").append(toIndentedString(starttlsPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
