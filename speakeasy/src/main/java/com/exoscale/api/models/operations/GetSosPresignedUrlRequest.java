/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.SpeakeasyMetadata;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GetSosPresignedUrlRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=bucket")
    private String bucket;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    private Optional<? extends String> key;

    public GetSosPresignedUrlRequest(
            String bucket,
            Optional<? extends String> key) {
        Utils.checkNotNull(bucket, "bucket");
        Utils.checkNotNull(key, "key");
        this.bucket = bucket;
        this.key = key;
    }

    public String bucket() {
        return bucket;
    }

    public Optional<? extends String> key() {
        return key;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetSosPresignedUrlRequest withBucket(String bucket) {
        Utils.checkNotNull(bucket, "bucket");
        this.bucket = bucket;
        return this;
    }

    public GetSosPresignedUrlRequest withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public GetSosPresignedUrlRequest withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSosPresignedUrlRequest other = (GetSosPresignedUrlRequest) o;
        return 
            java.util.Objects.deepEquals(this.bucket, other.bucket) &&
            java.util.Objects.deepEquals(this.key, other.key);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bucket,
            key);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSosPresignedUrlRequest.class,
                "bucket", bucket,
                "key", key);
    }
    
    public final static class Builder {
 
        private String bucket;
 
        private Optional<? extends String> key = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bucket(String bucket) {
            Utils.checkNotNull(bucket, "bucket");
            this.bucket = bucket;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }
        
        public GetSosPresignedUrlRequest build() {
            return new GetSosPresignedUrlRequest(
                bucket,
                key);
        }
    }
}

