/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateDbaasTaskMigrationCheckRequestBody {

    /**
     * Service URI of the source MySQL or PostgreSQL database with admin credentials.
     */
    @JsonProperty("source-service-uri")
    private String sourceServiceUri;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<? extends com.exoscale.api.models.components.EnumMigrationMethod> method;

    /**
     * Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignore-dbs")
    private Optional<? extends String> ignoreDbs;

    public CreateDbaasTaskMigrationCheckRequestBody(
            @JsonProperty("source-service-uri") String sourceServiceUri,
            @JsonProperty("method") Optional<? extends com.exoscale.api.models.components.EnumMigrationMethod> method,
            @JsonProperty("ignore-dbs") Optional<? extends String> ignoreDbs) {
        Utils.checkNotNull(sourceServiceUri, "sourceServiceUri");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(ignoreDbs, "ignoreDbs");
        this.sourceServiceUri = sourceServiceUri;
        this.method = method;
        this.ignoreDbs = ignoreDbs;
    }

    /**
     * Service URI of the source MySQL or PostgreSQL database with admin credentials.
     */
    public String sourceServiceUri() {
        return sourceServiceUri;
    }

    public Optional<? extends com.exoscale.api.models.components.EnumMigrationMethod> method() {
        return method;
    }

    /**
     * Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)
     */
    public Optional<? extends String> ignoreDbs() {
        return ignoreDbs;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Service URI of the source MySQL or PostgreSQL database with admin credentials.
     */
    public CreateDbaasTaskMigrationCheckRequestBody withSourceServiceUri(String sourceServiceUri) {
        Utils.checkNotNull(sourceServiceUri, "sourceServiceUri");
        this.sourceServiceUri = sourceServiceUri;
        return this;
    }

    public CreateDbaasTaskMigrationCheckRequestBody withMethod(com.exoscale.api.models.components.EnumMigrationMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = Optional.ofNullable(method);
        return this;
    }

    public CreateDbaasTaskMigrationCheckRequestBody withMethod(Optional<? extends com.exoscale.api.models.components.EnumMigrationMethod> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)
     */
    public CreateDbaasTaskMigrationCheckRequestBody withIgnoreDbs(String ignoreDbs) {
        Utils.checkNotNull(ignoreDbs, "ignoreDbs");
        this.ignoreDbs = Optional.ofNullable(ignoreDbs);
        return this;
    }

    /**
     * Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)
     */
    public CreateDbaasTaskMigrationCheckRequestBody withIgnoreDbs(Optional<? extends String> ignoreDbs) {
        Utils.checkNotNull(ignoreDbs, "ignoreDbs");
        this.ignoreDbs = ignoreDbs;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDbaasTaskMigrationCheckRequestBody other = (CreateDbaasTaskMigrationCheckRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.sourceServiceUri, other.sourceServiceUri) &&
            java.util.Objects.deepEquals(this.method, other.method) &&
            java.util.Objects.deepEquals(this.ignoreDbs, other.ignoreDbs);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            sourceServiceUri,
            method,
            ignoreDbs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDbaasTaskMigrationCheckRequestBody.class,
                "sourceServiceUri", sourceServiceUri,
                "method", method,
                "ignoreDbs", ignoreDbs);
    }
    
    public final static class Builder {
 
        private String sourceServiceUri;
 
        private Optional<? extends com.exoscale.api.models.components.EnumMigrationMethod> method = Optional.empty();
 
        private Optional<? extends String> ignoreDbs = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Service URI of the source MySQL or PostgreSQL database with admin credentials.
         */
        public Builder sourceServiceUri(String sourceServiceUri) {
            Utils.checkNotNull(sourceServiceUri, "sourceServiceUri");
            this.sourceServiceUri = sourceServiceUri;
            return this;
        }

        public Builder method(com.exoscale.api.models.components.EnumMigrationMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = Optional.ofNullable(method);
            return this;
        }

        public Builder method(Optional<? extends com.exoscale.api.models.components.EnumMigrationMethod> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)
         */
        public Builder ignoreDbs(String ignoreDbs) {
            Utils.checkNotNull(ignoreDbs, "ignoreDbs");
            this.ignoreDbs = Optional.ofNullable(ignoreDbs);
            return this;
        }

        /**
         * Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)
         */
        public Builder ignoreDbs(Optional<? extends String> ignoreDbs) {
            Utils.checkNotNull(ignoreDbs, "ignoreDbs");
            this.ignoreDbs = ignoreDbs;
            return this;
        }
        
        public CreateDbaasTaskMigrationCheckRequestBody build() {
            return new CreateDbaasTaskMigrationCheckRequestBody(
                sourceServiceUri,
                method,
                ignoreDbs);
        }
    }
}

