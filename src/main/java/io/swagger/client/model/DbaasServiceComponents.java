/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.EnumKafkaAuthMethod;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Service component information objects
 */
@Schema(description = "Service component information objects")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class DbaasServiceComponents {
  @JsonProperty("component")
  private String component = null;

  @JsonProperty("host")
  private String host = null;

  @JsonProperty("kafka-authentication-method")
  private EnumKafkaAuthMethod kafkaAuthenticationMethod = null;

  @JsonProperty("path")
  private String path = null;

  @JsonProperty("port")
  private Long port = null;

  /**
   * Network access route
   */
  public enum RouteEnum {
    DYNAMIC("dynamic"),
    PRIVATE("private"),
    PUBLIC("public"),
    PRIVATELINK("privatelink");

    private String value;

    RouteEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static RouteEnum fromValue(String input) {
      for (RouteEnum b : RouteEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("route")
  private RouteEnum route = null;

  @JsonProperty("ssl")
  private Boolean ssl = null;

  /**
   * DNS usage name
   */
  public enum UsageEnum {
    PRIMARY("primary"),
    REPLICA("replica");

    private String value;

    UsageEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static UsageEnum fromValue(String input) {
      for (UsageEnum b : UsageEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("usage")
  private UsageEnum usage = null;

  public DbaasServiceComponents component(String component) {
    this.component = component;
    return this;
  }

   /**
   * Service component name
   * @return component
  **/
  @Schema(required = true, description = "Service component name")
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }

  public DbaasServiceComponents host(String host) {
    this.host = host;
    return this;
  }

   /**
   * DNS name for connecting to the service component
   * @return host
  **/
  @Schema(required = true, description = "DNS name for connecting to the service component")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public DbaasServiceComponents kafkaAuthenticationMethod(EnumKafkaAuthMethod kafkaAuthenticationMethod) {
    this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
    return this;
  }

   /**
   * Get kafkaAuthenticationMethod
   * @return kafkaAuthenticationMethod
  **/
  @Schema(description = "")
  public EnumKafkaAuthMethod getKafkaAuthenticationMethod() {
    return kafkaAuthenticationMethod;
  }

  public void setKafkaAuthenticationMethod(EnumKafkaAuthMethod kafkaAuthenticationMethod) {
    this.kafkaAuthenticationMethod = kafkaAuthenticationMethod;
  }

  public DbaasServiceComponents path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)
   * @return path
  **/
  @Schema(description = "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public DbaasServiceComponents port(Long port) {
    this.port = port;
    return this;
  }

   /**
   * Port number for connecting to the service component
   * minimum: 0
   * maximum: 65535
   * @return port
  **/
  @Schema(required = true, description = "Port number for connecting to the service component")
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }

  public DbaasServiceComponents route(RouteEnum route) {
    this.route = route;
    return this;
  }

   /**
   * Network access route
   * @return route
  **/
  @Schema(required = true, description = "Network access route")
  public RouteEnum getRoute() {
    return route;
  }

  public void setRoute(RouteEnum route) {
    this.route = route;
  }

  public DbaasServiceComponents ssl(Boolean ssl) {
    this.ssl = ssl;
    return this;
  }

   /**
   * Whether the endpoint is encrypted or accepts plaintext.                                            By default endpoints are always encrypted and                                            this property is only included for service components that may disable encryption.
   * @return ssl
  **/
  @Schema(description = "Whether the endpoint is encrypted or accepts plaintext.                                            By default endpoints are always encrypted and                                            this property is only included for service components that may disable encryption.")
  public Boolean isSsl() {
    return ssl;
  }

  public void setSsl(Boolean ssl) {
    this.ssl = ssl;
  }

  public DbaasServiceComponents usage(UsageEnum usage) {
    this.usage = usage;
    return this;
  }

   /**
   * DNS usage name
   * @return usage
  **/
  @Schema(required = true, description = "DNS usage name")
  public UsageEnum getUsage() {
    return usage;
  }

  public void setUsage(UsageEnum usage) {
    this.usage = usage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasServiceComponents dbaasServiceComponents = (DbaasServiceComponents) o;
    return Objects.equals(this.component, dbaasServiceComponents.component) &&
        Objects.equals(this.host, dbaasServiceComponents.host) &&
        Objects.equals(this.kafkaAuthenticationMethod, dbaasServiceComponents.kafkaAuthenticationMethod) &&
        Objects.equals(this.path, dbaasServiceComponents.path) &&
        Objects.equals(this.port, dbaasServiceComponents.port) &&
        Objects.equals(this.route, dbaasServiceComponents.route) &&
        Objects.equals(this.ssl, dbaasServiceComponents.ssl) &&
        Objects.equals(this.usage, dbaasServiceComponents.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(component, host, kafkaAuthenticationMethod, path, port, route, ssl, usage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasServiceComponents {\n");
    
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    kafkaAuthenticationMethod: ").append(toIndentedString(kafkaAuthenticationMethod)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
