/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api;

import com.exoscale.api.models.operations.SDKMethodInterfaces.*;
import com.exoscale.api.utils.HTTPClient;
import com.exoscale.api.utils.RetryConfig;
import com.exoscale.api.utils.SpeakeasyHTTPClient;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Exoscale Public API: 
 * Infrastructure automation API, allowing programmatic access to all Exoscale products and services.
 * 
 * The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:
 * 
 * * [JSON format](https://openapi-v2.exoscale.com/source.json)
 * * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 */
public class Exoscale {
    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        "https://api-{zone}.exoscale.com/v2",
    };

    /**
     * A Network Load Balancer (NLB) is a Layer 4 (TCP/UDP) load balancer that distributes incoming traffic to Compute instances managed by an Instance Pool.
     * 
     * [Read more](https://community.exoscale.com/documentation/compute/network-load-balancer/)
     * 
     * https://community.exoscale.com/documentation/compute/network-load-balancer/ - Read more
     */
    private final NetworkLoadBalancer networkLoadBalancer;

    private final Dbaas dbaas;

    private final InstancePool instancePool;

    private final Instance instance;

    private final Snapshot snapshot;

    private final ReverseDns reverseDns;

    private final AntiAffinityGroup antiAffinityGroup;

    /**
     * Events form the basis of the Exoscale audit-trail, a mechanism to query past events
     * performing mutations on resources which happened on an organization
     * https://www.exoscale.com/support/ - Read more
     */
    private final Event event;

    private final SecurityGroup securityGroup;

    private final Iam iam;

    private final PrivateNetwork privateNetwork;

    private final InstanceType instanceType;

    private final ElasticIp elasticIp;

    private final Zone zone;

    /**
     * SKS is Exoscale's scalable Kubernetes service which provides managed Kubernetes
     * control planes with integrated support for Exoscale instance pools ands network load
     * balancers.
     * [Read more](https://www.exoscale.com/scalable-kubernetes-service/)
     * https://www.exoscale.com/scalable-kubernetes-service/ - Read more
     */
    private final Sks sks;

    private final Dns dns;

    private final DeployTarget deployTarget;

    /**
     * Exoscale's Block Storage offers persistent
     * externally attached volumes for your workloads.
     * https://community.exoscale.com/documentation/compute/ - Read more
     */
    private final BlockStorage blockStorage;

    private final Quotas quotas;

    private final Compute compute;

    private final Operation operation;

    private final Template template;

    private final Sos sos;

    private final SshKey sshKey;

    /**
     * A Network Load Balancer (NLB) is a Layer 4 (TCP/UDP) load balancer that distributes incoming traffic to Compute instances managed by an Instance Pool.
     * 
     * [Read more](https://community.exoscale.com/documentation/compute/network-load-balancer/)
     * 
     * https://community.exoscale.com/documentation/compute/network-load-balancer/ - Read more
     */
    public NetworkLoadBalancer networkLoadBalancer() {
        return networkLoadBalancer;
    }

    public Dbaas dbaas() {
        return dbaas;
    }

    public InstancePool instancePool() {
        return instancePool;
    }

    public Instance instance() {
        return instance;
    }

    public Snapshot snapshot() {
        return snapshot;
    }

    public ReverseDns reverseDns() {
        return reverseDns;
    }

    public AntiAffinityGroup antiAffinityGroup() {
        return antiAffinityGroup;
    }

    /**
     * Events form the basis of the Exoscale audit-trail, a mechanism to query past events
     * performing mutations on resources which happened on an organization
     * https://www.exoscale.com/support/ - Read more
     */
    public Event event() {
        return event;
    }

    public SecurityGroup securityGroup() {
        return securityGroup;
    }

    public Iam iam() {
        return iam;
    }

    public PrivateNetwork privateNetwork() {
        return privateNetwork;
    }

    public InstanceType instanceType() {
        return instanceType;
    }

    public ElasticIp elasticIp() {
        return elasticIp;
    }

    public Zone zone() {
        return zone;
    }

    /**
     * SKS is Exoscale's scalable Kubernetes service which provides managed Kubernetes
     * control planes with integrated support for Exoscale instance pools ands network load
     * balancers.
     * [Read more](https://www.exoscale.com/scalable-kubernetes-service/)
     * https://www.exoscale.com/scalable-kubernetes-service/ - Read more
     */
    public Sks sks() {
        return sks;
    }

    public Dns dns() {
        return dns;
    }

    public DeployTarget deployTarget() {
        return deployTarget;
    }

    /**
     * Exoscale's Block Storage offers persistent
     * externally attached volumes for your workloads.
     * https://community.exoscale.com/documentation/compute/ - Read more
     */
    public BlockStorage blockStorage() {
        return blockStorage;
    }

    public Quotas quotas() {
        return quotas;
    }

    public Compute compute() {
        return compute;
    }

    public Operation operation() {
        return operation;
    }

    public Template template() {
        return template;
    }

    public Sos sos() {
        return sos;
    }

    public SshKey sshKey() {
        return sshKey;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, java.util.Map<String, String> params) {
            this.sdkConfiguration.serverUrl = com.exoscale.api.utils.Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        public enum ServerZone {
            CH_GVA2("ch-gva-2"),
            CH_DK2("ch-dk-2"),
            DE_FRA1("de-fra-1"),
            DE_MUC1("de-muc-1"),
            AT_VIE1("at-vie-1"),
            AT_VIE2("at-vie-2"),
            BG_SOF1("bg-sof-1");

            @JsonValue
            private final String value;

            private ServerZone(String value) {
                this.value = value;
            }

            public String value() {
                return value;
            }
        }

        /**
         * Sets the zone variable for url substitution.
         *
         * @param zone The value to set.
         * @return The builder instance.
         */
        public Builder zone(ServerZone zone) {
            for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
                if (!server.containsKey("zone")) {
                    continue;
                }
                server.put("zone", zone.toString());
            }

            return this;
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public Exoscale build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new Exoscale(sdkConfiguration);
        }
    }

    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Exoscale(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.networkLoadBalancer = new NetworkLoadBalancer(sdkConfiguration);
        this.dbaas = new Dbaas(sdkConfiguration);
        this.instancePool = new InstancePool(sdkConfiguration);
        this.instance = new Instance(sdkConfiguration);
        this.snapshot = new Snapshot(sdkConfiguration);
        this.reverseDns = new ReverseDns(sdkConfiguration);
        this.antiAffinityGroup = new AntiAffinityGroup(sdkConfiguration);
        this.event = new Event(sdkConfiguration);
        this.securityGroup = new SecurityGroup(sdkConfiguration);
        this.iam = new Iam(sdkConfiguration);
        this.privateNetwork = new PrivateNetwork(sdkConfiguration);
        this.instanceType = new InstanceType(sdkConfiguration);
        this.elasticIp = new ElasticIp(sdkConfiguration);
        this.zone = new Zone(sdkConfiguration);
        this.sks = new Sks(sdkConfiguration);
        this.dns = new Dns(sdkConfiguration);
        this.deployTarget = new DeployTarget(sdkConfiguration);
        this.blockStorage = new BlockStorage(sdkConfiguration);
        this.quotas = new Quotas(sdkConfiguration);
        this.compute = new Compute(sdkConfiguration);
        this.operation = new Operation(sdkConfiguration);
        this.template = new Template(sdkConfiguration);
        this.sos = new Sos(sdkConfiguration);
        this.sshKey = new SshKey(sdkConfiguration);
    }




















































































































































































































































}
