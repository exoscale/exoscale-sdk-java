/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * SecurityGroupResource - Security Group
 */

public class SecurityGroupResource {

    /**
     * Security Group name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Whether this points to a public security group. This is only valid when in the context of
     *                    a rule addition which uses a public security group as a source or destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    private Optional<? extends SecurityGroupResourceVisibility> visibility;

    public SecurityGroupResource(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("visibility") Optional<? extends SecurityGroupResourceVisibility> visibility) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(visibility, "visibility");
        this.name = name;
        this.visibility = visibility;
    }

    /**
     * Security Group name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Whether this points to a public security group. This is only valid when in the context of
     *                    a rule addition which uses a public security group as a source or destination.
     */
    public Optional<? extends SecurityGroupResourceVisibility> visibility() {
        return visibility;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Security Group name
     */
    public SecurityGroupResource withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Security Group name
     */
    public SecurityGroupResource withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Whether this points to a public security group. This is only valid when in the context of
     *                    a rule addition which uses a public security group as a source or destination.
     */
    public SecurityGroupResource withVisibility(SecurityGroupResourceVisibility visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = Optional.ofNullable(visibility);
        return this;
    }

    /**
     * Whether this points to a public security group. This is only valid when in the context of
     *                    a rule addition which uses a public security group as a source or destination.
     */
    public SecurityGroupResource withVisibility(Optional<? extends SecurityGroupResourceVisibility> visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = visibility;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SecurityGroupResource other = (SecurityGroupResource) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.visibility, other.visibility);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            visibility);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SecurityGroupResource.class,
                "name", name,
                "visibility", visibility);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends SecurityGroupResourceVisibility> visibility = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Security Group name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Security Group name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Whether this points to a public security group. This is only valid when in the context of
         *                    a rule addition which uses a public security group as a source or destination.
         */
        public Builder visibility(SecurityGroupResourceVisibility visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = Optional.ofNullable(visibility);
            return this;
        }

        /**
         * Whether this points to a public security group. This is only valid when in the context of
         *                    a rule addition which uses a public security group as a source or destination.
         */
        public Builder visibility(Optional<? extends SecurityGroupResourceVisibility> visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = visibility;
            return this;
        }
        
        public SecurityGroupResource build() {
            return new SecurityGroupResource(
                name,
                visibility);
        }
    }
}

