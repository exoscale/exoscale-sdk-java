/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DbaasMigrationStatus {

    /**
     * Error message in case that migration has failed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends String> error;

    /**
     * Redis only: how many seconds since last I/O with redis master
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("master-last-io-seconds-ago")
    private Optional<? extends Long> masterLastIoSecondsAgo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("master-link-status")
    private Optional<? extends EnumMasterLinkStatus> masterLinkStatus;

    /**
     * Migration method. Empty in case of multiple methods or error
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<? extends String> method;

    /**
     * Migration status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends String> status;

    /**
     * Migration status per database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    private Optional<? extends java.util.List<Details>> details;

    public DbaasMigrationStatus(
            @JsonProperty("error") Optional<? extends String> error,
            @JsonProperty("master-last-io-seconds-ago") Optional<? extends Long> masterLastIoSecondsAgo,
            @JsonProperty("master-link-status") Optional<? extends EnumMasterLinkStatus> masterLinkStatus,
            @JsonProperty("method") Optional<? extends String> method,
            @JsonProperty("status") Optional<? extends String> status,
            @JsonProperty("details") Optional<? extends java.util.List<Details>> details) {
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(masterLastIoSecondsAgo, "masterLastIoSecondsAgo");
        Utils.checkNotNull(masterLinkStatus, "masterLinkStatus");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(details, "details");
        this.error = error;
        this.masterLastIoSecondsAgo = masterLastIoSecondsAgo;
        this.masterLinkStatus = masterLinkStatus;
        this.method = method;
        this.status = status;
        this.details = details;
    }

    /**
     * Error message in case that migration has failed
     */
    public Optional<? extends String> error() {
        return error;
    }

    /**
     * Redis only: how many seconds since last I/O with redis master
     */
    public Optional<? extends Long> masterLastIoSecondsAgo() {
        return masterLastIoSecondsAgo;
    }

    public Optional<? extends EnumMasterLinkStatus> masterLinkStatus() {
        return masterLinkStatus;
    }

    /**
     * Migration method. Empty in case of multiple methods or error
     */
    public Optional<? extends String> method() {
        return method;
    }

    /**
     * Migration status
     */
    public Optional<? extends String> status() {
        return status;
    }

    /**
     * Migration status per database
     */
    public Optional<? extends java.util.List<Details>> details() {
        return details;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Error message in case that migration has failed
     */
    public DbaasMigrationStatus withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    /**
     * Error message in case that migration has failed
     */
    public DbaasMigrationStatus withError(Optional<? extends String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * Redis only: how many seconds since last I/O with redis master
     */
    public DbaasMigrationStatus withMasterLastIoSecondsAgo(long masterLastIoSecondsAgo) {
        Utils.checkNotNull(masterLastIoSecondsAgo, "masterLastIoSecondsAgo");
        this.masterLastIoSecondsAgo = Optional.ofNullable(masterLastIoSecondsAgo);
        return this;
    }

    /**
     * Redis only: how many seconds since last I/O with redis master
     */
    public DbaasMigrationStatus withMasterLastIoSecondsAgo(Optional<? extends Long> masterLastIoSecondsAgo) {
        Utils.checkNotNull(masterLastIoSecondsAgo, "masterLastIoSecondsAgo");
        this.masterLastIoSecondsAgo = masterLastIoSecondsAgo;
        return this;
    }

    public DbaasMigrationStatus withMasterLinkStatus(EnumMasterLinkStatus masterLinkStatus) {
        Utils.checkNotNull(masterLinkStatus, "masterLinkStatus");
        this.masterLinkStatus = Optional.ofNullable(masterLinkStatus);
        return this;
    }

    public DbaasMigrationStatus withMasterLinkStatus(Optional<? extends EnumMasterLinkStatus> masterLinkStatus) {
        Utils.checkNotNull(masterLinkStatus, "masterLinkStatus");
        this.masterLinkStatus = masterLinkStatus;
        return this;
    }

    /**
     * Migration method. Empty in case of multiple methods or error
     */
    public DbaasMigrationStatus withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = Optional.ofNullable(method);
        return this;
    }

    /**
     * Migration method. Empty in case of multiple methods or error
     */
    public DbaasMigrationStatus withMethod(Optional<? extends String> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * Migration status
     */
    public DbaasMigrationStatus withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Migration status
     */
    public DbaasMigrationStatus withStatus(Optional<? extends String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Migration status per database
     */
    public DbaasMigrationStatus withDetails(java.util.List<Details> details) {
        Utils.checkNotNull(details, "details");
        this.details = Optional.ofNullable(details);
        return this;
    }

    /**
     * Migration status per database
     */
    public DbaasMigrationStatus withDetails(Optional<? extends java.util.List<Details>> details) {
        Utils.checkNotNull(details, "details");
        this.details = details;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasMigrationStatus other = (DbaasMigrationStatus) o;
        return 
            java.util.Objects.deepEquals(this.error, other.error) &&
            java.util.Objects.deepEquals(this.masterLastIoSecondsAgo, other.masterLastIoSecondsAgo) &&
            java.util.Objects.deepEquals(this.masterLinkStatus, other.masterLinkStatus) &&
            java.util.Objects.deepEquals(this.method, other.method) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.details, other.details);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            error,
            masterLastIoSecondsAgo,
            masterLinkStatus,
            method,
            status,
            details);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasMigrationStatus.class,
                "error", error,
                "masterLastIoSecondsAgo", masterLastIoSecondsAgo,
                "masterLinkStatus", masterLinkStatus,
                "method", method,
                "status", status,
                "details", details);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> error = Optional.empty();
 
        private Optional<? extends Long> masterLastIoSecondsAgo = Optional.empty();
 
        private Optional<? extends EnumMasterLinkStatus> masterLinkStatus = Optional.empty();
 
        private Optional<? extends String> method = Optional.empty();
 
        private Optional<? extends String> status = Optional.empty();
 
        private Optional<? extends java.util.List<Details>> details = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Error message in case that migration has failed
         */
        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * Error message in case that migration has failed
         */
        public Builder error(Optional<? extends String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        /**
         * Redis only: how many seconds since last I/O with redis master
         */
        public Builder masterLastIoSecondsAgo(long masterLastIoSecondsAgo) {
            Utils.checkNotNull(masterLastIoSecondsAgo, "masterLastIoSecondsAgo");
            this.masterLastIoSecondsAgo = Optional.ofNullable(masterLastIoSecondsAgo);
            return this;
        }

        /**
         * Redis only: how many seconds since last I/O with redis master
         */
        public Builder masterLastIoSecondsAgo(Optional<? extends Long> masterLastIoSecondsAgo) {
            Utils.checkNotNull(masterLastIoSecondsAgo, "masterLastIoSecondsAgo");
            this.masterLastIoSecondsAgo = masterLastIoSecondsAgo;
            return this;
        }

        public Builder masterLinkStatus(EnumMasterLinkStatus masterLinkStatus) {
            Utils.checkNotNull(masterLinkStatus, "masterLinkStatus");
            this.masterLinkStatus = Optional.ofNullable(masterLinkStatus);
            return this;
        }

        public Builder masterLinkStatus(Optional<? extends EnumMasterLinkStatus> masterLinkStatus) {
            Utils.checkNotNull(masterLinkStatus, "masterLinkStatus");
            this.masterLinkStatus = masterLinkStatus;
            return this;
        }

        /**
         * Migration method. Empty in case of multiple methods or error
         */
        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * Migration method. Empty in case of multiple methods or error
         */
        public Builder method(Optional<? extends String> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * Migration status
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Migration status
         */
        public Builder status(Optional<? extends String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Migration status per database
         */
        public Builder details(java.util.List<Details> details) {
            Utils.checkNotNull(details, "details");
            this.details = Optional.ofNullable(details);
            return this;
        }

        /**
         * Migration status per database
         */
        public Builder details(Optional<? extends java.util.List<Details>> details) {
            Utils.checkNotNull(details, "details");
            this.details = details;
            return this;
        }
        
        public DbaasMigrationStatus build() {
            return new DbaasMigrationStatus(
                error,
                masterLastIoSecondsAgo,
                masterLinkStatus,
                method,
                status,
                details);
        }
    }
}

