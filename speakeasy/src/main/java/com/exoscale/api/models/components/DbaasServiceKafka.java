/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class DbaasServiceKafka {

    /**
     * Service last update timestamp (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated-at")
    private Optional<? extends OffsetDateTime> updatedAt;

    /**
     * Kafka authentication methods
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication-methods")
    private Optional<? extends AuthenticationMethods> authenticationMethods;

    /**
     * Number of service nodes in the active plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-count")
    private Optional<? extends Long> nodeCount;

    /**
     * Kafka connection information properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection-info")
    private Optional<? extends DbaasServiceKafkaConnectionInfo> connectionInfo;

    /**
     * Number of CPUs for each node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-cpu-count")
    private Optional<? extends Long> nodeCpuCount;

    /**
     * Whether Kafka REST is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-rest-enabled")
    private Optional<? extends Boolean> kafkaRestEnabled;

    /**
     * Service integrations
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrations")
    private Optional<? extends java.util.List<DbaasIntegration>> integrations;

    /**
     * The zone where the service is running
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    private Optional<? extends String> zone;

    /**
     * State of individual service nodes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-states")
    private Optional<? extends java.util.List<DbaasNodeState>> nodeStates;

    @JsonProperty("name")
    private String name;

    /**
     * Whether Kafka Connect is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-connect-enabled")
    private Optional<? extends Boolean> kafkaConnectEnabled;

    @JsonProperty("type")
    private String type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends EnumServiceState> state;

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip-filter")
    private Optional<? extends java.util.List<String>> ipFilter;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema-registry-settings")
    private Optional<? extends JsonSchemaSchemaRegistry> schemaRegistrySettings;

    /**
     * List of backups for the service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backups")
    private Optional<? extends java.util.List<DbaasServiceBackup>> backups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-rest-settings")
    private Optional<? extends JsonSchemaKafkaRest> kafkaRestSettings;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    /**
     * Service notifications
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifications")
    private Optional<? extends java.util.List<DbaasServiceNotification>> notifications;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-connect-settings")
    private Optional<? extends JsonSchemaKafkaConnect> kafkaConnectSettings;

    /**
     * Service component information objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("components")
    private Optional<? extends java.util.List<DbaasServiceKafkaComponents>> components;

    /**
     * Automatic maintenance settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenance")
    private Optional<? extends DbaasServiceMaintenance> maintenance;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafka-settings")
    private Optional<? extends JsonSchemaKafka> kafkaSettings;

    /**
     * TODO UNIT disk space for data storage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disk-size")
    private Optional<? extends Long> diskSize;

    /**
     * TODO UNIT of memory for each node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-memory")
    private Optional<? extends Long> nodeMemory;

    /**
     * URI for connecting to the service (may be absent)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    private Optional<? extends String> uri;

    /**
     * service_uri parameterized into key-value pairs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri-params")
    private Optional<? extends DbaasServiceKafkaUriParams> uriParams;

    /**
     * Whether Schema-Registry is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema-registry-enabled")
    private Optional<? extends Boolean> schemaRegistryEnabled;

    /**
     * Kafka version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    /**
     * Service creation timestamp (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * Subscription plan
     */
    @JsonProperty("plan")
    private String plan;

    /**
     * List of service users
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    private Optional<? extends java.util.List<DbaasServiceKafkaUsers>> users;

    public DbaasServiceKafka(
            @JsonProperty("updated-at") Optional<? extends OffsetDateTime> updatedAt,
            @JsonProperty("authentication-methods") Optional<? extends AuthenticationMethods> authenticationMethods,
            @JsonProperty("node-count") Optional<? extends Long> nodeCount,
            @JsonProperty("connection-info") Optional<? extends DbaasServiceKafkaConnectionInfo> connectionInfo,
            @JsonProperty("node-cpu-count") Optional<? extends Long> nodeCpuCount,
            @JsonProperty("kafka-rest-enabled") Optional<? extends Boolean> kafkaRestEnabled,
            @JsonProperty("integrations") Optional<? extends java.util.List<DbaasIntegration>> integrations,
            @JsonProperty("zone") Optional<? extends String> zone,
            @JsonProperty("node-states") Optional<? extends java.util.List<DbaasNodeState>> nodeStates,
            @JsonProperty("name") String name,
            @JsonProperty("kafka-connect-enabled") Optional<? extends Boolean> kafkaConnectEnabled,
            @JsonProperty("type") String type,
            @JsonProperty("state") Optional<? extends EnumServiceState> state,
            @JsonProperty("ip-filter") Optional<? extends java.util.List<String>> ipFilter,
            @JsonProperty("schema-registry-settings") Optional<? extends JsonSchemaSchemaRegistry> schemaRegistrySettings,
            @JsonProperty("backups") Optional<? extends java.util.List<DbaasServiceBackup>> backups,
            @JsonProperty("kafka-rest-settings") Optional<? extends JsonSchemaKafkaRest> kafkaRestSettings,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("notifications") Optional<? extends java.util.List<DbaasServiceNotification>> notifications,
            @JsonProperty("kafka-connect-settings") Optional<? extends JsonSchemaKafkaConnect> kafkaConnectSettings,
            @JsonProperty("components") Optional<? extends java.util.List<DbaasServiceKafkaComponents>> components,
            @JsonProperty("maintenance") Optional<? extends DbaasServiceMaintenance> maintenance,
            @JsonProperty("kafka-settings") Optional<? extends JsonSchemaKafka> kafkaSettings,
            @JsonProperty("disk-size") Optional<? extends Long> diskSize,
            @JsonProperty("node-memory") Optional<? extends Long> nodeMemory,
            @JsonProperty("uri") Optional<? extends String> uri,
            @JsonProperty("uri-params") Optional<? extends DbaasServiceKafkaUriParams> uriParams,
            @JsonProperty("schema-registry-enabled") Optional<? extends Boolean> schemaRegistryEnabled,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("plan") String plan,
            @JsonProperty("users") Optional<? extends java.util.List<DbaasServiceKafkaUsers>> users) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(authenticationMethods, "authenticationMethods");
        Utils.checkNotNull(nodeCount, "nodeCount");
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        Utils.checkNotNull(kafkaRestEnabled, "kafkaRestEnabled");
        Utils.checkNotNull(integrations, "integrations");
        Utils.checkNotNull(zone, "zone");
        Utils.checkNotNull(nodeStates, "nodeStates");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(kafkaConnectEnabled, "kafkaConnectEnabled");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(ipFilter, "ipFilter");
        Utils.checkNotNull(schemaRegistrySettings, "schemaRegistrySettings");
        Utils.checkNotNull(backups, "backups");
        Utils.checkNotNull(kafkaRestSettings, "kafkaRestSettings");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(notifications, "notifications");
        Utils.checkNotNull(kafkaConnectSettings, "kafkaConnectSettings");
        Utils.checkNotNull(components, "components");
        Utils.checkNotNull(maintenance, "maintenance");
        Utils.checkNotNull(kafkaSettings, "kafkaSettings");
        Utils.checkNotNull(diskSize, "diskSize");
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        Utils.checkNotNull(uri, "uri");
        Utils.checkNotNull(uriParams, "uriParams");
        Utils.checkNotNull(schemaRegistryEnabled, "schemaRegistryEnabled");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(plan, "plan");
        Utils.checkNotNull(users, "users");
        this.updatedAt = updatedAt;
        this.authenticationMethods = authenticationMethods;
        this.nodeCount = nodeCount;
        this.connectionInfo = connectionInfo;
        this.nodeCpuCount = nodeCpuCount;
        this.kafkaRestEnabled = kafkaRestEnabled;
        this.integrations = integrations;
        this.zone = zone;
        this.nodeStates = nodeStates;
        this.name = name;
        this.kafkaConnectEnabled = kafkaConnectEnabled;
        this.type = type;
        this.state = state;
        this.ipFilter = ipFilter;
        this.schemaRegistrySettings = schemaRegistrySettings;
        this.backups = backups;
        this.kafkaRestSettings = kafkaRestSettings;
        this.terminationProtection = terminationProtection;
        this.notifications = notifications;
        this.kafkaConnectSettings = kafkaConnectSettings;
        this.components = components;
        this.maintenance = maintenance;
        this.kafkaSettings = kafkaSettings;
        this.diskSize = diskSize;
        this.nodeMemory = nodeMemory;
        this.uri = uri;
        this.uriParams = uriParams;
        this.schemaRegistryEnabled = schemaRegistryEnabled;
        this.version = version;
        this.createdAt = createdAt;
        this.plan = plan;
        this.users = users;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public Optional<? extends OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * Kafka authentication methods
     */
    public Optional<? extends AuthenticationMethods> authenticationMethods() {
        return authenticationMethods;
    }

    /**
     * Number of service nodes in the active plan
     */
    public Optional<? extends Long> nodeCount() {
        return nodeCount;
    }

    /**
     * Kafka connection information properties
     */
    public Optional<? extends DbaasServiceKafkaConnectionInfo> connectionInfo() {
        return connectionInfo;
    }

    /**
     * Number of CPUs for each node
     */
    public Optional<? extends Long> nodeCpuCount() {
        return nodeCpuCount;
    }

    /**
     * Whether Kafka REST is enabled
     */
    public Optional<? extends Boolean> kafkaRestEnabled() {
        return kafkaRestEnabled;
    }

    /**
     * Service integrations
     */
    public Optional<? extends java.util.List<DbaasIntegration>> integrations() {
        return integrations;
    }

    /**
     * The zone where the service is running
     */
    public Optional<? extends String> zone() {
        return zone;
    }

    /**
     * State of individual service nodes
     */
    public Optional<? extends java.util.List<DbaasNodeState>> nodeStates() {
        return nodeStates;
    }

    public String name() {
        return name;
    }

    /**
     * Whether Kafka Connect is enabled
     */
    public Optional<? extends Boolean> kafkaConnectEnabled() {
        return kafkaConnectEnabled;
    }

    public String type() {
        return type;
    }

    public Optional<? extends EnumServiceState> state() {
        return state;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public Optional<? extends java.util.List<String>> ipFilter() {
        return ipFilter;
    }

    public Optional<? extends JsonSchemaSchemaRegistry> schemaRegistrySettings() {
        return schemaRegistrySettings;
    }

    /**
     * List of backups for the service
     */
    public Optional<? extends java.util.List<DbaasServiceBackup>> backups() {
        return backups;
    }

    public Optional<? extends JsonSchemaKafkaRest> kafkaRestSettings() {
        return kafkaRestSettings;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    /**
     * Service notifications
     */
    public Optional<? extends java.util.List<DbaasServiceNotification>> notifications() {
        return notifications;
    }

    public Optional<? extends JsonSchemaKafkaConnect> kafkaConnectSettings() {
        return kafkaConnectSettings;
    }

    /**
     * Service component information objects
     */
    public Optional<? extends java.util.List<DbaasServiceKafkaComponents>> components() {
        return components;
    }

    /**
     * Automatic maintenance settings
     */
    public Optional<? extends DbaasServiceMaintenance> maintenance() {
        return maintenance;
    }

    public Optional<? extends JsonSchemaKafka> kafkaSettings() {
        return kafkaSettings;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public Optional<? extends Long> diskSize() {
        return diskSize;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public Optional<? extends Long> nodeMemory() {
        return nodeMemory;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public Optional<? extends String> uri() {
        return uri;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public Optional<? extends DbaasServiceKafkaUriParams> uriParams() {
        return uriParams;
    }

    /**
     * Whether Schema-Registry is enabled
     */
    public Optional<? extends Boolean> schemaRegistryEnabled() {
        return schemaRegistryEnabled;
    }

    /**
     * Kafka version
     */
    public Optional<? extends String> version() {
        return version;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Subscription plan
     */
    public String plan() {
        return plan;
    }

    /**
     * List of service users
     */
    public Optional<? extends java.util.List<DbaasServiceKafkaUsers>> users() {
        return users;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public DbaasServiceKafka withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public DbaasServiceKafka withUpdatedAt(Optional<? extends OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Kafka authentication methods
     */
    public DbaasServiceKafka withAuthenticationMethods(AuthenticationMethods authenticationMethods) {
        Utils.checkNotNull(authenticationMethods, "authenticationMethods");
        this.authenticationMethods = Optional.ofNullable(authenticationMethods);
        return this;
    }

    /**
     * Kafka authentication methods
     */
    public DbaasServiceKafka withAuthenticationMethods(Optional<? extends AuthenticationMethods> authenticationMethods) {
        Utils.checkNotNull(authenticationMethods, "authenticationMethods");
        this.authenticationMethods = authenticationMethods;
        return this;
    }

    /**
     * Number of service nodes in the active plan
     */
    public DbaasServiceKafka withNodeCount(long nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = Optional.ofNullable(nodeCount);
        return this;
    }

    /**
     * Number of service nodes in the active plan
     */
    public DbaasServiceKafka withNodeCount(Optional<? extends Long> nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * Kafka connection information properties
     */
    public DbaasServiceKafka withConnectionInfo(DbaasServiceKafkaConnectionInfo connectionInfo) {
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        this.connectionInfo = Optional.ofNullable(connectionInfo);
        return this;
    }

    /**
     * Kafka connection information properties
     */
    public DbaasServiceKafka withConnectionInfo(Optional<? extends DbaasServiceKafkaConnectionInfo> connectionInfo) {
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        this.connectionInfo = connectionInfo;
        return this;
    }

    /**
     * Number of CPUs for each node
     */
    public DbaasServiceKafka withNodeCpuCount(long nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
        return this;
    }

    /**
     * Number of CPUs for each node
     */
    public DbaasServiceKafka withNodeCpuCount(Optional<? extends Long> nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = nodeCpuCount;
        return this;
    }

    /**
     * Whether Kafka REST is enabled
     */
    public DbaasServiceKafka withKafkaRestEnabled(boolean kafkaRestEnabled) {
        Utils.checkNotNull(kafkaRestEnabled, "kafkaRestEnabled");
        this.kafkaRestEnabled = Optional.ofNullable(kafkaRestEnabled);
        return this;
    }

    /**
     * Whether Kafka REST is enabled
     */
    public DbaasServiceKafka withKafkaRestEnabled(Optional<? extends Boolean> kafkaRestEnabled) {
        Utils.checkNotNull(kafkaRestEnabled, "kafkaRestEnabled");
        this.kafkaRestEnabled = kafkaRestEnabled;
        return this;
    }

    /**
     * Service integrations
     */
    public DbaasServiceKafka withIntegrations(java.util.List<DbaasIntegration> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = Optional.ofNullable(integrations);
        return this;
    }

    /**
     * Service integrations
     */
    public DbaasServiceKafka withIntegrations(Optional<? extends java.util.List<DbaasIntegration>> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = integrations;
        return this;
    }

    /**
     * The zone where the service is running
     */
    public DbaasServiceKafka withZone(String zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = Optional.ofNullable(zone);
        return this;
    }

    /**
     * The zone where the service is running
     */
    public DbaasServiceKafka withZone(Optional<? extends String> zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = zone;
        return this;
    }

    /**
     * State of individual service nodes
     */
    public DbaasServiceKafka withNodeStates(java.util.List<DbaasNodeState> nodeStates) {
        Utils.checkNotNull(nodeStates, "nodeStates");
        this.nodeStates = Optional.ofNullable(nodeStates);
        return this;
    }

    /**
     * State of individual service nodes
     */
    public DbaasServiceKafka withNodeStates(Optional<? extends java.util.List<DbaasNodeState>> nodeStates) {
        Utils.checkNotNull(nodeStates, "nodeStates");
        this.nodeStates = nodeStates;
        return this;
    }

    public DbaasServiceKafka withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Whether Kafka Connect is enabled
     */
    public DbaasServiceKafka withKafkaConnectEnabled(boolean kafkaConnectEnabled) {
        Utils.checkNotNull(kafkaConnectEnabled, "kafkaConnectEnabled");
        this.kafkaConnectEnabled = Optional.ofNullable(kafkaConnectEnabled);
        return this;
    }

    /**
     * Whether Kafka Connect is enabled
     */
    public DbaasServiceKafka withKafkaConnectEnabled(Optional<? extends Boolean> kafkaConnectEnabled) {
        Utils.checkNotNull(kafkaConnectEnabled, "kafkaConnectEnabled");
        this.kafkaConnectEnabled = kafkaConnectEnabled;
        return this;
    }

    public DbaasServiceKafka withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public DbaasServiceKafka withState(EnumServiceState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public DbaasServiceKafka withState(Optional<? extends EnumServiceState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public DbaasServiceKafka withIpFilter(java.util.List<String> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = Optional.ofNullable(ipFilter);
        return this;
    }

    /**
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     */
    public DbaasServiceKafka withIpFilter(Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = ipFilter;
        return this;
    }

    public DbaasServiceKafka withSchemaRegistrySettings(JsonSchemaSchemaRegistry schemaRegistrySettings) {
        Utils.checkNotNull(schemaRegistrySettings, "schemaRegistrySettings");
        this.schemaRegistrySettings = Optional.ofNullable(schemaRegistrySettings);
        return this;
    }

    public DbaasServiceKafka withSchemaRegistrySettings(Optional<? extends JsonSchemaSchemaRegistry> schemaRegistrySettings) {
        Utils.checkNotNull(schemaRegistrySettings, "schemaRegistrySettings");
        this.schemaRegistrySettings = schemaRegistrySettings;
        return this;
    }

    /**
     * List of backups for the service
     */
    public DbaasServiceKafka withBackups(java.util.List<DbaasServiceBackup> backups) {
        Utils.checkNotNull(backups, "backups");
        this.backups = Optional.ofNullable(backups);
        return this;
    }

    /**
     * List of backups for the service
     */
    public DbaasServiceKafka withBackups(Optional<? extends java.util.List<DbaasServiceBackup>> backups) {
        Utils.checkNotNull(backups, "backups");
        this.backups = backups;
        return this;
    }

    public DbaasServiceKafka withKafkaRestSettings(JsonSchemaKafkaRest kafkaRestSettings) {
        Utils.checkNotNull(kafkaRestSettings, "kafkaRestSettings");
        this.kafkaRestSettings = Optional.ofNullable(kafkaRestSettings);
        return this;
    }

    public DbaasServiceKafka withKafkaRestSettings(Optional<? extends JsonSchemaKafkaRest> kafkaRestSettings) {
        Utils.checkNotNull(kafkaRestSettings, "kafkaRestSettings");
        this.kafkaRestSettings = kafkaRestSettings;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public DbaasServiceKafka withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public DbaasServiceKafka withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    /**
     * Service notifications
     */
    public DbaasServiceKafka withNotifications(java.util.List<DbaasServiceNotification> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = Optional.ofNullable(notifications);
        return this;
    }

    /**
     * Service notifications
     */
    public DbaasServiceKafka withNotifications(Optional<? extends java.util.List<DbaasServiceNotification>> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = notifications;
        return this;
    }

    public DbaasServiceKafka withKafkaConnectSettings(JsonSchemaKafkaConnect kafkaConnectSettings) {
        Utils.checkNotNull(kafkaConnectSettings, "kafkaConnectSettings");
        this.kafkaConnectSettings = Optional.ofNullable(kafkaConnectSettings);
        return this;
    }

    public DbaasServiceKafka withKafkaConnectSettings(Optional<? extends JsonSchemaKafkaConnect> kafkaConnectSettings) {
        Utils.checkNotNull(kafkaConnectSettings, "kafkaConnectSettings");
        this.kafkaConnectSettings = kafkaConnectSettings;
        return this;
    }

    /**
     * Service component information objects
     */
    public DbaasServiceKafka withComponents(java.util.List<DbaasServiceKafkaComponents> components) {
        Utils.checkNotNull(components, "components");
        this.components = Optional.ofNullable(components);
        return this;
    }

    /**
     * Service component information objects
     */
    public DbaasServiceKafka withComponents(Optional<? extends java.util.List<DbaasServiceKafkaComponents>> components) {
        Utils.checkNotNull(components, "components");
        this.components = components;
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public DbaasServiceKafka withMaintenance(DbaasServiceMaintenance maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = Optional.ofNullable(maintenance);
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public DbaasServiceKafka withMaintenance(Optional<? extends DbaasServiceMaintenance> maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = maintenance;
        return this;
    }

    public DbaasServiceKafka withKafkaSettings(JsonSchemaKafka kafkaSettings) {
        Utils.checkNotNull(kafkaSettings, "kafkaSettings");
        this.kafkaSettings = Optional.ofNullable(kafkaSettings);
        return this;
    }

    public DbaasServiceKafka withKafkaSettings(Optional<? extends JsonSchemaKafka> kafkaSettings) {
        Utils.checkNotNull(kafkaSettings, "kafkaSettings");
        this.kafkaSettings = kafkaSettings;
        return this;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public DbaasServiceKafka withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = Optional.ofNullable(diskSize);
        return this;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public DbaasServiceKafka withDiskSize(Optional<? extends Long> diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public DbaasServiceKafka withNodeMemory(long nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = Optional.ofNullable(nodeMemory);
        return this;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public DbaasServiceKafka withNodeMemory(Optional<? extends Long> nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = nodeMemory;
        return this;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public DbaasServiceKafka withUri(String uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = Optional.ofNullable(uri);
        return this;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public DbaasServiceKafka withUri(Optional<? extends String> uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = uri;
        return this;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public DbaasServiceKafka withUriParams(DbaasServiceKafkaUriParams uriParams) {
        Utils.checkNotNull(uriParams, "uriParams");
        this.uriParams = Optional.ofNullable(uriParams);
        return this;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public DbaasServiceKafka withUriParams(Optional<? extends DbaasServiceKafkaUriParams> uriParams) {
        Utils.checkNotNull(uriParams, "uriParams");
        this.uriParams = uriParams;
        return this;
    }

    /**
     * Whether Schema-Registry is enabled
     */
    public DbaasServiceKafka withSchemaRegistryEnabled(boolean schemaRegistryEnabled) {
        Utils.checkNotNull(schemaRegistryEnabled, "schemaRegistryEnabled");
        this.schemaRegistryEnabled = Optional.ofNullable(schemaRegistryEnabled);
        return this;
    }

    /**
     * Whether Schema-Registry is enabled
     */
    public DbaasServiceKafka withSchemaRegistryEnabled(Optional<? extends Boolean> schemaRegistryEnabled) {
        Utils.checkNotNull(schemaRegistryEnabled, "schemaRegistryEnabled");
        this.schemaRegistryEnabled = schemaRegistryEnabled;
        return this;
    }

    /**
     * Kafka version
     */
    public DbaasServiceKafka withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * Kafka version
     */
    public DbaasServiceKafka withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public DbaasServiceKafka withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public DbaasServiceKafka withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Subscription plan
     */
    public DbaasServiceKafka withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }

    /**
     * List of service users
     */
    public DbaasServiceKafka withUsers(java.util.List<DbaasServiceKafkaUsers> users) {
        Utils.checkNotNull(users, "users");
        this.users = Optional.ofNullable(users);
        return this;
    }

    /**
     * List of service users
     */
    public DbaasServiceKafka withUsers(Optional<? extends java.util.List<DbaasServiceKafkaUsers>> users) {
        Utils.checkNotNull(users, "users");
        this.users = users;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceKafka other = (DbaasServiceKafka) o;
        return 
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.authenticationMethods, other.authenticationMethods) &&
            java.util.Objects.deepEquals(this.nodeCount, other.nodeCount) &&
            java.util.Objects.deepEquals(this.connectionInfo, other.connectionInfo) &&
            java.util.Objects.deepEquals(this.nodeCpuCount, other.nodeCpuCount) &&
            java.util.Objects.deepEquals(this.kafkaRestEnabled, other.kafkaRestEnabled) &&
            java.util.Objects.deepEquals(this.integrations, other.integrations) &&
            java.util.Objects.deepEquals(this.zone, other.zone) &&
            java.util.Objects.deepEquals(this.nodeStates, other.nodeStates) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.kafkaConnectEnabled, other.kafkaConnectEnabled) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.ipFilter, other.ipFilter) &&
            java.util.Objects.deepEquals(this.schemaRegistrySettings, other.schemaRegistrySettings) &&
            java.util.Objects.deepEquals(this.backups, other.backups) &&
            java.util.Objects.deepEquals(this.kafkaRestSettings, other.kafkaRestSettings) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.notifications, other.notifications) &&
            java.util.Objects.deepEquals(this.kafkaConnectSettings, other.kafkaConnectSettings) &&
            java.util.Objects.deepEquals(this.components, other.components) &&
            java.util.Objects.deepEquals(this.maintenance, other.maintenance) &&
            java.util.Objects.deepEquals(this.kafkaSettings, other.kafkaSettings) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize) &&
            java.util.Objects.deepEquals(this.nodeMemory, other.nodeMemory) &&
            java.util.Objects.deepEquals(this.uri, other.uri) &&
            java.util.Objects.deepEquals(this.uriParams, other.uriParams) &&
            java.util.Objects.deepEquals(this.schemaRegistryEnabled, other.schemaRegistryEnabled) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.plan, other.plan) &&
            java.util.Objects.deepEquals(this.users, other.users);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            updatedAt,
            authenticationMethods,
            nodeCount,
            connectionInfo,
            nodeCpuCount,
            kafkaRestEnabled,
            integrations,
            zone,
            nodeStates,
            name,
            kafkaConnectEnabled,
            type,
            state,
            ipFilter,
            schemaRegistrySettings,
            backups,
            kafkaRestSettings,
            terminationProtection,
            notifications,
            kafkaConnectSettings,
            components,
            maintenance,
            kafkaSettings,
            diskSize,
            nodeMemory,
            uri,
            uriParams,
            schemaRegistryEnabled,
            version,
            createdAt,
            plan,
            users);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceKafka.class,
                "updatedAt", updatedAt,
                "authenticationMethods", authenticationMethods,
                "nodeCount", nodeCount,
                "connectionInfo", connectionInfo,
                "nodeCpuCount", nodeCpuCount,
                "kafkaRestEnabled", kafkaRestEnabled,
                "integrations", integrations,
                "zone", zone,
                "nodeStates", nodeStates,
                "name", name,
                "kafkaConnectEnabled", kafkaConnectEnabled,
                "type", type,
                "state", state,
                "ipFilter", ipFilter,
                "schemaRegistrySettings", schemaRegistrySettings,
                "backups", backups,
                "kafkaRestSettings", kafkaRestSettings,
                "terminationProtection", terminationProtection,
                "notifications", notifications,
                "kafkaConnectSettings", kafkaConnectSettings,
                "components", components,
                "maintenance", maintenance,
                "kafkaSettings", kafkaSettings,
                "diskSize", diskSize,
                "nodeMemory", nodeMemory,
                "uri", uri,
                "uriParams", uriParams,
                "schemaRegistryEnabled", schemaRegistryEnabled,
                "version", version,
                "createdAt", createdAt,
                "plan", plan,
                "users", users);
    }
    
    public final static class Builder {
 
        private Optional<? extends OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<? extends AuthenticationMethods> authenticationMethods = Optional.empty();
 
        private Optional<? extends Long> nodeCount = Optional.empty();
 
        private Optional<? extends DbaasServiceKafkaConnectionInfo> connectionInfo = Optional.empty();
 
        private Optional<? extends Long> nodeCpuCount = Optional.empty();
 
        private Optional<? extends Boolean> kafkaRestEnabled = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasIntegration>> integrations = Optional.empty();
 
        private Optional<? extends String> zone = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasNodeState>> nodeStates = Optional.empty();
 
        private String name;
 
        private Optional<? extends Boolean> kafkaConnectEnabled = Optional.empty();
 
        private String type;
 
        private Optional<? extends EnumServiceState> state = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ipFilter = Optional.empty();
 
        private Optional<? extends JsonSchemaSchemaRegistry> schemaRegistrySettings = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceBackup>> backups = Optional.empty();
 
        private Optional<? extends JsonSchemaKafkaRest> kafkaRestSettings = Optional.empty();
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceNotification>> notifications = Optional.empty();
 
        private Optional<? extends JsonSchemaKafkaConnect> kafkaConnectSettings = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceKafkaComponents>> components = Optional.empty();
 
        private Optional<? extends DbaasServiceMaintenance> maintenance = Optional.empty();
 
        private Optional<? extends JsonSchemaKafka> kafkaSettings = Optional.empty();
 
        private Optional<? extends Long> diskSize = Optional.empty();
 
        private Optional<? extends Long> nodeMemory = Optional.empty();
 
        private Optional<? extends String> uri = Optional.empty();
 
        private Optional<? extends DbaasServiceKafkaUriParams> uriParams = Optional.empty();
 
        private Optional<? extends Boolean> schemaRegistryEnabled = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private String plan;
 
        private Optional<? extends java.util.List<DbaasServiceKafkaUsers>> users = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Service last update timestamp (ISO 8601)
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Service last update timestamp (ISO 8601)
         */
        public Builder updatedAt(Optional<? extends OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Kafka authentication methods
         */
        public Builder authenticationMethods(AuthenticationMethods authenticationMethods) {
            Utils.checkNotNull(authenticationMethods, "authenticationMethods");
            this.authenticationMethods = Optional.ofNullable(authenticationMethods);
            return this;
        }

        /**
         * Kafka authentication methods
         */
        public Builder authenticationMethods(Optional<? extends AuthenticationMethods> authenticationMethods) {
            Utils.checkNotNull(authenticationMethods, "authenticationMethods");
            this.authenticationMethods = authenticationMethods;
            return this;
        }

        /**
         * Number of service nodes in the active plan
         */
        public Builder nodeCount(long nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = Optional.ofNullable(nodeCount);
            return this;
        }

        /**
         * Number of service nodes in the active plan
         */
        public Builder nodeCount(Optional<? extends Long> nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = nodeCount;
            return this;
        }

        /**
         * Kafka connection information properties
         */
        public Builder connectionInfo(DbaasServiceKafkaConnectionInfo connectionInfo) {
            Utils.checkNotNull(connectionInfo, "connectionInfo");
            this.connectionInfo = Optional.ofNullable(connectionInfo);
            return this;
        }

        /**
         * Kafka connection information properties
         */
        public Builder connectionInfo(Optional<? extends DbaasServiceKafkaConnectionInfo> connectionInfo) {
            Utils.checkNotNull(connectionInfo, "connectionInfo");
            this.connectionInfo = connectionInfo;
            return this;
        }

        /**
         * Number of CPUs for each node
         */
        public Builder nodeCpuCount(long nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
            return this;
        }

        /**
         * Number of CPUs for each node
         */
        public Builder nodeCpuCount(Optional<? extends Long> nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = nodeCpuCount;
            return this;
        }

        /**
         * Whether Kafka REST is enabled
         */
        public Builder kafkaRestEnabled(boolean kafkaRestEnabled) {
            Utils.checkNotNull(kafkaRestEnabled, "kafkaRestEnabled");
            this.kafkaRestEnabled = Optional.ofNullable(kafkaRestEnabled);
            return this;
        }

        /**
         * Whether Kafka REST is enabled
         */
        public Builder kafkaRestEnabled(Optional<? extends Boolean> kafkaRestEnabled) {
            Utils.checkNotNull(kafkaRestEnabled, "kafkaRestEnabled");
            this.kafkaRestEnabled = kafkaRestEnabled;
            return this;
        }

        /**
         * Service integrations
         */
        public Builder integrations(java.util.List<DbaasIntegration> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = Optional.ofNullable(integrations);
            return this;
        }

        /**
         * Service integrations
         */
        public Builder integrations(Optional<? extends java.util.List<DbaasIntegration>> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = integrations;
            return this;
        }

        /**
         * The zone where the service is running
         */
        public Builder zone(String zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = Optional.ofNullable(zone);
            return this;
        }

        /**
         * The zone where the service is running
         */
        public Builder zone(Optional<? extends String> zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = zone;
            return this;
        }

        /**
         * State of individual service nodes
         */
        public Builder nodeStates(java.util.List<DbaasNodeState> nodeStates) {
            Utils.checkNotNull(nodeStates, "nodeStates");
            this.nodeStates = Optional.ofNullable(nodeStates);
            return this;
        }

        /**
         * State of individual service nodes
         */
        public Builder nodeStates(Optional<? extends java.util.List<DbaasNodeState>> nodeStates) {
            Utils.checkNotNull(nodeStates, "nodeStates");
            this.nodeStates = nodeStates;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Whether Kafka Connect is enabled
         */
        public Builder kafkaConnectEnabled(boolean kafkaConnectEnabled) {
            Utils.checkNotNull(kafkaConnectEnabled, "kafkaConnectEnabled");
            this.kafkaConnectEnabled = Optional.ofNullable(kafkaConnectEnabled);
            return this;
        }

        /**
         * Whether Kafka Connect is enabled
         */
        public Builder kafkaConnectEnabled(Optional<? extends Boolean> kafkaConnectEnabled) {
            Utils.checkNotNull(kafkaConnectEnabled, "kafkaConnectEnabled");
            this.kafkaConnectEnabled = kafkaConnectEnabled;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder state(EnumServiceState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends EnumServiceState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(java.util.List<String> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = Optional.ofNullable(ipFilter);
            return this;
        }

        /**
         * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
         */
        public Builder ipFilter(Optional<? extends java.util.List<String>> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = ipFilter;
            return this;
        }

        public Builder schemaRegistrySettings(JsonSchemaSchemaRegistry schemaRegistrySettings) {
            Utils.checkNotNull(schemaRegistrySettings, "schemaRegistrySettings");
            this.schemaRegistrySettings = Optional.ofNullable(schemaRegistrySettings);
            return this;
        }

        public Builder schemaRegistrySettings(Optional<? extends JsonSchemaSchemaRegistry> schemaRegistrySettings) {
            Utils.checkNotNull(schemaRegistrySettings, "schemaRegistrySettings");
            this.schemaRegistrySettings = schemaRegistrySettings;
            return this;
        }

        /**
         * List of backups for the service
         */
        public Builder backups(java.util.List<DbaasServiceBackup> backups) {
            Utils.checkNotNull(backups, "backups");
            this.backups = Optional.ofNullable(backups);
            return this;
        }

        /**
         * List of backups for the service
         */
        public Builder backups(Optional<? extends java.util.List<DbaasServiceBackup>> backups) {
            Utils.checkNotNull(backups, "backups");
            this.backups = backups;
            return this;
        }

        public Builder kafkaRestSettings(JsonSchemaKafkaRest kafkaRestSettings) {
            Utils.checkNotNull(kafkaRestSettings, "kafkaRestSettings");
            this.kafkaRestSettings = Optional.ofNullable(kafkaRestSettings);
            return this;
        }

        public Builder kafkaRestSettings(Optional<? extends JsonSchemaKafkaRest> kafkaRestSettings) {
            Utils.checkNotNull(kafkaRestSettings, "kafkaRestSettings");
            this.kafkaRestSettings = kafkaRestSettings;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Service notifications
         */
        public Builder notifications(java.util.List<DbaasServiceNotification> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = Optional.ofNullable(notifications);
            return this;
        }

        /**
         * Service notifications
         */
        public Builder notifications(Optional<? extends java.util.List<DbaasServiceNotification>> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = notifications;
            return this;
        }

        public Builder kafkaConnectSettings(JsonSchemaKafkaConnect kafkaConnectSettings) {
            Utils.checkNotNull(kafkaConnectSettings, "kafkaConnectSettings");
            this.kafkaConnectSettings = Optional.ofNullable(kafkaConnectSettings);
            return this;
        }

        public Builder kafkaConnectSettings(Optional<? extends JsonSchemaKafkaConnect> kafkaConnectSettings) {
            Utils.checkNotNull(kafkaConnectSettings, "kafkaConnectSettings");
            this.kafkaConnectSettings = kafkaConnectSettings;
            return this;
        }

        /**
         * Service component information objects
         */
        public Builder components(java.util.List<DbaasServiceKafkaComponents> components) {
            Utils.checkNotNull(components, "components");
            this.components = Optional.ofNullable(components);
            return this;
        }

        /**
         * Service component information objects
         */
        public Builder components(Optional<? extends java.util.List<DbaasServiceKafkaComponents>> components) {
            Utils.checkNotNull(components, "components");
            this.components = components;
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(DbaasServiceMaintenance maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = Optional.ofNullable(maintenance);
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Optional<? extends DbaasServiceMaintenance> maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = maintenance;
            return this;
        }

        public Builder kafkaSettings(JsonSchemaKafka kafkaSettings) {
            Utils.checkNotNull(kafkaSettings, "kafkaSettings");
            this.kafkaSettings = Optional.ofNullable(kafkaSettings);
            return this;
        }

        public Builder kafkaSettings(Optional<? extends JsonSchemaKafka> kafkaSettings) {
            Utils.checkNotNull(kafkaSettings, "kafkaSettings");
            this.kafkaSettings = kafkaSettings;
            return this;
        }

        /**
         * TODO UNIT disk space for data storage
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = Optional.ofNullable(diskSize);
            return this;
        }

        /**
         * TODO UNIT disk space for data storage
         */
        public Builder diskSize(Optional<? extends Long> diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }

        /**
         * TODO UNIT of memory for each node
         */
        public Builder nodeMemory(long nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = Optional.ofNullable(nodeMemory);
            return this;
        }

        /**
         * TODO UNIT of memory for each node
         */
        public Builder nodeMemory(Optional<? extends Long> nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = nodeMemory;
            return this;
        }

        /**
         * URI for connecting to the service (may be absent)
         */
        public Builder uri(String uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = Optional.ofNullable(uri);
            return this;
        }

        /**
         * URI for connecting to the service (may be absent)
         */
        public Builder uri(Optional<? extends String> uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = uri;
            return this;
        }

        /**
         * service_uri parameterized into key-value pairs
         */
        public Builder uriParams(DbaasServiceKafkaUriParams uriParams) {
            Utils.checkNotNull(uriParams, "uriParams");
            this.uriParams = Optional.ofNullable(uriParams);
            return this;
        }

        /**
         * service_uri parameterized into key-value pairs
         */
        public Builder uriParams(Optional<? extends DbaasServiceKafkaUriParams> uriParams) {
            Utils.checkNotNull(uriParams, "uriParams");
            this.uriParams = uriParams;
            return this;
        }

        /**
         * Whether Schema-Registry is enabled
         */
        public Builder schemaRegistryEnabled(boolean schemaRegistryEnabled) {
            Utils.checkNotNull(schemaRegistryEnabled, "schemaRegistryEnabled");
            this.schemaRegistryEnabled = Optional.ofNullable(schemaRegistryEnabled);
            return this;
        }

        /**
         * Whether Schema-Registry is enabled
         */
        public Builder schemaRegistryEnabled(Optional<? extends Boolean> schemaRegistryEnabled) {
            Utils.checkNotNull(schemaRegistryEnabled, "schemaRegistryEnabled");
            this.schemaRegistryEnabled = schemaRegistryEnabled;
            return this;
        }

        /**
         * Kafka version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * Kafka version
         */
        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Service creation timestamp (ISO 8601)
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Service creation timestamp (ISO 8601)
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }

        /**
         * List of service users
         */
        public Builder users(java.util.List<DbaasServiceKafkaUsers> users) {
            Utils.checkNotNull(users, "users");
            this.users = Optional.ofNullable(users);
            return this;
        }

        /**
         * List of service users
         */
        public Builder users(Optional<? extends java.util.List<DbaasServiceKafkaUsers>> users) {
            Utils.checkNotNull(users, "users");
            this.users = users;
            return this;
        }
        
        public DbaasServiceKafka build() {
            return new DbaasServiceKafka(
                updatedAt,
                authenticationMethods,
                nodeCount,
                connectionInfo,
                nodeCpuCount,
                kafkaRestEnabled,
                integrations,
                zone,
                nodeStates,
                name,
                kafkaConnectEnabled,
                type,
                state,
                ipFilter,
                schemaRegistrySettings,
                backups,
                kafkaRestSettings,
                terminationProtection,
                notifications,
                kafkaConnectSettings,
                components,
                maintenance,
                kafkaSettings,
                diskSize,
                nodeMemory,
                uri,
                uriParams,
                schemaRegistryEnabled,
                version,
                createdAt,
                plan,
                users);
        }
    }
}

