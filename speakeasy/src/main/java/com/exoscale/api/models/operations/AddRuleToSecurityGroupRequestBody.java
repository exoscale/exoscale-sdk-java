/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class AddRuleToSecurityGroupRequestBody {

    /**
     * Network flow direction to match
     */
    @JsonProperty("flow-direction")
    private FlowDirection flowDirection;

    /**
     * Security Group rule description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * CIDR-formatted network allowed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    private Optional<? extends String> network;

    /**
     * Security Group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security-group")
    private Optional<? extends com.exoscale.api.models.components.SecurityGroupResource> securityGroup;

    /**
     * Network protocol
     */
    @JsonProperty("protocol")
    private AddRuleToSecurityGroupProtocol protocol;

    /**
     * ICMP details (default: -1 (ANY))
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icmp")
    private Optional<? extends Icmp> icmp;

    /**
     * Start port of the range
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start-port")
    private Optional<? extends Long> startPort;

    /**
     * End port of the range
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end-port")
    private Optional<? extends Long> endPort;

    public AddRuleToSecurityGroupRequestBody(
            @JsonProperty("flow-direction") FlowDirection flowDirection,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("network") Optional<? extends String> network,
            @JsonProperty("security-group") Optional<? extends com.exoscale.api.models.components.SecurityGroupResource> securityGroup,
            @JsonProperty("protocol") AddRuleToSecurityGroupProtocol protocol,
            @JsonProperty("icmp") Optional<? extends Icmp> icmp,
            @JsonProperty("start-port") Optional<? extends Long> startPort,
            @JsonProperty("end-port") Optional<? extends Long> endPort) {
        Utils.checkNotNull(flowDirection, "flowDirection");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(network, "network");
        Utils.checkNotNull(securityGroup, "securityGroup");
        Utils.checkNotNull(protocol, "protocol");
        Utils.checkNotNull(icmp, "icmp");
        Utils.checkNotNull(startPort, "startPort");
        Utils.checkNotNull(endPort, "endPort");
        this.flowDirection = flowDirection;
        this.description = description;
        this.network = network;
        this.securityGroup = securityGroup;
        this.protocol = protocol;
        this.icmp = icmp;
        this.startPort = startPort;
        this.endPort = endPort;
    }

    /**
     * Network flow direction to match
     */
    public FlowDirection flowDirection() {
        return flowDirection;
    }

    /**
     * Security Group rule description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * CIDR-formatted network allowed
     */
    public Optional<? extends String> network() {
        return network;
    }

    /**
     * Security Group
     */
    public Optional<? extends com.exoscale.api.models.components.SecurityGroupResource> securityGroup() {
        return securityGroup;
    }

    /**
     * Network protocol
     */
    public AddRuleToSecurityGroupProtocol protocol() {
        return protocol;
    }

    /**
     * ICMP details (default: -1 (ANY))
     */
    public Optional<? extends Icmp> icmp() {
        return icmp;
    }

    /**
     * Start port of the range
     */
    public Optional<? extends Long> startPort() {
        return startPort;
    }

    /**
     * End port of the range
     */
    public Optional<? extends Long> endPort() {
        return endPort;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Network flow direction to match
     */
    public AddRuleToSecurityGroupRequestBody withFlowDirection(FlowDirection flowDirection) {
        Utils.checkNotNull(flowDirection, "flowDirection");
        this.flowDirection = flowDirection;
        return this;
    }

    /**
     * Security Group rule description
     */
    public AddRuleToSecurityGroupRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Security Group rule description
     */
    public AddRuleToSecurityGroupRequestBody withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * CIDR-formatted network allowed
     */
    public AddRuleToSecurityGroupRequestBody withNetwork(String network) {
        Utils.checkNotNull(network, "network");
        this.network = Optional.ofNullable(network);
        return this;
    }

    /**
     * CIDR-formatted network allowed
     */
    public AddRuleToSecurityGroupRequestBody withNetwork(Optional<? extends String> network) {
        Utils.checkNotNull(network, "network");
        this.network = network;
        return this;
    }

    /**
     * Security Group
     */
    public AddRuleToSecurityGroupRequestBody withSecurityGroup(com.exoscale.api.models.components.SecurityGroupResource securityGroup) {
        Utils.checkNotNull(securityGroup, "securityGroup");
        this.securityGroup = Optional.ofNullable(securityGroup);
        return this;
    }

    /**
     * Security Group
     */
    public AddRuleToSecurityGroupRequestBody withSecurityGroup(Optional<? extends com.exoscale.api.models.components.SecurityGroupResource> securityGroup) {
        Utils.checkNotNull(securityGroup, "securityGroup");
        this.securityGroup = securityGroup;
        return this;
    }

    /**
     * Network protocol
     */
    public AddRuleToSecurityGroupRequestBody withProtocol(AddRuleToSecurityGroupProtocol protocol) {
        Utils.checkNotNull(protocol, "protocol");
        this.protocol = protocol;
        return this;
    }

    /**
     * ICMP details (default: -1 (ANY))
     */
    public AddRuleToSecurityGroupRequestBody withIcmp(Icmp icmp) {
        Utils.checkNotNull(icmp, "icmp");
        this.icmp = Optional.ofNullable(icmp);
        return this;
    }

    /**
     * ICMP details (default: -1 (ANY))
     */
    public AddRuleToSecurityGroupRequestBody withIcmp(Optional<? extends Icmp> icmp) {
        Utils.checkNotNull(icmp, "icmp");
        this.icmp = icmp;
        return this;
    }

    /**
     * Start port of the range
     */
    public AddRuleToSecurityGroupRequestBody withStartPort(long startPort) {
        Utils.checkNotNull(startPort, "startPort");
        this.startPort = Optional.ofNullable(startPort);
        return this;
    }

    /**
     * Start port of the range
     */
    public AddRuleToSecurityGroupRequestBody withStartPort(Optional<? extends Long> startPort) {
        Utils.checkNotNull(startPort, "startPort");
        this.startPort = startPort;
        return this;
    }

    /**
     * End port of the range
     */
    public AddRuleToSecurityGroupRequestBody withEndPort(long endPort) {
        Utils.checkNotNull(endPort, "endPort");
        this.endPort = Optional.ofNullable(endPort);
        return this;
    }

    /**
     * End port of the range
     */
    public AddRuleToSecurityGroupRequestBody withEndPort(Optional<? extends Long> endPort) {
        Utils.checkNotNull(endPort, "endPort");
        this.endPort = endPort;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddRuleToSecurityGroupRequestBody other = (AddRuleToSecurityGroupRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.flowDirection, other.flowDirection) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.network, other.network) &&
            java.util.Objects.deepEquals(this.securityGroup, other.securityGroup) &&
            java.util.Objects.deepEquals(this.protocol, other.protocol) &&
            java.util.Objects.deepEquals(this.icmp, other.icmp) &&
            java.util.Objects.deepEquals(this.startPort, other.startPort) &&
            java.util.Objects.deepEquals(this.endPort, other.endPort);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            flowDirection,
            description,
            network,
            securityGroup,
            protocol,
            icmp,
            startPort,
            endPort);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddRuleToSecurityGroupRequestBody.class,
                "flowDirection", flowDirection,
                "description", description,
                "network", network,
                "securityGroup", securityGroup,
                "protocol", protocol,
                "icmp", icmp,
                "startPort", startPort,
                "endPort", endPort);
    }
    
    public final static class Builder {
 
        private FlowDirection flowDirection;
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends String> network = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.SecurityGroupResource> securityGroup = Optional.empty();
 
        private AddRuleToSecurityGroupProtocol protocol;
 
        private Optional<? extends Icmp> icmp = Optional.empty();
 
        private Optional<? extends Long> startPort = Optional.empty();
 
        private Optional<? extends Long> endPort = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Network flow direction to match
         */
        public Builder flowDirection(FlowDirection flowDirection) {
            Utils.checkNotNull(flowDirection, "flowDirection");
            this.flowDirection = flowDirection;
            return this;
        }

        /**
         * Security Group rule description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Security Group rule description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * CIDR-formatted network allowed
         */
        public Builder network(String network) {
            Utils.checkNotNull(network, "network");
            this.network = Optional.ofNullable(network);
            return this;
        }

        /**
         * CIDR-formatted network allowed
         */
        public Builder network(Optional<? extends String> network) {
            Utils.checkNotNull(network, "network");
            this.network = network;
            return this;
        }

        /**
         * Security Group
         */
        public Builder securityGroup(com.exoscale.api.models.components.SecurityGroupResource securityGroup) {
            Utils.checkNotNull(securityGroup, "securityGroup");
            this.securityGroup = Optional.ofNullable(securityGroup);
            return this;
        }

        /**
         * Security Group
         */
        public Builder securityGroup(Optional<? extends com.exoscale.api.models.components.SecurityGroupResource> securityGroup) {
            Utils.checkNotNull(securityGroup, "securityGroup");
            this.securityGroup = securityGroup;
            return this;
        }

        /**
         * Network protocol
         */
        public Builder protocol(AddRuleToSecurityGroupProtocol protocol) {
            Utils.checkNotNull(protocol, "protocol");
            this.protocol = protocol;
            return this;
        }

        /**
         * ICMP details (default: -1 (ANY))
         */
        public Builder icmp(Icmp icmp) {
            Utils.checkNotNull(icmp, "icmp");
            this.icmp = Optional.ofNullable(icmp);
            return this;
        }

        /**
         * ICMP details (default: -1 (ANY))
         */
        public Builder icmp(Optional<? extends Icmp> icmp) {
            Utils.checkNotNull(icmp, "icmp");
            this.icmp = icmp;
            return this;
        }

        /**
         * Start port of the range
         */
        public Builder startPort(long startPort) {
            Utils.checkNotNull(startPort, "startPort");
            this.startPort = Optional.ofNullable(startPort);
            return this;
        }

        /**
         * Start port of the range
         */
        public Builder startPort(Optional<? extends Long> startPort) {
            Utils.checkNotNull(startPort, "startPort");
            this.startPort = startPort;
            return this;
        }

        /**
         * End port of the range
         */
        public Builder endPort(long endPort) {
            Utils.checkNotNull(endPort, "endPort");
            this.endPort = Optional.ofNullable(endPort);
            return this;
        }

        /**
         * End port of the range
         */
        public Builder endPort(Optional<? extends Long> endPort) {
            Utils.checkNotNull(endPort, "endPort");
            this.endPort = endPort;
            return this;
        }
        
        public AddRuleToSecurityGroupRequestBody build() {
            return new AddRuleToSecurityGroupRequestBody(
                flowDirection,
                description,
                network,
                securityGroup,
                protocol,
                icmp,
                startPort,
                endPort);
        }
    }
}

