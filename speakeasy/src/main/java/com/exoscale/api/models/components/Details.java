/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class Details {

    /**
     * Migrated db name (PG) or number (Redis)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dbname")
    private Optional<? extends String> dbname;

    /**
     * Error message in case that migration has failed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends String> error;

    /**
     * Migration method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<? extends String> method;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends EnumMigrationStatus> status;

    public Details(
            @JsonProperty("dbname") Optional<? extends String> dbname,
            @JsonProperty("error") Optional<? extends String> error,
            @JsonProperty("method") Optional<? extends String> method,
            @JsonProperty("status") Optional<? extends EnumMigrationStatus> status) {
        Utils.checkNotNull(dbname, "dbname");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(status, "status");
        this.dbname = dbname;
        this.error = error;
        this.method = method;
        this.status = status;
    }

    /**
     * Migrated db name (PG) or number (Redis)
     */
    public Optional<? extends String> dbname() {
        return dbname;
    }

    /**
     * Error message in case that migration has failed
     */
    public Optional<? extends String> error() {
        return error;
    }

    /**
     * Migration method
     */
    public Optional<? extends String> method() {
        return method;
    }

    public Optional<? extends EnumMigrationStatus> status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Migrated db name (PG) or number (Redis)
     */
    public Details withDbname(String dbname) {
        Utils.checkNotNull(dbname, "dbname");
        this.dbname = Optional.ofNullable(dbname);
        return this;
    }

    /**
     * Migrated db name (PG) or number (Redis)
     */
    public Details withDbname(Optional<? extends String> dbname) {
        Utils.checkNotNull(dbname, "dbname");
        this.dbname = dbname;
        return this;
    }

    /**
     * Error message in case that migration has failed
     */
    public Details withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    /**
     * Error message in case that migration has failed
     */
    public Details withError(Optional<? extends String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * Migration method
     */
    public Details withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = Optional.ofNullable(method);
        return this;
    }

    /**
     * Migration method
     */
    public Details withMethod(Optional<? extends String> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    public Details withStatus(EnumMigrationStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public Details withStatus(Optional<? extends EnumMigrationStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Details other = (Details) o;
        return 
            java.util.Objects.deepEquals(this.dbname, other.dbname) &&
            java.util.Objects.deepEquals(this.error, other.error) &&
            java.util.Objects.deepEquals(this.method, other.method) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            dbname,
            error,
            method,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Details.class,
                "dbname", dbname,
                "error", error,
                "method", method,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> dbname = Optional.empty();
 
        private Optional<? extends String> error = Optional.empty();
 
        private Optional<? extends String> method = Optional.empty();
 
        private Optional<? extends EnumMigrationStatus> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Migrated db name (PG) or number (Redis)
         */
        public Builder dbname(String dbname) {
            Utils.checkNotNull(dbname, "dbname");
            this.dbname = Optional.ofNullable(dbname);
            return this;
        }

        /**
         * Migrated db name (PG) or number (Redis)
         */
        public Builder dbname(Optional<? extends String> dbname) {
            Utils.checkNotNull(dbname, "dbname");
            this.dbname = dbname;
            return this;
        }

        /**
         * Error message in case that migration has failed
         */
        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * Error message in case that migration has failed
         */
        public Builder error(Optional<? extends String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        /**
         * Migration method
         */
        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * Migration method
         */
        public Builder method(Optional<? extends String> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        public Builder status(EnumMigrationStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends EnumMigrationStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public Details build() {
            return new Details(
                dbname,
                error,
                method,
                status);
        }
    }
}

