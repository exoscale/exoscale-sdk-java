/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Cluster networking configuration.
 */
@JsonPropertyOrder({
  Networking.JSON_PROPERTY_CLUSTER_CIDR,
  Networking.JSON_PROPERTY_SERVICE_CLUSTER_IP_RANGE,
  Networking.JSON_PROPERTY_NODE_CIDR_MASK_SIZE_IPV4,
  Networking.JSON_PROPERTY_NODE_CIDR_MASK_SIZE_IPV6
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class Networking {
  public static final String JSON_PROPERTY_CLUSTER_CIDR = "cluster-cidr";
  private String clusterCidr;

  public static final String JSON_PROPERTY_SERVICE_CLUSTER_IP_RANGE = "service-cluster-ip-range";
  private String serviceClusterIpRange;

  public static final String JSON_PROPERTY_NODE_CIDR_MASK_SIZE_IPV4 = "node-cidr-mask-size-ipv4";
  private Long nodeCidrMaskSizeIpv4;

  public static final String JSON_PROPERTY_NODE_CIDR_MASK_SIZE_IPV6 = "node-cidr-mask-size-ipv6";
  private Long nodeCidrMaskSizeIpv6;

  public Networking() { 
  }

  public Networking clusterCidr(String clusterCidr) {
    this.clusterCidr = clusterCidr;
    return this;
  }

   /**
   * CIDR Range for Pods in cluster. This must not overlap with any IP ranges assigned to pods. Max of two, comma-separated, dual-stack CIDRs is allowed.               If not specified, defaults to 192.168.0.0/16.
   * @return clusterCidr
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLUSTER_CIDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClusterCidr() {
    return clusterCidr;
  }


  @JsonProperty(JSON_PROPERTY_CLUSTER_CIDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClusterCidr(String clusterCidr) {
    this.clusterCidr = clusterCidr;
  }


  public Networking serviceClusterIpRange(String serviceClusterIpRange) {
    this.serviceClusterIpRange = serviceClusterIpRange;
    return this;
  }

   /**
   * CIDR range for service cluster IPs. This must not overlap with any IP ranges assigned to nodes or pods. Max of two, comma-separated, dual-stack CIDRs is allowed.               If not specified, defaults to 10.96.0.0/12.
   * @return serviceClusterIpRange
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_CLUSTER_IP_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServiceClusterIpRange() {
    return serviceClusterIpRange;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_CLUSTER_IP_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceClusterIpRange(String serviceClusterIpRange) {
    this.serviceClusterIpRange = serviceClusterIpRange;
  }


  public Networking nodeCidrMaskSizeIpv4(Long nodeCidrMaskSizeIpv4) {
    this.nodeCidrMaskSizeIpv4 = nodeCidrMaskSizeIpv4;
    return this;
  }

   /**
   * Mask size for node cidr in cluster. It must be larger than the Pod CIDR subnet mask. Defaults to 24
   * minimum: 0
   * @return nodeCidrMaskSizeIpv4
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NODE_CIDR_MASK_SIZE_IPV4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getNodeCidrMaskSizeIpv4() {
    return nodeCidrMaskSizeIpv4;
  }


  @JsonProperty(JSON_PROPERTY_NODE_CIDR_MASK_SIZE_IPV4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNodeCidrMaskSizeIpv4(Long nodeCidrMaskSizeIpv4) {
    this.nodeCidrMaskSizeIpv4 = nodeCidrMaskSizeIpv4;
  }


  public Networking nodeCidrMaskSizeIpv6(Long nodeCidrMaskSizeIpv6) {
    this.nodeCidrMaskSizeIpv6 = nodeCidrMaskSizeIpv6;
    return this;
  }

   /**
   * Mask size for node cidr in cluster. It must be larger than the Pod CIDR subnet mask. Defaults to 64
   * minimum: 0
   * @return nodeCidrMaskSizeIpv6
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NODE_CIDR_MASK_SIZE_IPV6)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getNodeCidrMaskSizeIpv6() {
    return nodeCidrMaskSizeIpv6;
  }


  @JsonProperty(JSON_PROPERTY_NODE_CIDR_MASK_SIZE_IPV6)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNodeCidrMaskSizeIpv6(Long nodeCidrMaskSizeIpv6) {
    this.nodeCidrMaskSizeIpv6 = nodeCidrMaskSizeIpv6;
  }


  /**
   * Return true if this networking object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Networking networking = (Networking) o;
    return Objects.equals(this.clusterCidr, networking.clusterCidr) &&
        Objects.equals(this.serviceClusterIpRange, networking.serviceClusterIpRange) &&
        Objects.equals(this.nodeCidrMaskSizeIpv4, networking.nodeCidrMaskSizeIpv4) &&
        Objects.equals(this.nodeCidrMaskSizeIpv6, networking.nodeCidrMaskSizeIpv6);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterCidr, serviceClusterIpRange, nodeCidrMaskSizeIpv4, nodeCidrMaskSizeIpv6);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Networking {\n");
    sb.append("    clusterCidr: ").append(toIndentedString(clusterCidr)).append("\n");
    sb.append("    serviceClusterIpRange: ").append(toIndentedString(serviceClusterIpRange)).append("\n");
    sb.append("    nodeCidrMaskSizeIpv4: ").append(toIndentedString(nodeCidrMaskSizeIpv4)).append("\n");
    sb.append("    nodeCidrMaskSizeIpv6: ").append(toIndentedString(nodeCidrMaskSizeIpv6)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `cluster-cidr` to the URL query string
    if (getClusterCidr() != null) {
      joiner.add(String.format("%scluster-cidr%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClusterCidr()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `service-cluster-ip-range` to the URL query string
    if (getServiceClusterIpRange() != null) {
      joiner.add(String.format("%sservice-cluster-ip-range%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getServiceClusterIpRange()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `node-cidr-mask-size-ipv4` to the URL query string
    if (getNodeCidrMaskSizeIpv4() != null) {
      joiner.add(String.format("%snode-cidr-mask-size-ipv4%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNodeCidrMaskSizeIpv4()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `node-cidr-mask-size-ipv6` to the URL query string
    if (getNodeCidrMaskSizeIpv6() != null) {
      joiner.add(String.format("%snode-cidr-mask-size-ipv6%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNodeCidrMaskSizeIpv6()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

