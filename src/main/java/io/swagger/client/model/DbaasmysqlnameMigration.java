/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.EnumMigrationMethod;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Migrate data from existing server
 */
@Schema(description = "Migrate data from existing server")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class DbaasmysqlnameMigration {
  @JsonProperty("host")
  private String host = null;

  @JsonProperty("port")
  private Long port = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("ssl")
  private Boolean ssl = null;

  @JsonProperty("username")
  private String username = null;

  @JsonProperty("dbname")
  private String dbname = null;

  @JsonProperty("ignore-dbs")
  private String ignoreDbs = null;

  @JsonProperty("method")
  private EnumMigrationMethod method = null;

  public DbaasmysqlnameMigration host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Hostname or IP address of the server where to migrate data from
   * @return host
  **/
  @Schema(required = true, description = "Hostname or IP address of the server where to migrate data from")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public DbaasmysqlnameMigration port(Long port) {
    this.port = port;
    return this;
  }

   /**
   * Port number of the server where to migrate data from
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @Schema(required = true, description = "Port number of the server where to migrate data from")
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }

  public DbaasmysqlnameMigration password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password for authentication with the server where to migrate data from
   * @return password
  **/
  @Schema(description = "Password for authentication with the server where to migrate data from")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public DbaasmysqlnameMigration ssl(Boolean ssl) {
    this.ssl = ssl;
    return this;
  }

   /**
   * The server where to migrate data from is secured with SSL
   * @return ssl
  **/
  @Schema(description = "The server where to migrate data from is secured with SSL")
  public Boolean isSsl() {
    return ssl;
  }

  public void setSsl(Boolean ssl) {
    this.ssl = ssl;
  }

  public DbaasmysqlnameMigration username(String username) {
    this.username = username;
    return this;
  }

   /**
   * User name for authentication with the server where to migrate data from
   * @return username
  **/
  @Schema(description = "User name for authentication with the server where to migrate data from")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public DbaasmysqlnameMigration dbname(String dbname) {
    this.dbname = dbname;
    return this;
  }

   /**
   * Database name for bootstrapping the initial connection
   * @return dbname
  **/
  @Schema(description = "Database name for bootstrapping the initial connection")
  public String getDbname() {
    return dbname;
  }

  public void setDbname(String dbname) {
    this.dbname = dbname;
  }

  public DbaasmysqlnameMigration ignoreDbs(String ignoreDbs) {
    this.ignoreDbs = ignoreDbs;
    return this;
  }

   /**
   * Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)
   * @return ignoreDbs
  **/
  @Schema(description = "Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)")
  public String getIgnoreDbs() {
    return ignoreDbs;
  }

  public void setIgnoreDbs(String ignoreDbs) {
    this.ignoreDbs = ignoreDbs;
  }

  public DbaasmysqlnameMigration method(EnumMigrationMethod method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @Schema(description = "")
  public EnumMigrationMethod getMethod() {
    return method;
  }

  public void setMethod(EnumMigrationMethod method) {
    this.method = method;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasmysqlnameMigration dbaasmysqlnameMigration = (DbaasmysqlnameMigration) o;
    return Objects.equals(this.host, dbaasmysqlnameMigration.host) &&
        Objects.equals(this.port, dbaasmysqlnameMigration.port) &&
        Objects.equals(this.password, dbaasmysqlnameMigration.password) &&
        Objects.equals(this.ssl, dbaasmysqlnameMigration.ssl) &&
        Objects.equals(this.username, dbaasmysqlnameMigration.username) &&
        Objects.equals(this.dbname, dbaasmysqlnameMigration.dbname) &&
        Objects.equals(this.ignoreDbs, dbaasmysqlnameMigration.ignoreDbs) &&
        Objects.equals(this.method, dbaasmysqlnameMigration.method);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, port, password, ssl, username, dbname, ignoreDbs, method);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasmysqlnameMigration {\n");
    
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    dbname: ").append(toIndentedString(dbname)).append("\n");
    sb.append("    ignoreDbs: ").append(toIndentedString(ignoreDbs)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
