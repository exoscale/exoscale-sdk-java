/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.DbaasTaskResultCodesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DbaasTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasTask {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_CREATE_TIME = "create-time";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_RESULT_CODES = "result-codes";
  @SerializedName(SERIALIZED_NAME_RESULT_CODES)
  private List<DbaasTaskResultCodesInner> resultCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_TASK_TYPE = "task-type";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private String taskType;

  public DbaasTask() {
  }

  public DbaasTask id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public DbaasTask createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public DbaasTask result(String result) {
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }


  public DbaasTask resultCodes(List<DbaasTaskResultCodesInner> resultCodes) {
    this.resultCodes = resultCodes;
    return this;
  }

  public DbaasTask addResultCodesItem(DbaasTaskResultCodesInner resultCodesItem) {
    if (this.resultCodes == null) {
      this.resultCodes = new ArrayList<>();
    }
    this.resultCodes.add(resultCodesItem);
    return this;
  }

   /**
   * Get resultCodes
   * @return resultCodes
  **/
  @javax.annotation.Nullable
  public List<DbaasTaskResultCodesInner> getResultCodes() {
    return resultCodes;
  }

  public void setResultCodes(List<DbaasTaskResultCodesInner> resultCodes) {
    this.resultCodes = resultCodes;
  }


  public DbaasTask success(Boolean success) {
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public DbaasTask taskType(String taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * Get taskType
   * @return taskType
  **/
  @javax.annotation.Nullable
  public String getTaskType() {
    return taskType;
  }

  public void setTaskType(String taskType) {
    this.taskType = taskType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasTask dbaasTask = (DbaasTask) o;
    return Objects.equals(this.id, dbaasTask.id) &&
        Objects.equals(this.createTime, dbaasTask.createTime) &&
        Objects.equals(this.result, dbaasTask.result) &&
        Objects.equals(this.resultCodes, dbaasTask.resultCodes) &&
        Objects.equals(this.success, dbaasTask.success) &&
        Objects.equals(this.taskType, dbaasTask.taskType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createTime, result, resultCodes, success, taskType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasTask {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    resultCodes: ").append(toIndentedString(resultCodes)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("create-time");
    openapiFields.add("result");
    openapiFields.add("result-codes");
    openapiFields.add("success");
    openapiFields.add("task-type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasTask
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasTask is not found in the empty JSON string", DbaasTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if (jsonObj.get("result-codes") != null && !jsonObj.get("result-codes").isJsonNull()) {
        JsonArray jsonArrayresultCodes = jsonObj.getAsJsonArray("result-codes");
        if (jsonArrayresultCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("result-codes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `result-codes` to be an array in the JSON string but got `%s`", jsonObj.get("result-codes").toString()));
          }

          // validate the optional field `result-codes` (array)
          for (int i = 0; i < jsonArrayresultCodes.size(); i++) {
            DbaasTaskResultCodesInner.validateJsonElement(jsonArrayresultCodes.get(i));
          };
        }
      }
      if ((jsonObj.get("task-type") != null && !jsonObj.get("task-type").isJsonNull()) && !jsonObj.get("task-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task-type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasTask.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasTask>() {
           @Override
           public void write(JsonWriter out, DbaasTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasTask given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasTask
  * @throws IOException if the JSON string is invalid with respect to DbaasTask
  */
  public static DbaasTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasTask.class);
  }

 /**
  * Convert an instance of DbaasTask to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

