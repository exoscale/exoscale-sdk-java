/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ResultCodes {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<? extends String> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dbname")
    private Optional<? extends String> dbname;

    public ResultCodes(
            @JsonProperty("code") Optional<? extends String> code,
            @JsonProperty("dbname") Optional<? extends String> dbname) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(dbname, "dbname");
        this.code = code;
        this.dbname = dbname;
    }

    public Optional<? extends String> code() {
        return code;
    }

    public Optional<? extends String> dbname() {
        return dbname;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ResultCodes withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    public ResultCodes withCode(Optional<? extends String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public ResultCodes withDbname(String dbname) {
        Utils.checkNotNull(dbname, "dbname");
        this.dbname = Optional.ofNullable(dbname);
        return this;
    }

    public ResultCodes withDbname(Optional<? extends String> dbname) {
        Utils.checkNotNull(dbname, "dbname");
        this.dbname = dbname;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResultCodes other = (ResultCodes) o;
        return 
            java.util.Objects.deepEquals(this.code, other.code) &&
            java.util.Objects.deepEquals(this.dbname, other.dbname);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            code,
            dbname);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ResultCodes.class,
                "code", code,
                "dbname", dbname);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> code = Optional.empty();
 
        private Optional<? extends String> dbname = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        public Builder code(Optional<? extends String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder dbname(String dbname) {
            Utils.checkNotNull(dbname, "dbname");
            this.dbname = Optional.ofNullable(dbname);
            return this;
        }

        public Builder dbname(Optional<? extends String> dbname) {
            Utils.checkNotNull(dbname, "dbname");
            this.dbname = dbname;
            return this;
        }
        
        public ResultCodes build() {
            return new ResultCodes(
                code,
                dbname);
        }
    }
}

