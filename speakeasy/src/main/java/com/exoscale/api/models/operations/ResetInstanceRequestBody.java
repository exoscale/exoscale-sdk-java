/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ResetInstanceRequestBody {

    /**
     * Instance template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends com.exoscale.api.models.components.TemplateInput> template;

    /**
     * Instance disk size in GB
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disk-size")
    private Optional<? extends Long> diskSize;

    public ResetInstanceRequestBody(
            @JsonProperty("template") Optional<? extends com.exoscale.api.models.components.TemplateInput> template,
            @JsonProperty("disk-size") Optional<? extends Long> diskSize) {
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(diskSize, "diskSize");
        this.template = template;
        this.diskSize = diskSize;
    }

    /**
     * Instance template
     */
    public Optional<? extends com.exoscale.api.models.components.TemplateInput> template() {
        return template;
    }

    /**
     * Instance disk size in GB
     */
    public Optional<? extends Long> diskSize() {
        return diskSize;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Instance template
     */
    public ResetInstanceRequestBody withTemplate(com.exoscale.api.models.components.TemplateInput template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    /**
     * Instance template
     */
    public ResetInstanceRequestBody withTemplate(Optional<? extends com.exoscale.api.models.components.TemplateInput> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    /**
     * Instance disk size in GB
     */
    public ResetInstanceRequestBody withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = Optional.ofNullable(diskSize);
        return this;
    }

    /**
     * Instance disk size in GB
     */
    public ResetInstanceRequestBody withDiskSize(Optional<? extends Long> diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResetInstanceRequestBody other = (ResetInstanceRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            template,
            diskSize);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ResetInstanceRequestBody.class,
                "template", template,
                "diskSize", diskSize);
    }
    
    public final static class Builder {
 
        private Optional<? extends com.exoscale.api.models.components.TemplateInput> template = Optional.empty();
 
        private Optional<? extends Long> diskSize = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Instance template
         */
        public Builder template(com.exoscale.api.models.components.TemplateInput template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        /**
         * Instance template
         */
        public Builder template(Optional<? extends com.exoscale.api.models.components.TemplateInput> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        /**
         * Instance disk size in GB
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = Optional.ofNullable(diskSize);
            return this;
        }

        /**
         * Instance disk size in GB
         */
        public Builder diskSize(Optional<? extends Long> diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }
        
        public ResetInstanceRequestBody build() {
            return new ResetInstanceRequestBody(
                template,
                diskSize);
        }
    }
}

