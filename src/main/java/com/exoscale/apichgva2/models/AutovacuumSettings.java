/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for AutovacuumSettings type.
 */
public class AutovacuumSettings {
    private Integer logAutovacuumMinDuration;
    private Integer autovacuumVacuumCostLimit;
    private Integer autovacuumMaxWorkers;
    private Integer autovacuumVacuumThreshold;
    private Integer autovacuumNaptime;
    private Double autovacuumVacuumScaleFactor;
    private Integer autovacuumVacuumCostDelay;
    private Double autovacuumAnalyzeScaleFactor;
    private Integer autovacuumAnalyzeThreshold;
    private Integer autovacuumFreezeMaxAge;

    /**
     * Default constructor.
     */
    public AutovacuumSettings() {
    }

    /**
     * Initialization constructor.
     * @param  logAutovacuumMinDuration  Integer value for logAutovacuumMinDuration.
     * @param  autovacuumVacuumCostLimit  Integer value for autovacuumVacuumCostLimit.
     * @param  autovacuumMaxWorkers  Integer value for autovacuumMaxWorkers.
     * @param  autovacuumVacuumThreshold  Integer value for autovacuumVacuumThreshold.
     * @param  autovacuumNaptime  Integer value for autovacuumNaptime.
     * @param  autovacuumVacuumScaleFactor  Double value for autovacuumVacuumScaleFactor.
     * @param  autovacuumVacuumCostDelay  Integer value for autovacuumVacuumCostDelay.
     * @param  autovacuumAnalyzeScaleFactor  Double value for autovacuumAnalyzeScaleFactor.
     * @param  autovacuumAnalyzeThreshold  Integer value for autovacuumAnalyzeThreshold.
     * @param  autovacuumFreezeMaxAge  Integer value for autovacuumFreezeMaxAge.
     */
    public AutovacuumSettings(
            Integer logAutovacuumMinDuration,
            Integer autovacuumVacuumCostLimit,
            Integer autovacuumMaxWorkers,
            Integer autovacuumVacuumThreshold,
            Integer autovacuumNaptime,
            Double autovacuumVacuumScaleFactor,
            Integer autovacuumVacuumCostDelay,
            Double autovacuumAnalyzeScaleFactor,
            Integer autovacuumAnalyzeThreshold,
            Integer autovacuumFreezeMaxAge) {
        this.logAutovacuumMinDuration = logAutovacuumMinDuration;
        this.autovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
        this.autovacuumMaxWorkers = autovacuumMaxWorkers;
        this.autovacuumVacuumThreshold = autovacuumVacuumThreshold;
        this.autovacuumNaptime = autovacuumNaptime;
        this.autovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
        this.autovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
        this.autovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
        this.autovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
        this.autovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
    }

    /**
     * Getter for LogAutovacuumMinDuration.
     * Causes each action executed by autovacuum to be logged if it ran for at least the specified
     * number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the
     * default) disables logging autovacuum actions.
     * @return Returns the Integer
     */
    @JsonGetter("log_autovacuum_min_duration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getLogAutovacuumMinDuration() {
        return logAutovacuumMinDuration;
    }

    /**
     * Setter for LogAutovacuumMinDuration.
     * Causes each action executed by autovacuum to be logged if it ran for at least the specified
     * number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the
     * default) disables logging autovacuum actions.
     * @param logAutovacuumMinDuration Value for Integer
     */
    @JsonSetter("log_autovacuum_min_duration")
    public void setLogAutovacuumMinDuration(Integer logAutovacuumMinDuration) {
        this.logAutovacuumMinDuration = logAutovacuumMinDuration;
    }

    /**
     * Getter for AutovacuumVacuumCostLimit.
     * Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is
     * specified (which is the default), the regular vacuum_cost_limit value will be used.
     * @return Returns the Integer
     */
    @JsonGetter("autovacuum_vacuum_cost_limit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAutovacuumVacuumCostLimit() {
        return autovacuumVacuumCostLimit;
    }

    /**
     * Setter for AutovacuumVacuumCostLimit.
     * Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is
     * specified (which is the default), the regular vacuum_cost_limit value will be used.
     * @param autovacuumVacuumCostLimit Value for Integer
     */
    @JsonSetter("autovacuum_vacuum_cost_limit")
    public void setAutovacuumVacuumCostLimit(Integer autovacuumVacuumCostLimit) {
        this.autovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
    }

    /**
     * Getter for AutovacuumMaxWorkers.
     * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher)
     * that may be running at any one time. The default is three. This parameter can only be set at
     * server start.
     * @return Returns the Integer
     */
    @JsonGetter("autovacuum_max_workers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAutovacuumMaxWorkers() {
        return autovacuumMaxWorkers;
    }

    /**
     * Setter for AutovacuumMaxWorkers.
     * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher)
     * that may be running at any one time. The default is three. This parameter can only be set at
     * server start.
     * @param autovacuumMaxWorkers Value for Integer
     */
    @JsonSetter("autovacuum_max_workers")
    public void setAutovacuumMaxWorkers(Integer autovacuumMaxWorkers) {
        this.autovacuumMaxWorkers = autovacuumMaxWorkers;
    }

    /**
     * Getter for AutovacuumVacuumThreshold.
     * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any
     * one table. The default is 50 tuples
     * @return Returns the Integer
     */
    @JsonGetter("autovacuum_vacuum_threshold")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAutovacuumVacuumThreshold() {
        return autovacuumVacuumThreshold;
    }

    /**
     * Setter for AutovacuumVacuumThreshold.
     * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any
     * one table. The default is 50 tuples
     * @param autovacuumVacuumThreshold Value for Integer
     */
    @JsonSetter("autovacuum_vacuum_threshold")
    public void setAutovacuumVacuumThreshold(Integer autovacuumVacuumThreshold) {
        this.autovacuumVacuumThreshold = autovacuumVacuumThreshold;
    }

    /**
     * Getter for AutovacuumNaptime.
     * Specifies the minimum delay between autovacuum runs on any given database. The delay is
     * measured in seconds, and the default is one minute
     * @return Returns the Integer
     */
    @JsonGetter("autovacuum_naptime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAutovacuumNaptime() {
        return autovacuumNaptime;
    }

    /**
     * Setter for AutovacuumNaptime.
     * Specifies the minimum delay between autovacuum runs on any given database. The delay is
     * measured in seconds, and the default is one minute
     * @param autovacuumNaptime Value for Integer
     */
    @JsonSetter("autovacuum_naptime")
    public void setAutovacuumNaptime(Integer autovacuumNaptime) {
        this.autovacuumNaptime = autovacuumNaptime;
    }

    /**
     * Getter for AutovacuumVacuumScaleFactor.
     * Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding
     * whether to trigger a VACUUM. The default is 0.2 (20% of table size)
     * @return Returns the Double
     */
    @JsonGetter("autovacuum_vacuum_scale_factor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAutovacuumVacuumScaleFactor() {
        return autovacuumVacuumScaleFactor;
    }

    /**
     * Setter for AutovacuumVacuumScaleFactor.
     * Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding
     * whether to trigger a VACUUM. The default is 0.2 (20% of table size)
     * @param autovacuumVacuumScaleFactor Value for Double
     */
    @JsonSetter("autovacuum_vacuum_scale_factor")
    public void setAutovacuumVacuumScaleFactor(Double autovacuumVacuumScaleFactor) {
        this.autovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
    }

    /**
     * Getter for AutovacuumVacuumCostDelay.
     * Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is
     * specified, the regular vacuum_cost_delay value will be used. The default value is 20
     * milliseconds
     * @return Returns the Integer
     */
    @JsonGetter("autovacuum_vacuum_cost_delay")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAutovacuumVacuumCostDelay() {
        return autovacuumVacuumCostDelay;
    }

    /**
     * Setter for AutovacuumVacuumCostDelay.
     * Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is
     * specified, the regular vacuum_cost_delay value will be used. The default value is 20
     * milliseconds
     * @param autovacuumVacuumCostDelay Value for Integer
     */
    @JsonSetter("autovacuum_vacuum_cost_delay")
    public void setAutovacuumVacuumCostDelay(Integer autovacuumVacuumCostDelay) {
        this.autovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
    }

    /**
     * Getter for AutovacuumAnalyzeScaleFactor.
     * Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding
     * whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
     * @return Returns the Double
     */
    @JsonGetter("autovacuum_analyze_scale_factor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAutovacuumAnalyzeScaleFactor() {
        return autovacuumAnalyzeScaleFactor;
    }

    /**
     * Setter for AutovacuumAnalyzeScaleFactor.
     * Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding
     * whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
     * @param autovacuumAnalyzeScaleFactor Value for Double
     */
    @JsonSetter("autovacuum_analyze_scale_factor")
    public void setAutovacuumAnalyzeScaleFactor(Double autovacuumAnalyzeScaleFactor) {
        this.autovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
    }

    /**
     * Getter for AutovacuumAnalyzeThreshold.
     * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an
     * ANALYZE in any one table. The default is 50 tuples.
     * @return Returns the Integer
     */
    @JsonGetter("autovacuum_analyze_threshold")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAutovacuumAnalyzeThreshold() {
        return autovacuumAnalyzeThreshold;
    }

    /**
     * Setter for AutovacuumAnalyzeThreshold.
     * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an
     * ANALYZE in any one table. The default is 50 tuples.
     * @param autovacuumAnalyzeThreshold Value for Integer
     */
    @JsonSetter("autovacuum_analyze_threshold")
    public void setAutovacuumAnalyzeThreshold(Integer autovacuumAnalyzeThreshold) {
        this.autovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
    }

    /**
     * Getter for AutovacuumFreezeMaxAge.
     * Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can
     * attain before a VACUUM operation is forced to prevent transaction ID wraparound within the
     * table. Note that the system will launch autovacuum processes to prevent wraparound even when
     * autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
     * @return Returns the Integer
     */
    @JsonGetter("autovacuum_freeze_max_age")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAutovacuumFreezeMaxAge() {
        return autovacuumFreezeMaxAge;
    }

    /**
     * Setter for AutovacuumFreezeMaxAge.
     * Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can
     * attain before a VACUUM operation is forced to prevent transaction ID wraparound within the
     * table. Note that the system will launch autovacuum processes to prevent wraparound even when
     * autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
     * @param autovacuumFreezeMaxAge Value for Integer
     */
    @JsonSetter("autovacuum_freeze_max_age")
    public void setAutovacuumFreezeMaxAge(Integer autovacuumFreezeMaxAge) {
        this.autovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
    }

    /**
     * Converts this AutovacuumSettings into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AutovacuumSettings [" + "logAutovacuumMinDuration=" + logAutovacuumMinDuration
                + ", autovacuumVacuumCostLimit=" + autovacuumVacuumCostLimit
                + ", autovacuumMaxWorkers=" + autovacuumMaxWorkers + ", autovacuumVacuumThreshold="
                + autovacuumVacuumThreshold + ", autovacuumNaptime=" + autovacuumNaptime
                + ", autovacuumVacuumScaleFactor=" + autovacuumVacuumScaleFactor
                + ", autovacuumVacuumCostDelay=" + autovacuumVacuumCostDelay
                + ", autovacuumAnalyzeScaleFactor=" + autovacuumAnalyzeScaleFactor
                + ", autovacuumAnalyzeThreshold=" + autovacuumAnalyzeThreshold
                + ", autovacuumFreezeMaxAge=" + autovacuumFreezeMaxAge + "]";
    }

    /**
     * Builds a new {@link AutovacuumSettings.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AutovacuumSettings.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .logAutovacuumMinDuration(getLogAutovacuumMinDuration())
                .autovacuumVacuumCostLimit(getAutovacuumVacuumCostLimit())
                .autovacuumMaxWorkers(getAutovacuumMaxWorkers())
                .autovacuumVacuumThreshold(getAutovacuumVacuumThreshold())
                .autovacuumNaptime(getAutovacuumNaptime())
                .autovacuumVacuumScaleFactor(getAutovacuumVacuumScaleFactor())
                .autovacuumVacuumCostDelay(getAutovacuumVacuumCostDelay())
                .autovacuumAnalyzeScaleFactor(getAutovacuumAnalyzeScaleFactor())
                .autovacuumAnalyzeThreshold(getAutovacuumAnalyzeThreshold())
                .autovacuumFreezeMaxAge(getAutovacuumFreezeMaxAge());
        return builder;
    }

    /**
     * Class to build instances of {@link AutovacuumSettings}.
     */
    public static class Builder {
        private Integer logAutovacuumMinDuration;
        private Integer autovacuumVacuumCostLimit;
        private Integer autovacuumMaxWorkers;
        private Integer autovacuumVacuumThreshold;
        private Integer autovacuumNaptime;
        private Double autovacuumVacuumScaleFactor;
        private Integer autovacuumVacuumCostDelay;
        private Double autovacuumAnalyzeScaleFactor;
        private Integer autovacuumAnalyzeThreshold;
        private Integer autovacuumFreezeMaxAge;



        /**
         * Setter for logAutovacuumMinDuration.
         * @param  logAutovacuumMinDuration  Integer value for logAutovacuumMinDuration.
         * @return Builder
         */
        public Builder logAutovacuumMinDuration(Integer logAutovacuumMinDuration) {
            this.logAutovacuumMinDuration = logAutovacuumMinDuration;
            return this;
        }

        /**
         * Setter for autovacuumVacuumCostLimit.
         * @param  autovacuumVacuumCostLimit  Integer value for autovacuumVacuumCostLimit.
         * @return Builder
         */
        public Builder autovacuumVacuumCostLimit(Integer autovacuumVacuumCostLimit) {
            this.autovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
            return this;
        }

        /**
         * Setter for autovacuumMaxWorkers.
         * @param  autovacuumMaxWorkers  Integer value for autovacuumMaxWorkers.
         * @return Builder
         */
        public Builder autovacuumMaxWorkers(Integer autovacuumMaxWorkers) {
            this.autovacuumMaxWorkers = autovacuumMaxWorkers;
            return this;
        }

        /**
         * Setter for autovacuumVacuumThreshold.
         * @param  autovacuumVacuumThreshold  Integer value for autovacuumVacuumThreshold.
         * @return Builder
         */
        public Builder autovacuumVacuumThreshold(Integer autovacuumVacuumThreshold) {
            this.autovacuumVacuumThreshold = autovacuumVacuumThreshold;
            return this;
        }

        /**
         * Setter for autovacuumNaptime.
         * @param  autovacuumNaptime  Integer value for autovacuumNaptime.
         * @return Builder
         */
        public Builder autovacuumNaptime(Integer autovacuumNaptime) {
            this.autovacuumNaptime = autovacuumNaptime;
            return this;
        }

        /**
         * Setter for autovacuumVacuumScaleFactor.
         * @param  autovacuumVacuumScaleFactor  Double value for autovacuumVacuumScaleFactor.
         * @return Builder
         */
        public Builder autovacuumVacuumScaleFactor(Double autovacuumVacuumScaleFactor) {
            this.autovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
            return this;
        }

        /**
         * Setter for autovacuumVacuumCostDelay.
         * @param  autovacuumVacuumCostDelay  Integer value for autovacuumVacuumCostDelay.
         * @return Builder
         */
        public Builder autovacuumVacuumCostDelay(Integer autovacuumVacuumCostDelay) {
            this.autovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
            return this;
        }

        /**
         * Setter for autovacuumAnalyzeScaleFactor.
         * @param  autovacuumAnalyzeScaleFactor  Double value for autovacuumAnalyzeScaleFactor.
         * @return Builder
         */
        public Builder autovacuumAnalyzeScaleFactor(Double autovacuumAnalyzeScaleFactor) {
            this.autovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
            return this;
        }

        /**
         * Setter for autovacuumAnalyzeThreshold.
         * @param  autovacuumAnalyzeThreshold  Integer value for autovacuumAnalyzeThreshold.
         * @return Builder
         */
        public Builder autovacuumAnalyzeThreshold(Integer autovacuumAnalyzeThreshold) {
            this.autovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
            return this;
        }

        /**
         * Setter for autovacuumFreezeMaxAge.
         * @param  autovacuumFreezeMaxAge  Integer value for autovacuumFreezeMaxAge.
         * @return Builder
         */
        public Builder autovacuumFreezeMaxAge(Integer autovacuumFreezeMaxAge) {
            this.autovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
            return this;
        }

        /**
         * Builds a new {@link AutovacuumSettings} object using the set fields.
         * @return {@link AutovacuumSettings}
         */
        public AutovacuumSettings build() {
            return new AutovacuumSettings(logAutovacuumMinDuration, autovacuumVacuumCostLimit,
                    autovacuumMaxWorkers, autovacuumVacuumThreshold, autovacuumNaptime,
                    autovacuumVacuumScaleFactor, autovacuumVacuumCostDelay,
                    autovacuumAnalyzeScaleFactor, autovacuumAnalyzeThreshold,
                    autovacuumFreezeMaxAge);
        }
    }
}
