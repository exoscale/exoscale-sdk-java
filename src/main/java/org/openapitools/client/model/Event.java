/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.IamApiKey;
import org.openapitools.client.model.IamRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A notable Mutation Event which happened on the infrastructure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class Event {
  public static final String SERIALIZED_NAME_REQUEST_ID = "request-id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_IAM_ROLE = "iam-role";
  @SerializedName(SERIALIZED_NAME_IAM_ROLE)
  private IamRole iamRole;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public static final String SERIALIZED_NAME_GET_PARAMS = "get-params";
  @SerializedName(SERIALIZED_NAME_GET_PARAMS)
  private Object getParams;

  public static final String SERIALIZED_NAME_BODY_PARAMS = "body-params";
  @SerializedName(SERIALIZED_NAME_BODY_PARAMS)
  private Object bodyParams;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Long status;

  public static final String SERIALIZED_NAME_SOURCE_IP = "source-ip";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP)
  private String sourceIp;

  public static final String SERIALIZED_NAME_IAM_API_KEY = "iam-api-key";
  @SerializedName(SERIALIZED_NAME_IAM_API_KEY)
  private IamApiKey iamApiKey;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_ELAPSED_MS = "elapsed-ms";
  @SerializedName(SERIALIZED_NAME_ELAPSED_MS)
  private Long elapsedMs;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_PATH_PARAMS = "path-params";
  @SerializedName(SERIALIZED_NAME_PATH_PARAMS)
  private Object pathParams;

  public static final String SERIALIZED_NAME_HANDLER = "handler";
  @SerializedName(SERIALIZED_NAME_HANDLER)
  private String handler;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public Event() {
  }

  public Event requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Operation unique identifier
   * @return requestId
  **/
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public Event iamRole(IamRole iamRole) {
    this.iamRole = iamRole;
    return this;
  }

   /**
   * Get iamRole
   * @return iamRole
  **/
  @javax.annotation.Nullable
  public IamRole getIamRole() {
    return iamRole;
  }

  public void setIamRole(IamRole iamRole) {
    this.iamRole = iamRole;
  }


  public Event zone(String zone) {
    this.zone = zone;
    return this;
  }

   /**
   * Operation targeted zone
   * @return zone
  **/
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }


  public Event getParams(Object getParams) {
    this.getParams = getParams;
    return this;
  }

   /**
   * Query string parameters (free form map)
   * @return getParams
  **/
  @javax.annotation.Nullable
  public Object getGetParams() {
    return getParams;
  }

  public void setGetParams(Object getParams) {
    this.getParams = getParams;
  }


  public Event bodyParams(Object bodyParams) {
    this.bodyParams = bodyParams;
    return this;
  }

   /**
   * Body parameters (free form map)
   * @return bodyParams
  **/
  @javax.annotation.Nullable
  public Object getBodyParams() {
    return bodyParams;
  }

  public void setBodyParams(Object bodyParams) {
    this.bodyParams = bodyParams;
  }


  public Event status(Long status) {
    this.status = status;
    return this;
  }

   /**
   * Operation HTTP status
   * minimum: 0
   * @return status
  **/
  @javax.annotation.Nullable
  public Long getStatus() {
    return status;
  }

  public void setStatus(Long status) {
    this.status = status;
  }


  public Event sourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
    return this;
  }

   /**
   * Client IP address
   * @return sourceIp
  **/
  @javax.annotation.Nullable
  public String getSourceIp() {
    return sourceIp;
  }

  public void setSourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
  }


  public Event iamApiKey(IamApiKey iamApiKey) {
    this.iamApiKey = iamApiKey;
    return this;
  }

   /**
   * Get iamApiKey
   * @return iamApiKey
  **/
  @javax.annotation.Nullable
  public IamApiKey getIamApiKey() {
    return iamApiKey;
  }

  public void setIamApiKey(IamApiKey iamApiKey) {
    this.iamApiKey = iamApiKey;
  }


  public Event uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * Operation request URI
   * @return uri
  **/
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public Event elapsedMs(Long elapsedMs) {
    this.elapsedMs = elapsedMs;
    return this;
  }

   /**
   * Operation processing time
   * minimum: 0
   * @return elapsedMs
  **/
  @javax.annotation.Nullable
  public Long getElapsedMs() {
    return elapsedMs;
  }

  public void setElapsedMs(Long elapsedMs) {
    this.elapsedMs = elapsedMs;
  }


  public Event timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Time at which the event happened, millisecond resolution
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public Event pathParams(Object pathParams) {
    this.pathParams = pathParams;
    return this;
  }

   /**
   * URI path parameters (free form map)
   * @return pathParams
  **/
  @javax.annotation.Nullable
  public Object getPathParams() {
    return pathParams;
  }

  public void setPathParams(Object pathParams) {
    this.pathParams = pathParams;
  }


  public Event handler(String handler) {
    this.handler = handler;
    return this;
  }

   /**
   * Operation handler name
   * @return handler
  **/
  @javax.annotation.Nullable
  public String getHandler() {
    return handler;
  }

  public void setHandler(String handler) {
    this.handler = handler;
  }


  public Event message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Operation message
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.requestId, event.requestId) &&
        Objects.equals(this.iamRole, event.iamRole) &&
        Objects.equals(this.zone, event.zone) &&
        Objects.equals(this.getParams, event.getParams) &&
        Objects.equals(this.bodyParams, event.bodyParams) &&
        Objects.equals(this.status, event.status) &&
        Objects.equals(this.sourceIp, event.sourceIp) &&
        Objects.equals(this.iamApiKey, event.iamApiKey) &&
        Objects.equals(this.uri, event.uri) &&
        Objects.equals(this.elapsedMs, event.elapsedMs) &&
        Objects.equals(this.timestamp, event.timestamp) &&
        Objects.equals(this.pathParams, event.pathParams) &&
        Objects.equals(this.handler, event.handler) &&
        Objects.equals(this.message, event.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, iamRole, zone, getParams, bodyParams, status, sourceIp, iamApiKey, uri, elapsedMs, timestamp, pathParams, handler, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    iamRole: ").append(toIndentedString(iamRole)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("    getParams: ").append(toIndentedString(getParams)).append("\n");
    sb.append("    bodyParams: ").append(toIndentedString(bodyParams)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    sourceIp: ").append(toIndentedString(sourceIp)).append("\n");
    sb.append("    iamApiKey: ").append(toIndentedString(iamApiKey)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    elapsedMs: ").append(toIndentedString(elapsedMs)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    pathParams: ").append(toIndentedString(pathParams)).append("\n");
    sb.append("    handler: ").append(toIndentedString(handler)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("request-id");
    openapiFields.add("iam-role");
    openapiFields.add("zone");
    openapiFields.add("get-params");
    openapiFields.add("body-params");
    openapiFields.add("status");
    openapiFields.add("source-ip");
    openapiFields.add("iam-api-key");
    openapiFields.add("uri");
    openapiFields.add("elapsed-ms");
    openapiFields.add("timestamp");
    openapiFields.add("path-params");
    openapiFields.add("handler");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Event
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("request-id") != null && !jsonObj.get("request-id").isJsonNull()) && !jsonObj.get("request-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request-id").toString()));
      }
      // validate the optional field `iam-role`
      if (jsonObj.get("iam-role") != null && !jsonObj.get("iam-role").isJsonNull()) {
        IamRole.validateJsonElement(jsonObj.get("iam-role"));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
      if ((jsonObj.get("source-ip") != null && !jsonObj.get("source-ip").isJsonNull()) && !jsonObj.get("source-ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source-ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source-ip").toString()));
      }
      // validate the optional field `iam-api-key`
      if (jsonObj.get("iam-api-key") != null && !jsonObj.get("iam-api-key").isJsonNull()) {
        IamApiKey.validateJsonElement(jsonObj.get("iam-api-key"));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("handler") != null && !jsonObj.get("handler").isJsonNull()) && !jsonObj.get("handler").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handler` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handler").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Event given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Event
  * @throws IOException if the JSON string is invalid with respect to Event
  */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

 /**
  * Convert an instance of Event to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

