/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.DbaasmysqlnameBackupschedule;
import io.swagger.client.model.DbaasmysqlnameIntegrations;
import io.swagger.client.model.DbaasmysqlnameMaintenance;
import io.swagger.client.model.DbaasmysqlnameMigration;
import io.swagger.client.model.JsonSchemaMysql;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * DbaasmysqlNameBody1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class DbaasmysqlNameBody1 {
  @JsonProperty("backup-schedule")
  private DbaasmysqlnameBackupschedule backupSchedule = null;

  @JsonProperty("integrations")
  private List<DbaasmysqlnameIntegrations> integrations = null;

  @JsonProperty("ip-filter")
  private List<String> ipFilter = null;

  @JsonProperty("termination-protection")
  private Boolean terminationProtection = null;

  @JsonProperty("fork-from-service")
  private String forkFromService = null;

  @JsonProperty("recovery-backup-time")
  private String recoveryBackupTime = null;

  @JsonProperty("mysql-settings")
  private JsonSchemaMysql mysqlSettings = null;

  @JsonProperty("maintenance")
  private DbaasmysqlnameMaintenance maintenance = null;

  @JsonProperty("admin-username")
  private String adminUsername = null;

  @JsonProperty("version")
  private String version = null;

  @JsonProperty("plan")
  private String plan = null;

  @JsonProperty("admin-password")
  private String adminPassword = null;

  @JsonProperty("migration")
  private DbaasmysqlnameMigration migration = null;

  @JsonProperty("binlog-retention-period")
  private Long binlogRetentionPeriod = null;

  public DbaasmysqlNameBody1 backupSchedule(DbaasmysqlnameBackupschedule backupSchedule) {
    this.backupSchedule = backupSchedule;
    return this;
  }

   /**
   * Get backupSchedule
   * @return backupSchedule
  **/
  @Schema(description = "")
  public DbaasmysqlnameBackupschedule getBackupSchedule() {
    return backupSchedule;
  }

  public void setBackupSchedule(DbaasmysqlnameBackupschedule backupSchedule) {
    this.backupSchedule = backupSchedule;
  }

  public DbaasmysqlNameBody1 integrations(List<DbaasmysqlnameIntegrations> integrations) {
    this.integrations = integrations;
    return this;
  }

  public DbaasmysqlNameBody1 addIntegrationsItem(DbaasmysqlnameIntegrations integrationsItem) {
    if (this.integrations == null) {
      this.integrations = new ArrayList<>();
    }
    this.integrations.add(integrationsItem);
    return this;
  }

   /**
   * Service integrations to be enabled when creating the service.
   * @return integrations
  **/
  @Schema(description = "Service integrations to be enabled when creating the service.")
  public List<DbaasmysqlnameIntegrations> getIntegrations() {
    return integrations;
  }

  public void setIntegrations(List<DbaasmysqlnameIntegrations> integrations) {
    this.integrations = integrations;
  }

  public DbaasmysqlNameBody1 ipFilter(List<String> ipFilter) {
    this.ipFilter = ipFilter;
    return this;
  }

  public DbaasmysqlNameBody1 addIpFilterItem(String ipFilterItem) {
    if (this.ipFilter == null) {
      this.ipFilter = new ArrayList<>();
    }
    this.ipFilter.add(ipFilterItem);
    return this;
  }

   /**
   * Allow incoming connections from CIDR address block, e.g. &#x27;10.20.0.0/16&#x27;
   * @return ipFilter
  **/
  @Schema(description = "Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'")
  public List<String> getIpFilter() {
    return ipFilter;
  }

  public void setIpFilter(List<String> ipFilter) {
    this.ipFilter = ipFilter;
  }

  public DbaasmysqlNameBody1 terminationProtection(Boolean terminationProtection) {
    this.terminationProtection = terminationProtection;
    return this;
  }

   /**
   * Service is protected against termination and powering off
   * @return terminationProtection
  **/
  @Schema(description = "Service is protected against termination and powering off")
  public Boolean isTerminationProtection() {
    return terminationProtection;
  }

  public void setTerminationProtection(Boolean terminationProtection) {
    this.terminationProtection = terminationProtection;
  }

  public DbaasmysqlNameBody1 forkFromService(String forkFromService) {
    this.forkFromService = forkFromService;
    return this;
  }

   /**
   * Get forkFromService
   * @return forkFromService
  **/
  @Schema(description = "")
  public String getForkFromService() {
    return forkFromService;
  }

  public void setForkFromService(String forkFromService) {
    this.forkFromService = forkFromService;
  }

  public DbaasmysqlNameBody1 recoveryBackupTime(String recoveryBackupTime) {
    this.recoveryBackupTime = recoveryBackupTime;
    return this;
  }

   /**
   * ISO time of a backup to recover from for services that support arbitrary times
   * @return recoveryBackupTime
  **/
  @Schema(description = "ISO time of a backup to recover from for services that support arbitrary times")
  public String getRecoveryBackupTime() {
    return recoveryBackupTime;
  }

  public void setRecoveryBackupTime(String recoveryBackupTime) {
    this.recoveryBackupTime = recoveryBackupTime;
  }

  public DbaasmysqlNameBody1 mysqlSettings(JsonSchemaMysql mysqlSettings) {
    this.mysqlSettings = mysqlSettings;
    return this;
  }

   /**
   * Get mysqlSettings
   * @return mysqlSettings
  **/
  @Schema(description = "")
  public JsonSchemaMysql getMysqlSettings() {
    return mysqlSettings;
  }

  public void setMysqlSettings(JsonSchemaMysql mysqlSettings) {
    this.mysqlSettings = mysqlSettings;
  }

  public DbaasmysqlNameBody1 maintenance(DbaasmysqlnameMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

   /**
   * Get maintenance
   * @return maintenance
  **/
  @Schema(description = "")
  public DbaasmysqlnameMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(DbaasmysqlnameMaintenance maintenance) {
    this.maintenance = maintenance;
  }

  public DbaasmysqlNameBody1 adminUsername(String adminUsername) {
    this.adminUsername = adminUsername;
    return this;
  }

   /**
   * Custom username for admin user. This must be set only when a new service is being created.
   * @return adminUsername
  **/
  @Schema(description = "Custom username for admin user. This must be set only when a new service is being created.")
  public String getAdminUsername() {
    return adminUsername;
  }

  public void setAdminUsername(String adminUsername) {
    this.adminUsername = adminUsername;
  }

  public DbaasmysqlNameBody1 version(String version) {
    this.version = version;
    return this;
  }

   /**
   * MySQL major version
   * @return version
  **/
  @Schema(description = "MySQL major version")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public DbaasmysqlNameBody1 plan(String plan) {
    this.plan = plan;
    return this;
  }

   /**
   * Subscription plan
   * @return plan
  **/
  @Schema(required = true, description = "Subscription plan")
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }

  public DbaasmysqlNameBody1 adminPassword(String adminPassword) {
    this.adminPassword = adminPassword;
    return this;
  }

   /**
   * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
   * @return adminPassword
  **/
  @Schema(description = "Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.")
  public String getAdminPassword() {
    return adminPassword;
  }

  public void setAdminPassword(String adminPassword) {
    this.adminPassword = adminPassword;
  }

  public DbaasmysqlNameBody1 migration(DbaasmysqlnameMigration migration) {
    this.migration = migration;
    return this;
  }

   /**
   * Get migration
   * @return migration
  **/
  @Schema(description = "")
  public DbaasmysqlnameMigration getMigration() {
    return migration;
  }

  public void setMigration(DbaasmysqlnameMigration migration) {
    this.migration = migration;
  }

  public DbaasmysqlNameBody1 binlogRetentionPeriod(Long binlogRetentionPeriod) {
    this.binlogRetentionPeriod = binlogRetentionPeriod;
    return this;
  }

   /**
   * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
   * minimum: 600
   * maximum: 86400
   * @return binlogRetentionPeriod
  **/
  @Schema(description = "The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.")
  public Long getBinlogRetentionPeriod() {
    return binlogRetentionPeriod;
  }

  public void setBinlogRetentionPeriod(Long binlogRetentionPeriod) {
    this.binlogRetentionPeriod = binlogRetentionPeriod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasmysqlNameBody1 dbaasmysqlNameBody1 = (DbaasmysqlNameBody1) o;
    return Objects.equals(this.backupSchedule, dbaasmysqlNameBody1.backupSchedule) &&
        Objects.equals(this.integrations, dbaasmysqlNameBody1.integrations) &&
        Objects.equals(this.ipFilter, dbaasmysqlNameBody1.ipFilter) &&
        Objects.equals(this.terminationProtection, dbaasmysqlNameBody1.terminationProtection) &&
        Objects.equals(this.forkFromService, dbaasmysqlNameBody1.forkFromService) &&
        Objects.equals(this.recoveryBackupTime, dbaasmysqlNameBody1.recoveryBackupTime) &&
        Objects.equals(this.mysqlSettings, dbaasmysqlNameBody1.mysqlSettings) &&
        Objects.equals(this.maintenance, dbaasmysqlNameBody1.maintenance) &&
        Objects.equals(this.adminUsername, dbaasmysqlNameBody1.adminUsername) &&
        Objects.equals(this.version, dbaasmysqlNameBody1.version) &&
        Objects.equals(this.plan, dbaasmysqlNameBody1.plan) &&
        Objects.equals(this.adminPassword, dbaasmysqlNameBody1.adminPassword) &&
        Objects.equals(this.migration, dbaasmysqlNameBody1.migration) &&
        Objects.equals(this.binlogRetentionPeriod, dbaasmysqlNameBody1.binlogRetentionPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupSchedule, integrations, ipFilter, terminationProtection, forkFromService, recoveryBackupTime, mysqlSettings, maintenance, adminUsername, version, plan, adminPassword, migration, binlogRetentionPeriod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasmysqlNameBody1 {\n");
    
    sb.append("    backupSchedule: ").append(toIndentedString(backupSchedule)).append("\n");
    sb.append("    integrations: ").append(toIndentedString(integrations)).append("\n");
    sb.append("    ipFilter: ").append(toIndentedString(ipFilter)).append("\n");
    sb.append("    terminationProtection: ").append(toIndentedString(terminationProtection)).append("\n");
    sb.append("    forkFromService: ").append(toIndentedString(forkFromService)).append("\n");
    sb.append("    recoveryBackupTime: ").append(toIndentedString(recoveryBackupTime)).append("\n");
    sb.append("    mysqlSettings: ").append(toIndentedString(mysqlSettings)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("    adminUsername: ").append(toIndentedString(adminUsername)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    adminPassword: ").append(toIndentedString(adminPassword)).append("\n");
    sb.append("    migration: ").append(toIndentedString(migration)).append("\n");
    sb.append("    binlogRetentionPeriod: ").append(toIndentedString(binlogRetentionPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
