/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.LazySingletonValue;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class JsonSchemaPglookout {

    /**
     * Number of seconds of master unavailability before triggering database failover to standby
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_failover_replication_time_lag")
    private Optional<? extends Long> maxFailoverReplicationTimeLag;

    public JsonSchemaPglookout(
            @JsonProperty("max_failover_replication_time_lag") Optional<? extends Long> maxFailoverReplicationTimeLag) {
        Utils.checkNotNull(maxFailoverReplicationTimeLag, "maxFailoverReplicationTimeLag");
        this.maxFailoverReplicationTimeLag = maxFailoverReplicationTimeLag;
    }

    /**
     * Number of seconds of master unavailability before triggering database failover to standby
     */
    public Optional<? extends Long> maxFailoverReplicationTimeLag() {
        return maxFailoverReplicationTimeLag;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Number of seconds of master unavailability before triggering database failover to standby
     */
    public JsonSchemaPglookout withMaxFailoverReplicationTimeLag(long maxFailoverReplicationTimeLag) {
        Utils.checkNotNull(maxFailoverReplicationTimeLag, "maxFailoverReplicationTimeLag");
        this.maxFailoverReplicationTimeLag = Optional.ofNullable(maxFailoverReplicationTimeLag);
        return this;
    }

    /**
     * Number of seconds of master unavailability before triggering database failover to standby
     */
    public JsonSchemaPglookout withMaxFailoverReplicationTimeLag(Optional<? extends Long> maxFailoverReplicationTimeLag) {
        Utils.checkNotNull(maxFailoverReplicationTimeLag, "maxFailoverReplicationTimeLag");
        this.maxFailoverReplicationTimeLag = maxFailoverReplicationTimeLag;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JsonSchemaPglookout other = (JsonSchemaPglookout) o;
        return 
            java.util.Objects.deepEquals(this.maxFailoverReplicationTimeLag, other.maxFailoverReplicationTimeLag);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            maxFailoverReplicationTimeLag);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JsonSchemaPglookout.class,
                "maxFailoverReplicationTimeLag", maxFailoverReplicationTimeLag);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> maxFailoverReplicationTimeLag;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of seconds of master unavailability before triggering database failover to standby
         */
        public Builder maxFailoverReplicationTimeLag(long maxFailoverReplicationTimeLag) {
            Utils.checkNotNull(maxFailoverReplicationTimeLag, "maxFailoverReplicationTimeLag");
            this.maxFailoverReplicationTimeLag = Optional.ofNullable(maxFailoverReplicationTimeLag);
            return this;
        }

        /**
         * Number of seconds of master unavailability before triggering database failover to standby
         */
        public Builder maxFailoverReplicationTimeLag(Optional<? extends Long> maxFailoverReplicationTimeLag) {
            Utils.checkNotNull(maxFailoverReplicationTimeLag, "maxFailoverReplicationTimeLag");
            this.maxFailoverReplicationTimeLag = maxFailoverReplicationTimeLag;
            return this;
        }
        
        public JsonSchemaPglookout build() {
            if (maxFailoverReplicationTimeLag == null) {
                maxFailoverReplicationTimeLag = _SINGLETON_VALUE_MaxFailoverReplicationTimeLag.value();
            }
            return new JsonSchemaPglookout(
                maxFailoverReplicationTimeLag);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_MaxFailoverReplicationTimeLag =
                new LazySingletonValue<>(
                        "max_failover_replication_time_lag",
                        "60",
                        new TypeReference<Optional<? extends Long>>() {});
    }
}

