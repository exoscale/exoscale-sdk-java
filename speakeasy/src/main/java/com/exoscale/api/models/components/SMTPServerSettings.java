/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class SMTPServerSettings {

    @JsonProperty("host")
    private String host;

    @JsonProperty("port")
    private long port;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_verify")
    private Optional<? extends Boolean> skipVerify;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private JsonNullable<? extends String> username;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private JsonNullable<? extends String> password;

    @JsonProperty("from_address")
    private String fromAddress;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_name")
    private JsonNullable<? extends String> fromName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("starttls_policy")
    private Optional<? extends EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLS> starttlsPolicy;

    public SMTPServerSettings(
            @JsonProperty("host") String host,
            @JsonProperty("port") long port,
            @JsonProperty("skip_verify") Optional<? extends Boolean> skipVerify,
            @JsonProperty("username") JsonNullable<? extends String> username,
            @JsonProperty("password") JsonNullable<? extends String> password,
            @JsonProperty("from_address") String fromAddress,
            @JsonProperty("from_name") JsonNullable<? extends String> fromName,
            @JsonProperty("starttls_policy") Optional<? extends EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLS> starttlsPolicy) {
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(skipVerify, "skipVerify");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(fromAddress, "fromAddress");
        Utils.checkNotNull(fromName, "fromName");
        Utils.checkNotNull(starttlsPolicy, "starttlsPolicy");
        this.host = host;
        this.port = port;
        this.skipVerify = skipVerify;
        this.username = username;
        this.password = password;
        this.fromAddress = fromAddress;
        this.fromName = fromName;
        this.starttlsPolicy = starttlsPolicy;
    }

    public String host() {
        return host;
    }

    public long port() {
        return port;
    }

    public Optional<? extends Boolean> skipVerify() {
        return skipVerify;
    }

    public JsonNullable<? extends String> username() {
        return username;
    }

    public JsonNullable<? extends String> password() {
        return password;
    }

    public String fromAddress() {
        return fromAddress;
    }

    public JsonNullable<? extends String> fromName() {
        return fromName;
    }

    public Optional<? extends EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLS> starttlsPolicy() {
        return starttlsPolicy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SMTPServerSettings withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    public SMTPServerSettings withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    public SMTPServerSettings withSkipVerify(boolean skipVerify) {
        Utils.checkNotNull(skipVerify, "skipVerify");
        this.skipVerify = Optional.ofNullable(skipVerify);
        return this;
    }

    public SMTPServerSettings withSkipVerify(Optional<? extends Boolean> skipVerify) {
        Utils.checkNotNull(skipVerify, "skipVerify");
        this.skipVerify = skipVerify;
        return this;
    }

    public SMTPServerSettings withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = JsonNullable.of(username);
        return this;
    }

    public SMTPServerSettings withUsername(JsonNullable<? extends String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public SMTPServerSettings withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = JsonNullable.of(password);
        return this;
    }

    public SMTPServerSettings withPassword(JsonNullable<? extends String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public SMTPServerSettings withFromAddress(String fromAddress) {
        Utils.checkNotNull(fromAddress, "fromAddress");
        this.fromAddress = fromAddress;
        return this;
    }

    public SMTPServerSettings withFromName(String fromName) {
        Utils.checkNotNull(fromName, "fromName");
        this.fromName = JsonNullable.of(fromName);
        return this;
    }

    public SMTPServerSettings withFromName(JsonNullable<? extends String> fromName) {
        Utils.checkNotNull(fromName, "fromName");
        this.fromName = fromName;
        return this;
    }

    public SMTPServerSettings withStarttlsPolicy(EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLS starttlsPolicy) {
        Utils.checkNotNull(starttlsPolicy, "starttlsPolicy");
        this.starttlsPolicy = Optional.ofNullable(starttlsPolicy);
        return this;
    }

    public SMTPServerSettings withStarttlsPolicy(Optional<? extends EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLS> starttlsPolicy) {
        Utils.checkNotNull(starttlsPolicy, "starttlsPolicy");
        this.starttlsPolicy = starttlsPolicy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SMTPServerSettings other = (SMTPServerSettings) o;
        return 
            java.util.Objects.deepEquals(this.host, other.host) &&
            java.util.Objects.deepEquals(this.port, other.port) &&
            java.util.Objects.deepEquals(this.skipVerify, other.skipVerify) &&
            java.util.Objects.deepEquals(this.username, other.username) &&
            java.util.Objects.deepEquals(this.password, other.password) &&
            java.util.Objects.deepEquals(this.fromAddress, other.fromAddress) &&
            java.util.Objects.deepEquals(this.fromName, other.fromName) &&
            java.util.Objects.deepEquals(this.starttlsPolicy, other.starttlsPolicy);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            host,
            port,
            skipVerify,
            username,
            password,
            fromAddress,
            fromName,
            starttlsPolicy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SMTPServerSettings.class,
                "host", host,
                "port", port,
                "skipVerify", skipVerify,
                "username", username,
                "password", password,
                "fromAddress", fromAddress,
                "fromName", fromName,
                "starttlsPolicy", starttlsPolicy);
    }
    
    public final static class Builder {
 
        private String host;
 
        private Long port;
 
        private Optional<? extends Boolean> skipVerify = Optional.empty();
 
        private JsonNullable<? extends String> username = JsonNullable.undefined();
 
        private JsonNullable<? extends String> password = JsonNullable.undefined();
 
        private String fromAddress;
 
        private JsonNullable<? extends String> fromName = JsonNullable.undefined();
 
        private Optional<? extends EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLS> starttlsPolicy = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        public Builder skipVerify(boolean skipVerify) {
            Utils.checkNotNull(skipVerify, "skipVerify");
            this.skipVerify = Optional.ofNullable(skipVerify);
            return this;
        }

        public Builder skipVerify(Optional<? extends Boolean> skipVerify) {
            Utils.checkNotNull(skipVerify, "skipVerify");
            this.skipVerify = skipVerify;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = JsonNullable.of(username);
            return this;
        }

        public Builder username(JsonNullable<? extends String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = JsonNullable.of(password);
            return this;
        }

        public Builder password(JsonNullable<? extends String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder fromAddress(String fromAddress) {
            Utils.checkNotNull(fromAddress, "fromAddress");
            this.fromAddress = fromAddress;
            return this;
        }

        public Builder fromName(String fromName) {
            Utils.checkNotNull(fromName, "fromName");
            this.fromName = JsonNullable.of(fromName);
            return this;
        }

        public Builder fromName(JsonNullable<? extends String> fromName) {
            Utils.checkNotNull(fromName, "fromName");
            this.fromName = fromName;
            return this;
        }

        public Builder starttlsPolicy(EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLS starttlsPolicy) {
            Utils.checkNotNull(starttlsPolicy, "starttlsPolicy");
            this.starttlsPolicy = Optional.ofNullable(starttlsPolicy);
            return this;
        }

        public Builder starttlsPolicy(Optional<? extends EitherOpportunisticStartTLSMandatoryStartTLSOrNoStartTLSDefaultIsOpportunisticStartTLS> starttlsPolicy) {
            Utils.checkNotNull(starttlsPolicy, "starttlsPolicy");
            this.starttlsPolicy = starttlsPolicy;
            return this;
        }
        
        public SMTPServerSettings build() {
            return new SMTPServerSettings(
                host,
                port,
                skipVerify,
                username,
                password,
                fromAddress,
                fromName,
                starttlsPolicy);
        }
    }
}

