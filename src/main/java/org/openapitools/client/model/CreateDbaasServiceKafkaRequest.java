/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JsonSchemaKafka;
import org.openapitools.client.model.JsonSchemaKafkaConnect;
import org.openapitools.client.model.JsonSchemaKafkaRest;
import org.openapitools.client.model.JsonSchemaSchemaRegistry;
import org.openapitools.client.model.UpdateDbaasServiceKafkaRequestAuthenticationMethods;
import org.openapitools.client.model.UpdateDbaasServiceMysqlRequestMaintenance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDbaasServiceKafkaRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class CreateDbaasServiceKafkaRequest {
  public static final String SERIALIZED_NAME_AUTHENTICATION_METHODS = "authentication-methods";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHODS)
  private UpdateDbaasServiceKafkaRequestAuthenticationMethods authenticationMethods;

  public static final String SERIALIZED_NAME_KAFKA_REST_ENABLED = "kafka-rest-enabled";
  @SerializedName(SERIALIZED_NAME_KAFKA_REST_ENABLED)
  private Boolean kafkaRestEnabled;

  public static final String SERIALIZED_NAME_KAFKA_CONNECT_ENABLED = "kafka-connect-enabled";
  @SerializedName(SERIALIZED_NAME_KAFKA_CONNECT_ENABLED)
  private Boolean kafkaConnectEnabled;

  public static final String SERIALIZED_NAME_IP_FILTER = "ip-filter";
  @SerializedName(SERIALIZED_NAME_IP_FILTER)
  private List<String> ipFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMA_REGISTRY_SETTINGS = "schema-registry-settings";
  @SerializedName(SERIALIZED_NAME_SCHEMA_REGISTRY_SETTINGS)
  private JsonSchemaSchemaRegistry schemaRegistrySettings;

  public static final String SERIALIZED_NAME_KAFKA_REST_SETTINGS = "kafka-rest-settings";
  @SerializedName(SERIALIZED_NAME_KAFKA_REST_SETTINGS)
  private JsonSchemaKafkaRest kafkaRestSettings;

  public static final String SERIALIZED_NAME_TERMINATION_PROTECTION = "termination-protection";
  @SerializedName(SERIALIZED_NAME_TERMINATION_PROTECTION)
  private Boolean terminationProtection;

  public static final String SERIALIZED_NAME_KAFKA_CONNECT_SETTINGS = "kafka-connect-settings";
  @SerializedName(SERIALIZED_NAME_KAFKA_CONNECT_SETTINGS)
  private JsonSchemaKafkaConnect kafkaConnectSettings;

  public static final String SERIALIZED_NAME_MAINTENANCE = "maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private UpdateDbaasServiceMysqlRequestMaintenance maintenance;

  public static final String SERIALIZED_NAME_KAFKA_SETTINGS = "kafka-settings";
  @SerializedName(SERIALIZED_NAME_KAFKA_SETTINGS)
  private JsonSchemaKafka kafkaSettings = {};

  public static final String SERIALIZED_NAME_SCHEMA_REGISTRY_ENABLED = "schema-registry-enabled";
  @SerializedName(SERIALIZED_NAME_SCHEMA_REGISTRY_ENABLED)
  private Boolean schemaRegistryEnabled;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public CreateDbaasServiceKafkaRequest() {
  }

  public CreateDbaasServiceKafkaRequest authenticationMethods(UpdateDbaasServiceKafkaRequestAuthenticationMethods authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
    return this;
  }

   /**
   * Get authenticationMethods
   * @return authenticationMethods
  **/
  @javax.annotation.Nullable
  public UpdateDbaasServiceKafkaRequestAuthenticationMethods getAuthenticationMethods() {
    return authenticationMethods;
  }

  public void setAuthenticationMethods(UpdateDbaasServiceKafkaRequestAuthenticationMethods authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
  }


  public CreateDbaasServiceKafkaRequest kafkaRestEnabled(Boolean kafkaRestEnabled) {
    this.kafkaRestEnabled = kafkaRestEnabled;
    return this;
  }

   /**
   * Enable Kafka-REST service
   * @return kafkaRestEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getKafkaRestEnabled() {
    return kafkaRestEnabled;
  }

  public void setKafkaRestEnabled(Boolean kafkaRestEnabled) {
    this.kafkaRestEnabled = kafkaRestEnabled;
  }


  public CreateDbaasServiceKafkaRequest kafkaConnectEnabled(Boolean kafkaConnectEnabled) {
    this.kafkaConnectEnabled = kafkaConnectEnabled;
    return this;
  }

   /**
   * Allow clients to connect to kafka_connect from the public internet for service nodes that are in a project VPC or another type of private network
   * @return kafkaConnectEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getKafkaConnectEnabled() {
    return kafkaConnectEnabled;
  }

  public void setKafkaConnectEnabled(Boolean kafkaConnectEnabled) {
    this.kafkaConnectEnabled = kafkaConnectEnabled;
  }


  public CreateDbaasServiceKafkaRequest ipFilter(List<String> ipFilter) {
    this.ipFilter = ipFilter;
    return this;
  }

  public CreateDbaasServiceKafkaRequest addIpFilterItem(String ipFilterItem) {
    if (this.ipFilter == null) {
      this.ipFilter = new ArrayList<>();
    }
    this.ipFilter.add(ipFilterItem);
    return this;
  }

   /**
   * Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;
   * @return ipFilter
  **/
  @javax.annotation.Nullable
  public List<String> getIpFilter() {
    return ipFilter;
  }

  public void setIpFilter(List<String> ipFilter) {
    this.ipFilter = ipFilter;
  }


  public CreateDbaasServiceKafkaRequest schemaRegistrySettings(JsonSchemaSchemaRegistry schemaRegistrySettings) {
    this.schemaRegistrySettings = schemaRegistrySettings;
    return this;
  }

   /**
   * Get schemaRegistrySettings
   * @return schemaRegistrySettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaSchemaRegistry getSchemaRegistrySettings() {
    return schemaRegistrySettings;
  }

  public void setSchemaRegistrySettings(JsonSchemaSchemaRegistry schemaRegistrySettings) {
    this.schemaRegistrySettings = schemaRegistrySettings;
  }


  public CreateDbaasServiceKafkaRequest kafkaRestSettings(JsonSchemaKafkaRest kafkaRestSettings) {
    this.kafkaRestSettings = kafkaRestSettings;
    return this;
  }

   /**
   * Get kafkaRestSettings
   * @return kafkaRestSettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaKafkaRest getKafkaRestSettings() {
    return kafkaRestSettings;
  }

  public void setKafkaRestSettings(JsonSchemaKafkaRest kafkaRestSettings) {
    this.kafkaRestSettings = kafkaRestSettings;
  }


  public CreateDbaasServiceKafkaRequest terminationProtection(Boolean terminationProtection) {
    this.terminationProtection = terminationProtection;
    return this;
  }

   /**
   * Service is protected against termination and powering off
   * @return terminationProtection
  **/
  @javax.annotation.Nullable
  public Boolean getTerminationProtection() {
    return terminationProtection;
  }

  public void setTerminationProtection(Boolean terminationProtection) {
    this.terminationProtection = terminationProtection;
  }


  public CreateDbaasServiceKafkaRequest kafkaConnectSettings(JsonSchemaKafkaConnect kafkaConnectSettings) {
    this.kafkaConnectSettings = kafkaConnectSettings;
    return this;
  }

   /**
   * Get kafkaConnectSettings
   * @return kafkaConnectSettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaKafkaConnect getKafkaConnectSettings() {
    return kafkaConnectSettings;
  }

  public void setKafkaConnectSettings(JsonSchemaKafkaConnect kafkaConnectSettings) {
    this.kafkaConnectSettings = kafkaConnectSettings;
  }


  public CreateDbaasServiceKafkaRequest maintenance(UpdateDbaasServiceMysqlRequestMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

   /**
   * Get maintenance
   * @return maintenance
  **/
  @javax.annotation.Nullable
  public UpdateDbaasServiceMysqlRequestMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(UpdateDbaasServiceMysqlRequestMaintenance maintenance) {
    this.maintenance = maintenance;
  }


  public CreateDbaasServiceKafkaRequest kafkaSettings(JsonSchemaKafka kafkaSettings) {
    this.kafkaSettings = kafkaSettings;
    return this;
  }

   /**
   * Get kafkaSettings
   * @return kafkaSettings
  **/
  @javax.annotation.Nullable
  public JsonSchemaKafka getKafkaSettings() {
    return kafkaSettings;
  }

  public void setKafkaSettings(JsonSchemaKafka kafkaSettings) {
    this.kafkaSettings = kafkaSettings;
  }


  public CreateDbaasServiceKafkaRequest schemaRegistryEnabled(Boolean schemaRegistryEnabled) {
    this.schemaRegistryEnabled = schemaRegistryEnabled;
    return this;
  }

   /**
   * Enable Schema-Registry service
   * @return schemaRegistryEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getSchemaRegistryEnabled() {
    return schemaRegistryEnabled;
  }

  public void setSchemaRegistryEnabled(Boolean schemaRegistryEnabled) {
    this.schemaRegistryEnabled = schemaRegistryEnabled;
  }


  public CreateDbaasServiceKafkaRequest version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Kafka major version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public CreateDbaasServiceKafkaRequest plan(String plan) {
    this.plan = plan;
    return this;
  }

   /**
   * Subscription plan
   * @return plan
  **/
  @javax.annotation.Nonnull
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest = (CreateDbaasServiceKafkaRequest) o;
    return Objects.equals(this.authenticationMethods, createDbaasServiceKafkaRequest.authenticationMethods) &&
        Objects.equals(this.kafkaRestEnabled, createDbaasServiceKafkaRequest.kafkaRestEnabled) &&
        Objects.equals(this.kafkaConnectEnabled, createDbaasServiceKafkaRequest.kafkaConnectEnabled) &&
        Objects.equals(this.ipFilter, createDbaasServiceKafkaRequest.ipFilter) &&
        Objects.equals(this.schemaRegistrySettings, createDbaasServiceKafkaRequest.schemaRegistrySettings) &&
        Objects.equals(this.kafkaRestSettings, createDbaasServiceKafkaRequest.kafkaRestSettings) &&
        Objects.equals(this.terminationProtection, createDbaasServiceKafkaRequest.terminationProtection) &&
        Objects.equals(this.kafkaConnectSettings, createDbaasServiceKafkaRequest.kafkaConnectSettings) &&
        Objects.equals(this.maintenance, createDbaasServiceKafkaRequest.maintenance) &&
        Objects.equals(this.kafkaSettings, createDbaasServiceKafkaRequest.kafkaSettings) &&
        Objects.equals(this.schemaRegistryEnabled, createDbaasServiceKafkaRequest.schemaRegistryEnabled) &&
        Objects.equals(this.version, createDbaasServiceKafkaRequest.version) &&
        Objects.equals(this.plan, createDbaasServiceKafkaRequest.plan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationMethods, kafkaRestEnabled, kafkaConnectEnabled, ipFilter, schemaRegistrySettings, kafkaRestSettings, terminationProtection, kafkaConnectSettings, maintenance, kafkaSettings, schemaRegistryEnabled, version, plan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDbaasServiceKafkaRequest {\n");
    sb.append("    authenticationMethods: ").append(toIndentedString(authenticationMethods)).append("\n");
    sb.append("    kafkaRestEnabled: ").append(toIndentedString(kafkaRestEnabled)).append("\n");
    sb.append("    kafkaConnectEnabled: ").append(toIndentedString(kafkaConnectEnabled)).append("\n");
    sb.append("    ipFilter: ").append(toIndentedString(ipFilter)).append("\n");
    sb.append("    schemaRegistrySettings: ").append(toIndentedString(schemaRegistrySettings)).append("\n");
    sb.append("    kafkaRestSettings: ").append(toIndentedString(kafkaRestSettings)).append("\n");
    sb.append("    terminationProtection: ").append(toIndentedString(terminationProtection)).append("\n");
    sb.append("    kafkaConnectSettings: ").append(toIndentedString(kafkaConnectSettings)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("    kafkaSettings: ").append(toIndentedString(kafkaSettings)).append("\n");
    sb.append("    schemaRegistryEnabled: ").append(toIndentedString(schemaRegistryEnabled)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authentication-methods");
    openapiFields.add("kafka-rest-enabled");
    openapiFields.add("kafka-connect-enabled");
    openapiFields.add("ip-filter");
    openapiFields.add("schema-registry-settings");
    openapiFields.add("kafka-rest-settings");
    openapiFields.add("termination-protection");
    openapiFields.add("kafka-connect-settings");
    openapiFields.add("maintenance");
    openapiFields.add("kafka-settings");
    openapiFields.add("schema-registry-enabled");
    openapiFields.add("version");
    openapiFields.add("plan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("plan");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateDbaasServiceKafkaRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDbaasServiceKafkaRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDbaasServiceKafkaRequest is not found in the empty JSON string", CreateDbaasServiceKafkaRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDbaasServiceKafkaRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDbaasServiceKafkaRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDbaasServiceKafkaRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authentication-methods`
      if (jsonObj.get("authentication-methods") != null && !jsonObj.get("authentication-methods").isJsonNull()) {
        UpdateDbaasServiceKafkaRequestAuthenticationMethods.validateJsonElement(jsonObj.get("authentication-methods"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ip-filter") != null && !jsonObj.get("ip-filter").isJsonNull() && !jsonObj.get("ip-filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip-filter` to be an array in the JSON string but got `%s`", jsonObj.get("ip-filter").toString()));
      }
      // validate the optional field `schema-registry-settings`
      if (jsonObj.get("schema-registry-settings") != null && !jsonObj.get("schema-registry-settings").isJsonNull()) {
        JsonSchemaSchemaRegistry.validateJsonElement(jsonObj.get("schema-registry-settings"));
      }
      // validate the optional field `kafka-rest-settings`
      if (jsonObj.get("kafka-rest-settings") != null && !jsonObj.get("kafka-rest-settings").isJsonNull()) {
        JsonSchemaKafkaRest.validateJsonElement(jsonObj.get("kafka-rest-settings"));
      }
      // validate the optional field `kafka-connect-settings`
      if (jsonObj.get("kafka-connect-settings") != null && !jsonObj.get("kafka-connect-settings").isJsonNull()) {
        JsonSchemaKafkaConnect.validateJsonElement(jsonObj.get("kafka-connect-settings"));
      }
      // validate the optional field `maintenance`
      if (jsonObj.get("maintenance") != null && !jsonObj.get("maintenance").isJsonNull()) {
        UpdateDbaasServiceMysqlRequestMaintenance.validateJsonElement(jsonObj.get("maintenance"));
      }
      // validate the optional field `kafka-settings`
      if (jsonObj.get("kafka-settings") != null && !jsonObj.get("kafka-settings").isJsonNull()) {
        JsonSchemaKafka.validateJsonElement(jsonObj.get("kafka-settings"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDbaasServiceKafkaRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDbaasServiceKafkaRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDbaasServiceKafkaRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDbaasServiceKafkaRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDbaasServiceKafkaRequest>() {
           @Override
           public void write(JsonWriter out, CreateDbaasServiceKafkaRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDbaasServiceKafkaRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateDbaasServiceKafkaRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateDbaasServiceKafkaRequest
  * @throws IOException if the JSON string is invalid with respect to CreateDbaasServiceKafkaRequest
  */
  public static CreateDbaasServiceKafkaRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDbaasServiceKafkaRequest.class);
  }

 /**
  * Convert an instance of CreateDbaasServiceKafkaRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

