/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.AntiAffinityGroup;
import com.exoscale.apichgva2.models.AntiAffinityGroupRequest;
import com.exoscale.apichgva2.models.AntiAffinityGroupResponse;
import com.exoscale.apichgva2.models.Operation;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AntiAffinityGroupController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public AntiAffinityGroupController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @return    Returns the AntiAffinityGroupResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AntiAffinityGroupResponse listAntiAffinityGroups() throws ApiException, IOException {
        return prepareListAntiAffinityGroupsRequest().execute();
    }

    /**
     * @return    Returns the AntiAffinityGroupResponse response from the API call
     */
    public CompletableFuture<AntiAffinityGroupResponse> listAntiAffinityGroupsAsync() {
        try { 
            return prepareListAntiAffinityGroupsRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listAntiAffinityGroups.
     */
    private ApiCall<AntiAffinityGroupResponse, ApiException> prepareListAntiAffinityGroupsRequest() throws IOException {
        return new ApiCall.Builder<AntiAffinityGroupResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/anti-affinity-group")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AntiAffinityGroupResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createAntiAffinityGroup(
            final AntiAffinityGroupRequest body) throws ApiException, IOException {
        return prepareCreateAntiAffinityGroupRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createAntiAffinityGroupAsync(
            final AntiAffinityGroupRequest body) {
        try { 
            return prepareCreateAntiAffinityGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createAntiAffinityGroup.
     */
    private ApiCall<Operation, ApiException> prepareCreateAntiAffinityGroupRequest(
            final AntiAffinityGroupRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/anti-affinity-group")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the AntiAffinityGroup response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AntiAffinityGroup getAntiAffinityGroup(
            final UUID id) throws ApiException, IOException {
        return prepareGetAntiAffinityGroupRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the AntiAffinityGroup response from the API call
     */
    public CompletableFuture<AntiAffinityGroup> getAntiAffinityGroupAsync(
            final UUID id) {
        try { 
            return prepareGetAntiAffinityGroupRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getAntiAffinityGroup.
     */
    private ApiCall<AntiAffinityGroup, ApiException> prepareGetAntiAffinityGroupRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<AntiAffinityGroup, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/anti-affinity-group/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AntiAffinityGroup.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteAntiAffinityGroup(
            final UUID id) throws ApiException, IOException {
        return prepareDeleteAntiAffinityGroupRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteAntiAffinityGroupAsync(
            final UUID id) {
        try { 
            return prepareDeleteAntiAffinityGroupRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteAntiAffinityGroup.
     */
    private ApiCall<Operation, ApiException> prepareDeleteAntiAffinityGroupRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/anti-affinity-group/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}