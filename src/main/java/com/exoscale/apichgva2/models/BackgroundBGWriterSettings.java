/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for BackgroundBGWriterSettings type.
 */
public class BackgroundBGWriterSettings {
    private Integer bgwriterDelay;
    private Integer bgwriterFlushAfter;
    private Double bgwriterLruMultiplier;
    private Integer bgwriterLruMaxpages;

    /**
     * Default constructor.
     */
    public BackgroundBGWriterSettings() {
    }

    /**
     * Initialization constructor.
     * @param  bgwriterDelay  Integer value for bgwriterDelay.
     * @param  bgwriterFlushAfter  Integer value for bgwriterFlushAfter.
     * @param  bgwriterLruMultiplier  Double value for bgwriterLruMultiplier.
     * @param  bgwriterLruMaxpages  Integer value for bgwriterLruMaxpages.
     */
    public BackgroundBGWriterSettings(
            Integer bgwriterDelay,
            Integer bgwriterFlushAfter,
            Double bgwriterLruMultiplier,
            Integer bgwriterLruMaxpages) {
        this.bgwriterDelay = bgwriterDelay;
        this.bgwriterFlushAfter = bgwriterFlushAfter;
        this.bgwriterLruMultiplier = bgwriterLruMultiplier;
        this.bgwriterLruMaxpages = bgwriterLruMaxpages;
    }

    /**
     * Getter for BgwriterDelay.
     * Specifies the delay between activity rounds for the background writer in milliseconds.
     * Default is 200.
     * @return Returns the Integer
     */
    @JsonGetter("bgwriter_delay")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getBgwriterDelay() {
        return bgwriterDelay;
    }

    /**
     * Setter for BgwriterDelay.
     * Specifies the delay between activity rounds for the background writer in milliseconds.
     * Default is 200.
     * @param bgwriterDelay Value for Integer
     */
    @JsonSetter("bgwriter_delay")
    public void setBgwriterDelay(Integer bgwriterDelay) {
        this.bgwriterDelay = bgwriterDelay;
    }

    /**
     * Getter for BgwriterFlushAfter.
     * Whenever more than bgwriter_flush_after bytes have been written by the background writer,
     * attempt to force the OS to issue these writes to the underlying storage. Specified in
     * kilobytes, default is 512. Setting of 0 disables forced writeback.
     * @return Returns the Integer
     */
    @JsonGetter("bgwriter_flush_after")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getBgwriterFlushAfter() {
        return bgwriterFlushAfter;
    }

    /**
     * Setter for BgwriterFlushAfter.
     * Whenever more than bgwriter_flush_after bytes have been written by the background writer,
     * attempt to force the OS to issue these writes to the underlying storage. Specified in
     * kilobytes, default is 512. Setting of 0 disables forced writeback.
     * @param bgwriterFlushAfter Value for Integer
     */
    @JsonSetter("bgwriter_flush_after")
    public void setBgwriterFlushAfter(Integer bgwriterFlushAfter) {
        this.bgwriterFlushAfter = bgwriterFlushAfter;
    }

    /**
     * Getter for BgwriterLruMultiplier.
     * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at
     * an estimate of the number that will be needed during the next round, (up to
     * bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number
     * of buffers predicted to be needed. Larger values provide some cushion against spikes in
     * demand, while smaller values intentionally leave writes to be done by server processes. The
     * default is 2.0.
     * @return Returns the Double
     */
    @JsonGetter("bgwriter_lru_multiplier")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getBgwriterLruMultiplier() {
        return bgwriterLruMultiplier;
    }

    /**
     * Setter for BgwriterLruMultiplier.
     * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at
     * an estimate of the number that will be needed during the next round, (up to
     * bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number
     * of buffers predicted to be needed. Larger values provide some cushion against spikes in
     * demand, while smaller values intentionally leave writes to be done by server processes. The
     * default is 2.0.
     * @param bgwriterLruMultiplier Value for Double
     */
    @JsonSetter("bgwriter_lru_multiplier")
    public void setBgwriterLruMultiplier(Double bgwriterLruMultiplier) {
        this.bgwriterLruMultiplier = bgwriterLruMultiplier;
    }

    /**
     * Getter for BgwriterLruMaxpages.
     * In each round, no more than this many buffers will be written by the background writer.
     * Setting this to zero disables background writing. Default is 100.
     * @return Returns the Integer
     */
    @JsonGetter("bgwriter_lru_maxpages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getBgwriterLruMaxpages() {
        return bgwriterLruMaxpages;
    }

    /**
     * Setter for BgwriterLruMaxpages.
     * In each round, no more than this many buffers will be written by the background writer.
     * Setting this to zero disables background writing. Default is 100.
     * @param bgwriterLruMaxpages Value for Integer
     */
    @JsonSetter("bgwriter_lru_maxpages")
    public void setBgwriterLruMaxpages(Integer bgwriterLruMaxpages) {
        this.bgwriterLruMaxpages = bgwriterLruMaxpages;
    }

    /**
     * Converts this BackgroundBGWriterSettings into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BackgroundBGWriterSettings [" + "bgwriterDelay=" + bgwriterDelay
                + ", bgwriterFlushAfter=" + bgwriterFlushAfter + ", bgwriterLruMultiplier="
                + bgwriterLruMultiplier + ", bgwriterLruMaxpages=" + bgwriterLruMaxpages + "]";
    }

    /**
     * Builds a new {@link BackgroundBGWriterSettings.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BackgroundBGWriterSettings.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .bgwriterDelay(getBgwriterDelay())
                .bgwriterFlushAfter(getBgwriterFlushAfter())
                .bgwriterLruMultiplier(getBgwriterLruMultiplier())
                .bgwriterLruMaxpages(getBgwriterLruMaxpages());
        return builder;
    }

    /**
     * Class to build instances of {@link BackgroundBGWriterSettings}.
     */
    public static class Builder {
        private Integer bgwriterDelay;
        private Integer bgwriterFlushAfter;
        private Double bgwriterLruMultiplier;
        private Integer bgwriterLruMaxpages;



        /**
         * Setter for bgwriterDelay.
         * @param  bgwriterDelay  Integer value for bgwriterDelay.
         * @return Builder
         */
        public Builder bgwriterDelay(Integer bgwriterDelay) {
            this.bgwriterDelay = bgwriterDelay;
            return this;
        }

        /**
         * Setter for bgwriterFlushAfter.
         * @param  bgwriterFlushAfter  Integer value for bgwriterFlushAfter.
         * @return Builder
         */
        public Builder bgwriterFlushAfter(Integer bgwriterFlushAfter) {
            this.bgwriterFlushAfter = bgwriterFlushAfter;
            return this;
        }

        /**
         * Setter for bgwriterLruMultiplier.
         * @param  bgwriterLruMultiplier  Double value for bgwriterLruMultiplier.
         * @return Builder
         */
        public Builder bgwriterLruMultiplier(Double bgwriterLruMultiplier) {
            this.bgwriterLruMultiplier = bgwriterLruMultiplier;
            return this;
        }

        /**
         * Setter for bgwriterLruMaxpages.
         * @param  bgwriterLruMaxpages  Integer value for bgwriterLruMaxpages.
         * @return Builder
         */
        public Builder bgwriterLruMaxpages(Integer bgwriterLruMaxpages) {
            this.bgwriterLruMaxpages = bgwriterLruMaxpages;
            return this;
        }

        /**
         * Builds a new {@link BackgroundBGWriterSettings} object using the set fields.
         * @return {@link BackgroundBGWriterSettings}
         */
        public BackgroundBGWriterSettings build() {
            return new BackgroundBGWriterSettings(bgwriterDelay, bgwriterFlushAfter,
                    bgwriterLruMultiplier, bgwriterLruMaxpages);
        }
    }
}
