/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for SchemaRegistryConfiguration type.
 */
public class SchemaRegistryConfiguration {
    private String topicName;
    private Boolean leaderEligibility;

    /**
     * Default constructor.
     */
    public SchemaRegistryConfiguration() {
    }

    /**
     * Initialization constructor.
     * @param  topicName  String value for topicName.
     * @param  leaderEligibility  Boolean value for leaderEligibility.
     */
    public SchemaRegistryConfiguration(
            String topicName,
            Boolean leaderEligibility) {
        this.topicName = topicName;
        this.leaderEligibility = leaderEligibility;
    }

    /**
     * Getter for TopicName.
     * The durable single partition topic that acts as the durable log for the data. This topic must
     * be compacted to avoid losing data due to retention policy. Please note that changing this
     * configuration in an existing Schema Registry / Karapace setup leads to previous schemas being
     * inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of
     * order. It's only possible to do the switch while Schema Registry / Karapace is disabled.
     * Defaults to `_schemas`.
     * @return Returns the String
     */
    @JsonGetter("topic_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTopicName() {
        return topicName;
    }

    /**
     * Setter for TopicName.
     * The durable single partition topic that acts as the durable log for the data. This topic must
     * be compacted to avoid losing data due to retention policy. Please note that changing this
     * configuration in an existing Schema Registry / Karapace setup leads to previous schemas being
     * inaccessible, data encoded with them potentially unreadable and schema ID sequence put out of
     * order. It's only possible to do the switch while Schema Registry / Karapace is disabled.
     * Defaults to `_schemas`.
     * @param topicName Value for String
     */
    @JsonSetter("topic_name")
    public void setTopicName(String topicName) {
        this.topicName = topicName;
    }

    /**
     * Getter for LeaderEligibility.
     * If true, Karapace / Schema Registry on the service nodes can participate in leader election.
     * It might be needed to disable this when the schemas topic is replicated to a secondary
     * cluster and Karapace / Schema Registry there must not participate in leader election.
     * Defaults to `true`.
     * @return Returns the Boolean
     */
    @JsonGetter("leader_eligibility")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getLeaderEligibility() {
        return leaderEligibility;
    }

    /**
     * Setter for LeaderEligibility.
     * If true, Karapace / Schema Registry on the service nodes can participate in leader election.
     * It might be needed to disable this when the schemas topic is replicated to a secondary
     * cluster and Karapace / Schema Registry there must not participate in leader election.
     * Defaults to `true`.
     * @param leaderEligibility Value for Boolean
     */
    @JsonSetter("leader_eligibility")
    public void setLeaderEligibility(Boolean leaderEligibility) {
        this.leaderEligibility = leaderEligibility;
    }

    /**
     * Converts this SchemaRegistryConfiguration into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SchemaRegistryConfiguration [" + "topicName=" + topicName + ", leaderEligibility="
                + leaderEligibility + "]";
    }

    /**
     * Builds a new {@link SchemaRegistryConfiguration.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SchemaRegistryConfiguration.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .topicName(getTopicName())
                .leaderEligibility(getLeaderEligibility());
        return builder;
    }

    /**
     * Class to build instances of {@link SchemaRegistryConfiguration}.
     */
    public static class Builder {
        private String topicName;
        private Boolean leaderEligibility;



        /**
         * Setter for topicName.
         * @param  topicName  String value for topicName.
         * @return Builder
         */
        public Builder topicName(String topicName) {
            this.topicName = topicName;
            return this;
        }

        /**
         * Setter for leaderEligibility.
         * @param  leaderEligibility  Boolean value for leaderEligibility.
         * @return Builder
         */
        public Builder leaderEligibility(Boolean leaderEligibility) {
            this.leaderEligibility = leaderEligibility;
            return this;
        }

        /**
         * Builds a new {@link SchemaRegistryConfiguration} object using the set fields.
         * @return {@link SchemaRegistryConfiguration}
         */
        public SchemaRegistryConfiguration build() {
            return new SchemaRegistryConfiguration(topicName, leaderEligibility);
        }
    }
}
