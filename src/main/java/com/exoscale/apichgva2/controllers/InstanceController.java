/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.Field3Enum;
import com.exoscale.apichgva2.models.Instance;
import com.exoscale.apichgva2.models.InstancePassword;
import com.exoscale.apichgva2.models.InstanceRequest;
import com.exoscale.apichgva2.models.InstanceRequest1;
import com.exoscale.apichgva2.models.InstanceResetRequest;
import com.exoscale.apichgva2.models.InstanceResizeDiskRequest;
import com.exoscale.apichgva2.models.InstanceResponse;
import com.exoscale.apichgva2.models.InstanceRevertSnapshotRequest;
import com.exoscale.apichgva2.models.InstanceScaleRequest;
import com.exoscale.apichgva2.models.InstanceStartRequest;
import com.exoscale.apichgva2.models.ManagerTypeEnum;
import com.exoscale.apichgva2.models.Operation;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class InstanceController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public InstanceController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createSnapshot(
            final UUID id) throws ApiException, IOException {
        return prepareCreateSnapshotRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createSnapshotAsync(
            final UUID id) {
        try { 
            return prepareCreateSnapshotRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createSnapshot.
     */
    private ApiCall<Operation, ApiException> prepareCreateSnapshotRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:create-snapshot")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Reveal the password used during instance creation or the latest password reset. This is only
     * available for VMs created against templates having the `password-enabled` property set to
     * `true`. Passwords are transiently stored for at most 24 hours and intended to be retrieved
     * shortly after creation or resets.
     * @param  id  Required parameter: Example:
     * @return    Returns the InstancePassword response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InstancePassword revealInstancePassword(
            final UUID id) throws ApiException, IOException {
        return prepareRevealInstancePasswordRequest(id).execute();
    }

    /**
     * Reveal the password used during instance creation or the latest password reset. This is only
     * available for VMs created against templates having the `password-enabled` property set to
     * `true`. Passwords are transiently stored for at most 24 hours and intended to be retrieved
     * shortly after creation or resets.
     * @param  id  Required parameter: Example:
     * @return    Returns the InstancePassword response from the API call
     */
    public CompletableFuture<InstancePassword> revealInstancePasswordAsync(
            final UUID id) {
        try { 
            return prepareRevealInstancePasswordRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for revealInstancePassword.
     */
    private ApiCall<InstancePassword, ApiException> prepareRevealInstancePasswordRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<InstancePassword, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:password")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, InstancePassword.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation resizes a Compute instance's disk volume. Note: the disk can only grow, cannot
     * be shrunk.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation resizeInstanceDisk(
            final UUID id,
            final InstanceResizeDiskRequest body) throws ApiException, IOException {
        return prepareResizeInstanceDiskRequest(id, body).execute();
    }

    /**
     * This operation resizes a Compute instance's disk volume. Note: the disk can only grow, cannot
     * be shrunk.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> resizeInstanceDiskAsync(
            final UUID id,
            final InstanceResizeDiskRequest body) {
        try { 
            return prepareResizeInstanceDiskRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resizeInstanceDisk.
     */
    private ApiCall<Operation, ApiException> prepareResizeInstanceDiskRequest(
            final UUID id,
            final InstanceResizeDiskRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:resize-disk")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation resetInstancePassword(
            final UUID id) throws ApiException, IOException {
        return prepareResetInstancePasswordRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> resetInstancePasswordAsync(
            final UUID id) {
        try { 
            return prepareResetInstancePasswordRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resetInstancePassword.
     */
    private ApiCall<Operation, ApiException> prepareResetInstancePasswordRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:reset-password")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation starts a virtual machine, potentially using a rescue profile if specified.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation startInstance(
            final UUID id,
            final InstanceStartRequest body) throws ApiException, IOException {
        return prepareStartInstanceRequest(id, body).execute();
    }

    /**
     * This operation starts a virtual machine, potentially using a rescue profile if specified.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> startInstanceAsync(
            final UUID id,
            final InstanceStartRequest body) {
        try { 
            return prepareStartInstanceRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for startInstance.
     */
    private ApiCall<Operation, ApiException> prepareStartInstanceRequest(
            final UUID id,
            final InstanceStartRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:start")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation changes the Compute instance's type. Note: the new Instance Type must be
     * within the same family (e.g. a standard instance cannot be scaled to gpu2 or storage).
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation scaleInstance(
            final UUID id,
            final InstanceScaleRequest body) throws ApiException, IOException {
        return prepareScaleInstanceRequest(id, body).execute();
    }

    /**
     * This operation changes the Compute instance's type. Note: the new Instance Type must be
     * within the same family (e.g. a standard instance cannot be scaled to gpu2 or storage).
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> scaleInstanceAsync(
            final UUID id,
            final InstanceScaleRequest body) {
        try { 
            return prepareScaleInstanceRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for scaleInstance.
     */
    private ApiCall<Operation, ApiException> prepareScaleInstanceRequest(
            final UUID id,
            final InstanceScaleRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:scale")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation stopInstance(
            final UUID id) throws ApiException, IOException {
        return prepareStopInstanceRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> stopInstanceAsync(
            final UUID id) {
        try { 
            return prepareStopInstanceRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for stopInstance.
     */
    private ApiCall<Operation, ApiException> prepareStopInstanceRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:stop")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object addInstanceProtection(
            final UUID id) throws ApiException, IOException {
        return prepareAddInstanceProtectionRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> addInstanceProtectionAsync(
            final UUID id) {
        try { 
            return prepareAddInstanceProtectionRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addInstanceProtection.
     */
    private ApiCall<Object, ApiException> prepareAddInstanceProtectionRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:add-protection")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  field  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation resetInstanceField(
            final UUID id,
            final Field3Enum field) throws ApiException, IOException {
        return prepareResetInstanceFieldRequest(id, field).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  field  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> resetInstanceFieldAsync(
            final UUID id,
            final Field3Enum field) {
        try { 
            return prepareResetInstanceFieldRequest(id, field).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resetInstanceField.
     */
    private ApiCall<Operation, ApiException> prepareResetInstanceFieldRequest(
            final UUID id,
            final Field3Enum field) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}/{field}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("field").value((field != null) ? field.value() : null)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object removeInstanceProtection(
            final UUID id) throws ApiException, IOException {
        return prepareRemoveInstanceProtectionRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> removeInstanceProtectionAsync(
            final UUID id) {
        try { 
            return prepareRemoveInstanceProtectionRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for removeInstanceProtection.
     */
    private ApiCall<Object, ApiException> prepareRemoveInstanceProtectionRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:remove-protection")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation re-installs a Compute instance to a base template. If target template is
     * provided it will be used to recreated instance from. Warning: the operation wipes all data
     * stored on the disk.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation resetInstance(
            final UUID id,
            final InstanceResetRequest body) throws ApiException, IOException {
        return prepareResetInstanceRequest(id, body).execute();
    }

    /**
     * This operation re-installs a Compute instance to a base template. If target template is
     * provided it will be used to recreated instance from. Warning: the operation wipes all data
     * stored on the disk.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> resetInstanceAsync(
            final UUID id,
            final InstanceResetRequest body) {
        try { 
            return prepareResetInstanceRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resetInstance.
     */
    private ApiCall<Operation, ApiException> prepareResetInstanceRequest(
            final UUID id,
            final InstanceResetRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:reset")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteInstance(
            final UUID id) throws ApiException, IOException {
        return prepareDeleteInstanceRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteInstanceAsync(
            final UUID id) {
        try { 
            return prepareDeleteInstanceRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteInstance.
     */
    private ApiCall<Operation, ApiException> prepareDeleteInstanceRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateInstance(
            final UUID id,
            final InstanceRequest body) throws ApiException, IOException {
        return prepareUpdateInstanceRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateInstanceAsync(
            final UUID id,
            final InstanceRequest body) {
        try { 
            return prepareUpdateInstanceRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateInstance.
     */
    private ApiCall<Operation, ApiException> prepareUpdateInstanceRequest(
            final UUID id,
            final InstanceRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Instance response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Instance getInstance(
            final UUID id) throws ApiException, IOException {
        return prepareGetInstanceRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Instance response from the API call
     */
    public CompletableFuture<Instance> getInstanceAsync(
            final UUID id) {
        try { 
            return prepareGetInstanceRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getInstance.
     */
    private ApiCall<Instance, ApiException> prepareGetInstanceRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Instance, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Instance.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation rebootInstance(
            final UUID id) throws ApiException, IOException {
        return prepareRebootInstanceRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> rebootInstanceAsync(
            final UUID id) {
        try { 
            return prepareRebootInstanceRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for rebootInstance.
     */
    private ApiCall<Operation, ApiException> prepareRebootInstanceRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{id}:reboot")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createInstance(
            final InstanceRequest1 body) throws ApiException, IOException {
        return prepareCreateInstanceRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createInstanceAsync(
            final InstanceRequest1 body) {
        try { 
            return prepareCreateInstanceRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createInstance.
     */
    private ApiCall<Operation, ApiException> prepareCreateInstanceRequest(
            final InstanceRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  managerId  Optional parameter: Example:
     * @param  managerType  Optional parameter: Example:
     * @param  ipAddress  Optional parameter: Example:
     * @return    Returns the InstanceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InstanceResponse listInstances(
            final UUID managerId,
            final ManagerTypeEnum managerType,
            final String ipAddress) throws ApiException, IOException {
        return prepareListInstancesRequest(managerId, managerType, ipAddress).execute();
    }

    /**
     * @param  managerId  Optional parameter: Example:
     * @param  managerType  Optional parameter: Example:
     * @param  ipAddress  Optional parameter: Example:
     * @return    Returns the InstanceResponse response from the API call
     */
    public CompletableFuture<InstanceResponse> listInstancesAsync(
            final UUID managerId,
            final ManagerTypeEnum managerType,
            final String ipAddress) {
        try { 
            return prepareListInstancesRequest(managerId, managerType, ipAddress).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listInstances.
     */
    private ApiCall<InstanceResponse, ApiException> prepareListInstancesRequest(
            final UUID managerId,
            final ManagerTypeEnum managerType,
            final String ipAddress) throws IOException {
        return new ApiCall.Builder<InstanceResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance")
                        .queryParam(param -> param.key("manager-id")
                                .value(managerId).isRequired(false))
                        .queryParam(param -> param.key("manager-type")
                                .value((managerType != null) ? managerType.value() : null).isRequired(false))
                        .queryParam(param -> param.key("ip-address")
                                .value(ipAddress).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, InstanceResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation reverts the snapshot to the Compute instance volume, restoring stored data as
     * it was at the time of the snapshot. The Compute instance must be previously stopped.
     * @param  instanceId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation revertInstanceToSnapshot(
            final UUID instanceId,
            final InstanceRevertSnapshotRequest body) throws ApiException, IOException {
        return prepareRevertInstanceToSnapshotRequest(instanceId, body).execute();
    }

    /**
     * This operation reverts the snapshot to the Compute instance volume, restoring stored data as
     * it was at the time of the snapshot. The Compute instance must be previously stopped.
     * @param  instanceId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> revertInstanceToSnapshotAsync(
            final UUID instanceId,
            final InstanceRevertSnapshotRequest body) {
        try { 
            return prepareRevertInstanceToSnapshotRequest(instanceId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for revertInstanceToSnapshot.
     */
    private ApiCall<Operation, ApiException> prepareRevertInstanceToSnapshotRequest(
            final UUID instanceId,
            final InstanceRevertSnapshotRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/instance/{instance-id}:revert-snapshot")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("instance-id").value(instanceId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}