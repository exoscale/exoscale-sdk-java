/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class IamServicePolicy {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends IamServicePolicyType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rules")
    private Optional<? extends java.util.List<IamServicePolicyRule>> rules;

    public IamServicePolicy(
            @JsonProperty("type") Optional<? extends IamServicePolicyType> type,
            @JsonProperty("rules") Optional<? extends java.util.List<IamServicePolicyRule>> rules) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(rules, "rules");
        this.type = type;
        this.rules = rules;
    }

    public Optional<? extends IamServicePolicyType> type() {
        return type;
    }

    public Optional<? extends java.util.List<IamServicePolicyRule>> rules() {
        return rules;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IamServicePolicy withType(IamServicePolicyType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public IamServicePolicy withType(Optional<? extends IamServicePolicyType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public IamServicePolicy withRules(java.util.List<IamServicePolicyRule> rules) {
        Utils.checkNotNull(rules, "rules");
        this.rules = Optional.ofNullable(rules);
        return this;
    }

    public IamServicePolicy withRules(Optional<? extends java.util.List<IamServicePolicyRule>> rules) {
        Utils.checkNotNull(rules, "rules");
        this.rules = rules;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IamServicePolicy other = (IamServicePolicy) o;
        return 
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.rules, other.rules);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            rules);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IamServicePolicy.class,
                "type", type,
                "rules", rules);
    }
    
    public final static class Builder {
 
        private Optional<? extends IamServicePolicyType> type = Optional.empty();
 
        private Optional<? extends java.util.List<IamServicePolicyRule>> rules = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(IamServicePolicyType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends IamServicePolicyType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder rules(java.util.List<IamServicePolicyRule> rules) {
            Utils.checkNotNull(rules, "rules");
            this.rules = Optional.ofNullable(rules);
            return this;
        }

        public Builder rules(Optional<? extends java.util.List<IamServicePolicyRule>> rules) {
            Utils.checkNotNull(rules, "rules");
            this.rules = rules;
            return this;
        }
        
        public IamServicePolicy build() {
            return new IamServicePolicy(
                type,
                rules);
        }
    }
}

