/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.exoscale4j.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * WALSenderTimeoutSettings
 */
@JsonPropertyOrder({
  WALSenderTimeoutSettings.JSON_PROPERTY_WAL_SENDER_TIMEOUT_ENABLED,
  WALSenderTimeoutSettings.JSON_PROPERTY_WAL_SENDER_TIMEOUT_MILLIS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T11:36:46.703938+02:00[Europe/Vienna]", comments = "Generator version: 7.4.0")
public class WALSenderTimeoutSettings {
  public static final String JSON_PROPERTY_WAL_SENDER_TIMEOUT_ENABLED = "wal-sender-timeout-enabled";
  private Boolean walSenderTimeoutEnabled;

  public static final String JSON_PROPERTY_WAL_SENDER_TIMEOUT_MILLIS = "wal-sender-timeout-millis";
  private Integer walSenderTimeoutMillis;

  public WALSenderTimeoutSettings() { 
  }

  public WALSenderTimeoutSettings walSenderTimeoutEnabled(Boolean walSenderTimeoutEnabled) {
    this.walSenderTimeoutEnabled = walSenderTimeoutEnabled;
    return this;
  }

   /**
   * Disabled sets wal_sender_timeout to 0. Enabled sets wal_sender_timeout to the value of wal-sender-timeout-millis
   * @return walSenderTimeoutEnabled
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WAL_SENDER_TIMEOUT_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getWalSenderTimeoutEnabled() {
    return walSenderTimeoutEnabled;
  }


  @JsonProperty(JSON_PROPERTY_WAL_SENDER_TIMEOUT_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWalSenderTimeoutEnabled(Boolean walSenderTimeoutEnabled) {
    this.walSenderTimeoutEnabled = walSenderTimeoutEnabled;
  }


  public WALSenderTimeoutSettings walSenderTimeoutMillis(Integer walSenderTimeoutMillis) {
    this.walSenderTimeoutMillis = walSenderTimeoutMillis;
    return this;
  }

   /**
   * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds.
   * minimum: 5000
   * maximum: 10800000
   * @return walSenderTimeoutMillis
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WAL_SENDER_TIMEOUT_MILLIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWalSenderTimeoutMillis() {
    return walSenderTimeoutMillis;
  }


  @JsonProperty(JSON_PROPERTY_WAL_SENDER_TIMEOUT_MILLIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalSenderTimeoutMillis(Integer walSenderTimeoutMillis) {
    this.walSenderTimeoutMillis = walSenderTimeoutMillis;
  }


  /**
   * Return true if this WAL_Sender_Timeout_Settings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WALSenderTimeoutSettings waLSenderTimeoutSettings = (WALSenderTimeoutSettings) o;
    return Objects.equals(this.walSenderTimeoutEnabled, waLSenderTimeoutSettings.walSenderTimeoutEnabled) &&
        Objects.equals(this.walSenderTimeoutMillis, waLSenderTimeoutSettings.walSenderTimeoutMillis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(walSenderTimeoutEnabled, walSenderTimeoutMillis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WALSenderTimeoutSettings {\n");
    sb.append("    walSenderTimeoutEnabled: ").append(toIndentedString(walSenderTimeoutEnabled)).append("\n");
    sb.append("    walSenderTimeoutMillis: ").append(toIndentedString(walSenderTimeoutMillis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `wal-sender-timeout-enabled` to the URL query string
    if (getWalSenderTimeoutEnabled() != null) {
      joiner.add(String.format("%swal-sender-timeout-enabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWalSenderTimeoutEnabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `wal-sender-timeout-millis` to the URL query string
    if (getWalSenderTimeoutMillis() != null) {
      joiner.add(String.format("%swal-sender-timeout-millis%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWalSenderTimeoutMillis()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

