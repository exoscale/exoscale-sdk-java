/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.Instance;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * SnapshotInput - Snapshot
 */

public class SnapshotInput {

    /**
     * Snapshot name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Snapshot state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends SnapshotState> state;

    /**
     * Exported snapshot information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("export")
    private Optional<? extends Export> export;

    /**
     * Instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance")
    private Optional<? extends Instance> instance;

    public SnapshotInput(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("state") Optional<? extends SnapshotState> state,
            @JsonProperty("export") Optional<? extends Export> export,
            @JsonProperty("instance") Optional<? extends Instance> instance) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(export, "export");
        Utils.checkNotNull(instance, "instance");
        this.name = name;
        this.state = state;
        this.export = export;
        this.instance = instance;
    }

    /**
     * Snapshot name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Snapshot state
     */
    public Optional<? extends SnapshotState> state() {
        return state;
    }

    /**
     * Exported snapshot information
     */
    public Optional<? extends Export> export() {
        return export;
    }

    /**
     * Instance
     */
    public Optional<? extends Instance> instance() {
        return instance;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Snapshot name
     */
    public SnapshotInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Snapshot name
     */
    public SnapshotInput withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Snapshot state
     */
    public SnapshotInput withState(SnapshotState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * Snapshot state
     */
    public SnapshotInput withState(Optional<? extends SnapshotState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Exported snapshot information
     */
    public SnapshotInput withExport(Export export) {
        Utils.checkNotNull(export, "export");
        this.export = Optional.ofNullable(export);
        return this;
    }

    /**
     * Exported snapshot information
     */
    public SnapshotInput withExport(Optional<? extends Export> export) {
        Utils.checkNotNull(export, "export");
        this.export = export;
        return this;
    }

    /**
     * Instance
     */
    public SnapshotInput withInstance(Instance instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = Optional.ofNullable(instance);
        return this;
    }

    /**
     * Instance
     */
    public SnapshotInput withInstance(Optional<? extends Instance> instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = instance;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SnapshotInput other = (SnapshotInput) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.export, other.export) &&
            java.util.Objects.deepEquals(this.instance, other.instance);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            state,
            export,
            instance);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SnapshotInput.class,
                "name", name,
                "state", state,
                "export", export,
                "instance", instance);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends SnapshotState> state = Optional.empty();
 
        private Optional<? extends Export> export = Optional.empty();
 
        private Optional<? extends Instance> instance = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Snapshot name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Snapshot name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Snapshot state
         */
        public Builder state(SnapshotState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Snapshot state
         */
        public Builder state(Optional<? extends SnapshotState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Exported snapshot information
         */
        public Builder export(Export export) {
            Utils.checkNotNull(export, "export");
            this.export = Optional.ofNullable(export);
            return this;
        }

        /**
         * Exported snapshot information
         */
        public Builder export(Optional<? extends Export> export) {
            Utils.checkNotNull(export, "export");
            this.export = export;
            return this;
        }

        /**
         * Instance
         */
        public Builder instance(Instance instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = Optional.ofNullable(instance);
            return this;
        }

        /**
         * Instance
         */
        public Builder instance(Optional<? extends Instance> instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = instance;
            return this;
        }
        
        public SnapshotInput build() {
            return new SnapshotInput(
                name,
                state,
                export,
                instance);
        }
    }
}

