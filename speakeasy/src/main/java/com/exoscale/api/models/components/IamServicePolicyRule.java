/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class IamServicePolicyRule {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private Optional<? extends Action> action;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expression")
    private Optional<? extends String> expression;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private Optional<? extends java.util.List<String>> resources;

    public IamServicePolicyRule(
            @JsonProperty("action") Optional<? extends Action> action,
            @JsonProperty("expression") Optional<? extends String> expression,
            @JsonProperty("resources") Optional<? extends java.util.List<String>> resources) {
        Utils.checkNotNull(action, "action");
        Utils.checkNotNull(expression, "expression");
        Utils.checkNotNull(resources, "resources");
        this.action = action;
        this.expression = expression;
        this.resources = resources;
    }

    public Optional<? extends Action> action() {
        return action;
    }

    public Optional<? extends String> expression() {
        return expression;
    }

    public Optional<? extends java.util.List<String>> resources() {
        return resources;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IamServicePolicyRule withAction(Action action) {
        Utils.checkNotNull(action, "action");
        this.action = Optional.ofNullable(action);
        return this;
    }

    public IamServicePolicyRule withAction(Optional<? extends Action> action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    public IamServicePolicyRule withExpression(String expression) {
        Utils.checkNotNull(expression, "expression");
        this.expression = Optional.ofNullable(expression);
        return this;
    }

    public IamServicePolicyRule withExpression(Optional<? extends String> expression) {
        Utils.checkNotNull(expression, "expression");
        this.expression = expression;
        return this;
    }

    public IamServicePolicyRule withResources(java.util.List<String> resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = Optional.ofNullable(resources);
        return this;
    }

    public IamServicePolicyRule withResources(Optional<? extends java.util.List<String>> resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = resources;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IamServicePolicyRule other = (IamServicePolicyRule) o;
        return 
            java.util.Objects.deepEquals(this.action, other.action) &&
            java.util.Objects.deepEquals(this.expression, other.expression) &&
            java.util.Objects.deepEquals(this.resources, other.resources);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            action,
            expression,
            resources);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IamServicePolicyRule.class,
                "action", action,
                "expression", expression,
                "resources", resources);
    }
    
    public final static class Builder {
 
        private Optional<? extends Action> action = Optional.empty();
 
        private Optional<? extends String> expression = Optional.empty();
 
        private Optional<? extends java.util.List<String>> resources = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder action(Action action) {
            Utils.checkNotNull(action, "action");
            this.action = Optional.ofNullable(action);
            return this;
        }

        public Builder action(Optional<? extends Action> action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }

        public Builder expression(String expression) {
            Utils.checkNotNull(expression, "expression");
            this.expression = Optional.ofNullable(expression);
            return this;
        }

        public Builder expression(Optional<? extends String> expression) {
            Utils.checkNotNull(expression, "expression");
            this.expression = expression;
            return this;
        }

        public Builder resources(java.util.List<String> resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = Optional.ofNullable(resources);
            return this;
        }

        public Builder resources(Optional<? extends java.util.List<String>> resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = resources;
            return this;
        }
        
        public IamServicePolicyRule build() {
            return new IamServicePolicyRule(
                action,
                expression,
                resources);
        }
    }
}

