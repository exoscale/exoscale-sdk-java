/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GetDbaasSettingsPgSettings {

    /**
     * postgresql.conf configuration values
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pg")
    private Optional<? extends Pg> pg;

    /**
     * PGLookout settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pglookout")
    private Optional<? extends Pglookout> pglookout;

    /**
     * PGBouncer connection pooling settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pgbouncer")
    private Optional<? extends Pgbouncer> pgbouncer;

    /**
     * TimescaleDB extension configuration values
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timescaledb")
    private Optional<? extends Timescaledb> timescaledb;

    public GetDbaasSettingsPgSettings(
            @JsonProperty("pg") Optional<? extends Pg> pg,
            @JsonProperty("pglookout") Optional<? extends Pglookout> pglookout,
            @JsonProperty("pgbouncer") Optional<? extends Pgbouncer> pgbouncer,
            @JsonProperty("timescaledb") Optional<? extends Timescaledb> timescaledb) {
        Utils.checkNotNull(pg, "pg");
        Utils.checkNotNull(pglookout, "pglookout");
        Utils.checkNotNull(pgbouncer, "pgbouncer");
        Utils.checkNotNull(timescaledb, "timescaledb");
        this.pg = pg;
        this.pglookout = pglookout;
        this.pgbouncer = pgbouncer;
        this.timescaledb = timescaledb;
    }

    /**
     * postgresql.conf configuration values
     */
    public Optional<? extends Pg> pg() {
        return pg;
    }

    /**
     * PGLookout settings
     */
    public Optional<? extends Pglookout> pglookout() {
        return pglookout;
    }

    /**
     * PGBouncer connection pooling settings
     */
    public Optional<? extends Pgbouncer> pgbouncer() {
        return pgbouncer;
    }

    /**
     * TimescaleDB extension configuration values
     */
    public Optional<? extends Timescaledb> timescaledb() {
        return timescaledb;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * postgresql.conf configuration values
     */
    public GetDbaasSettingsPgSettings withPg(Pg pg) {
        Utils.checkNotNull(pg, "pg");
        this.pg = Optional.ofNullable(pg);
        return this;
    }

    /**
     * postgresql.conf configuration values
     */
    public GetDbaasSettingsPgSettings withPg(Optional<? extends Pg> pg) {
        Utils.checkNotNull(pg, "pg");
        this.pg = pg;
        return this;
    }

    /**
     * PGLookout settings
     */
    public GetDbaasSettingsPgSettings withPglookout(Pglookout pglookout) {
        Utils.checkNotNull(pglookout, "pglookout");
        this.pglookout = Optional.ofNullable(pglookout);
        return this;
    }

    /**
     * PGLookout settings
     */
    public GetDbaasSettingsPgSettings withPglookout(Optional<? extends Pglookout> pglookout) {
        Utils.checkNotNull(pglookout, "pglookout");
        this.pglookout = pglookout;
        return this;
    }

    /**
     * PGBouncer connection pooling settings
     */
    public GetDbaasSettingsPgSettings withPgbouncer(Pgbouncer pgbouncer) {
        Utils.checkNotNull(pgbouncer, "pgbouncer");
        this.pgbouncer = Optional.ofNullable(pgbouncer);
        return this;
    }

    /**
     * PGBouncer connection pooling settings
     */
    public GetDbaasSettingsPgSettings withPgbouncer(Optional<? extends Pgbouncer> pgbouncer) {
        Utils.checkNotNull(pgbouncer, "pgbouncer");
        this.pgbouncer = pgbouncer;
        return this;
    }

    /**
     * TimescaleDB extension configuration values
     */
    public GetDbaasSettingsPgSettings withTimescaledb(Timescaledb timescaledb) {
        Utils.checkNotNull(timescaledb, "timescaledb");
        this.timescaledb = Optional.ofNullable(timescaledb);
        return this;
    }

    /**
     * TimescaleDB extension configuration values
     */
    public GetDbaasSettingsPgSettings withTimescaledb(Optional<? extends Timescaledb> timescaledb) {
        Utils.checkNotNull(timescaledb, "timescaledb");
        this.timescaledb = timescaledb;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDbaasSettingsPgSettings other = (GetDbaasSettingsPgSettings) o;
        return 
            java.util.Objects.deepEquals(this.pg, other.pg) &&
            java.util.Objects.deepEquals(this.pglookout, other.pglookout) &&
            java.util.Objects.deepEquals(this.pgbouncer, other.pgbouncer) &&
            java.util.Objects.deepEquals(this.timescaledb, other.timescaledb);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            pg,
            pglookout,
            pgbouncer,
            timescaledb);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDbaasSettingsPgSettings.class,
                "pg", pg,
                "pglookout", pglookout,
                "pgbouncer", pgbouncer,
                "timescaledb", timescaledb);
    }
    
    public final static class Builder {
 
        private Optional<? extends Pg> pg = Optional.empty();
 
        private Optional<? extends Pglookout> pglookout = Optional.empty();
 
        private Optional<? extends Pgbouncer> pgbouncer = Optional.empty();
 
        private Optional<? extends Timescaledb> timescaledb = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * postgresql.conf configuration values
         */
        public Builder pg(Pg pg) {
            Utils.checkNotNull(pg, "pg");
            this.pg = Optional.ofNullable(pg);
            return this;
        }

        /**
         * postgresql.conf configuration values
         */
        public Builder pg(Optional<? extends Pg> pg) {
            Utils.checkNotNull(pg, "pg");
            this.pg = pg;
            return this;
        }

        /**
         * PGLookout settings
         */
        public Builder pglookout(Pglookout pglookout) {
            Utils.checkNotNull(pglookout, "pglookout");
            this.pglookout = Optional.ofNullable(pglookout);
            return this;
        }

        /**
         * PGLookout settings
         */
        public Builder pglookout(Optional<? extends Pglookout> pglookout) {
            Utils.checkNotNull(pglookout, "pglookout");
            this.pglookout = pglookout;
            return this;
        }

        /**
         * PGBouncer connection pooling settings
         */
        public Builder pgbouncer(Pgbouncer pgbouncer) {
            Utils.checkNotNull(pgbouncer, "pgbouncer");
            this.pgbouncer = Optional.ofNullable(pgbouncer);
            return this;
        }

        /**
         * PGBouncer connection pooling settings
         */
        public Builder pgbouncer(Optional<? extends Pgbouncer> pgbouncer) {
            Utils.checkNotNull(pgbouncer, "pgbouncer");
            this.pgbouncer = pgbouncer;
            return this;
        }

        /**
         * TimescaleDB extension configuration values
         */
        public Builder timescaledb(Timescaledb timescaledb) {
            Utils.checkNotNull(timescaledb, "timescaledb");
            this.timescaledb = Optional.ofNullable(timescaledb);
            return this;
        }

        /**
         * TimescaleDB extension configuration values
         */
        public Builder timescaledb(Optional<? extends Timescaledb> timescaledb) {
            Utils.checkNotNull(timescaledb, "timescaledb");
            this.timescaledb = timescaledb;
            return this;
        }
        
        public GetDbaasSettingsPgSettings build() {
            return new GetDbaasSettingsPgSettings(
                pg,
                pglookout,
                pgbouncer,
                timescaledb);
        }
    }
}

