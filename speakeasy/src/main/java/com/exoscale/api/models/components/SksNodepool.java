/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * SksNodepool - SKS Nodepool
 */

public class SksNodepool {

    /**
     * Nodepool Anti-affinity Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anti-affinity-groups")
    private Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups;

    /**
     * Nodepool description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taints")
    private Optional<? extends java.util.Map<String, SksNodepoolTaint>> taints;

    /**
     * Nodepool Security Groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security-groups")
    private Optional<? extends java.util.List<SecurityGroup>> securityGroups;

    /**
     * Nodepool name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Compute instance type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance-type")
    private Optional<? extends InstanceType> instanceType;

    /**
     * Nodepool Private Networks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private-networks")
    private Optional<? extends java.util.List<PrivateNetwork>> privateNetworks;

    /**
     * Instance template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends Template> template;

    /**
     * Nodepool state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends SksNodepoolState> state;

    /**
     * Number of instances
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Long> size;

    /**
     * Kubelet image GC options
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kubelet-image-gc")
    private Optional<? extends KubeletImageGc> kubeletImageGc;

    /**
     * Instance Pool
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance-pool")
    private Optional<? extends InstancePool> instancePool;

    /**
     * The instances created by the Nodepool will be prefixed with this value (default: pool)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance-prefix")
    private Optional<? extends String> instancePrefix;

    /**
     * Deploy target
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deploy-target")
    private Optional<? extends DeployTarget> deployTarget;

    /**
     * Nodepool addons
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addons")
    private Optional<? extends java.util.List<Addons>> addons;

    /**
     * Nodepool ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Nodepool instances disk size in GB
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disk-size")
    private Optional<? extends Long> diskSize;

    /**
     * Nodepool version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    /**
     * Nodepool creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    public SksNodepool(
            @JsonProperty("anti-affinity-groups") Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("taints") Optional<? extends java.util.Map<String, SksNodepoolTaint>> taints,
            @JsonProperty("security-groups") Optional<? extends java.util.List<SecurityGroup>> securityGroups,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("instance-type") Optional<? extends InstanceType> instanceType,
            @JsonProperty("private-networks") Optional<? extends java.util.List<PrivateNetwork>> privateNetworks,
            @JsonProperty("template") Optional<? extends Template> template,
            @JsonProperty("state") Optional<? extends SksNodepoolState> state,
            @JsonProperty("size") Optional<? extends Long> size,
            @JsonProperty("kubelet-image-gc") Optional<? extends KubeletImageGc> kubeletImageGc,
            @JsonProperty("instance-pool") Optional<? extends InstancePool> instancePool,
            @JsonProperty("instance-prefix") Optional<? extends String> instancePrefix,
            @JsonProperty("deploy-target") Optional<? extends DeployTarget> deployTarget,
            @JsonProperty("addons") Optional<? extends java.util.List<Addons>> addons,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("disk-size") Optional<? extends Long> diskSize,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(taints, "taints");
        Utils.checkNotNull(securityGroups, "securityGroups");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(instanceType, "instanceType");
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(kubeletImageGc, "kubeletImageGc");
        Utils.checkNotNull(instancePool, "instancePool");
        Utils.checkNotNull(instancePrefix, "instancePrefix");
        Utils.checkNotNull(deployTarget, "deployTarget");
        Utils.checkNotNull(addons, "addons");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(diskSize, "diskSize");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(createdAt, "createdAt");
        this.antiAffinityGroups = antiAffinityGroups;
        this.description = description;
        this.labels = labels;
        this.taints = taints;
        this.securityGroups = securityGroups;
        this.name = name;
        this.instanceType = instanceType;
        this.privateNetworks = privateNetworks;
        this.template = template;
        this.state = state;
        this.size = size;
        this.kubeletImageGc = kubeletImageGc;
        this.instancePool = instancePool;
        this.instancePrefix = instancePrefix;
        this.deployTarget = deployTarget;
        this.addons = addons;
        this.id = id;
        this.diskSize = diskSize;
        this.version = version;
        this.createdAt = createdAt;
    }

    /**
     * Nodepool Anti-affinity Groups
     */
    public Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups() {
        return antiAffinityGroups;
    }

    /**
     * Nodepool description
     */
    public Optional<? extends String> description() {
        return description;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    public Optional<? extends java.util.Map<String, SksNodepoolTaint>> taints() {
        return taints;
    }

    /**
     * Nodepool Security Groups
     */
    public Optional<? extends java.util.List<SecurityGroup>> securityGroups() {
        return securityGroups;
    }

    /**
     * Nodepool name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Compute instance type
     */
    public Optional<? extends InstanceType> instanceType() {
        return instanceType;
    }

    /**
     * Nodepool Private Networks
     */
    public Optional<? extends java.util.List<PrivateNetwork>> privateNetworks() {
        return privateNetworks;
    }

    /**
     * Instance template
     */
    public Optional<? extends Template> template() {
        return template;
    }

    /**
     * Nodepool state
     */
    public Optional<? extends SksNodepoolState> state() {
        return state;
    }

    /**
     * Number of instances
     */
    public Optional<? extends Long> size() {
        return size;
    }

    /**
     * Kubelet image GC options
     */
    public Optional<? extends KubeletImageGc> kubeletImageGc() {
        return kubeletImageGc;
    }

    /**
     * Instance Pool
     */
    public Optional<? extends InstancePool> instancePool() {
        return instancePool;
    }

    /**
     * The instances created by the Nodepool will be prefixed with this value (default: pool)
     */
    public Optional<? extends String> instancePrefix() {
        return instancePrefix;
    }

    /**
     * Deploy target
     */
    public Optional<? extends DeployTarget> deployTarget() {
        return deployTarget;
    }

    /**
     * Nodepool addons
     */
    public Optional<? extends java.util.List<Addons>> addons() {
        return addons;
    }

    /**
     * Nodepool ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Nodepool instances disk size in GB
     */
    public Optional<? extends Long> diskSize() {
        return diskSize;
    }

    /**
     * Nodepool version
     */
    public Optional<? extends String> version() {
        return version;
    }

    /**
     * Nodepool creation date
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Nodepool Anti-affinity Groups
     */
    public SksNodepool withAntiAffinityGroups(java.util.List<AntiAffinityGroupOutput> antiAffinityGroups) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        this.antiAffinityGroups = Optional.ofNullable(antiAffinityGroups);
        return this;
    }

    /**
     * Nodepool Anti-affinity Groups
     */
    public SksNodepool withAntiAffinityGroups(Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups) {
        Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
        this.antiAffinityGroups = antiAffinityGroups;
        return this;
    }

    /**
     * Nodepool description
     */
    public SksNodepool withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Nodepool description
     */
    public SksNodepool withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public SksNodepool withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public SksNodepool withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    public SksNodepool withTaints(java.util.Map<String, SksNodepoolTaint> taints) {
        Utils.checkNotNull(taints, "taints");
        this.taints = Optional.ofNullable(taints);
        return this;
    }

    public SksNodepool withTaints(Optional<? extends java.util.Map<String, SksNodepoolTaint>> taints) {
        Utils.checkNotNull(taints, "taints");
        this.taints = taints;
        return this;
    }

    /**
     * Nodepool Security Groups
     */
    public SksNodepool withSecurityGroups(java.util.List<SecurityGroup> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = Optional.ofNullable(securityGroups);
        return this;
    }

    /**
     * Nodepool Security Groups
     */
    public SksNodepool withSecurityGroups(Optional<? extends java.util.List<SecurityGroup>> securityGroups) {
        Utils.checkNotNull(securityGroups, "securityGroups");
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Nodepool name
     */
    public SksNodepool withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Nodepool name
     */
    public SksNodepool withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Compute instance type
     */
    public SksNodepool withInstanceType(InstanceType instanceType) {
        Utils.checkNotNull(instanceType, "instanceType");
        this.instanceType = Optional.ofNullable(instanceType);
        return this;
    }

    /**
     * Compute instance type
     */
    public SksNodepool withInstanceType(Optional<? extends InstanceType> instanceType) {
        Utils.checkNotNull(instanceType, "instanceType");
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Nodepool Private Networks
     */
    public SksNodepool withPrivateNetworks(java.util.List<PrivateNetwork> privateNetworks) {
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        this.privateNetworks = Optional.ofNullable(privateNetworks);
        return this;
    }

    /**
     * Nodepool Private Networks
     */
    public SksNodepool withPrivateNetworks(Optional<? extends java.util.List<PrivateNetwork>> privateNetworks) {
        Utils.checkNotNull(privateNetworks, "privateNetworks");
        this.privateNetworks = privateNetworks;
        return this;
    }

    /**
     * Instance template
     */
    public SksNodepool withTemplate(Template template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    /**
     * Instance template
     */
    public SksNodepool withTemplate(Optional<? extends Template> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    /**
     * Nodepool state
     */
    public SksNodepool withState(SksNodepoolState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * Nodepool state
     */
    public SksNodepool withState(Optional<? extends SksNodepoolState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Number of instances
     */
    public SksNodepool withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Number of instances
     */
    public SksNodepool withSize(Optional<? extends Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Kubelet image GC options
     */
    public SksNodepool withKubeletImageGc(KubeletImageGc kubeletImageGc) {
        Utils.checkNotNull(kubeletImageGc, "kubeletImageGc");
        this.kubeletImageGc = Optional.ofNullable(kubeletImageGc);
        return this;
    }

    /**
     * Kubelet image GC options
     */
    public SksNodepool withKubeletImageGc(Optional<? extends KubeletImageGc> kubeletImageGc) {
        Utils.checkNotNull(kubeletImageGc, "kubeletImageGc");
        this.kubeletImageGc = kubeletImageGc;
        return this;
    }

    /**
     * Instance Pool
     */
    public SksNodepool withInstancePool(InstancePool instancePool) {
        Utils.checkNotNull(instancePool, "instancePool");
        this.instancePool = Optional.ofNullable(instancePool);
        return this;
    }

    /**
     * Instance Pool
     */
    public SksNodepool withInstancePool(Optional<? extends InstancePool> instancePool) {
        Utils.checkNotNull(instancePool, "instancePool");
        this.instancePool = instancePool;
        return this;
    }

    /**
     * The instances created by the Nodepool will be prefixed with this value (default: pool)
     */
    public SksNodepool withInstancePrefix(String instancePrefix) {
        Utils.checkNotNull(instancePrefix, "instancePrefix");
        this.instancePrefix = Optional.ofNullable(instancePrefix);
        return this;
    }

    /**
     * The instances created by the Nodepool will be prefixed with this value (default: pool)
     */
    public SksNodepool withInstancePrefix(Optional<? extends String> instancePrefix) {
        Utils.checkNotNull(instancePrefix, "instancePrefix");
        this.instancePrefix = instancePrefix;
        return this;
    }

    /**
     * Deploy target
     */
    public SksNodepool withDeployTarget(DeployTarget deployTarget) {
        Utils.checkNotNull(deployTarget, "deployTarget");
        this.deployTarget = Optional.ofNullable(deployTarget);
        return this;
    }

    /**
     * Deploy target
     */
    public SksNodepool withDeployTarget(Optional<? extends DeployTarget> deployTarget) {
        Utils.checkNotNull(deployTarget, "deployTarget");
        this.deployTarget = deployTarget;
        return this;
    }

    /**
     * Nodepool addons
     */
    public SksNodepool withAddons(java.util.List<Addons> addons) {
        Utils.checkNotNull(addons, "addons");
        this.addons = Optional.ofNullable(addons);
        return this;
    }

    /**
     * Nodepool addons
     */
    public SksNodepool withAddons(Optional<? extends java.util.List<Addons>> addons) {
        Utils.checkNotNull(addons, "addons");
        this.addons = addons;
        return this;
    }

    /**
     * Nodepool ID
     */
    public SksNodepool withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Nodepool ID
     */
    public SksNodepool withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Nodepool instances disk size in GB
     */
    public SksNodepool withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = Optional.ofNullable(diskSize);
        return this;
    }

    /**
     * Nodepool instances disk size in GB
     */
    public SksNodepool withDiskSize(Optional<? extends Long> diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }

    /**
     * Nodepool version
     */
    public SksNodepool withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * Nodepool version
     */
    public SksNodepool withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Nodepool creation date
     */
    public SksNodepool withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Nodepool creation date
     */
    public SksNodepool withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SksNodepool other = (SksNodepool) o;
        return 
            java.util.Objects.deepEquals(this.antiAffinityGroups, other.antiAffinityGroups) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.taints, other.taints) &&
            java.util.Objects.deepEquals(this.securityGroups, other.securityGroups) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.instanceType, other.instanceType) &&
            java.util.Objects.deepEquals(this.privateNetworks, other.privateNetworks) &&
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.kubeletImageGc, other.kubeletImageGc) &&
            java.util.Objects.deepEquals(this.instancePool, other.instancePool) &&
            java.util.Objects.deepEquals(this.instancePrefix, other.instancePrefix) &&
            java.util.Objects.deepEquals(this.deployTarget, other.deployTarget) &&
            java.util.Objects.deepEquals(this.addons, other.addons) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            antiAffinityGroups,
            description,
            labels,
            taints,
            securityGroups,
            name,
            instanceType,
            privateNetworks,
            template,
            state,
            size,
            kubeletImageGc,
            instancePool,
            instancePrefix,
            deployTarget,
            addons,
            id,
            diskSize,
            version,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SksNodepool.class,
                "antiAffinityGroups", antiAffinityGroups,
                "description", description,
                "labels", labels,
                "taints", taints,
                "securityGroups", securityGroups,
                "name", name,
                "instanceType", instanceType,
                "privateNetworks", privateNetworks,
                "template", template,
                "state", state,
                "size", size,
                "kubeletImageGc", kubeletImageGc,
                "instancePool", instancePool,
                "instancePrefix", instancePrefix,
                "deployTarget", deployTarget,
                "addons", addons,
                "id", id,
                "diskSize", diskSize,
                "version", version,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends java.util.Map<String, SksNodepoolTaint>> taints = Optional.empty();
 
        private Optional<? extends java.util.List<SecurityGroup>> securityGroups = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends InstanceType> instanceType = Optional.empty();
 
        private Optional<? extends java.util.List<PrivateNetwork>> privateNetworks = Optional.empty();
 
        private Optional<? extends Template> template = Optional.empty();
 
        private Optional<? extends SksNodepoolState> state = Optional.empty();
 
        private Optional<? extends Long> size = Optional.empty();
 
        private Optional<? extends KubeletImageGc> kubeletImageGc = Optional.empty();
 
        private Optional<? extends InstancePool> instancePool = Optional.empty();
 
        private Optional<? extends String> instancePrefix = Optional.empty();
 
        private Optional<? extends DeployTarget> deployTarget = Optional.empty();
 
        private Optional<? extends java.util.List<Addons>> addons = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends Long> diskSize = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Nodepool Anti-affinity Groups
         */
        public Builder antiAffinityGroups(java.util.List<AntiAffinityGroupOutput> antiAffinityGroups) {
            Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
            this.antiAffinityGroups = Optional.ofNullable(antiAffinityGroups);
            return this;
        }

        /**
         * Nodepool Anti-affinity Groups
         */
        public Builder antiAffinityGroups(Optional<? extends java.util.List<AntiAffinityGroupOutput>> antiAffinityGroups) {
            Utils.checkNotNull(antiAffinityGroups, "antiAffinityGroups");
            this.antiAffinityGroups = antiAffinityGroups;
            return this;
        }

        /**
         * Nodepool description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Nodepool description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        public Builder taints(java.util.Map<String, SksNodepoolTaint> taints) {
            Utils.checkNotNull(taints, "taints");
            this.taints = Optional.ofNullable(taints);
            return this;
        }

        public Builder taints(Optional<? extends java.util.Map<String, SksNodepoolTaint>> taints) {
            Utils.checkNotNull(taints, "taints");
            this.taints = taints;
            return this;
        }

        /**
         * Nodepool Security Groups
         */
        public Builder securityGroups(java.util.List<SecurityGroup> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = Optional.ofNullable(securityGroups);
            return this;
        }

        /**
         * Nodepool Security Groups
         */
        public Builder securityGroups(Optional<? extends java.util.List<SecurityGroup>> securityGroups) {
            Utils.checkNotNull(securityGroups, "securityGroups");
            this.securityGroups = securityGroups;
            return this;
        }

        /**
         * Nodepool name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Nodepool name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Compute instance type
         */
        public Builder instanceType(InstanceType instanceType) {
            Utils.checkNotNull(instanceType, "instanceType");
            this.instanceType = Optional.ofNullable(instanceType);
            return this;
        }

        /**
         * Compute instance type
         */
        public Builder instanceType(Optional<? extends InstanceType> instanceType) {
            Utils.checkNotNull(instanceType, "instanceType");
            this.instanceType = instanceType;
            return this;
        }

        /**
         * Nodepool Private Networks
         */
        public Builder privateNetworks(java.util.List<PrivateNetwork> privateNetworks) {
            Utils.checkNotNull(privateNetworks, "privateNetworks");
            this.privateNetworks = Optional.ofNullable(privateNetworks);
            return this;
        }

        /**
         * Nodepool Private Networks
         */
        public Builder privateNetworks(Optional<? extends java.util.List<PrivateNetwork>> privateNetworks) {
            Utils.checkNotNull(privateNetworks, "privateNetworks");
            this.privateNetworks = privateNetworks;
            return this;
        }

        /**
         * Instance template
         */
        public Builder template(Template template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        /**
         * Instance template
         */
        public Builder template(Optional<? extends Template> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        /**
         * Nodepool state
         */
        public Builder state(SksNodepoolState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Nodepool state
         */
        public Builder state(Optional<? extends SksNodepoolState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Number of instances
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Number of instances
         */
        public Builder size(Optional<? extends Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * Kubelet image GC options
         */
        public Builder kubeletImageGc(KubeletImageGc kubeletImageGc) {
            Utils.checkNotNull(kubeletImageGc, "kubeletImageGc");
            this.kubeletImageGc = Optional.ofNullable(kubeletImageGc);
            return this;
        }

        /**
         * Kubelet image GC options
         */
        public Builder kubeletImageGc(Optional<? extends KubeletImageGc> kubeletImageGc) {
            Utils.checkNotNull(kubeletImageGc, "kubeletImageGc");
            this.kubeletImageGc = kubeletImageGc;
            return this;
        }

        /**
         * Instance Pool
         */
        public Builder instancePool(InstancePool instancePool) {
            Utils.checkNotNull(instancePool, "instancePool");
            this.instancePool = Optional.ofNullable(instancePool);
            return this;
        }

        /**
         * Instance Pool
         */
        public Builder instancePool(Optional<? extends InstancePool> instancePool) {
            Utils.checkNotNull(instancePool, "instancePool");
            this.instancePool = instancePool;
            return this;
        }

        /**
         * The instances created by the Nodepool will be prefixed with this value (default: pool)
         */
        public Builder instancePrefix(String instancePrefix) {
            Utils.checkNotNull(instancePrefix, "instancePrefix");
            this.instancePrefix = Optional.ofNullable(instancePrefix);
            return this;
        }

        /**
         * The instances created by the Nodepool will be prefixed with this value (default: pool)
         */
        public Builder instancePrefix(Optional<? extends String> instancePrefix) {
            Utils.checkNotNull(instancePrefix, "instancePrefix");
            this.instancePrefix = instancePrefix;
            return this;
        }

        /**
         * Deploy target
         */
        public Builder deployTarget(DeployTarget deployTarget) {
            Utils.checkNotNull(deployTarget, "deployTarget");
            this.deployTarget = Optional.ofNullable(deployTarget);
            return this;
        }

        /**
         * Deploy target
         */
        public Builder deployTarget(Optional<? extends DeployTarget> deployTarget) {
            Utils.checkNotNull(deployTarget, "deployTarget");
            this.deployTarget = deployTarget;
            return this;
        }

        /**
         * Nodepool addons
         */
        public Builder addons(java.util.List<Addons> addons) {
            Utils.checkNotNull(addons, "addons");
            this.addons = Optional.ofNullable(addons);
            return this;
        }

        /**
         * Nodepool addons
         */
        public Builder addons(Optional<? extends java.util.List<Addons>> addons) {
            Utils.checkNotNull(addons, "addons");
            this.addons = addons;
            return this;
        }

        /**
         * Nodepool ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Nodepool ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Nodepool instances disk size in GB
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = Optional.ofNullable(diskSize);
            return this;
        }

        /**
         * Nodepool instances disk size in GB
         */
        public Builder diskSize(Optional<? extends Long> diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }

        /**
         * Nodepool version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * Nodepool version
         */
        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Nodepool creation date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Nodepool creation date
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public SksNodepool build() {
            return new SksNodepool(
                antiAffinityGroups,
                description,
                labels,
                taints,
                securityGroups,
                name,
                instanceType,
                privateNetworks,
                template,
                state,
                size,
                kubeletImageGc,
                instancePool,
                instancePrefix,
                deployTarget,
                addons,
                id,
                diskSize,
                version,
                createdAt);
        }
    }
}

