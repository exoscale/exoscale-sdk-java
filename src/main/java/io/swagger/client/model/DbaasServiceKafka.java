/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.DbaasIntegration;
import io.swagger.client.model.DbaasNodeState;
import io.swagger.client.model.DbaasServiceBackup;
import io.swagger.client.model.DbaasServiceMaintenance;
import io.swagger.client.model.DbaasServiceNotification;
import io.swagger.client.model.DbaasservicekafkaAuthenticationmethods;
import io.swagger.client.model.DbaasservicekafkaComponents;
import io.swagger.client.model.DbaasservicekafkaConnectioninfo;
import io.swagger.client.model.DbaasservicekafkaUsers;
import io.swagger.client.model.EnumServiceState;
import io.swagger.client.model.JsonSchemaKafka;
import io.swagger.client.model.JsonSchemaKafkaConnect;
import io.swagger.client.model.JsonSchemaKafkaRest;
import io.swagger.client.model.JsonSchemaSchemaRegistry;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * DbaasServiceKafka
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class DbaasServiceKafka {
  @JsonProperty("updated-at")
  private OffsetDateTime updatedAt = null;

  @JsonProperty("authentication-methods")
  private DbaasservicekafkaAuthenticationmethods authenticationMethods = null;

  @JsonProperty("node-count")
  private Long nodeCount = null;

  @JsonProperty("connection-info")
  private DbaasservicekafkaConnectioninfo connectionInfo = null;

  @JsonProperty("node-cpu-count")
  private Long nodeCpuCount = null;

  @JsonProperty("kafka-rest-enabled")
  private Boolean kafkaRestEnabled = null;

  @JsonProperty("integrations")
  private List<DbaasIntegration> integrations = null;

  @JsonProperty("zone")
  private String zone = null;

  @JsonProperty("node-states")
  private List<DbaasNodeState> nodeStates = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("kafka-connect-enabled")
  private Boolean kafkaConnectEnabled = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("state")
  private EnumServiceState state = null;

  @JsonProperty("ip-filter")
  private List<String> ipFilter = null;

  @JsonProperty("schema-registry-settings")
  private JsonSchemaSchemaRegistry schemaRegistrySettings = null;

  @JsonProperty("backups")
  private List<DbaasServiceBackup> backups = null;

  @JsonProperty("kafka-rest-settings")
  private JsonSchemaKafkaRest kafkaRestSettings = null;

  @JsonProperty("termination-protection")
  private Boolean terminationProtection = null;

  @JsonProperty("notifications")
  private List<DbaasServiceNotification> notifications = null;

  @JsonProperty("kafka-connect-settings")
  private JsonSchemaKafkaConnect kafkaConnectSettings = null;

  @JsonProperty("components")
  private List<DbaasservicekafkaComponents> components = null;

  @JsonProperty("maintenance")
  private DbaasServiceMaintenance maintenance = null;

  @JsonProperty("kafka-settings")
  private JsonSchemaKafka kafkaSettings = null;

  @JsonProperty("disk-size")
  private Long diskSize = null;

  @JsonProperty("node-memory")
  private Long nodeMemory = null;

  @JsonProperty("uri")
  private String uri = null;

  @JsonProperty("uri-params")
  private Object uriParams = null;

  @JsonProperty("schema-registry-enabled")
  private Boolean schemaRegistryEnabled = null;

  @JsonProperty("version")
  private String version = null;

  @JsonProperty("created-at")
  private OffsetDateTime createdAt = null;

  @JsonProperty("plan")
  private String plan = null;

  @JsonProperty("users")
  private List<DbaasservicekafkaUsers> users = null;

  public DbaasServiceKafka updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Service last update timestamp (ISO 8601)
   * @return updatedAt
  **/
  @Schema(description = "Service last update timestamp (ISO 8601)")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public DbaasServiceKafka authenticationMethods(DbaasservicekafkaAuthenticationmethods authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
    return this;
  }

   /**
   * Get authenticationMethods
   * @return authenticationMethods
  **/
  @Schema(description = "")
  public DbaasservicekafkaAuthenticationmethods getAuthenticationMethods() {
    return authenticationMethods;
  }

  public void setAuthenticationMethods(DbaasservicekafkaAuthenticationmethods authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
  }

  public DbaasServiceKafka nodeCount(Long nodeCount) {
    this.nodeCount = nodeCount;
    return this;
  }

   /**
   * Number of service nodes in the active plan
   * minimum: 0
   * @return nodeCount
  **/
  @Schema(description = "Number of service nodes in the active plan")
  public Long getNodeCount() {
    return nodeCount;
  }

  public void setNodeCount(Long nodeCount) {
    this.nodeCount = nodeCount;
  }

  public DbaasServiceKafka connectionInfo(DbaasservicekafkaConnectioninfo connectionInfo) {
    this.connectionInfo = connectionInfo;
    return this;
  }

   /**
   * Get connectionInfo
   * @return connectionInfo
  **/
  @Schema(description = "")
  public DbaasservicekafkaConnectioninfo getConnectionInfo() {
    return connectionInfo;
  }

  public void setConnectionInfo(DbaasservicekafkaConnectioninfo connectionInfo) {
    this.connectionInfo = connectionInfo;
  }

  public DbaasServiceKafka nodeCpuCount(Long nodeCpuCount) {
    this.nodeCpuCount = nodeCpuCount;
    return this;
  }

   /**
   * Number of CPUs for each node
   * minimum: 0
   * @return nodeCpuCount
  **/
  @Schema(description = "Number of CPUs for each node")
  public Long getNodeCpuCount() {
    return nodeCpuCount;
  }

  public void setNodeCpuCount(Long nodeCpuCount) {
    this.nodeCpuCount = nodeCpuCount;
  }

  public DbaasServiceKafka kafkaRestEnabled(Boolean kafkaRestEnabled) {
    this.kafkaRestEnabled = kafkaRestEnabled;
    return this;
  }

   /**
   * Whether Kafka REST is enabled
   * @return kafkaRestEnabled
  **/
  @Schema(description = "Whether Kafka REST is enabled")
  public Boolean isKafkaRestEnabled() {
    return kafkaRestEnabled;
  }

  public void setKafkaRestEnabled(Boolean kafkaRestEnabled) {
    this.kafkaRestEnabled = kafkaRestEnabled;
  }

  public DbaasServiceKafka integrations(List<DbaasIntegration> integrations) {
    this.integrations = integrations;
    return this;
  }

  public DbaasServiceKafka addIntegrationsItem(DbaasIntegration integrationsItem) {
    if (this.integrations == null) {
      this.integrations = new ArrayList<>();
    }
    this.integrations.add(integrationsItem);
    return this;
  }

   /**
   * Service integrations
   * @return integrations
  **/
  @Schema(description = "Service integrations")
  public List<DbaasIntegration> getIntegrations() {
    return integrations;
  }

  public void setIntegrations(List<DbaasIntegration> integrations) {
    this.integrations = integrations;
  }

  public DbaasServiceKafka zone(String zone) {
    this.zone = zone;
    return this;
  }

   /**
   * The zone where the service is running
   * @return zone
  **/
  @Schema(description = "The zone where the service is running")
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }

  public DbaasServiceKafka nodeStates(List<DbaasNodeState> nodeStates) {
    this.nodeStates = nodeStates;
    return this;
  }

  public DbaasServiceKafka addNodeStatesItem(DbaasNodeState nodeStatesItem) {
    if (this.nodeStates == null) {
      this.nodeStates = new ArrayList<>();
    }
    this.nodeStates.add(nodeStatesItem);
    return this;
  }

   /**
   * State of individual service nodes
   * @return nodeStates
  **/
  @Schema(description = "State of individual service nodes")
  public List<DbaasNodeState> getNodeStates() {
    return nodeStates;
  }

  public void setNodeStates(List<DbaasNodeState> nodeStates) {
    this.nodeStates = nodeStates;
  }

  public DbaasServiceKafka name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DbaasServiceKafka kafkaConnectEnabled(Boolean kafkaConnectEnabled) {
    this.kafkaConnectEnabled = kafkaConnectEnabled;
    return this;
  }

   /**
   * Whether Kafka Connect is enabled
   * @return kafkaConnectEnabled
  **/
  @Schema(description = "Whether Kafka Connect is enabled")
  public Boolean isKafkaConnectEnabled() {
    return kafkaConnectEnabled;
  }

  public void setKafkaConnectEnabled(Boolean kafkaConnectEnabled) {
    this.kafkaConnectEnabled = kafkaConnectEnabled;
  }

  public DbaasServiceKafka type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public DbaasServiceKafka state(EnumServiceState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public EnumServiceState getState() {
    return state;
  }

  public void setState(EnumServiceState state) {
    this.state = state;
  }

  public DbaasServiceKafka ipFilter(List<String> ipFilter) {
    this.ipFilter = ipFilter;
    return this;
  }

  public DbaasServiceKafka addIpFilterItem(String ipFilterItem) {
    if (this.ipFilter == null) {
      this.ipFilter = new ArrayList<>();
    }
    this.ipFilter.add(ipFilterItem);
    return this;
  }

   /**
   * Allow incoming connections from CIDR address block, e.g. &#x27;10.20.0.0/16&#x27;
   * @return ipFilter
  **/
  @Schema(description = "Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'")
  public List<String> getIpFilter() {
    return ipFilter;
  }

  public void setIpFilter(List<String> ipFilter) {
    this.ipFilter = ipFilter;
  }

  public DbaasServiceKafka schemaRegistrySettings(JsonSchemaSchemaRegistry schemaRegistrySettings) {
    this.schemaRegistrySettings = schemaRegistrySettings;
    return this;
  }

   /**
   * Get schemaRegistrySettings
   * @return schemaRegistrySettings
  **/
  @Schema(description = "")
  public JsonSchemaSchemaRegistry getSchemaRegistrySettings() {
    return schemaRegistrySettings;
  }

  public void setSchemaRegistrySettings(JsonSchemaSchemaRegistry schemaRegistrySettings) {
    this.schemaRegistrySettings = schemaRegistrySettings;
  }

  public DbaasServiceKafka backups(List<DbaasServiceBackup> backups) {
    this.backups = backups;
    return this;
  }

  public DbaasServiceKafka addBackupsItem(DbaasServiceBackup backupsItem) {
    if (this.backups == null) {
      this.backups = new ArrayList<>();
    }
    this.backups.add(backupsItem);
    return this;
  }

   /**
   * List of backups for the service
   * @return backups
  **/
  @Schema(description = "List of backups for the service")
  public List<DbaasServiceBackup> getBackups() {
    return backups;
  }

  public void setBackups(List<DbaasServiceBackup> backups) {
    this.backups = backups;
  }

  public DbaasServiceKafka kafkaRestSettings(JsonSchemaKafkaRest kafkaRestSettings) {
    this.kafkaRestSettings = kafkaRestSettings;
    return this;
  }

   /**
   * Get kafkaRestSettings
   * @return kafkaRestSettings
  **/
  @Schema(description = "")
  public JsonSchemaKafkaRest getKafkaRestSettings() {
    return kafkaRestSettings;
  }

  public void setKafkaRestSettings(JsonSchemaKafkaRest kafkaRestSettings) {
    this.kafkaRestSettings = kafkaRestSettings;
  }

  public DbaasServiceKafka terminationProtection(Boolean terminationProtection) {
    this.terminationProtection = terminationProtection;
    return this;
  }

   /**
   * Service is protected against termination and powering off
   * @return terminationProtection
  **/
  @Schema(description = "Service is protected against termination and powering off")
  public Boolean isTerminationProtection() {
    return terminationProtection;
  }

  public void setTerminationProtection(Boolean terminationProtection) {
    this.terminationProtection = terminationProtection;
  }

  public DbaasServiceKafka notifications(List<DbaasServiceNotification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public DbaasServiceKafka addNotificationsItem(DbaasServiceNotification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * Service notifications
   * @return notifications
  **/
  @Schema(description = "Service notifications")
  public List<DbaasServiceNotification> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<DbaasServiceNotification> notifications) {
    this.notifications = notifications;
  }

  public DbaasServiceKafka kafkaConnectSettings(JsonSchemaKafkaConnect kafkaConnectSettings) {
    this.kafkaConnectSettings = kafkaConnectSettings;
    return this;
  }

   /**
   * Get kafkaConnectSettings
   * @return kafkaConnectSettings
  **/
  @Schema(description = "")
  public JsonSchemaKafkaConnect getKafkaConnectSettings() {
    return kafkaConnectSettings;
  }

  public void setKafkaConnectSettings(JsonSchemaKafkaConnect kafkaConnectSettings) {
    this.kafkaConnectSettings = kafkaConnectSettings;
  }

  public DbaasServiceKafka components(List<DbaasservicekafkaComponents> components) {
    this.components = components;
    return this;
  }

  public DbaasServiceKafka addComponentsItem(DbaasservicekafkaComponents componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

   /**
   * Service component information objects
   * @return components
  **/
  @Schema(description = "Service component information objects")
  public List<DbaasservicekafkaComponents> getComponents() {
    return components;
  }

  public void setComponents(List<DbaasservicekafkaComponents> components) {
    this.components = components;
  }

  public DbaasServiceKafka maintenance(DbaasServiceMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

   /**
   * Get maintenance
   * @return maintenance
  **/
  @Schema(description = "")
  public DbaasServiceMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(DbaasServiceMaintenance maintenance) {
    this.maintenance = maintenance;
  }

  public DbaasServiceKafka kafkaSettings(JsonSchemaKafka kafkaSettings) {
    this.kafkaSettings = kafkaSettings;
    return this;
  }

   /**
   * Get kafkaSettings
   * @return kafkaSettings
  **/
  @Schema(description = "")
  public JsonSchemaKafka getKafkaSettings() {
    return kafkaSettings;
  }

  public void setKafkaSettings(JsonSchemaKafka kafkaSettings) {
    this.kafkaSettings = kafkaSettings;
  }

  public DbaasServiceKafka diskSize(Long diskSize) {
    this.diskSize = diskSize;
    return this;
  }

   /**
   * TODO UNIT disk space for data storage
   * minimum: 0
   * @return diskSize
  **/
  @Schema(description = "TODO UNIT disk space for data storage")
  public Long getDiskSize() {
    return diskSize;
  }

  public void setDiskSize(Long diskSize) {
    this.diskSize = diskSize;
  }

  public DbaasServiceKafka nodeMemory(Long nodeMemory) {
    this.nodeMemory = nodeMemory;
    return this;
  }

   /**
   * TODO UNIT of memory for each node
   * minimum: 0
   * @return nodeMemory
  **/
  @Schema(description = "TODO UNIT of memory for each node")
  public Long getNodeMemory() {
    return nodeMemory;
  }

  public void setNodeMemory(Long nodeMemory) {
    this.nodeMemory = nodeMemory;
  }

  public DbaasServiceKafka uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * URI for connecting to the service (may be absent)
   * @return uri
  **/
  @Schema(description = "URI for connecting to the service (may be absent)")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public DbaasServiceKafka uriParams(Object uriParams) {
    this.uriParams = uriParams;
    return this;
  }

   /**
   * service_uri parameterized into key-value pairs
   * @return uriParams
  **/
  @Schema(description = "service_uri parameterized into key-value pairs")
  public Object getUriParams() {
    return uriParams;
  }

  public void setUriParams(Object uriParams) {
    this.uriParams = uriParams;
  }

  public DbaasServiceKafka schemaRegistryEnabled(Boolean schemaRegistryEnabled) {
    this.schemaRegistryEnabled = schemaRegistryEnabled;
    return this;
  }

   /**
   * Whether Schema-Registry is enabled
   * @return schemaRegistryEnabled
  **/
  @Schema(description = "Whether Schema-Registry is enabled")
  public Boolean isSchemaRegistryEnabled() {
    return schemaRegistryEnabled;
  }

  public void setSchemaRegistryEnabled(Boolean schemaRegistryEnabled) {
    this.schemaRegistryEnabled = schemaRegistryEnabled;
  }

  public DbaasServiceKafka version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Kafka version
   * @return version
  **/
  @Schema(description = "Kafka version")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public DbaasServiceKafka createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Service creation timestamp (ISO 8601)
   * @return createdAt
  **/
  @Schema(description = "Service creation timestamp (ISO 8601)")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public DbaasServiceKafka plan(String plan) {
    this.plan = plan;
    return this;
  }

   /**
   * Subscription plan
   * @return plan
  **/
  @Schema(required = true, description = "Subscription plan")
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }

  public DbaasServiceKafka users(List<DbaasservicekafkaUsers> users) {
    this.users = users;
    return this;
  }

  public DbaasServiceKafka addUsersItem(DbaasservicekafkaUsers usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * List of service users
   * @return users
  **/
  @Schema(description = "List of service users")
  public List<DbaasservicekafkaUsers> getUsers() {
    return users;
  }

  public void setUsers(List<DbaasservicekafkaUsers> users) {
    this.users = users;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasServiceKafka dbaasServiceKafka = (DbaasServiceKafka) o;
    return Objects.equals(this.updatedAt, dbaasServiceKafka.updatedAt) &&
        Objects.equals(this.authenticationMethods, dbaasServiceKafka.authenticationMethods) &&
        Objects.equals(this.nodeCount, dbaasServiceKafka.nodeCount) &&
        Objects.equals(this.connectionInfo, dbaasServiceKafka.connectionInfo) &&
        Objects.equals(this.nodeCpuCount, dbaasServiceKafka.nodeCpuCount) &&
        Objects.equals(this.kafkaRestEnabled, dbaasServiceKafka.kafkaRestEnabled) &&
        Objects.equals(this.integrations, dbaasServiceKafka.integrations) &&
        Objects.equals(this.zone, dbaasServiceKafka.zone) &&
        Objects.equals(this.nodeStates, dbaasServiceKafka.nodeStates) &&
        Objects.equals(this.name, dbaasServiceKafka.name) &&
        Objects.equals(this.kafkaConnectEnabled, dbaasServiceKafka.kafkaConnectEnabled) &&
        Objects.equals(this.type, dbaasServiceKafka.type) &&
        Objects.equals(this.state, dbaasServiceKafka.state) &&
        Objects.equals(this.ipFilter, dbaasServiceKafka.ipFilter) &&
        Objects.equals(this.schemaRegistrySettings, dbaasServiceKafka.schemaRegistrySettings) &&
        Objects.equals(this.backups, dbaasServiceKafka.backups) &&
        Objects.equals(this.kafkaRestSettings, dbaasServiceKafka.kafkaRestSettings) &&
        Objects.equals(this.terminationProtection, dbaasServiceKafka.terminationProtection) &&
        Objects.equals(this.notifications, dbaasServiceKafka.notifications) &&
        Objects.equals(this.kafkaConnectSettings, dbaasServiceKafka.kafkaConnectSettings) &&
        Objects.equals(this.components, dbaasServiceKafka.components) &&
        Objects.equals(this.maintenance, dbaasServiceKafka.maintenance) &&
        Objects.equals(this.kafkaSettings, dbaasServiceKafka.kafkaSettings) &&
        Objects.equals(this.diskSize, dbaasServiceKafka.diskSize) &&
        Objects.equals(this.nodeMemory, dbaasServiceKafka.nodeMemory) &&
        Objects.equals(this.uri, dbaasServiceKafka.uri) &&
        Objects.equals(this.uriParams, dbaasServiceKafka.uriParams) &&
        Objects.equals(this.schemaRegistryEnabled, dbaasServiceKafka.schemaRegistryEnabled) &&
        Objects.equals(this.version, dbaasServiceKafka.version) &&
        Objects.equals(this.createdAt, dbaasServiceKafka.createdAt) &&
        Objects.equals(this.plan, dbaasServiceKafka.plan) &&
        Objects.equals(this.users, dbaasServiceKafka.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updatedAt, authenticationMethods, nodeCount, connectionInfo, nodeCpuCount, kafkaRestEnabled, integrations, zone, nodeStates, name, kafkaConnectEnabled, type, state, ipFilter, schemaRegistrySettings, backups, kafkaRestSettings, terminationProtection, notifications, kafkaConnectSettings, components, maintenance, kafkaSettings, diskSize, nodeMemory, uri, uriParams, schemaRegistryEnabled, version, createdAt, plan, users);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasServiceKafka {\n");
    
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    authenticationMethods: ").append(toIndentedString(authenticationMethods)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    connectionInfo: ").append(toIndentedString(connectionInfo)).append("\n");
    sb.append("    nodeCpuCount: ").append(toIndentedString(nodeCpuCount)).append("\n");
    sb.append("    kafkaRestEnabled: ").append(toIndentedString(kafkaRestEnabled)).append("\n");
    sb.append("    integrations: ").append(toIndentedString(integrations)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("    nodeStates: ").append(toIndentedString(nodeStates)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    kafkaConnectEnabled: ").append(toIndentedString(kafkaConnectEnabled)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    ipFilter: ").append(toIndentedString(ipFilter)).append("\n");
    sb.append("    schemaRegistrySettings: ").append(toIndentedString(schemaRegistrySettings)).append("\n");
    sb.append("    backups: ").append(toIndentedString(backups)).append("\n");
    sb.append("    kafkaRestSettings: ").append(toIndentedString(kafkaRestSettings)).append("\n");
    sb.append("    terminationProtection: ").append(toIndentedString(terminationProtection)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    kafkaConnectSettings: ").append(toIndentedString(kafkaConnectSettings)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("    kafkaSettings: ").append(toIndentedString(kafkaSettings)).append("\n");
    sb.append("    diskSize: ").append(toIndentedString(diskSize)).append("\n");
    sb.append("    nodeMemory: ").append(toIndentedString(nodeMemory)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    uriParams: ").append(toIndentedString(uriParams)).append("\n");
    sb.append("    schemaRegistryEnabled: ").append(toIndentedString(schemaRegistryEnabled)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
