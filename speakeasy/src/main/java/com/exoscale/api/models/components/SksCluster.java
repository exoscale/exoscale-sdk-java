/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * SksCluster - SKS Cluster
 */

public class SksCluster {

    /**
     * Cluster description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    /**
     * Cluster CNI
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cni")
    private Optional<? extends Cni> cni;

    /**
     * Enable auto upgrade of the control plane to the latest patch version available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto-upgrade")
    private Optional<? extends Boolean> autoUpgrade;

    /**
     * Cluster name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Cluster state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends SksClusterState> state;

    /**
     * Cluster Nodepools
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodepools")
    private Optional<? extends java.util.List<SksNodepool>> nodepools;

    /**
     * Cluster level
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("level")
    private Optional<? extends SksClusterLevel> level;

    /**
     * Cluster addons
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addons")
    private Optional<? extends java.util.List<SksClusterAddons>> addons;

    /**
     * Cluster ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Control plane Kubernetes version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    /**
     * Cluster creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * Cluster endpoint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpoint")
    private Optional<? extends String> endpoint;

    public SksCluster(
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels,
            @JsonProperty("cni") Optional<? extends Cni> cni,
            @JsonProperty("auto-upgrade") Optional<? extends Boolean> autoUpgrade,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("state") Optional<? extends SksClusterState> state,
            @JsonProperty("nodepools") Optional<? extends java.util.List<SksNodepool>> nodepools,
            @JsonProperty("level") Optional<? extends SksClusterLevel> level,
            @JsonProperty("addons") Optional<? extends java.util.List<SksClusterAddons>> addons,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("endpoint") Optional<? extends String> endpoint) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(labels, "labels");
        Utils.checkNotNull(cni, "cni");
        Utils.checkNotNull(autoUpgrade, "autoUpgrade");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(nodepools, "nodepools");
        Utils.checkNotNull(level, "level");
        Utils.checkNotNull(addons, "addons");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(endpoint, "endpoint");
        this.description = description;
        this.labels = labels;
        this.cni = cni;
        this.autoUpgrade = autoUpgrade;
        this.name = name;
        this.state = state;
        this.nodepools = nodepools;
        this.level = level;
        this.addons = addons;
        this.id = id;
        this.version = version;
        this.createdAt = createdAt;
        this.endpoint = endpoint;
    }

    /**
     * Cluster description
     */
    public Optional<? extends String> description() {
        return description;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    /**
     * Cluster CNI
     */
    public Optional<? extends Cni> cni() {
        return cni;
    }

    /**
     * Enable auto upgrade of the control plane to the latest patch version available
     */
    public Optional<? extends Boolean> autoUpgrade() {
        return autoUpgrade;
    }

    /**
     * Cluster name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Cluster state
     */
    public Optional<? extends SksClusterState> state() {
        return state;
    }

    /**
     * Cluster Nodepools
     */
    public Optional<? extends java.util.List<SksNodepool>> nodepools() {
        return nodepools;
    }

    /**
     * Cluster level
     */
    public Optional<? extends SksClusterLevel> level() {
        return level;
    }

    /**
     * Cluster addons
     */
    public Optional<? extends java.util.List<SksClusterAddons>> addons() {
        return addons;
    }

    /**
     * Cluster ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Control plane Kubernetes version
     */
    public Optional<? extends String> version() {
        return version;
    }

    /**
     * Cluster creation date
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Cluster endpoint
     */
    public Optional<? extends String> endpoint() {
        return endpoint;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Cluster description
     */
    public SksCluster withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Cluster description
     */
    public SksCluster withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public SksCluster withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public SksCluster withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }

    /**
     * Cluster CNI
     */
    public SksCluster withCni(Cni cni) {
        Utils.checkNotNull(cni, "cni");
        this.cni = Optional.ofNullable(cni);
        return this;
    }

    /**
     * Cluster CNI
     */
    public SksCluster withCni(Optional<? extends Cni> cni) {
        Utils.checkNotNull(cni, "cni");
        this.cni = cni;
        return this;
    }

    /**
     * Enable auto upgrade of the control plane to the latest patch version available
     */
    public SksCluster withAutoUpgrade(boolean autoUpgrade) {
        Utils.checkNotNull(autoUpgrade, "autoUpgrade");
        this.autoUpgrade = Optional.ofNullable(autoUpgrade);
        return this;
    }

    /**
     * Enable auto upgrade of the control plane to the latest patch version available
     */
    public SksCluster withAutoUpgrade(Optional<? extends Boolean> autoUpgrade) {
        Utils.checkNotNull(autoUpgrade, "autoUpgrade");
        this.autoUpgrade = autoUpgrade;
        return this;
    }

    /**
     * Cluster name
     */
    public SksCluster withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Cluster name
     */
    public SksCluster withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Cluster state
     */
    public SksCluster withState(SksClusterState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * Cluster state
     */
    public SksCluster withState(Optional<? extends SksClusterState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Cluster Nodepools
     */
    public SksCluster withNodepools(java.util.List<SksNodepool> nodepools) {
        Utils.checkNotNull(nodepools, "nodepools");
        this.nodepools = Optional.ofNullable(nodepools);
        return this;
    }

    /**
     * Cluster Nodepools
     */
    public SksCluster withNodepools(Optional<? extends java.util.List<SksNodepool>> nodepools) {
        Utils.checkNotNull(nodepools, "nodepools");
        this.nodepools = nodepools;
        return this;
    }

    /**
     * Cluster level
     */
    public SksCluster withLevel(SksClusterLevel level) {
        Utils.checkNotNull(level, "level");
        this.level = Optional.ofNullable(level);
        return this;
    }

    /**
     * Cluster level
     */
    public SksCluster withLevel(Optional<? extends SksClusterLevel> level) {
        Utils.checkNotNull(level, "level");
        this.level = level;
        return this;
    }

    /**
     * Cluster addons
     */
    public SksCluster withAddons(java.util.List<SksClusterAddons> addons) {
        Utils.checkNotNull(addons, "addons");
        this.addons = Optional.ofNullable(addons);
        return this;
    }

    /**
     * Cluster addons
     */
    public SksCluster withAddons(Optional<? extends java.util.List<SksClusterAddons>> addons) {
        Utils.checkNotNull(addons, "addons");
        this.addons = addons;
        return this;
    }

    /**
     * Cluster ID
     */
    public SksCluster withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Cluster ID
     */
    public SksCluster withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Control plane Kubernetes version
     */
    public SksCluster withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * Control plane Kubernetes version
     */
    public SksCluster withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Cluster creation date
     */
    public SksCluster withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Cluster creation date
     */
    public SksCluster withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Cluster endpoint
     */
    public SksCluster withEndpoint(String endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = Optional.ofNullable(endpoint);
        return this;
    }

    /**
     * Cluster endpoint
     */
    public SksCluster withEndpoint(Optional<? extends String> endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = endpoint;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SksCluster other = (SksCluster) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.labels, other.labels) &&
            java.util.Objects.deepEquals(this.cni, other.cni) &&
            java.util.Objects.deepEquals(this.autoUpgrade, other.autoUpgrade) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.nodepools, other.nodepools) &&
            java.util.Objects.deepEquals(this.level, other.level) &&
            java.util.Objects.deepEquals(this.addons, other.addons) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.endpoint, other.endpoint);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            labels,
            cni,
            autoUpgrade,
            name,
            state,
            nodepools,
            level,
            addons,
            id,
            version,
            createdAt,
            endpoint);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SksCluster.class,
                "description", description,
                "labels", labels,
                "cni", cni,
                "autoUpgrade", autoUpgrade,
                "name", name,
                "state", state,
                "nodepools", nodepools,
                "level", level,
                "addons", addons,
                "id", id,
                "version", version,
                "createdAt", createdAt,
                "endpoint", endpoint);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();
 
        private Optional<? extends Cni> cni = Optional.empty();
 
        private Optional<? extends Boolean> autoUpgrade = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends SksClusterState> state = Optional.empty();
 
        private Optional<? extends java.util.List<SksNodepool>> nodepools = Optional.empty();
 
        private Optional<? extends SksClusterLevel> level = Optional.empty();
 
        private Optional<? extends java.util.List<SksClusterAddons>> addons = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends String> endpoint = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Cluster description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Cluster description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }

        /**
         * Cluster CNI
         */
        public Builder cni(Cni cni) {
            Utils.checkNotNull(cni, "cni");
            this.cni = Optional.ofNullable(cni);
            return this;
        }

        /**
         * Cluster CNI
         */
        public Builder cni(Optional<? extends Cni> cni) {
            Utils.checkNotNull(cni, "cni");
            this.cni = cni;
            return this;
        }

        /**
         * Enable auto upgrade of the control plane to the latest patch version available
         */
        public Builder autoUpgrade(boolean autoUpgrade) {
            Utils.checkNotNull(autoUpgrade, "autoUpgrade");
            this.autoUpgrade = Optional.ofNullable(autoUpgrade);
            return this;
        }

        /**
         * Enable auto upgrade of the control plane to the latest patch version available
         */
        public Builder autoUpgrade(Optional<? extends Boolean> autoUpgrade) {
            Utils.checkNotNull(autoUpgrade, "autoUpgrade");
            this.autoUpgrade = autoUpgrade;
            return this;
        }

        /**
         * Cluster name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Cluster name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Cluster state
         */
        public Builder state(SksClusterState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Cluster state
         */
        public Builder state(Optional<? extends SksClusterState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Cluster Nodepools
         */
        public Builder nodepools(java.util.List<SksNodepool> nodepools) {
            Utils.checkNotNull(nodepools, "nodepools");
            this.nodepools = Optional.ofNullable(nodepools);
            return this;
        }

        /**
         * Cluster Nodepools
         */
        public Builder nodepools(Optional<? extends java.util.List<SksNodepool>> nodepools) {
            Utils.checkNotNull(nodepools, "nodepools");
            this.nodepools = nodepools;
            return this;
        }

        /**
         * Cluster level
         */
        public Builder level(SksClusterLevel level) {
            Utils.checkNotNull(level, "level");
            this.level = Optional.ofNullable(level);
            return this;
        }

        /**
         * Cluster level
         */
        public Builder level(Optional<? extends SksClusterLevel> level) {
            Utils.checkNotNull(level, "level");
            this.level = level;
            return this;
        }

        /**
         * Cluster addons
         */
        public Builder addons(java.util.List<SksClusterAddons> addons) {
            Utils.checkNotNull(addons, "addons");
            this.addons = Optional.ofNullable(addons);
            return this;
        }

        /**
         * Cluster addons
         */
        public Builder addons(Optional<? extends java.util.List<SksClusterAddons>> addons) {
            Utils.checkNotNull(addons, "addons");
            this.addons = addons;
            return this;
        }

        /**
         * Cluster ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Cluster ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Control plane Kubernetes version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * Control plane Kubernetes version
         */
        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Cluster creation date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Cluster creation date
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Cluster endpoint
         */
        public Builder endpoint(String endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = Optional.ofNullable(endpoint);
            return this;
        }

        /**
         * Cluster endpoint
         */
        public Builder endpoint(Optional<? extends String> endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = endpoint;
            return this;
        }
        
        public SksCluster build() {
            return new SksCluster(
                description,
                labels,
                cni,
                autoUpgrade,
                name,
                state,
                nodepools,
                level,
                addons,
                id,
                version,
                createdAt,
                endpoint);
        }
    }
}

