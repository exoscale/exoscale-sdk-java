/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DbaasServiceLogs {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    private Optional<? extends String> offset;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first-log-offset")
    private Optional<? extends String> firstLogOffset;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logs")
    private Optional<? extends java.util.List<Logs>> logs;

    public DbaasServiceLogs(
            @JsonProperty("offset") Optional<? extends String> offset,
            @JsonProperty("first-log-offset") Optional<? extends String> firstLogOffset,
            @JsonProperty("logs") Optional<? extends java.util.List<Logs>> logs) {
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(firstLogOffset, "firstLogOffset");
        Utils.checkNotNull(logs, "logs");
        this.offset = offset;
        this.firstLogOffset = firstLogOffset;
        this.logs = logs;
    }

    public Optional<? extends String> offset() {
        return offset;
    }

    public Optional<? extends String> firstLogOffset() {
        return firstLogOffset;
    }

    public Optional<? extends java.util.List<Logs>> logs() {
        return logs;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DbaasServiceLogs withOffset(String offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }

    public DbaasServiceLogs withOffset(Optional<? extends String> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    public DbaasServiceLogs withFirstLogOffset(String firstLogOffset) {
        Utils.checkNotNull(firstLogOffset, "firstLogOffset");
        this.firstLogOffset = Optional.ofNullable(firstLogOffset);
        return this;
    }

    public DbaasServiceLogs withFirstLogOffset(Optional<? extends String> firstLogOffset) {
        Utils.checkNotNull(firstLogOffset, "firstLogOffset");
        this.firstLogOffset = firstLogOffset;
        return this;
    }

    public DbaasServiceLogs withLogs(java.util.List<Logs> logs) {
        Utils.checkNotNull(logs, "logs");
        this.logs = Optional.ofNullable(logs);
        return this;
    }

    public DbaasServiceLogs withLogs(Optional<? extends java.util.List<Logs>> logs) {
        Utils.checkNotNull(logs, "logs");
        this.logs = logs;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceLogs other = (DbaasServiceLogs) o;
        return 
            java.util.Objects.deepEquals(this.offset, other.offset) &&
            java.util.Objects.deepEquals(this.firstLogOffset, other.firstLogOffset) &&
            java.util.Objects.deepEquals(this.logs, other.logs);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            offset,
            firstLogOffset,
            logs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceLogs.class,
                "offset", offset,
                "firstLogOffset", firstLogOffset,
                "logs", logs);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> offset = Optional.empty();
 
        private Optional<? extends String> firstLogOffset = Optional.empty();
 
        private Optional<? extends java.util.List<Logs>> logs = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder offset(String offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public Builder offset(Optional<? extends String> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }

        public Builder firstLogOffset(String firstLogOffset) {
            Utils.checkNotNull(firstLogOffset, "firstLogOffset");
            this.firstLogOffset = Optional.ofNullable(firstLogOffset);
            return this;
        }

        public Builder firstLogOffset(Optional<? extends String> firstLogOffset) {
            Utils.checkNotNull(firstLogOffset, "firstLogOffset");
            this.firstLogOffset = firstLogOffset;
            return this;
        }

        public Builder logs(java.util.List<Logs> logs) {
            Utils.checkNotNull(logs, "logs");
            this.logs = Optional.ofNullable(logs);
            return this;
        }

        public Builder logs(Optional<? extends java.util.List<Logs>> logs) {
            Utils.checkNotNull(logs, "logs");
            this.logs = logs;
            return this;
        }
        
        public DbaasServiceLogs build() {
            return new DbaasServiceLogs(
                offset,
                firstLogOffset,
                logs);
        }
    }
}

