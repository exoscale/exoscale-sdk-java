/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPAddressRateLimitingSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class IPAddressRateLimitingSettings {
  /**
   * The type of rate limiting
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    IP("ip");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ALLOWED_TRIES = "allowed_tries";
  @SerializedName(SERIALIZED_NAME_ALLOWED_TRIES)
  private Integer allowedTries;

  public static final String SERIALIZED_NAME_TIME_WINDOW_SECONDS = "time_window_seconds";
  @SerializedName(SERIALIZED_NAME_TIME_WINDOW_SECONDS)
  private Integer timeWindowSeconds;

  public static final String SERIALIZED_NAME_BLOCK_EXPIRY_SECONDS = "block_expiry_seconds";
  @SerializedName(SERIALIZED_NAME_BLOCK_EXPIRY_SECONDS)
  private Integer blockExpirySeconds;

  public static final String SERIALIZED_NAME_MAX_BLOCKED_CLIENTS = "max_blocked_clients";
  @SerializedName(SERIALIZED_NAME_MAX_BLOCKED_CLIENTS)
  private Integer maxBlockedClients;

  public static final String SERIALIZED_NAME_MAX_TRACKED_CLIENTS = "max_tracked_clients";
  @SerializedName(SERIALIZED_NAME_MAX_TRACKED_CLIENTS)
  private Integer maxTrackedClients;

  public IPAddressRateLimitingSettings() {
  }

  public IPAddressRateLimitingSettings type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of rate limiting
   * @return type
  **/
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public IPAddressRateLimitingSettings allowedTries(Integer allowedTries) {
    this.allowedTries = allowedTries;
    return this;
  }

   /**
   * The number of login attempts allowed before login is blocked
   * minimum: 1
   * maximum: 2147483647
   * @return allowedTries
  **/
  @javax.annotation.Nullable
  public Integer getAllowedTries() {
    return allowedTries;
  }

  public void setAllowedTries(Integer allowedTries) {
    this.allowedTries = allowedTries;
  }


  public IPAddressRateLimitingSettings timeWindowSeconds(Integer timeWindowSeconds) {
    this.timeWindowSeconds = timeWindowSeconds;
    return this;
  }

   /**
   * The window of time in which the value for &#x60;allowed_tries&#x60; is enforced
   * minimum: 1
   * maximum: 36000
   * @return timeWindowSeconds
  **/
  @javax.annotation.Nullable
  public Integer getTimeWindowSeconds() {
    return timeWindowSeconds;
  }

  public void setTimeWindowSeconds(Integer timeWindowSeconds) {
    this.timeWindowSeconds = timeWindowSeconds;
  }


  public IPAddressRateLimitingSettings blockExpirySeconds(Integer blockExpirySeconds) {
    this.blockExpirySeconds = blockExpirySeconds;
    return this;
  }

   /**
   * The duration of time that login remains blocked after a failed login
   * minimum: 1
   * maximum: 36000
   * @return blockExpirySeconds
  **/
  @javax.annotation.Nullable
  public Integer getBlockExpirySeconds() {
    return blockExpirySeconds;
  }

  public void setBlockExpirySeconds(Integer blockExpirySeconds) {
    this.blockExpirySeconds = blockExpirySeconds;
  }


  public IPAddressRateLimitingSettings maxBlockedClients(Integer maxBlockedClients) {
    this.maxBlockedClients = maxBlockedClients;
    return this;
  }

   /**
   * The maximum number of blocked IP addresses
   * minimum: 0
   * maximum: 2147483647
   * @return maxBlockedClients
  **/
  @javax.annotation.Nullable
  public Integer getMaxBlockedClients() {
    return maxBlockedClients;
  }

  public void setMaxBlockedClients(Integer maxBlockedClients) {
    this.maxBlockedClients = maxBlockedClients;
  }


  public IPAddressRateLimitingSettings maxTrackedClients(Integer maxTrackedClients) {
    this.maxTrackedClients = maxTrackedClients;
    return this;
  }

   /**
   * The maximum number of tracked IP addresses that have failed login
   * minimum: 0
   * maximum: 2147483647
   * @return maxTrackedClients
  **/
  @javax.annotation.Nullable
  public Integer getMaxTrackedClients() {
    return maxTrackedClients;
  }

  public void setMaxTrackedClients(Integer maxTrackedClients) {
    this.maxTrackedClients = maxTrackedClients;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPAddressRateLimitingSettings ipAddressRateLimitingSettings = (IPAddressRateLimitingSettings) o;
    return Objects.equals(this.type, ipAddressRateLimitingSettings.type) &&
        Objects.equals(this.allowedTries, ipAddressRateLimitingSettings.allowedTries) &&
        Objects.equals(this.timeWindowSeconds, ipAddressRateLimitingSettings.timeWindowSeconds) &&
        Objects.equals(this.blockExpirySeconds, ipAddressRateLimitingSettings.blockExpirySeconds) &&
        Objects.equals(this.maxBlockedClients, ipAddressRateLimitingSettings.maxBlockedClients) &&
        Objects.equals(this.maxTrackedClients, ipAddressRateLimitingSettings.maxTrackedClients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, allowedTries, timeWindowSeconds, blockExpirySeconds, maxBlockedClients, maxTrackedClients);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPAddressRateLimitingSettings {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    allowedTries: ").append(toIndentedString(allowedTries)).append("\n");
    sb.append("    timeWindowSeconds: ").append(toIndentedString(timeWindowSeconds)).append("\n");
    sb.append("    blockExpirySeconds: ").append(toIndentedString(blockExpirySeconds)).append("\n");
    sb.append("    maxBlockedClients: ").append(toIndentedString(maxBlockedClients)).append("\n");
    sb.append("    maxTrackedClients: ").append(toIndentedString(maxTrackedClients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("allowed_tries");
    openapiFields.add("time_window_seconds");
    openapiFields.add("block_expiry_seconds");
    openapiFields.add("max_blocked_clients");
    openapiFields.add("max_tracked_clients");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IPAddressRateLimitingSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPAddressRateLimitingSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPAddressRateLimitingSettings is not found in the empty JSON string", IPAddressRateLimitingSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPAddressRateLimitingSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPAddressRateLimitingSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPAddressRateLimitingSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPAddressRateLimitingSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPAddressRateLimitingSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPAddressRateLimitingSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<IPAddressRateLimitingSettings>() {
           @Override
           public void write(JsonWriter out, IPAddressRateLimitingSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPAddressRateLimitingSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IPAddressRateLimitingSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IPAddressRateLimitingSettings
  * @throws IOException if the JSON string is invalid with respect to IPAddressRateLimitingSettings
  */
  public static IPAddressRateLimitingSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPAddressRateLimitingSettings.class);
  }

 /**
  * Convert an instance of IPAddressRateLimitingSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

