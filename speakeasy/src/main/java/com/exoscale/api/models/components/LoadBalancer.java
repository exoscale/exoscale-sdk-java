/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * LoadBalancer - Load Balancer
 */

public class LoadBalancer {

    /**
     * Load Balancer ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Load Balancer description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Load Balancer name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Load Balancer state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends LoadBalancerState> state;

    /**
     * Load Balancer creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * Load Balancer public IP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip")
    private Optional<? extends String> ip;

    /**
     * Load Balancer Services
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("services")
    private Optional<? extends java.util.List<LoadBalancerService>> services;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    public LoadBalancer(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("state") Optional<? extends LoadBalancerState> state,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("ip") Optional<? extends String> ip,
            @JsonProperty("services") Optional<? extends java.util.List<LoadBalancerService>> services,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(ip, "ip");
        Utils.checkNotNull(services, "services");
        Utils.checkNotNull(labels, "labels");
        this.id = id;
        this.description = description;
        this.name = name;
        this.state = state;
        this.createdAt = createdAt;
        this.ip = ip;
        this.services = services;
        this.labels = labels;
    }

    /**
     * Load Balancer ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Load Balancer description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Load Balancer name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Load Balancer state
     */
    public Optional<? extends LoadBalancerState> state() {
        return state;
    }

    /**
     * Load Balancer creation date
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Load Balancer public IP
     */
    public Optional<? extends String> ip() {
        return ip;
    }

    /**
     * Load Balancer Services
     */
    public Optional<? extends java.util.List<LoadBalancerService>> services() {
        return services;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Load Balancer ID
     */
    public LoadBalancer withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Load Balancer ID
     */
    public LoadBalancer withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Load Balancer description
     */
    public LoadBalancer withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Load Balancer description
     */
    public LoadBalancer withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Load Balancer name
     */
    public LoadBalancer withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Load Balancer name
     */
    public LoadBalancer withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Load Balancer state
     */
    public LoadBalancer withState(LoadBalancerState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * Load Balancer state
     */
    public LoadBalancer withState(Optional<? extends LoadBalancerState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Load Balancer creation date
     */
    public LoadBalancer withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Load Balancer creation date
     */
    public LoadBalancer withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Load Balancer public IP
     */
    public LoadBalancer withIp(String ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = Optional.ofNullable(ip);
        return this;
    }

    /**
     * Load Balancer public IP
     */
    public LoadBalancer withIp(Optional<? extends String> ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = ip;
        return this;
    }

    /**
     * Load Balancer Services
     */
    public LoadBalancer withServices(java.util.List<LoadBalancerService> services) {
        Utils.checkNotNull(services, "services");
        this.services = Optional.ofNullable(services);
        return this;
    }

    /**
     * Load Balancer Services
     */
    public LoadBalancer withServices(Optional<? extends java.util.List<LoadBalancerService>> services) {
        Utils.checkNotNull(services, "services");
        this.services = services;
        return this;
    }

    public LoadBalancer withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public LoadBalancer withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LoadBalancer other = (LoadBalancer) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.ip, other.ip) &&
            java.util.Objects.deepEquals(this.services, other.services) &&
            java.util.Objects.deepEquals(this.labels, other.labels);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            description,
            name,
            state,
            createdAt,
            ip,
            services,
            labels);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LoadBalancer.class,
                "id", id,
                "description", description,
                "name", name,
                "state", state,
                "createdAt", createdAt,
                "ip", ip,
                "services", services,
                "labels", labels);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends LoadBalancerState> state = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends String> ip = Optional.empty();
 
        private Optional<? extends java.util.List<LoadBalancerService>> services = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Load Balancer ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Load Balancer ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Load Balancer description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Load Balancer description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Load Balancer name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Load Balancer name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Load Balancer state
         */
        public Builder state(LoadBalancerState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Load Balancer state
         */
        public Builder state(Optional<? extends LoadBalancerState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Load Balancer creation date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Load Balancer creation date
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Load Balancer public IP
         */
        public Builder ip(String ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = Optional.ofNullable(ip);
            return this;
        }

        /**
         * Load Balancer public IP
         */
        public Builder ip(Optional<? extends String> ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = ip;
            return this;
        }

        /**
         * Load Balancer Services
         */
        public Builder services(java.util.List<LoadBalancerService> services) {
            Utils.checkNotNull(services, "services");
            this.services = Optional.ofNullable(services);
            return this;
        }

        /**
         * Load Balancer Services
         */
        public Builder services(Optional<? extends java.util.List<LoadBalancerService>> services) {
            Utils.checkNotNull(services, "services");
            this.services = services;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }
        
        public LoadBalancer build() {
            return new LoadBalancer(
                id,
                description,
                name,
                state,
                createdAt,
                ip,
                services,
                labels);
        }
    }
}

