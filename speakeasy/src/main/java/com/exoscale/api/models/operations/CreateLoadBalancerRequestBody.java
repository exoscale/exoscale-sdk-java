/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateLoadBalancerRequestBody {

    /**
     * Load Balancer description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Load Balancer name
     */
    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    public CreateLoadBalancerRequestBody(
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("name") String name,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(labels, "labels");
        this.description = description;
        this.name = name;
        this.labels = labels;
    }

    /**
     * Load Balancer description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Load Balancer name
     */
    public String name() {
        return name;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Load Balancer description
     */
    public CreateLoadBalancerRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Load Balancer description
     */
    public CreateLoadBalancerRequestBody withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Load Balancer name
     */
    public CreateLoadBalancerRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CreateLoadBalancerRequestBody withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public CreateLoadBalancerRequestBody withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateLoadBalancerRequestBody other = (CreateLoadBalancerRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.labels, other.labels);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            name,
            labels);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateLoadBalancerRequestBody.class,
                "description", description,
                "name", name,
                "labels", labels);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> description = Optional.empty();
 
        private String name;
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Load Balancer description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Load Balancer description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Load Balancer name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }
        
        public CreateLoadBalancerRequestBody build() {
            return new CreateLoadBalancerRequestBody(
                description,
                name,
                labels);
        }
    }
}

