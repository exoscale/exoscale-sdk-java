/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.exoscale.exoscale4j.api;
import com.exoscale.exoscale4j.client.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.exoscale.exoscale4j.client.ApiClient;
import com.exoscale.exoscale4j.client.ApiException;
import com.exoscale.exoscale4j.client.ApiResponse;
import com.exoscale.exoscale4j.client.Pair;

import com.exoscale.exoscale4j.model.AddExternalSourceToSecurityGroupRequest;
import com.exoscale.exoscale4j.model.AddRuleToSecurityGroupRequest;
import com.exoscale.exoscale4j.model.AddServiceToLoadBalancerRequest;
import com.exoscale.exoscale4j.model.AntiAffinityGroup;
import com.exoscale.exoscale4j.model.AttachBlockStorageVolumeToInstanceRequest;
import com.exoscale.exoscale4j.model.AttachInstanceToPrivateNetworkRequest;
import com.exoscale.exoscale4j.model.BlockStorageSnapshot;
import com.exoscale.exoscale4j.model.BlockStorageVolume;
import com.exoscale.exoscale4j.model.CopyTemplateRequest;
import com.exoscale.exoscale4j.model.CreateAntiAffinityGroupRequest;
import com.exoscale.exoscale4j.model.CreateApiKeyRequest;
import com.exoscale.exoscale4j.model.CreateBlockStorageSnapshotRequest;
import com.exoscale.exoscale4j.model.CreateBlockStorageVolumeRequest;
import com.exoscale.exoscale4j.model.CreateDbaasIntegrationRequest;
import com.exoscale.exoscale4j.model.CreateDbaasKafkaUserRequest;
import com.exoscale.exoscale4j.model.CreateDbaasMysqlDatabaseRequest;
import com.exoscale.exoscale4j.model.CreateDbaasMysqlUserRequest;
import com.exoscale.exoscale4j.model.CreateDbaasPgConnectionPoolRequest;
import com.exoscale.exoscale4j.model.CreateDbaasPgDatabaseRequest;
import com.exoscale.exoscale4j.model.CreateDbaasPgUpgradeCheckRequest;
import com.exoscale.exoscale4j.model.CreateDbaasPostgresUserRequest;
import com.exoscale.exoscale4j.model.CreateDbaasServiceGrafanaRequest;
import com.exoscale.exoscale4j.model.CreateDbaasServiceKafkaRequest;
import com.exoscale.exoscale4j.model.CreateDbaasServiceMysqlRequest;
import com.exoscale.exoscale4j.model.CreateDbaasServiceOpensearchRequest;
import com.exoscale.exoscale4j.model.CreateDbaasServicePgRequest;
import com.exoscale.exoscale4j.model.CreateDbaasServiceRedisRequest;
import com.exoscale.exoscale4j.model.CreateDbaasTaskMigrationCheckRequest;
import com.exoscale.exoscale4j.model.CreateDnsDomainRecordRequest;
import com.exoscale.exoscale4j.model.CreateDnsDomainRequest;
import com.exoscale.exoscale4j.model.CreateElasticIpRequest;
import com.exoscale.exoscale4j.model.CreateIamRoleRequest;
import com.exoscale.exoscale4j.model.CreateInstancePoolRequest;
import com.exoscale.exoscale4j.model.CreateInstanceRequest;
import com.exoscale.exoscale4j.model.CreateLoadBalancerRequest;
import com.exoscale.exoscale4j.model.CreatePrivateNetworkRequest;
import com.exoscale.exoscale4j.model.CreateSecurityGroupRequest;
import com.exoscale.exoscale4j.model.CreateSksClusterRequest;
import com.exoscale.exoscale4j.model.CreateSksNodepoolRequest;
import com.exoscale.exoscale4j.model.DbaasIntegration;
import com.exoscale.exoscale4j.model.DbaasKafkaAcls;
import com.exoscale.exoscale4j.model.DbaasKafkaSchemaRegistryAclEntry;
import com.exoscale.exoscale4j.model.DbaasKafkaTopicAclEntry;
import com.exoscale.exoscale4j.model.DbaasMigrationStatus;
import com.exoscale.exoscale4j.model.DbaasOpensearchAclConfig;
import com.exoscale.exoscale4j.model.DbaasPostgresUsers;
import com.exoscale.exoscale4j.model.DbaasServiceGrafana;
import com.exoscale.exoscale4j.model.DbaasServiceKafka;
import com.exoscale.exoscale4j.model.DbaasServiceLogs;
import com.exoscale.exoscale4j.model.DbaasServiceMysql;
import com.exoscale.exoscale4j.model.DbaasServiceOpensearch;
import com.exoscale.exoscale4j.model.DbaasServicePg;
import com.exoscale.exoscale4j.model.DbaasServiceRedis;
import com.exoscale.exoscale4j.model.DbaasServiceType;
import com.exoscale.exoscale4j.model.DbaasTask;
import com.exoscale.exoscale4j.model.DbaasUserKafkaSecrets;
import com.exoscale.exoscale4j.model.DbaasUserMysqlSecrets;
import com.exoscale.exoscale4j.model.DbaasUserOpensearchSecrets;
import com.exoscale.exoscale4j.model.DbaasUserPostgresSecrets;
import com.exoscale.exoscale4j.model.DbaasUserRedisSecrets;
import com.exoscale.exoscale4j.model.DeployTarget;
import com.exoscale.exoscale4j.model.DetachInstanceFromPrivateNetworkRequest;
import com.exoscale.exoscale4j.model.DnsDomain;
import com.exoscale.exoscale4j.model.DnsDomainRecord;
import com.exoscale.exoscale4j.model.ElasticIp;
import com.exoscale.exoscale4j.model.Event;
import com.exoscale.exoscale4j.model.EvictInstancePoolMembersRequest;
import com.exoscale.exoscale4j.model.EvictSksNodepoolMembersRequest;
import com.exoscale.exoscale4j.model.GenerateSksClusterKubeconfig200Response;
import com.exoscale.exoscale4j.model.GetDbaasCaCertificate200Response;
import com.exoscale.exoscale4j.model.GetDbaasServiceLogsRequest;
import com.exoscale.exoscale4j.model.GetDbaasServiceMetrics200Response;
import com.exoscale.exoscale4j.model.GetDbaasServiceMetricsRequest;
import com.exoscale.exoscale4j.model.GetDbaasSettingsGrafana200Response;
import com.exoscale.exoscale4j.model.GetDbaasSettingsKafka200Response;
import com.exoscale.exoscale4j.model.GetDbaasSettingsMysql200Response;
import com.exoscale.exoscale4j.model.GetDbaasSettingsOpensearch200Response;
import com.exoscale.exoscale4j.model.GetDbaasSettingsPg200Response;
import com.exoscale.exoscale4j.model.GetDbaasSettingsRedis200Response;
import com.exoscale.exoscale4j.model.GetDnsDomainZoneFile200Response;
import com.exoscale.exoscale4j.model.GetSksClusterAuthorityCert200Response;
import com.exoscale.exoscale4j.model.GetSosPresignedUrl200Response;
import com.exoscale.exoscale4j.model.IamApiKey;
import com.exoscale.exoscale4j.model.IamApiKeyCreated;
import com.exoscale.exoscale4j.model.IamPolicy;
import com.exoscale.exoscale4j.model.IamRole;
import com.exoscale.exoscale4j.model.Instance;
import com.exoscale.exoscale4j.model.InstancePassword;
import com.exoscale.exoscale4j.model.InstancePool;
import com.exoscale.exoscale4j.model.InstanceType;
import com.exoscale.exoscale4j.model.ListAntiAffinityGroups200Response;
import com.exoscale.exoscale4j.model.ListApiKeys200Response;
import com.exoscale.exoscale4j.model.ListBlockStorageSnapshots200Response;
import com.exoscale.exoscale4j.model.ListBlockStorageVolumes200Response;
import com.exoscale.exoscale4j.model.ListDbaasIntegrationSettings200Response;
import com.exoscale.exoscale4j.model.ListDbaasIntegrationTypes200Response;
import com.exoscale.exoscale4j.model.ListDbaasServiceTypes200Response;
import com.exoscale.exoscale4j.model.ListDbaasServices200Response;
import com.exoscale.exoscale4j.model.ListDeployTargets200Response;
import com.exoscale.exoscale4j.model.ListDnsDomainRecords200Response;
import com.exoscale.exoscale4j.model.ListDnsDomains200Response;
import com.exoscale.exoscale4j.model.ListElasticIps200Response;
import com.exoscale.exoscale4j.model.ListIamRoles200Response;
import com.exoscale.exoscale4j.model.ListInstancePools200Response;
import com.exoscale.exoscale4j.model.ListInstanceTypes200Response;
import com.exoscale.exoscale4j.model.ListInstances200Response;
import com.exoscale.exoscale4j.model.ListLoadBalancers200Response;
import com.exoscale.exoscale4j.model.ListPrivateNetworks200Response;
import com.exoscale.exoscale4j.model.ListQuotas200Response;
import com.exoscale.exoscale4j.model.ListSecurityGroups200Response;
import com.exoscale.exoscale4j.model.ListSksClusterVersions200Response;
import com.exoscale.exoscale4j.model.ListSksClusters200Response;
import com.exoscale.exoscale4j.model.ListSnapshots200Response;
import com.exoscale.exoscale4j.model.ListSosBucketsUsage200Response;
import com.exoscale.exoscale4j.model.ListSshKeys200Response;
import com.exoscale.exoscale4j.model.ListTemplates200Response;
import com.exoscale.exoscale4j.model.ListZones200Response;
import com.exoscale.exoscale4j.model.LoadBalancer;
import com.exoscale.exoscale4j.model.LoadBalancerService;
import java.time.OffsetDateTime;
import com.exoscale.exoscale4j.model.Operation;
import com.exoscale.exoscale4j.model.Organization;
import com.exoscale.exoscale4j.model.PrivateNetwork;
import com.exoscale.exoscale4j.model.PromoteSnapshotToTemplateRequest;
import com.exoscale.exoscale4j.model.Quota;
import com.exoscale.exoscale4j.model.RegisterSshKeyRequest;
import com.exoscale.exoscale4j.model.RegisterTemplateRequest;
import com.exoscale.exoscale4j.model.RemoveExternalSourceFromSecurityGroupRequest;
import com.exoscale.exoscale4j.model.ResetDbaasMysqlUserPasswordRequest;
import com.exoscale.exoscale4j.model.ResetDbaasOpensearchUserPasswordRequest;
import com.exoscale.exoscale4j.model.ResetInstanceRequest;
import com.exoscale.exoscale4j.model.ResizeBlockStorageVolumeRequest;
import com.exoscale.exoscale4j.model.ResizeInstanceDiskRequest;
import com.exoscale.exoscale4j.model.ReverseDnsRecord;
import com.exoscale.exoscale4j.model.RevertInstanceToSnapshotRequest;
import com.exoscale.exoscale4j.model.ScaleInstancePoolRequest;
import com.exoscale.exoscale4j.model.ScaleInstanceRequest;
import com.exoscale.exoscale4j.model.ScaleSksNodepoolRequest;
import com.exoscale.exoscale4j.model.SecurityGroup;
import com.exoscale.exoscale4j.model.SksCluster;
import com.exoscale.exoscale4j.model.SksKubeconfigRequest;
import com.exoscale.exoscale4j.model.SksNodepool;
import com.exoscale.exoscale4j.model.Snapshot;
import com.exoscale.exoscale4j.model.SshKey;
import com.exoscale.exoscale4j.model.StartInstanceRequest;
import com.exoscale.exoscale4j.model.Template;
import java.util.UUID;
import com.exoscale.exoscale4j.model.UpdateBlockStorageSnapshotRequest;
import com.exoscale.exoscale4j.model.UpdateBlockStorageVolumeRequest;
import com.exoscale.exoscale4j.model.UpdateDbaasIntegrationRequest;
import com.exoscale.exoscale4j.model.UpdateDbaasPgConnectionPoolRequest;
import com.exoscale.exoscale4j.model.UpdateDbaasPostgresAllowReplicationRequest;
import com.exoscale.exoscale4j.model.UpdateDbaasServiceGrafanaRequest;
import com.exoscale.exoscale4j.model.UpdateDbaasServiceKafkaRequest;
import com.exoscale.exoscale4j.model.UpdateDbaasServiceMysqlRequest;
import com.exoscale.exoscale4j.model.UpdateDbaasServiceOpensearchRequest;
import com.exoscale.exoscale4j.model.UpdateDbaasServicePgRequest;
import com.exoscale.exoscale4j.model.UpdateDbaasServiceRedisRequest;
import com.exoscale.exoscale4j.model.UpdateDnsDomainRecordRequest;
import com.exoscale.exoscale4j.model.UpdateElasticIpRequest;
import com.exoscale.exoscale4j.model.UpdateIamRoleRequest;
import com.exoscale.exoscale4j.model.UpdateInstancePoolRequest;
import com.exoscale.exoscale4j.model.UpdateInstanceRequest;
import com.exoscale.exoscale4j.model.UpdateLoadBalancerRequest;
import com.exoscale.exoscale4j.model.UpdateLoadBalancerServiceRequest;
import com.exoscale.exoscale4j.model.UpdatePrivateNetworkInstanceIpRequest;
import com.exoscale.exoscale4j.model.UpdatePrivateNetworkRequest;
import com.exoscale.exoscale4j.model.UpdateReverseDnsElasticIpRequest;
import com.exoscale.exoscale4j.model.UpdateSksClusterRequest;
import com.exoscale.exoscale4j.model.UpdateSksNodepoolRequest;
import com.exoscale.exoscale4j.model.UpdateTemplateRequest;
import com.exoscale.exoscale4j.model.UpgradeSksClusterRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-03T20:04:17.479783+02:00[Europe/Vienna]", comments = "Generator version: 7.4.0")
public class ExoscaleApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;
  private ApiClient apiClient;
  public ExoscaleApi() {
    this(new ApiClient());
  }

  public ExoscaleApi(ApiClient apiClient) {
    this.apiClient = apiClient;
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Add an external source as a member of a Security Group
   * 
   * @param id  (required)
   * @param addExternalSourceToSecurityGroupRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation addExternalSourceToSecurityGroup(UUID id, AddExternalSourceToSecurityGroupRequest addExternalSourceToSecurityGroupRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = addExternalSourceToSecurityGroupWithHttpInfo(id, addExternalSourceToSecurityGroupRequest);
    return localVarResponse.getData();
  }

  /**
   * Add an external source as a member of a Security Group
   * 
   * @param id  (required)
   * @param addExternalSourceToSecurityGroupRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> addExternalSourceToSecurityGroupWithHttpInfo(UUID id, AddExternalSourceToSecurityGroupRequest addExternalSourceToSecurityGroupRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addExternalSourceToSecurityGroupRequestBuilder(id, addExternalSourceToSecurityGroupRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addExternalSourceToSecurityGroup", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addExternalSourceToSecurityGroupRequestBuilder(UUID id, AddExternalSourceToSecurityGroupRequest addExternalSourceToSecurityGroupRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addExternalSourceToSecurityGroup");
    }
    // verify the required parameter 'addExternalSourceToSecurityGroupRequest' is set
    if (addExternalSourceToSecurityGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'addExternalSourceToSecurityGroupRequest' when calling addExternalSourceToSecurityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security-group/{id}:add-source"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(addExternalSourceToSecurityGroupRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set instance destruction protection
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation addInstanceProtection(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = addInstanceProtectionWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Set instance destruction protection
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> addInstanceProtectionWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addInstanceProtectionRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addInstanceProtection", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addInstanceProtectionRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addInstanceProtection");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:add-protection"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a Security Group rule
   * 
   * @param id  (required)
   * @param addRuleToSecurityGroupRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation addRuleToSecurityGroup(UUID id, AddRuleToSecurityGroupRequest addRuleToSecurityGroupRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = addRuleToSecurityGroupWithHttpInfo(id, addRuleToSecurityGroupRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Security Group rule
   * 
   * @param id  (required)
   * @param addRuleToSecurityGroupRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> addRuleToSecurityGroupWithHttpInfo(UUID id, AddRuleToSecurityGroupRequest addRuleToSecurityGroupRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addRuleToSecurityGroupRequestBuilder(id, addRuleToSecurityGroupRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addRuleToSecurityGroup", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addRuleToSecurityGroupRequestBuilder(UUID id, AddRuleToSecurityGroupRequest addRuleToSecurityGroupRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addRuleToSecurityGroup");
    }
    // verify the required parameter 'addRuleToSecurityGroupRequest' is set
    if (addRuleToSecurityGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'addRuleToSecurityGroupRequest' when calling addRuleToSecurityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security-group/{id}/rules"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(addRuleToSecurityGroupRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add a Load Balancer Service
   * 
   * @param id  (required)
   * @param addServiceToLoadBalancerRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation addServiceToLoadBalancer(UUID id, AddServiceToLoadBalancerRequest addServiceToLoadBalancerRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = addServiceToLoadBalancerWithHttpInfo(id, addServiceToLoadBalancerRequest);
    return localVarResponse.getData();
  }

  /**
   * Add a Load Balancer Service
   * 
   * @param id  (required)
   * @param addServiceToLoadBalancerRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> addServiceToLoadBalancerWithHttpInfo(UUID id, AddServiceToLoadBalancerRequest addServiceToLoadBalancerRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addServiceToLoadBalancerRequestBuilder(id, addServiceToLoadBalancerRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addServiceToLoadBalancer", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addServiceToLoadBalancerRequestBuilder(UUID id, AddServiceToLoadBalancerRequest addServiceToLoadBalancerRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addServiceToLoadBalancer");
    }
    // verify the required parameter 'addServiceToLoadBalancerRequest' is set
    if (addServiceToLoadBalancerRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'addServiceToLoadBalancerRequest' when calling addServiceToLoadBalancer");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer/{id}/service"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(addServiceToLoadBalancerRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Attach block storage volume to an instance
   * 
   * @param id  (required)
   * @param attachBlockStorageVolumeToInstanceRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation attachBlockStorageVolumeToInstance(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = attachBlockStorageVolumeToInstanceWithHttpInfo(id, attachBlockStorageVolumeToInstanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Attach block storage volume to an instance
   * 
   * @param id  (required)
   * @param attachBlockStorageVolumeToInstanceRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> attachBlockStorageVolumeToInstanceWithHttpInfo(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = attachBlockStorageVolumeToInstanceRequestBuilder(id, attachBlockStorageVolumeToInstanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("attachBlockStorageVolumeToInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder attachBlockStorageVolumeToInstanceRequestBuilder(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling attachBlockStorageVolumeToInstance");
    }
    // verify the required parameter 'attachBlockStorageVolumeToInstanceRequest' is set
    if (attachBlockStorageVolumeToInstanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'attachBlockStorageVolumeToInstanceRequest' when calling attachBlockStorageVolumeToInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}:attach"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(attachBlockStorageVolumeToInstanceRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Attach a Compute instance to an Elastic IP
   * 
   * @param id  (required)
   * @param attachBlockStorageVolumeToInstanceRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation attachInstanceToElasticIp(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = attachInstanceToElasticIpWithHttpInfo(id, attachBlockStorageVolumeToInstanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Attach a Compute instance to an Elastic IP
   * 
   * @param id  (required)
   * @param attachBlockStorageVolumeToInstanceRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> attachInstanceToElasticIpWithHttpInfo(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = attachInstanceToElasticIpRequestBuilder(id, attachBlockStorageVolumeToInstanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("attachInstanceToElasticIp", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder attachInstanceToElasticIpRequestBuilder(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling attachInstanceToElasticIp");
    }
    // verify the required parameter 'attachBlockStorageVolumeToInstanceRequest' is set
    if (attachBlockStorageVolumeToInstanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'attachBlockStorageVolumeToInstanceRequest' when calling attachInstanceToElasticIp");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/elastic-ip/{id}:attach"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(attachBlockStorageVolumeToInstanceRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Attach a Compute instance to a Private Network
   * 
   * @param id  (required)
   * @param attachInstanceToPrivateNetworkRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation attachInstanceToPrivateNetwork(UUID id, AttachInstanceToPrivateNetworkRequest attachInstanceToPrivateNetworkRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = attachInstanceToPrivateNetworkWithHttpInfo(id, attachInstanceToPrivateNetworkRequest);
    return localVarResponse.getData();
  }

  /**
   * Attach a Compute instance to a Private Network
   * 
   * @param id  (required)
   * @param attachInstanceToPrivateNetworkRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> attachInstanceToPrivateNetworkWithHttpInfo(UUID id, AttachInstanceToPrivateNetworkRequest attachInstanceToPrivateNetworkRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = attachInstanceToPrivateNetworkRequestBuilder(id, attachInstanceToPrivateNetworkRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("attachInstanceToPrivateNetwork", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder attachInstanceToPrivateNetworkRequestBuilder(UUID id, AttachInstanceToPrivateNetworkRequest attachInstanceToPrivateNetworkRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling attachInstanceToPrivateNetwork");
    }
    // verify the required parameter 'attachInstanceToPrivateNetworkRequest' is set
    if (attachInstanceToPrivateNetworkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'attachInstanceToPrivateNetworkRequest' when calling attachInstanceToPrivateNetwork");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/private-network/{id}:attach"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(attachInstanceToPrivateNetworkRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Attach a Compute instance to a Security Group
   * 
   * @param id  (required)
   * @param detachInstanceFromPrivateNetworkRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation attachInstanceToSecurityGroup(UUID id, DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = attachInstanceToSecurityGroupWithHttpInfo(id, detachInstanceFromPrivateNetworkRequest);
    return localVarResponse.getData();
  }

  /**
   * Attach a Compute instance to a Security Group
   * 
   * @param id  (required)
   * @param detachInstanceFromPrivateNetworkRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> attachInstanceToSecurityGroupWithHttpInfo(UUID id, DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = attachInstanceToSecurityGroupRequestBuilder(id, detachInstanceFromPrivateNetworkRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("attachInstanceToSecurityGroup", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder attachInstanceToSecurityGroupRequestBuilder(UUID id, DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling attachInstanceToSecurityGroup");
    }
    // verify the required parameter 'detachInstanceFromPrivateNetworkRequest' is set
    if (detachInstanceFromPrivateNetworkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'detachInstanceFromPrivateNetworkRequest' when calling attachInstanceToSecurityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security-group/{id}:attach"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(detachInstanceFromPrivateNetworkRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Copy a Template from a zone to another
   * 
   * @param id  (required)
   * @param copyTemplateRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation copyTemplate(UUID id, CopyTemplateRequest copyTemplateRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = copyTemplateWithHttpInfo(id, copyTemplateRequest);
    return localVarResponse.getData();
  }

  /**
   * Copy a Template from a zone to another
   * 
   * @param id  (required)
   * @param copyTemplateRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> copyTemplateWithHttpInfo(UUID id, CopyTemplateRequest copyTemplateRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = copyTemplateRequestBuilder(id, copyTemplateRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("copyTemplate", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder copyTemplateRequestBuilder(UUID id, CopyTemplateRequest copyTemplateRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling copyTemplate");
    }
    // verify the required parameter 'copyTemplateRequest' is set
    if (copyTemplateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'copyTemplateRequest' when calling copyTemplate");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/template/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(copyTemplateRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create an Anti-affinity Group
   * 
   * @param createAntiAffinityGroupRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createAntiAffinityGroup(CreateAntiAffinityGroupRequest createAntiAffinityGroupRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createAntiAffinityGroupWithHttpInfo(createAntiAffinityGroupRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Anti-affinity Group
   * 
   * @param createAntiAffinityGroupRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createAntiAffinityGroupWithHttpInfo(CreateAntiAffinityGroupRequest createAntiAffinityGroupRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAntiAffinityGroupRequestBuilder(createAntiAffinityGroupRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAntiAffinityGroup", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAntiAffinityGroupRequestBuilder(CreateAntiAffinityGroupRequest createAntiAffinityGroupRequest) throws ApiException {
    // verify the required parameter 'createAntiAffinityGroupRequest' is set
    if (createAntiAffinityGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createAntiAffinityGroupRequest' when calling createAntiAffinityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/anti-affinity-group";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createAntiAffinityGroupRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new API key
   * 
   * @param createApiKeyRequest  (required)
   * @return IamApiKeyCreated
   * @throws ApiException if fails to make API call
   */
  public IamApiKeyCreated createApiKey(CreateApiKeyRequest createApiKeyRequest) throws ApiException {
    ApiResponse<IamApiKeyCreated> localVarResponse = createApiKeyWithHttpInfo(createApiKeyRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a new API key
   * 
   * @param createApiKeyRequest  (required)
   * @return ApiResponse&lt;IamApiKeyCreated&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IamApiKeyCreated> createApiKeyWithHttpInfo(CreateApiKeyRequest createApiKeyRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createApiKeyRequestBuilder(createApiKeyRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createApiKey", localVarResponse);
        }
        return new ApiResponse<IamApiKeyCreated>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IamApiKeyCreated>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createApiKeyRequestBuilder(CreateApiKeyRequest createApiKeyRequest) throws ApiException {
    // verify the required parameter 'createApiKeyRequest' is set
    if (createApiKeyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiKeyRequest' when calling createApiKey");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api-key";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createApiKeyRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a block storage snapshot
   * 
   * @param id  (required)
   * @param createBlockStorageSnapshotRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createBlockStorageSnapshot(UUID id, CreateBlockStorageSnapshotRequest createBlockStorageSnapshotRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createBlockStorageSnapshotWithHttpInfo(id, createBlockStorageSnapshotRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a block storage snapshot
   * 
   * @param id  (required)
   * @param createBlockStorageSnapshotRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createBlockStorageSnapshotWithHttpInfo(UUID id, CreateBlockStorageSnapshotRequest createBlockStorageSnapshotRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createBlockStorageSnapshotRequestBuilder(id, createBlockStorageSnapshotRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createBlockStorageSnapshot", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createBlockStorageSnapshotRequestBuilder(UUID id, CreateBlockStorageSnapshotRequest createBlockStorageSnapshotRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createBlockStorageSnapshot");
    }
    // verify the required parameter 'createBlockStorageSnapshotRequest' is set
    if (createBlockStorageSnapshotRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createBlockStorageSnapshotRequest' when calling createBlockStorageSnapshot");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}:create-snapshot"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createBlockStorageSnapshotRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a block storage volume
   * 
   * @param createBlockStorageVolumeRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createBlockStorageVolume(CreateBlockStorageVolumeRequest createBlockStorageVolumeRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createBlockStorageVolumeWithHttpInfo(createBlockStorageVolumeRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a block storage volume
   * 
   * @param createBlockStorageVolumeRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createBlockStorageVolumeWithHttpInfo(CreateBlockStorageVolumeRequest createBlockStorageVolumeRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createBlockStorageVolumeRequestBuilder(createBlockStorageVolumeRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createBlockStorageVolumeRequestBuilder(CreateBlockStorageVolumeRequest createBlockStorageVolumeRequest) throws ApiException {
    // verify the required parameter 'createBlockStorageVolumeRequest' is set
    if (createBlockStorageVolumeRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createBlockStorageVolumeRequest' when calling createBlockStorageVolume");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createBlockStorageVolumeRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new DBaaS integration between two services
   * Create a new DBaaS integration between two services
   * @param createDbaasIntegrationRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasIntegration(CreateDbaasIntegrationRequest createDbaasIntegrationRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasIntegrationWithHttpInfo(createDbaasIntegrationRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a new DBaaS integration between two services
   * Create a new DBaaS integration between two services
   * @param createDbaasIntegrationRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasIntegrationWithHttpInfo(CreateDbaasIntegrationRequest createDbaasIntegrationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasIntegrationRequestBuilder(createDbaasIntegrationRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasIntegration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasIntegrationRequestBuilder(CreateDbaasIntegrationRequest createDbaasIntegrationRequest) throws ApiException {
    // verify the required parameter 'createDbaasIntegrationRequest' is set
    if (createDbaasIntegrationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasIntegrationRequest' when calling createDbaasIntegration");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasIntegrationRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add a Kafka Schema Registry ACL entry
   * 
   * @param name  (required)
   * @param dbaasKafkaSchemaRegistryAclEntry  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasKafkaSchemaRegistryAclConfig(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(name, dbaasKafkaSchemaRegistryAclEntry);
    return localVarResponse.getData();
  }

  /**
   * Add a Kafka Schema Registry ACL entry
   * 
   * @param name  (required)
   * @param dbaasKafkaSchemaRegistryAclEntry  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasKafkaSchemaRegistryAclConfigRequestBuilder(name, dbaasKafkaSchemaRegistryAclEntry);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasKafkaSchemaRegistryAclConfig", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasKafkaSchemaRegistryAclConfigRequestBuilder(String name, DbaasKafkaSchemaRegistryAclEntry dbaasKafkaSchemaRegistryAclEntry) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasKafkaSchemaRegistryAclConfig");
    }
    // verify the required parameter 'dbaasKafkaSchemaRegistryAclEntry' is set
    if (dbaasKafkaSchemaRegistryAclEntry == null) {
      throw new ApiException(400, "Missing the required parameter 'dbaasKafkaSchemaRegistryAclEntry' when calling createDbaasKafkaSchemaRegistryAclConfig");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/schema-registry/acl-config"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(dbaasKafkaSchemaRegistryAclEntry);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add a Kafka topic ACL entry
   * 
   * @param name  (required)
   * @param dbaasKafkaTopicAclEntry  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasKafkaTopicAclConfig(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasKafkaTopicAclConfigWithHttpInfo(name, dbaasKafkaTopicAclEntry);
    return localVarResponse.getData();
  }

  /**
   * Add a Kafka topic ACL entry
   * 
   * @param name  (required)
   * @param dbaasKafkaTopicAclEntry  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasKafkaTopicAclConfigWithHttpInfo(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasKafkaTopicAclConfigRequestBuilder(name, dbaasKafkaTopicAclEntry);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasKafkaTopicAclConfig", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasKafkaTopicAclConfigRequestBuilder(String name, DbaasKafkaTopicAclEntry dbaasKafkaTopicAclEntry) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasKafkaTopicAclConfig");
    }
    // verify the required parameter 'dbaasKafkaTopicAclEntry' is set
    if (dbaasKafkaTopicAclEntry == null) {
      throw new ApiException(400, "Missing the required parameter 'dbaasKafkaTopicAclEntry' when calling createDbaasKafkaTopicAclConfig");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/topic/acl-config"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(dbaasKafkaTopicAclEntry);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Kafka user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasKafkaUser(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasKafkaUserWithHttpInfo(serviceName, createDbaasKafkaUserRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Kafka user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasKafkaUserWithHttpInfo(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasKafkaUserRequestBuilder(serviceName, createDbaasKafkaUserRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasKafkaUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasKafkaUserRequestBuilder(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasKafkaUser");
    }
    // verify the required parameter 'createDbaasKafkaUserRequest' is set
    if (createDbaasKafkaUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasKafkaUserRequest' when calling createDbaasKafkaUser");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{service-name}/user"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasKafkaUserRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS MySQL database
   * 
   * @param serviceName  (required)
   * @param createDbaasMysqlDatabaseRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasMysqlDatabase(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasMysqlDatabaseWithHttpInfo(serviceName, createDbaasMysqlDatabaseRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS MySQL database
   * 
   * @param serviceName  (required)
   * @param createDbaasMysqlDatabaseRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasMysqlDatabaseWithHttpInfo(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasMysqlDatabaseRequestBuilder(serviceName, createDbaasMysqlDatabaseRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasMysqlDatabase", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasMysqlDatabaseRequestBuilder(String serviceName, CreateDbaasMysqlDatabaseRequest createDbaasMysqlDatabaseRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasMysqlDatabase");
    }
    // verify the required parameter 'createDbaasMysqlDatabaseRequest' is set
    if (createDbaasMysqlDatabaseRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasMysqlDatabaseRequest' when calling createDbaasMysqlDatabase");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/database"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasMysqlDatabaseRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param createDbaasMysqlUserRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasMysqlUser(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasMysqlUserWithHttpInfo(serviceName, createDbaasMysqlUserRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param createDbaasMysqlUserRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasMysqlUserWithHttpInfo(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasMysqlUserRequestBuilder(serviceName, createDbaasMysqlUserRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasMysqlUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasMysqlUserRequestBuilder(String serviceName, CreateDbaasMysqlUserRequest createDbaasMysqlUserRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasMysqlUser");
    }
    // verify the required parameter 'createDbaasMysqlUserRequest' is set
    if (createDbaasMysqlUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasMysqlUserRequest' when calling createDbaasMysqlUser");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/user"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasMysqlUserRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasOpensearchUser(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasOpensearchUserWithHttpInfo(serviceName, createDbaasKafkaUserRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasOpensearchUserWithHttpInfo(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasOpensearchUserRequestBuilder(serviceName, createDbaasKafkaUserRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasOpensearchUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasOpensearchUserRequestBuilder(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasOpensearchUser");
    }
    // verify the required parameter 'createDbaasKafkaUserRequest' is set
    if (createDbaasKafkaUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasKafkaUserRequest' when calling createDbaasOpensearchUser");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{service-name}/user"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasKafkaUserRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param createDbaasPgConnectionPoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasPgConnectionPool(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasPgConnectionPoolWithHttpInfo(serviceName, createDbaasPgConnectionPoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param createDbaasPgConnectionPoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasPgConnectionPoolWithHttpInfo(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasPgConnectionPoolRequestBuilder(serviceName, createDbaasPgConnectionPoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasPgConnectionPool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasPgConnectionPoolRequestBuilder(String serviceName, CreateDbaasPgConnectionPoolRequest createDbaasPgConnectionPoolRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasPgConnectionPool");
    }
    // verify the required parameter 'createDbaasPgConnectionPoolRequest' is set
    if (createDbaasPgConnectionPoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasPgConnectionPoolRequest' when calling createDbaasPgConnectionPool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/connection-pool"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasPgConnectionPoolRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Postgres database
   * 
   * @param serviceName  (required)
   * @param createDbaasPgDatabaseRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasPgDatabase(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasPgDatabaseWithHttpInfo(serviceName, createDbaasPgDatabaseRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Postgres database
   * 
   * @param serviceName  (required)
   * @param createDbaasPgDatabaseRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasPgDatabaseWithHttpInfo(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasPgDatabaseRequestBuilder(serviceName, createDbaasPgDatabaseRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasPgDatabase", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasPgDatabaseRequestBuilder(String serviceName, CreateDbaasPgDatabaseRequest createDbaasPgDatabaseRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasPgDatabase");
    }
    // verify the required parameter 'createDbaasPgDatabaseRequest' is set
    if (createDbaasPgDatabaseRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasPgDatabaseRequest' when calling createDbaasPgDatabase");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/database"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasPgDatabaseRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Check whether you can upgrade Postgres service to a newer version
   * @param service  (required)
   * @param createDbaasPgUpgradeCheckRequest  (required)
   * @return DbaasTask
   * @throws ApiException if fails to make API call
   */
  public DbaasTask createDbaasPgUpgradeCheck(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest) throws ApiException {
    ApiResponse<DbaasTask> localVarResponse = createDbaasPgUpgradeCheckWithHttpInfo(service, createDbaasPgUpgradeCheckRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Check whether you can upgrade Postgres service to a newer version
   * @param service  (required)
   * @param createDbaasPgUpgradeCheckRequest  (required)
   * @return ApiResponse&lt;DbaasTask&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasTask> createDbaasPgUpgradeCheckWithHttpInfo(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasPgUpgradeCheckRequestBuilder(service, createDbaasPgUpgradeCheckRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasPgUpgradeCheck", localVarResponse);
        }
        return new ApiResponse<DbaasTask>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasTask>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasPgUpgradeCheckRequestBuilder(String service, CreateDbaasPgUpgradeCheckRequest createDbaasPgUpgradeCheckRequest) throws ApiException {
    // verify the required parameter 'service' is set
    if (service == null) {
      throw new ApiException(400, "Missing the required parameter 'service' when calling createDbaasPgUpgradeCheck");
    }
    // verify the required parameter 'createDbaasPgUpgradeCheckRequest' is set
    if (createDbaasPgUpgradeCheckRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasPgUpgradeCheckRequest' when calling createDbaasPgUpgradeCheck");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service}/upgrade-check"
        .replace("{service}", ApiClient.urlEncode(service.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasPgUpgradeCheckRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param createDbaasPostgresUserRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasPostgresUser(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasPostgresUserWithHttpInfo(serviceName, createDbaasPostgresUserRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param createDbaasPostgresUserRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasPostgresUserWithHttpInfo(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasPostgresUserRequestBuilder(serviceName, createDbaasPostgresUserRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasPostgresUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasPostgresUserRequestBuilder(String serviceName, CreateDbaasPostgresUserRequest createDbaasPostgresUserRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasPostgresUser");
    }
    // verify the required parameter 'createDbaasPostgresUserRequest' is set
    if (createDbaasPostgresUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasPostgresUserRequest' when calling createDbaasPostgresUser");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/user"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasPostgresUserRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasRedisUser(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasRedisUserWithHttpInfo(serviceName, createDbaasKafkaUserRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param createDbaasKafkaUserRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasRedisUserWithHttpInfo(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasRedisUserRequestBuilder(serviceName, createDbaasKafkaUserRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasRedisUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasRedisUserRequestBuilder(String serviceName, CreateDbaasKafkaUserRequest createDbaasKafkaUserRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling createDbaasRedisUser");
    }
    // verify the required parameter 'createDbaasKafkaUserRequest' is set
    if (createDbaasKafkaUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasKafkaUserRequest' when calling createDbaasRedisUser");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{service-name}/user"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasKafkaUserRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a DBaaS Grafana service
   * @param name  (required)
   * @param createDbaasServiceGrafanaRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServiceGrafana(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServiceGrafanaWithHttpInfo(name, createDbaasServiceGrafanaRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create a DBaaS Grafana service
   * @param name  (required)
   * @param createDbaasServiceGrafanaRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServiceGrafanaWithHttpInfo(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServiceGrafanaRequestBuilder(name, createDbaasServiceGrafanaRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServiceGrafana", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServiceGrafanaRequestBuilder(String name, CreateDbaasServiceGrafanaRequest createDbaasServiceGrafanaRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServiceGrafana");
    }
    // verify the required parameter 'createDbaasServiceGrafanaRequest' is set
    if (createDbaasServiceGrafanaRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServiceGrafanaRequest' when calling createDbaasServiceGrafana");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-grafana/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasServiceGrafanaRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Kafka service
   * Create a DBaaS Kafka service
   * @param name  (required)
   * @param createDbaasServiceKafkaRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServiceKafka(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServiceKafkaWithHttpInfo(name, createDbaasServiceKafkaRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Kafka service
   * Create a DBaaS Kafka service
   * @param name  (required)
   * @param createDbaasServiceKafkaRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServiceKafkaWithHttpInfo(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServiceKafkaRequestBuilder(name, createDbaasServiceKafkaRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServiceKafka", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServiceKafkaRequestBuilder(String name, CreateDbaasServiceKafkaRequest createDbaasServiceKafkaRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServiceKafka");
    }
    // verify the required parameter 'createDbaasServiceKafkaRequest' is set
    if (createDbaasServiceKafkaRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServiceKafkaRequest' when calling createDbaasServiceKafka");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasServiceKafkaRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS MySQL service
   * Create a DBaaS MySQL service
   * @param name  (required)
   * @param createDbaasServiceMysqlRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServiceMysql(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServiceMysqlWithHttpInfo(name, createDbaasServiceMysqlRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS MySQL service
   * Create a DBaaS MySQL service
   * @param name  (required)
   * @param createDbaasServiceMysqlRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServiceMysqlWithHttpInfo(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServiceMysqlRequestBuilder(name, createDbaasServiceMysqlRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServiceMysql", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServiceMysqlRequestBuilder(String name, CreateDbaasServiceMysqlRequest createDbaasServiceMysqlRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServiceMysql");
    }
    // verify the required parameter 'createDbaasServiceMysqlRequest' is set
    if (createDbaasServiceMysqlRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServiceMysqlRequest' when calling createDbaasServiceMysql");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasServiceMysqlRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS OpenSearch service
   * Create a DBaaS OpenSearch service
   * @param name  (required)
   * @param createDbaasServiceOpensearchRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServiceOpensearch(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServiceOpensearchWithHttpInfo(name, createDbaasServiceOpensearchRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS OpenSearch service
   * Create a DBaaS OpenSearch service
   * @param name  (required)
   * @param createDbaasServiceOpensearchRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServiceOpensearchWithHttpInfo(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServiceOpensearchRequestBuilder(name, createDbaasServiceOpensearchRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServiceOpensearch", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServiceOpensearchRequestBuilder(String name, CreateDbaasServiceOpensearchRequest createDbaasServiceOpensearchRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServiceOpensearch");
    }
    // verify the required parameter 'createDbaasServiceOpensearchRequest' is set
    if (createDbaasServiceOpensearchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServiceOpensearchRequest' when calling createDbaasServiceOpensearch");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasServiceOpensearchRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS PostgreSQL service
   * 
   * @param name  (required)
   * @param createDbaasServicePgRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServicePg(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServicePgWithHttpInfo(name, createDbaasServicePgRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS PostgreSQL service
   * 
   * @param name  (required)
   * @param createDbaasServicePgRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServicePgWithHttpInfo(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServicePgRequestBuilder(name, createDbaasServicePgRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServicePg", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServicePgRequestBuilder(String name, CreateDbaasServicePgRequest createDbaasServicePgRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServicePg");
    }
    // verify the required parameter 'createDbaasServicePgRequest' is set
    if (createDbaasServicePgRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServicePgRequest' when calling createDbaasServicePg");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasServicePgRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS Redis service
   * Create a DBaaS Redis service
   * @param name  (required)
   * @param createDbaasServiceRedisRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasServiceRedis(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasServiceRedisWithHttpInfo(name, createDbaasServiceRedisRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS Redis service
   * Create a DBaaS Redis service
   * @param name  (required)
   * @param createDbaasServiceRedisRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasServiceRedisWithHttpInfo(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasServiceRedisRequestBuilder(name, createDbaasServiceRedisRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasServiceRedis", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasServiceRedisRequestBuilder(String name, CreateDbaasServiceRedisRequest createDbaasServiceRedisRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDbaasServiceRedis");
    }
    // verify the required parameter 'createDbaasServiceRedisRequest' is set
    if (createDbaasServiceRedisRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasServiceRedisRequest' when calling createDbaasServiceRedis");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasServiceRedisRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a DBaaS task to check migration
   * @param service  (required)
   * @param createDbaasTaskMigrationCheckRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDbaasTaskMigrationCheck(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDbaasTaskMigrationCheckWithHttpInfo(service, createDbaasTaskMigrationCheckRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create a DBaaS task to check migration
   * @param service  (required)
   * @param createDbaasTaskMigrationCheckRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDbaasTaskMigrationCheckWithHttpInfo(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDbaasTaskMigrationCheckRequestBuilder(service, createDbaasTaskMigrationCheckRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDbaasTaskMigrationCheck", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDbaasTaskMigrationCheckRequestBuilder(String service, CreateDbaasTaskMigrationCheckRequest createDbaasTaskMigrationCheckRequest) throws ApiException {
    // verify the required parameter 'service' is set
    if (service == null) {
      throw new ApiException(400, "Missing the required parameter 'service' when calling createDbaasTaskMigrationCheck");
    }
    // verify the required parameter 'createDbaasTaskMigrationCheckRequest' is set
    if (createDbaasTaskMigrationCheckRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDbaasTaskMigrationCheckRequest' when calling createDbaasTaskMigrationCheck");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-task-migration-check/{service}"
        .replace("{service}", ApiClient.urlEncode(service.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDbaasTaskMigrationCheckRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create DNS domain
   * 
   * @param createDnsDomainRequest  (required)
   * @return DnsDomain
   * @throws ApiException if fails to make API call
   */
  public DnsDomain createDnsDomain(CreateDnsDomainRequest createDnsDomainRequest) throws ApiException {
    ApiResponse<DnsDomain> localVarResponse = createDnsDomainWithHttpInfo(createDnsDomainRequest);
    return localVarResponse.getData();
  }

  /**
   * Create DNS domain
   * 
   * @param createDnsDomainRequest  (required)
   * @return ApiResponse&lt;DnsDomain&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DnsDomain> createDnsDomainWithHttpInfo(CreateDnsDomainRequest createDnsDomainRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDnsDomainRequestBuilder(createDnsDomainRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDnsDomain", localVarResponse);
        }
        return new ApiResponse<DnsDomain>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DnsDomain>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDnsDomainRequestBuilder(CreateDnsDomainRequest createDnsDomainRequest) throws ApiException {
    // verify the required parameter 'createDnsDomainRequest' is set
    if (createDnsDomainRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDnsDomainRequest' when calling createDnsDomain");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dns-domain";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDnsDomainRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create DNS domain record
   * 
   * @param domainId  (required)
   * @param createDnsDomainRecordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createDnsDomainRecord(UUID domainId, CreateDnsDomainRecordRequest createDnsDomainRecordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createDnsDomainRecordWithHttpInfo(domainId, createDnsDomainRecordRequest);
    return localVarResponse.getData();
  }

  /**
   * Create DNS domain record
   * 
   * @param domainId  (required)
   * @param createDnsDomainRecordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createDnsDomainRecordWithHttpInfo(UUID domainId, CreateDnsDomainRecordRequest createDnsDomainRecordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDnsDomainRecordRequestBuilder(domainId, createDnsDomainRecordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDnsDomainRecord", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDnsDomainRecordRequestBuilder(UUID domainId, CreateDnsDomainRecordRequest createDnsDomainRecordRequest) throws ApiException {
    // verify the required parameter 'domainId' is set
    if (domainId == null) {
      throw new ApiException(400, "Missing the required parameter 'domainId' when calling createDnsDomainRecord");
    }
    // verify the required parameter 'createDnsDomainRecordRequest' is set
    if (createDnsDomainRecordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createDnsDomainRecordRequest' when calling createDnsDomainRecord");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dns-domain/{domain-id}/record"
        .replace("{domain-id}", ApiClient.urlEncode(domainId.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createDnsDomainRecordRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create an Elastic IP
   * 
   * @param createElasticIpRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createElasticIp(CreateElasticIpRequest createElasticIpRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createElasticIpWithHttpInfo(createElasticIpRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Elastic IP
   * 
   * @param createElasticIpRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createElasticIpWithHttpInfo(CreateElasticIpRequest createElasticIpRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createElasticIpRequestBuilder(createElasticIpRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createElasticIp", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createElasticIpRequestBuilder(CreateElasticIpRequest createElasticIpRequest) throws ApiException {
    // verify the required parameter 'createElasticIpRequest' is set
    if (createElasticIpRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createElasticIpRequest' when calling createElasticIp");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/elastic-ip";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createElasticIpRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create IAM Role
   * 
   * @param createIamRoleRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createIamRole(CreateIamRoleRequest createIamRoleRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createIamRoleWithHttpInfo(createIamRoleRequest);
    return localVarResponse.getData();
  }

  /**
   * Create IAM Role
   * 
   * @param createIamRoleRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createIamRoleWithHttpInfo(CreateIamRoleRequest createIamRoleRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createIamRoleRequestBuilder(createIamRoleRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createIamRole", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createIamRoleRequestBuilder(CreateIamRoleRequest createIamRoleRequest) throws ApiException {
    // verify the required parameter 'createIamRoleRequest' is set
    if (createIamRoleRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createIamRoleRequest' when calling createIamRole");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createIamRoleRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a Compute instance
   * 
   * @param createInstanceRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createInstance(CreateInstanceRequest createInstanceRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createInstanceWithHttpInfo(createInstanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Compute instance
   * 
   * @param createInstanceRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createInstanceWithHttpInfo(CreateInstanceRequest createInstanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createInstanceRequestBuilder(createInstanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createInstanceRequestBuilder(CreateInstanceRequest createInstanceRequest) throws ApiException {
    // verify the required parameter 'createInstanceRequest' is set
    if (createInstanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createInstanceRequest' when calling createInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createInstanceRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create an Instance Pool
   * 
   * @param createInstancePoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createInstancePool(CreateInstancePoolRequest createInstancePoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createInstancePoolWithHttpInfo(createInstancePoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Instance Pool
   * 
   * @param createInstancePoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createInstancePoolWithHttpInfo(CreateInstancePoolRequest createInstancePoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createInstancePoolRequestBuilder(createInstancePoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createInstancePool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createInstancePoolRequestBuilder(CreateInstancePoolRequest createInstancePoolRequest) throws ApiException {
    // verify the required parameter 'createInstancePoolRequest' is set
    if (createInstancePoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createInstancePoolRequest' when calling createInstancePool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance-pool";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createInstancePoolRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a Load Balancer
   * 
   * @param createLoadBalancerRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createLoadBalancer(CreateLoadBalancerRequest createLoadBalancerRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createLoadBalancerWithHttpInfo(createLoadBalancerRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Load Balancer
   * 
   * @param createLoadBalancerRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createLoadBalancerWithHttpInfo(CreateLoadBalancerRequest createLoadBalancerRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createLoadBalancerRequestBuilder(createLoadBalancerRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createLoadBalancer", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createLoadBalancerRequestBuilder(CreateLoadBalancerRequest createLoadBalancerRequest) throws ApiException {
    // verify the required parameter 'createLoadBalancerRequest' is set
    if (createLoadBalancerRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createLoadBalancerRequest' when calling createLoadBalancer");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createLoadBalancerRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a Private Network
   * 
   * @param createPrivateNetworkRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createPrivateNetwork(CreatePrivateNetworkRequest createPrivateNetworkRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createPrivateNetworkWithHttpInfo(createPrivateNetworkRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Private Network
   * 
   * @param createPrivateNetworkRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createPrivateNetworkWithHttpInfo(CreatePrivateNetworkRequest createPrivateNetworkRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createPrivateNetworkRequestBuilder(createPrivateNetworkRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createPrivateNetwork", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createPrivateNetworkRequestBuilder(CreatePrivateNetworkRequest createPrivateNetworkRequest) throws ApiException {
    // verify the required parameter 'createPrivateNetworkRequest' is set
    if (createPrivateNetworkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createPrivateNetworkRequest' when calling createPrivateNetwork");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/private-network";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createPrivateNetworkRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a Security Group
   * 
   * @param createSecurityGroupRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createSecurityGroup(CreateSecurityGroupRequest createSecurityGroupRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createSecurityGroupWithHttpInfo(createSecurityGroupRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Security Group
   * 
   * @param createSecurityGroupRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createSecurityGroupWithHttpInfo(CreateSecurityGroupRequest createSecurityGroupRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSecurityGroupRequestBuilder(createSecurityGroupRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createSecurityGroup", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSecurityGroupRequestBuilder(CreateSecurityGroupRequest createSecurityGroupRequest) throws ApiException {
    // verify the required parameter 'createSecurityGroupRequest' is set
    if (createSecurityGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createSecurityGroupRequest' when calling createSecurityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security-group";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createSecurityGroupRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create an SKS cluster
   * 
   * @param createSksClusterRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createSksCluster(CreateSksClusterRequest createSksClusterRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createSksClusterWithHttpInfo(createSksClusterRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an SKS cluster
   * 
   * @param createSksClusterRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createSksClusterWithHttpInfo(CreateSksClusterRequest createSksClusterRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSksClusterRequestBuilder(createSksClusterRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createSksCluster", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSksClusterRequestBuilder(CreateSksClusterRequest createSksClusterRequest) throws ApiException {
    // verify the required parameter 'createSksClusterRequest' is set
    if (createSksClusterRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createSksClusterRequest' when calling createSksCluster");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createSksClusterRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new SKS Nodepool
   * 
   * @param id  (required)
   * @param createSksNodepoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createSksNodepool(UUID id, CreateSksNodepoolRequest createSksNodepoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = createSksNodepoolWithHttpInfo(id, createSksNodepoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a new SKS Nodepool
   * 
   * @param id  (required)
   * @param createSksNodepoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createSksNodepoolWithHttpInfo(UUID id, CreateSksNodepoolRequest createSksNodepoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSksNodepoolRequestBuilder(id, createSksNodepoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createSksNodepool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSksNodepoolRequestBuilder(UUID id, CreateSksNodepoolRequest createSksNodepoolRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createSksNodepool");
    }
    // verify the required parameter 'createSksNodepoolRequest' is set
    if (createSksNodepoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createSksNodepoolRequest' when calling createSksNodepool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(createSksNodepoolRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a Snapshot of a Compute instance
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation createSnapshot(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = createSnapshotWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Create a Snapshot of a Compute instance
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> createSnapshotWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSnapshotRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createSnapshot", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSnapshotRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createSnapshot");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:create-snapshot"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an Anti-affinity Group
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteAntiAffinityGroup(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteAntiAffinityGroupWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete an Anti-affinity Group
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteAntiAffinityGroupWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAntiAffinityGroupRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAntiAffinityGroup", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAntiAffinityGroupRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAntiAffinityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/anti-affinity-group/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an API key
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteApiKey(String id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteApiKeyWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete an API key
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteApiKeyWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteApiKeyRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteApiKey", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteApiKeyRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiKey");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api-key/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a block storage snapshot, data will be unrecoverable
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteBlockStorageSnapshot(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteBlockStorageSnapshotWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a block storage snapshot, data will be unrecoverable
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteBlockStorageSnapshotWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteBlockStorageSnapshotRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteBlockStorageSnapshot", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteBlockStorageSnapshotRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteBlockStorageSnapshot");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage-snapshot/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a block storage volume, data will be unrecoverable
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteBlockStorageVolume(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteBlockStorageVolumeWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a block storage volume, data will be unrecoverable
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteBlockStorageVolumeWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteBlockStorageVolumeRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteBlockStorageVolumeRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteBlockStorageVolume");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS Integration
   * Delete a DBaaS Integration
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasIntegration(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasIntegrationWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS Integration
   * Delete a DBaaS Integration
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasIntegrationWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasIntegrationRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasIntegration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasIntegrationRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteDbaasIntegration");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Kafka ACL entry
   * 
   * @param name  (required)
   * @param aclId  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasKafkaSchemaRegistryAclConfig(String name, String aclId) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(name, aclId);
    return localVarResponse.getData();
  }

  /**
   * Delete a Kafka ACL entry
   * 
   * @param name  (required)
   * @param aclId  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasKafkaSchemaRegistryAclConfigWithHttpInfo(String name, String aclId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasKafkaSchemaRegistryAclConfigRequestBuilder(name, aclId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasKafkaSchemaRegistryAclConfig", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasKafkaSchemaRegistryAclConfigRequestBuilder(String name, String aclId) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasKafkaSchemaRegistryAclConfig");
    }
    // verify the required parameter 'aclId' is set
    if (aclId == null) {
      throw new ApiException(400, "Missing the required parameter 'aclId' when calling deleteDbaasKafkaSchemaRegistryAclConfig");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/schema-registry/acl-config/{acl-id}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{acl-id}", ApiClient.urlEncode(aclId.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Kafka ACL entry
   * 
   * @param name  (required)
   * @param aclId  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasKafkaTopicAclConfig(String name, String aclId) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasKafkaTopicAclConfigWithHttpInfo(name, aclId);
    return localVarResponse.getData();
  }

  /**
   * Delete a Kafka ACL entry
   * 
   * @param name  (required)
   * @param aclId  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasKafkaTopicAclConfigWithHttpInfo(String name, String aclId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasKafkaTopicAclConfigRequestBuilder(name, aclId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasKafkaTopicAclConfig", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasKafkaTopicAclConfigRequestBuilder(String name, String aclId) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasKafkaTopicAclConfig");
    }
    // verify the required parameter 'aclId' is set
    if (aclId == null) {
      throw new ApiException(400, "Missing the required parameter 'aclId' when calling deleteDbaasKafkaTopicAclConfig");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/topic/acl-config/{acl-id}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{acl-id}", ApiClient.urlEncode(aclId.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS kafka user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasKafkaUser(String serviceName, String username) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasKafkaUserWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS kafka user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasKafkaUserWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasKafkaUserRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasKafkaUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasKafkaUserRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasKafkaUser");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteDbaasKafkaUser");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{service-name}/user/{username}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS MySQL database
   * 
   * @param serviceName  (required)
   * @param databaseName  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasMysqlDatabase(String serviceName, String databaseName) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasMysqlDatabaseWithHttpInfo(serviceName, databaseName);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS MySQL database
   * 
   * @param serviceName  (required)
   * @param databaseName  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasMysqlDatabaseWithHttpInfo(String serviceName, String databaseName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasMysqlDatabaseRequestBuilder(serviceName, databaseName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasMysqlDatabase", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasMysqlDatabaseRequestBuilder(String serviceName, String databaseName) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasMysqlDatabase");
    }
    // verify the required parameter 'databaseName' is set
    if (databaseName == null) {
      throw new ApiException(400, "Missing the required parameter 'databaseName' when calling deleteDbaasMysqlDatabase");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/database/{database-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{database-name}", ApiClient.urlEncode(databaseName.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasMysqlUser(String serviceName, String username) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasMysqlUserWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasMysqlUserWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasMysqlUserRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasMysqlUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasMysqlUserRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasMysqlUser");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteDbaasMysqlUser");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/user/{username}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasOpensearchUser(String serviceName, String username) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasOpensearchUserWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasOpensearchUserWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasOpensearchUserRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasOpensearchUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasOpensearchUserRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasOpensearchUser");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteDbaasOpensearchUser");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{service-name}/user/{username}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param connectionPoolName  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasPgConnectionPool(String serviceName, String connectionPoolName) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasPgConnectionPoolWithHttpInfo(serviceName, connectionPoolName);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param connectionPoolName  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasPgConnectionPoolWithHttpInfo(String serviceName, String connectionPoolName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasPgConnectionPoolRequestBuilder(serviceName, connectionPoolName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasPgConnectionPool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasPgConnectionPoolRequestBuilder(String serviceName, String connectionPoolName) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasPgConnectionPool");
    }
    // verify the required parameter 'connectionPoolName' is set
    if (connectionPoolName == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionPoolName' when calling deleteDbaasPgConnectionPool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/connection-pool/{connection-pool-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{connection-pool-name}", ApiClient.urlEncode(connectionPoolName.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS Postgres database
   * 
   * @param serviceName  (required)
   * @param databaseName  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasPgDatabase(String serviceName, String databaseName) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasPgDatabaseWithHttpInfo(serviceName, databaseName);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS Postgres database
   * 
   * @param serviceName  (required)
   * @param databaseName  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasPgDatabaseWithHttpInfo(String serviceName, String databaseName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasPgDatabaseRequestBuilder(serviceName, databaseName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasPgDatabase", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasPgDatabaseRequestBuilder(String serviceName, String databaseName) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasPgDatabase");
    }
    // verify the required parameter 'databaseName' is set
    if (databaseName == null) {
      throw new ApiException(400, "Missing the required parameter 'databaseName' when calling deleteDbaasPgDatabase");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/database/{database-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{database-name}", ApiClient.urlEncode(databaseName.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasPostgresUser(String serviceName, String username) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasPostgresUserWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasPostgresUserWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasPostgresUserRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasPostgresUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasPostgresUserRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasPostgresUser");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteDbaasPostgresUser");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/user/{username}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasRedisUser(String serviceName, String username) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasRedisUserWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasRedisUserWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasRedisUserRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasRedisUser", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasRedisUserRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling deleteDbaasRedisUser");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteDbaasRedisUser");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{service-name}/user/{username}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a DBaaS service
   * Delete a DBaaS service
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasService(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a DBaaS service
   * Delete a DBaaS service
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasService", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasService");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Grafana service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServiceGrafana(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceGrafanaWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a Grafana service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceGrafanaWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceGrafanaRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServiceGrafana", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceGrafanaRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServiceGrafana");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-grafana/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Kafka service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServiceKafka(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceKafkaWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a Kafka service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceKafkaWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceKafkaRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServiceKafka", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceKafkaRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServiceKafka");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a MySQL service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServiceMysql(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceMysqlWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a MySQL service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceMysqlWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceMysqlRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServiceMysql", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceMysqlRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServiceMysql");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a OpenSearch service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServiceOpensearch(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceOpensearchWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a OpenSearch service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceOpensearchWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceOpensearchRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServiceOpensearch", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceOpensearchRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServiceOpensearch");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Postgres service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServicePg(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServicePgWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a Postgres service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServicePgWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServicePgRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServicePg", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServicePgRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServicePg");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Redis service
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDbaasServiceRedis(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDbaasServiceRedisWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a Redis service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDbaasServiceRedisWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDbaasServiceRedisRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDbaasServiceRedis", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDbaasServiceRedisRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteDbaasServiceRedis");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete DNS Domain
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDnsDomain(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDnsDomainWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete DNS Domain
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDnsDomainWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDnsDomainRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDnsDomain", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDnsDomainRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteDnsDomain");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dns-domain/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete DNS domain record
   * 
   * @param domainId  (required)
   * @param recordId  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteDnsDomainRecord(UUID domainId, UUID recordId) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteDnsDomainRecordWithHttpInfo(domainId, recordId);
    return localVarResponse.getData();
  }

  /**
   * Delete DNS domain record
   * 
   * @param domainId  (required)
   * @param recordId  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteDnsDomainRecordWithHttpInfo(UUID domainId, UUID recordId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDnsDomainRecordRequestBuilder(domainId, recordId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDnsDomainRecord", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDnsDomainRecordRequestBuilder(UUID domainId, UUID recordId) throws ApiException {
    // verify the required parameter 'domainId' is set
    if (domainId == null) {
      throw new ApiException(400, "Missing the required parameter 'domainId' when calling deleteDnsDomainRecord");
    }
    // verify the required parameter 'recordId' is set
    if (recordId == null) {
      throw new ApiException(400, "Missing the required parameter 'recordId' when calling deleteDnsDomainRecord");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dns-domain/{domain-id}/record/{record-id}"
        .replace("{domain-id}", ApiClient.urlEncode(domainId.toString()))
        .replace("{record-id}", ApiClient.urlEncode(recordId.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an Elastic IP
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteElasticIp(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteElasticIpWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete an Elastic IP
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteElasticIpWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteElasticIpRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteElasticIp", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteElasticIpRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteElasticIp");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/elastic-ip/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete IAM Role
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteIamRole(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteIamRoleWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete IAM Role
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteIamRoleWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteIamRoleRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteIamRole", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteIamRoleRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteIamRole");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Compute instance
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteInstance(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteInstanceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a Compute instance
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteInstanceWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteInstanceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteInstanceRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an Instance Pool
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteInstancePool(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteInstancePoolWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete an Instance Pool
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteInstancePoolWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteInstancePoolRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteInstancePool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteInstancePoolRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteInstancePool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance-pool/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Load Balancer
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteLoadBalancer(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteLoadBalancerWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a Load Balancer
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteLoadBalancerWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteLoadBalancerRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteLoadBalancer", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteLoadBalancerRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteLoadBalancer");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Load Balancer Service
   * 
   * @param id  (required)
   * @param serviceId  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteLoadBalancerService(UUID id, UUID serviceId) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteLoadBalancerServiceWithHttpInfo(id, serviceId);
    return localVarResponse.getData();
  }

  /**
   * Delete a Load Balancer Service
   * 
   * @param id  (required)
   * @param serviceId  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteLoadBalancerServiceWithHttpInfo(UUID id, UUID serviceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteLoadBalancerServiceRequestBuilder(id, serviceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteLoadBalancerService", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteLoadBalancerServiceRequestBuilder(UUID id, UUID serviceId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteLoadBalancerService");
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceId' when calling deleteLoadBalancerService");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer/{id}/service/{service-id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{service-id}", ApiClient.urlEncode(serviceId.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Private Network
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deletePrivateNetwork(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deletePrivateNetworkWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a Private Network
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deletePrivateNetworkWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deletePrivateNetworkRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deletePrivateNetwork", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deletePrivateNetworkRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deletePrivateNetwork");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/private-network/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete the PTR DNS record for an elastic IP
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteReverseDnsElasticIp(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteReverseDnsElasticIpWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete the PTR DNS record for an elastic IP
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteReverseDnsElasticIpWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteReverseDnsElasticIpRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteReverseDnsElasticIp", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteReverseDnsElasticIpRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteReverseDnsElasticIp");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/reverse-dns/elastic-ip/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete the PTR DNS record for an instance
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteReverseDnsInstance(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteReverseDnsInstanceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete the PTR DNS record for an instance
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteReverseDnsInstanceWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteReverseDnsInstanceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteReverseDnsInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteReverseDnsInstanceRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteReverseDnsInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/reverse-dns/instance/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Security Group rule
   * 
   * @param id  (required)
   * @param ruleId  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteRuleFromSecurityGroup(UUID id, UUID ruleId) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteRuleFromSecurityGroupWithHttpInfo(id, ruleId);
    return localVarResponse.getData();
  }

  /**
   * Delete a Security Group rule
   * 
   * @param id  (required)
   * @param ruleId  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteRuleFromSecurityGroupWithHttpInfo(UUID id, UUID ruleId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRuleFromSecurityGroupRequestBuilder(id, ruleId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteRuleFromSecurityGroup", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRuleFromSecurityGroupRequestBuilder(UUID id, UUID ruleId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRuleFromSecurityGroup");
    }
    // verify the required parameter 'ruleId' is set
    if (ruleId == null) {
      throw new ApiException(400, "Missing the required parameter 'ruleId' when calling deleteRuleFromSecurityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security-group/{id}/rules/{rule-id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{rule-id}", ApiClient.urlEncode(ruleId.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Security Group
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteSecurityGroup(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteSecurityGroupWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a Security Group
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteSecurityGroupWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSecurityGroupRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSecurityGroup", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSecurityGroupRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteSecurityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security-group/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an SKS cluster
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteSksCluster(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteSksClusterWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete an SKS cluster
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteSksClusterWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSksClusterRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSksCluster", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSksClusterRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteSksCluster");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteSksNodepool(UUID id, UUID sksNodepoolId) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteSksNodepoolWithHttpInfo(id, sksNodepoolId);
    return localVarResponse.getData();
  }

  /**
   * Delete an SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteSksNodepoolWithHttpInfo(UUID id, UUID sksNodepoolId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSksNodepoolRequestBuilder(id, sksNodepoolId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSksNodepool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSksNodepoolRequestBuilder(UUID id, UUID sksNodepoolId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteSksNodepool");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling deleteSksNodepool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Snapshot
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteSnapshot(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteSnapshotWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a Snapshot
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteSnapshotWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSnapshotRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSnapshot", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSnapshotRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteSnapshot");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/snapshot/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a SSH key
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteSshKey(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteSshKeyWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Delete a SSH key
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteSshKeyWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSshKeyRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSshKey", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSshKeyRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteSshKey");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ssh-key/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Template
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation deleteTemplate(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = deleteTemplateWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Delete a Template
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> deleteTemplateWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteTemplateRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteTemplate", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteTemplateRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteTemplate");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/template/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detach block storage volume
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation detachBlockStorageVolume(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = detachBlockStorageVolumeWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Detach block storage volume
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> detachBlockStorageVolumeWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = detachBlockStorageVolumeRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("detachBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder detachBlockStorageVolumeRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling detachBlockStorageVolume");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}:detach"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detach a Compute instance from an Elastic IP
   * 
   * @param id  (required)
   * @param attachBlockStorageVolumeToInstanceRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation detachInstanceFromElasticIp(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = detachInstanceFromElasticIpWithHttpInfo(id, attachBlockStorageVolumeToInstanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Detach a Compute instance from an Elastic IP
   * 
   * @param id  (required)
   * @param attachBlockStorageVolumeToInstanceRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> detachInstanceFromElasticIpWithHttpInfo(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = detachInstanceFromElasticIpRequestBuilder(id, attachBlockStorageVolumeToInstanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("detachInstanceFromElasticIp", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder detachInstanceFromElasticIpRequestBuilder(UUID id, AttachBlockStorageVolumeToInstanceRequest attachBlockStorageVolumeToInstanceRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling detachInstanceFromElasticIp");
    }
    // verify the required parameter 'attachBlockStorageVolumeToInstanceRequest' is set
    if (attachBlockStorageVolumeToInstanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'attachBlockStorageVolumeToInstanceRequest' when calling detachInstanceFromElasticIp");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/elastic-ip/{id}:detach"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(attachBlockStorageVolumeToInstanceRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detach a Compute instance from a Private Network
   * 
   * @param id  (required)
   * @param detachInstanceFromPrivateNetworkRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation detachInstanceFromPrivateNetwork(UUID id, DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = detachInstanceFromPrivateNetworkWithHttpInfo(id, detachInstanceFromPrivateNetworkRequest);
    return localVarResponse.getData();
  }

  /**
   * Detach a Compute instance from a Private Network
   * 
   * @param id  (required)
   * @param detachInstanceFromPrivateNetworkRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> detachInstanceFromPrivateNetworkWithHttpInfo(UUID id, DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = detachInstanceFromPrivateNetworkRequestBuilder(id, detachInstanceFromPrivateNetworkRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("detachInstanceFromPrivateNetwork", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder detachInstanceFromPrivateNetworkRequestBuilder(UUID id, DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling detachInstanceFromPrivateNetwork");
    }
    // verify the required parameter 'detachInstanceFromPrivateNetworkRequest' is set
    if (detachInstanceFromPrivateNetworkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'detachInstanceFromPrivateNetworkRequest' when calling detachInstanceFromPrivateNetwork");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/private-network/{id}:detach"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(detachInstanceFromPrivateNetworkRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Detach a Compute instance from a Security Group
   * 
   * @param id  (required)
   * @param detachInstanceFromPrivateNetworkRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation detachInstanceFromSecurityGroup(UUID id, DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = detachInstanceFromSecurityGroupWithHttpInfo(id, detachInstanceFromPrivateNetworkRequest);
    return localVarResponse.getData();
  }

  /**
   * Detach a Compute instance from a Security Group
   * 
   * @param id  (required)
   * @param detachInstanceFromPrivateNetworkRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> detachInstanceFromSecurityGroupWithHttpInfo(UUID id, DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = detachInstanceFromSecurityGroupRequestBuilder(id, detachInstanceFromPrivateNetworkRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("detachInstanceFromSecurityGroup", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder detachInstanceFromSecurityGroupRequestBuilder(UUID id, DetachInstanceFromPrivateNetworkRequest detachInstanceFromPrivateNetworkRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling detachInstanceFromSecurityGroup");
    }
    // verify the required parameter 'detachInstanceFromPrivateNetworkRequest' is set
    if (detachInstanceFromPrivateNetworkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'detachInstanceFromPrivateNetworkRequest' when calling detachInstanceFromSecurityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security-group/{id}:detach"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(detachInstanceFromPrivateNetworkRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Evict Instance Pool members
   * This operation evicts the specified Compute instances member from the Instance Pool, shrinking it to &#x60;&amp;lt;current pool size&amp;gt; - &amp;lt;# evicted members&amp;gt;&#x60;.
   * @param id  (required)
   * @param evictInstancePoolMembersRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation evictInstancePoolMembers(UUID id, EvictInstancePoolMembersRequest evictInstancePoolMembersRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = evictInstancePoolMembersWithHttpInfo(id, evictInstancePoolMembersRequest);
    return localVarResponse.getData();
  }

  /**
   * Evict Instance Pool members
   * This operation evicts the specified Compute instances member from the Instance Pool, shrinking it to &#x60;&amp;lt;current pool size&amp;gt; - &amp;lt;# evicted members&amp;gt;&#x60;.
   * @param id  (required)
   * @param evictInstancePoolMembersRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> evictInstancePoolMembersWithHttpInfo(UUID id, EvictInstancePoolMembersRequest evictInstancePoolMembersRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evictInstancePoolMembersRequestBuilder(id, evictInstancePoolMembersRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evictInstancePoolMembers", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evictInstancePoolMembersRequestBuilder(UUID id, EvictInstancePoolMembersRequest evictInstancePoolMembersRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling evictInstancePoolMembers");
    }
    // verify the required parameter 'evictInstancePoolMembersRequest' is set
    if (evictInstancePoolMembersRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'evictInstancePoolMembersRequest' when calling evictInstancePoolMembers");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance-pool/{id}:evict"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(evictInstancePoolMembersRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Evict Nodepool members
   * This operation evicts the specified Compute instances member from the Nodepool, shrinking it to &#x60;&amp;lt;current nodepool size&amp;gt; - &amp;lt;# evicted members&amp;gt;&#x60;.
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param evictSksNodepoolMembersRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation evictSksNodepoolMembers(UUID id, UUID sksNodepoolId, EvictSksNodepoolMembersRequest evictSksNodepoolMembersRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = evictSksNodepoolMembersWithHttpInfo(id, sksNodepoolId, evictSksNodepoolMembersRequest);
    return localVarResponse.getData();
  }

  /**
   * Evict Nodepool members
   * This operation evicts the specified Compute instances member from the Nodepool, shrinking it to &#x60;&amp;lt;current nodepool size&amp;gt; - &amp;lt;# evicted members&amp;gt;&#x60;.
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param evictSksNodepoolMembersRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> evictSksNodepoolMembersWithHttpInfo(UUID id, UUID sksNodepoolId, EvictSksNodepoolMembersRequest evictSksNodepoolMembersRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evictSksNodepoolMembersRequestBuilder(id, sksNodepoolId, evictSksNodepoolMembersRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evictSksNodepoolMembers", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evictSksNodepoolMembersRequestBuilder(UUID id, UUID sksNodepoolId, EvictSksNodepoolMembersRequest evictSksNodepoolMembersRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling evictSksNodepoolMembers");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling evictSksNodepoolMembers");
    }
    // verify the required parameter 'evictSksNodepoolMembersRequest' is set
    if (evictSksNodepoolMembersRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'evictSksNodepoolMembersRequest' when calling evictSksNodepoolMembers");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}:evict"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(evictSksNodepoolMembersRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Export a Snapshot
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation exportSnapshot(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = exportSnapshotWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Export a Snapshot
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> exportSnapshotWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportSnapshotRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportSnapshot", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportSnapshotRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportSnapshot");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/snapshot/{id}:export"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Generate a new Kubeconfig file for a SKS cluster
   * This operation returns a Kubeconfig file encoded in base64.
   * @param id  (required)
   * @param sksKubeconfigRequest  (required)
   * @return GenerateSksClusterKubeconfig200Response
   * @throws ApiException if fails to make API call
   */
  public GenerateSksClusterKubeconfig200Response generateSksClusterKubeconfig(UUID id, SksKubeconfigRequest sksKubeconfigRequest) throws ApiException {
    ApiResponse<GenerateSksClusterKubeconfig200Response> localVarResponse = generateSksClusterKubeconfigWithHttpInfo(id, sksKubeconfigRequest);
    return localVarResponse.getData();
  }

  /**
   * Generate a new Kubeconfig file for a SKS cluster
   * This operation returns a Kubeconfig file encoded in base64.
   * @param id  (required)
   * @param sksKubeconfigRequest  (required)
   * @return ApiResponse&lt;GenerateSksClusterKubeconfig200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GenerateSksClusterKubeconfig200Response> generateSksClusterKubeconfigWithHttpInfo(UUID id, SksKubeconfigRequest sksKubeconfigRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = generateSksClusterKubeconfigRequestBuilder(id, sksKubeconfigRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("generateSksClusterKubeconfig", localVarResponse);
        }
        return new ApiResponse<GenerateSksClusterKubeconfig200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GenerateSksClusterKubeconfig200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder generateSksClusterKubeconfigRequestBuilder(UUID id, SksKubeconfigRequest sksKubeconfigRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling generateSksClusterKubeconfig");
    }
    // verify the required parameter 'sksKubeconfigRequest' is set
    if (sksKubeconfigRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'sksKubeconfigRequest' when calling generateSksClusterKubeconfig");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster-kubeconfig/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(sksKubeconfigRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Anti-affinity Group details
   * 
   * @param id  (required)
   * @return AntiAffinityGroup
   * @throws ApiException if fails to make API call
   */
  public AntiAffinityGroup getAntiAffinityGroup(UUID id) throws ApiException {
    ApiResponse<AntiAffinityGroup> localVarResponse = getAntiAffinityGroupWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Anti-affinity Group details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;AntiAffinityGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AntiAffinityGroup> getAntiAffinityGroupWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAntiAffinityGroupRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAntiAffinityGroup", localVarResponse);
        }
        return new ApiResponse<AntiAffinityGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AntiAffinityGroup>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAntiAffinityGroupRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAntiAffinityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/anti-affinity-group/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get API key
   * 
   * @param id  (required)
   * @return IamApiKey
   * @throws ApiException if fails to make API call
   */
  public IamApiKey getApiKey(String id) throws ApiException {
    ApiResponse<IamApiKey> localVarResponse = getApiKeyWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get API key
   * 
   * @param id  (required)
   * @return ApiResponse&lt;IamApiKey&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IamApiKey> getApiKeyWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getApiKeyRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getApiKey", localVarResponse);
        }
        return new ApiResponse<IamApiKey>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IamApiKey>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getApiKeyRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getApiKey");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api-key/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve block storage snapshot details
   * 
   * @param id  (required)
   * @return BlockStorageSnapshot
   * @throws ApiException if fails to make API call
   */
  public BlockStorageSnapshot getBlockStorageSnapshot(UUID id) throws ApiException {
    ApiResponse<BlockStorageSnapshot> localVarResponse = getBlockStorageSnapshotWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve block storage snapshot details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;BlockStorageSnapshot&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BlockStorageSnapshot> getBlockStorageSnapshotWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBlockStorageSnapshotRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBlockStorageSnapshot", localVarResponse);
        }
        return new ApiResponse<BlockStorageSnapshot>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BlockStorageSnapshot>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBlockStorageSnapshotRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getBlockStorageSnapshot");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage-snapshot/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve block storage volume details
   * 
   * @param id  (required)
   * @return BlockStorageVolume
   * @throws ApiException if fails to make API call
   */
  public BlockStorageVolume getBlockStorageVolume(UUID id) throws ApiException {
    ApiResponse<BlockStorageVolume> localVarResponse = getBlockStorageVolumeWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve block storage volume details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;BlockStorageVolume&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BlockStorageVolume> getBlockStorageVolumeWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBlockStorageVolumeRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<BlockStorageVolume>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BlockStorageVolume>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBlockStorageVolumeRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getBlockStorageVolume");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS CA Certificate
   * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
   * @return GetDbaasCaCertificate200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasCaCertificate200Response getDbaasCaCertificate() throws ApiException {
    ApiResponse<GetDbaasCaCertificate200Response> localVarResponse = getDbaasCaCertificateWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS CA Certificate
   * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
   * @return ApiResponse&lt;GetDbaasCaCertificate200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasCaCertificate200Response> getDbaasCaCertificateWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasCaCertificateRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasCaCertificate", localVarResponse);
        }
        return new ApiResponse<GetDbaasCaCertificate200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasCaCertificate200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasCaCertificateRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-ca-certificate";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS Integration
   * Get a DBaaS Integration
   * @param id  (required)
   * @return DbaasIntegration
   * @throws ApiException if fails to make API call
   */
  public DbaasIntegration getDbaasIntegration(UUID id) throws ApiException {
    ApiResponse<DbaasIntegration> localVarResponse = getDbaasIntegrationWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS Integration
   * Get a DBaaS Integration
   * @param id  (required)
   * @return ApiResponse&lt;DbaasIntegration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasIntegration> getDbaasIntegrationWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasIntegrationRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasIntegration", localVarResponse);
        }
        return new ApiResponse<DbaasIntegration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasIntegration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasIntegrationRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getDbaasIntegration");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS kafka ACL configuration
   * 
   * @param name  (required)
   * @return DbaasKafkaAcls
   * @throws ApiException if fails to make API call
   */
  public DbaasKafkaAcls getDbaasKafkaAclConfig(String name) throws ApiException {
    ApiResponse<DbaasKafkaAcls> localVarResponse = getDbaasKafkaAclConfigWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS kafka ACL configuration
   * 
   * @param name  (required)
   * @return ApiResponse&lt;DbaasKafkaAcls&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasKafkaAcls> getDbaasKafkaAclConfigWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasKafkaAclConfigRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasKafkaAclConfig", localVarResponse);
        }
        return new ApiResponse<DbaasKafkaAcls>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasKafkaAcls>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasKafkaAclConfigRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasKafkaAclConfig");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/acl-config"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS migration status
   * Get a DBaaS migration status
   * @param name  (required)
   * @return DbaasMigrationStatus
   * @throws ApiException if fails to make API call
   */
  public DbaasMigrationStatus getDbaasMigrationStatus(String name) throws ApiException {
    ApiResponse<DbaasMigrationStatus> localVarResponse = getDbaasMigrationStatusWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS migration status
   * Get a DBaaS migration status
   * @param name  (required)
   * @return ApiResponse&lt;DbaasMigrationStatus&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasMigrationStatus> getDbaasMigrationStatusWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasMigrationStatusRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasMigrationStatus", localVarResponse);
        }
        return new ApiResponse<DbaasMigrationStatus>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasMigrationStatus>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasMigrationStatusRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasMigrationStatus");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-migration-status/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS OpenSearch ACL configuration
   * 
   * @param name  (required)
   * @return DbaasOpensearchAclConfig
   * @throws ApiException if fails to make API call
   */
  public DbaasOpensearchAclConfig getDbaasOpensearchAclConfig(String name) throws ApiException {
    ApiResponse<DbaasOpensearchAclConfig> localVarResponse = getDbaasOpensearchAclConfigWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS OpenSearch ACL configuration
   * 
   * @param name  (required)
   * @return ApiResponse&lt;DbaasOpensearchAclConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasOpensearchAclConfig> getDbaasOpensearchAclConfigWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasOpensearchAclConfigRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasOpensearchAclConfig", localVarResponse);
        }
        return new ApiResponse<DbaasOpensearchAclConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasOpensearchAclConfig>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasOpensearchAclConfigRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasOpensearchAclConfig");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}/acl-config"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS Grafana service
   * 
   * @param name  (required)
   * @return DbaasServiceGrafana
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceGrafana getDbaasServiceGrafana(String name) throws ApiException {
    ApiResponse<DbaasServiceGrafana> localVarResponse = getDbaasServiceGrafanaWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS Grafana service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServiceGrafana&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceGrafana> getDbaasServiceGrafanaWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceGrafanaRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceGrafana", localVarResponse);
        }
        return new ApiResponse<DbaasServiceGrafana>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceGrafana>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceGrafanaRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServiceGrafana");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-grafana/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS Kafka service
   * 
   * @param name  (required)
   * @return DbaasServiceKafka
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceKafka getDbaasServiceKafka(String name) throws ApiException {
    ApiResponse<DbaasServiceKafka> localVarResponse = getDbaasServiceKafkaWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS Kafka service
   * 
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServiceKafka&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceKafka> getDbaasServiceKafkaWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceKafkaRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceKafka", localVarResponse);
        }
        return new ApiResponse<DbaasServiceKafka>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceKafka>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceKafkaRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServiceKafka");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get logs of DBaaS service
   * Get logs of DBaaS service
   * @param serviceName  (required)
   * @param getDbaasServiceLogsRequest  (required)
   * @return DbaasServiceLogs
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceLogs getDbaasServiceLogs(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest) throws ApiException {
    ApiResponse<DbaasServiceLogs> localVarResponse = getDbaasServiceLogsWithHttpInfo(serviceName, getDbaasServiceLogsRequest);
    return localVarResponse.getData();
  }

  /**
   * Get logs of DBaaS service
   * Get logs of DBaaS service
   * @param serviceName  (required)
   * @param getDbaasServiceLogsRequest  (required)
   * @return ApiResponse&lt;DbaasServiceLogs&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceLogs> getDbaasServiceLogsWithHttpInfo(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceLogsRequestBuilder(serviceName, getDbaasServiceLogsRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceLogs", localVarResponse);
        }
        return new ApiResponse<DbaasServiceLogs>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceLogs>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceLogsRequestBuilder(String serviceName, GetDbaasServiceLogsRequest getDbaasServiceLogsRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling getDbaasServiceLogs");
    }
    // verify the required parameter 'getDbaasServiceLogsRequest' is set
    if (getDbaasServiceLogsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'getDbaasServiceLogsRequest' when calling getDbaasServiceLogs");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service-logs/{service-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(getDbaasServiceLogsRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get metrics of DBaaS service
   * Get metrics of DBaaS service
   * @param serviceName  (required)
   * @param getDbaasServiceMetricsRequest  (required)
   * @return GetDbaasServiceMetrics200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasServiceMetrics200Response getDbaasServiceMetrics(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest) throws ApiException {
    ApiResponse<GetDbaasServiceMetrics200Response> localVarResponse = getDbaasServiceMetricsWithHttpInfo(serviceName, getDbaasServiceMetricsRequest);
    return localVarResponse.getData();
  }

  /**
   * Get metrics of DBaaS service
   * Get metrics of DBaaS service
   * @param serviceName  (required)
   * @param getDbaasServiceMetricsRequest  (required)
   * @return ApiResponse&lt;GetDbaasServiceMetrics200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasServiceMetrics200Response> getDbaasServiceMetricsWithHttpInfo(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceMetricsRequestBuilder(serviceName, getDbaasServiceMetricsRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceMetrics", localVarResponse);
        }
        return new ApiResponse<GetDbaasServiceMetrics200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasServiceMetrics200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceMetricsRequestBuilder(String serviceName, GetDbaasServiceMetricsRequest getDbaasServiceMetricsRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling getDbaasServiceMetrics");
    }
    // verify the required parameter 'getDbaasServiceMetricsRequest' is set
    if (getDbaasServiceMetricsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'getDbaasServiceMetricsRequest' when calling getDbaasServiceMetrics");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service-metrics/{service-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(getDbaasServiceMetricsRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS MySQL service
   * Get a DBaaS MySQL service
   * @param name  (required)
   * @return DbaasServiceMysql
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceMysql getDbaasServiceMysql(String name) throws ApiException {
    ApiResponse<DbaasServiceMysql> localVarResponse = getDbaasServiceMysqlWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS MySQL service
   * Get a DBaaS MySQL service
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServiceMysql&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceMysql> getDbaasServiceMysqlWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceMysqlRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceMysql", localVarResponse);
        }
        return new ApiResponse<DbaasServiceMysql>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceMysql>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceMysqlRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServiceMysql");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS OpenSearch service
   * Get a DBaaS OpenSearch service
   * @param name  (required)
   * @return DbaasServiceOpensearch
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceOpensearch getDbaasServiceOpensearch(String name) throws ApiException {
    ApiResponse<DbaasServiceOpensearch> localVarResponse = getDbaasServiceOpensearchWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS OpenSearch service
   * Get a DBaaS OpenSearch service
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServiceOpensearch&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceOpensearch> getDbaasServiceOpensearchWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceOpensearchRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceOpensearch", localVarResponse);
        }
        return new ApiResponse<DbaasServiceOpensearch>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceOpensearch>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceOpensearchRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServiceOpensearch");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS PostgreSQL service
   * Get a DBaaS PostgreSQL service
   * @param name  (required)
   * @return DbaasServicePg
   * @throws ApiException if fails to make API call
   */
  public DbaasServicePg getDbaasServicePg(String name) throws ApiException {
    ApiResponse<DbaasServicePg> localVarResponse = getDbaasServicePgWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS PostgreSQL service
   * Get a DBaaS PostgreSQL service
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServicePg&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServicePg> getDbaasServicePgWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServicePgRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServicePg", localVarResponse);
        }
        return new ApiResponse<DbaasServicePg>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServicePg>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServicePgRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServicePg");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS Redis service
   * Get a DBaaS Redis service
   * @param name  (required)
   * @return DbaasServiceRedis
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceRedis getDbaasServiceRedis(String name) throws ApiException {
    ApiResponse<DbaasServiceRedis> localVarResponse = getDbaasServiceRedisWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS Redis service
   * Get a DBaaS Redis service
   * @param name  (required)
   * @return ApiResponse&lt;DbaasServiceRedis&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceRedis> getDbaasServiceRedisWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceRedisRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceRedis", localVarResponse);
        }
        return new ApiResponse<DbaasServiceRedis>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceRedis>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceRedisRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getDbaasServiceRedis");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS service type
   * Get a DBaaS service type
   * @param serviceTypeName  (required)
   * @return DbaasServiceType
   * @throws ApiException if fails to make API call
   */
  public DbaasServiceType getDbaasServiceType(String serviceTypeName) throws ApiException {
    ApiResponse<DbaasServiceType> localVarResponse = getDbaasServiceTypeWithHttpInfo(serviceTypeName);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS service type
   * Get a DBaaS service type
   * @param serviceTypeName  (required)
   * @return ApiResponse&lt;DbaasServiceType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasServiceType> getDbaasServiceTypeWithHttpInfo(String serviceTypeName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasServiceTypeRequestBuilder(serviceTypeName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasServiceType", localVarResponse);
        }
        return new ApiResponse<DbaasServiceType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasServiceType>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasServiceTypeRequestBuilder(String serviceTypeName) throws ApiException {
    // verify the required parameter 'serviceTypeName' is set
    if (serviceTypeName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceTypeName' when calling getDbaasServiceType");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service-type/{service-type-name}"
        .replace("{service-type-name}", ApiClient.urlEncode(serviceTypeName.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS Grafana settings
   * Get DBaaS Grafana settings
   * @return GetDbaasSettingsGrafana200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsGrafana200Response getDbaasSettingsGrafana() throws ApiException {
    ApiResponse<GetDbaasSettingsGrafana200Response> localVarResponse = getDbaasSettingsGrafanaWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS Grafana settings
   * Get DBaaS Grafana settings
   * @return ApiResponse&lt;GetDbaasSettingsGrafana200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsGrafana200Response> getDbaasSettingsGrafanaWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsGrafanaRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsGrafana", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsGrafana200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsGrafana200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsGrafanaRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-grafana";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS Kafka settings
   * Get DBaaS Kafka settings
   * @return GetDbaasSettingsKafka200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsKafka200Response getDbaasSettingsKafka() throws ApiException {
    ApiResponse<GetDbaasSettingsKafka200Response> localVarResponse = getDbaasSettingsKafkaWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS Kafka settings
   * Get DBaaS Kafka settings
   * @return ApiResponse&lt;GetDbaasSettingsKafka200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsKafka200Response> getDbaasSettingsKafkaWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsKafkaRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsKafka", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsKafka200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsKafka200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsKafkaRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-kafka";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS MySQL settings
   * Get DBaaS MySQL settings
   * @return GetDbaasSettingsMysql200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsMysql200Response getDbaasSettingsMysql() throws ApiException {
    ApiResponse<GetDbaasSettingsMysql200Response> localVarResponse = getDbaasSettingsMysqlWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS MySQL settings
   * Get DBaaS MySQL settings
   * @return ApiResponse&lt;GetDbaasSettingsMysql200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsMysql200Response> getDbaasSettingsMysqlWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsMysqlRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsMysql", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsMysql200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsMysql200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsMysqlRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-mysql";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS OpenSearch settings
   * Get DBaaS OpenSearch settings
   * @return GetDbaasSettingsOpensearch200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsOpensearch200Response getDbaasSettingsOpensearch() throws ApiException {
    ApiResponse<GetDbaasSettingsOpensearch200Response> localVarResponse = getDbaasSettingsOpensearchWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS OpenSearch settings
   * Get DBaaS OpenSearch settings
   * @return ApiResponse&lt;GetDbaasSettingsOpensearch200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsOpensearch200Response> getDbaasSettingsOpensearchWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsOpensearchRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsOpensearch", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsOpensearch200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsOpensearch200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsOpensearchRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-opensearch";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS PostgreSQL settings
   * Get DBaaS PostgreSQL settings
   * @return GetDbaasSettingsPg200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsPg200Response getDbaasSettingsPg() throws ApiException {
    ApiResponse<GetDbaasSettingsPg200Response> localVarResponse = getDbaasSettingsPgWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS PostgreSQL settings
   * Get DBaaS PostgreSQL settings
   * @return ApiResponse&lt;GetDbaasSettingsPg200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsPg200Response> getDbaasSettingsPgWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsPgRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsPg", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsPg200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsPg200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsPgRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-pg";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS Redis settings
   * Returns the default settings for Redis.
   * @return GetDbaasSettingsRedis200Response
   * @throws ApiException if fails to make API call
   */
  public GetDbaasSettingsRedis200Response getDbaasSettingsRedis() throws ApiException {
    ApiResponse<GetDbaasSettingsRedis200Response> localVarResponse = getDbaasSettingsRedisWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS Redis settings
   * Returns the default settings for Redis.
   * @return ApiResponse&lt;GetDbaasSettingsRedis200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDbaasSettingsRedis200Response> getDbaasSettingsRedisWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasSettingsRedisRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasSettingsRedis", localVarResponse);
        }
        return new ApiResponse<GetDbaasSettingsRedis200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDbaasSettingsRedis200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasSettingsRedisRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-settings-redis";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a DBaaS task
   * Get a DBaaS task
   * @param service  (required)
   * @param id  (required)
   * @return DbaasTask
   * @throws ApiException if fails to make API call
   */
  public DbaasTask getDbaasTask(String service, UUID id) throws ApiException {
    ApiResponse<DbaasTask> localVarResponse = getDbaasTaskWithHttpInfo(service, id);
    return localVarResponse.getData();
  }

  /**
   * Get a DBaaS task
   * Get a DBaaS task
   * @param service  (required)
   * @param id  (required)
   * @return ApiResponse&lt;DbaasTask&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasTask> getDbaasTaskWithHttpInfo(String service, UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDbaasTaskRequestBuilder(service, id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDbaasTask", localVarResponse);
        }
        return new ApiResponse<DbaasTask>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasTask>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDbaasTaskRequestBuilder(String service, UUID id) throws ApiException {
    // verify the required parameter 'service' is set
    if (service == null) {
      throw new ApiException(400, "Missing the required parameter 'service' when calling getDbaasTask");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getDbaasTask");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-task/{service}/{id}"
        .replace("{service}", ApiClient.urlEncode(service.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Deploy Target details
   * 
   * @param id  (required)
   * @return DeployTarget
   * @throws ApiException if fails to make API call
   */
  public DeployTarget getDeployTarget(UUID id) throws ApiException {
    ApiResponse<DeployTarget> localVarResponse = getDeployTargetWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Deploy Target details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;DeployTarget&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeployTarget> getDeployTargetWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDeployTargetRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeployTarget", localVarResponse);
        }
        return new ApiResponse<DeployTarget>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeployTarget>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDeployTargetRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getDeployTarget");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deploy-target/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve DNS domain details
   * 
   * @param id  (required)
   * @return DnsDomain
   * @throws ApiException if fails to make API call
   */
  public DnsDomain getDnsDomain(UUID id) throws ApiException {
    ApiResponse<DnsDomain> localVarResponse = getDnsDomainWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve DNS domain details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;DnsDomain&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DnsDomain> getDnsDomainWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDnsDomainRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDnsDomain", localVarResponse);
        }
        return new ApiResponse<DnsDomain>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DnsDomain>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDnsDomainRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getDnsDomain");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dns-domain/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve DNS domain record details
   * 
   * @param domainId  (required)
   * @param recordId  (required)
   * @return DnsDomainRecord
   * @throws ApiException if fails to make API call
   */
  public DnsDomainRecord getDnsDomainRecord(UUID domainId, UUID recordId) throws ApiException {
    ApiResponse<DnsDomainRecord> localVarResponse = getDnsDomainRecordWithHttpInfo(domainId, recordId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve DNS domain record details
   * 
   * @param domainId  (required)
   * @param recordId  (required)
   * @return ApiResponse&lt;DnsDomainRecord&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DnsDomainRecord> getDnsDomainRecordWithHttpInfo(UUID domainId, UUID recordId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDnsDomainRecordRequestBuilder(domainId, recordId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDnsDomainRecord", localVarResponse);
        }
        return new ApiResponse<DnsDomainRecord>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DnsDomainRecord>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDnsDomainRecordRequestBuilder(UUID domainId, UUID recordId) throws ApiException {
    // verify the required parameter 'domainId' is set
    if (domainId == null) {
      throw new ApiException(400, "Missing the required parameter 'domainId' when calling getDnsDomainRecord");
    }
    // verify the required parameter 'recordId' is set
    if (recordId == null) {
      throw new ApiException(400, "Missing the required parameter 'recordId' when calling getDnsDomainRecord");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dns-domain/{domain-id}/record/{record-id}"
        .replace("{domain-id}", ApiClient.urlEncode(domainId.toString()))
        .replace("{record-id}", ApiClient.urlEncode(recordId.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve DNS domain zone file
   * 
   * @param id  (required)
   * @return GetDnsDomainZoneFile200Response
   * @throws ApiException if fails to make API call
   */
  public GetDnsDomainZoneFile200Response getDnsDomainZoneFile(UUID id) throws ApiException {
    ApiResponse<GetDnsDomainZoneFile200Response> localVarResponse = getDnsDomainZoneFileWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve DNS domain zone file
   * 
   * @param id  (required)
   * @return ApiResponse&lt;GetDnsDomainZoneFile200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDnsDomainZoneFile200Response> getDnsDomainZoneFileWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDnsDomainZoneFileRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDnsDomainZoneFile", localVarResponse);
        }
        return new ApiResponse<GetDnsDomainZoneFile200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDnsDomainZoneFile200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDnsDomainZoneFileRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getDnsDomainZoneFile");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dns-domain/{id}/zone"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Elastic IP details
   * 
   * @param id  (required)
   * @return ElasticIp
   * @throws ApiException if fails to make API call
   */
  public ElasticIp getElasticIp(UUID id) throws ApiException {
    ApiResponse<ElasticIp> localVarResponse = getElasticIpWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Elastic IP details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;ElasticIp&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ElasticIp> getElasticIpWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getElasticIpRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getElasticIp", localVarResponse);
        }
        return new ApiResponse<ElasticIp>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ElasticIp>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getElasticIpRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getElasticIp");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/elastic-ip/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve IAM Organization Policy
   * 
   * @return IamPolicy
   * @throws ApiException if fails to make API call
   */
  public IamPolicy getIamOrganizationPolicy() throws ApiException {
    ApiResponse<IamPolicy> localVarResponse = getIamOrganizationPolicyWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve IAM Organization Policy
   * 
   * @return ApiResponse&lt;IamPolicy&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IamPolicy> getIamOrganizationPolicyWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIamOrganizationPolicyRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getIamOrganizationPolicy", localVarResponse);
        }
        return new ApiResponse<IamPolicy>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IamPolicy>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIamOrganizationPolicyRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-organization-policy";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve IAM Role
   * 
   * @param id  (required)
   * @return IamRole
   * @throws ApiException if fails to make API call
   */
  public IamRole getIamRole(UUID id) throws ApiException {
    ApiResponse<IamRole> localVarResponse = getIamRoleWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve IAM Role
   * 
   * @param id  (required)
   * @return ApiResponse&lt;IamRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IamRole> getIamRoleWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIamRoleRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getIamRole", localVarResponse);
        }
        return new ApiResponse<IamRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IamRole>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIamRoleRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getIamRole");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Compute instance details
   * 
   * @param id  (required)
   * @return Instance
   * @throws ApiException if fails to make API call
   */
  public Instance getInstance(UUID id) throws ApiException {
    ApiResponse<Instance> localVarResponse = getInstanceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Compute instance details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Instance&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Instance> getInstanceWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstanceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstance", localVarResponse);
        }
        return new ApiResponse<Instance>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Instance>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstanceRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Instance Pool details
   * 
   * @param id  (required)
   * @return InstancePool
   * @throws ApiException if fails to make API call
   */
  public InstancePool getInstancePool(UUID id) throws ApiException {
    ApiResponse<InstancePool> localVarResponse = getInstancePoolWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Instance Pool details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;InstancePool&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InstancePool> getInstancePoolWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstancePoolRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstancePool", localVarResponse);
        }
        return new ApiResponse<InstancePool>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InstancePool>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstancePoolRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInstancePool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance-pool/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Instance Type details
   * 
   * @param id  (required)
   * @return InstanceType
   * @throws ApiException if fails to make API call
   */
  public InstanceType getInstanceType(UUID id) throws ApiException {
    ApiResponse<InstanceType> localVarResponse = getInstanceTypeWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Instance Type details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;InstanceType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InstanceType> getInstanceTypeWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstanceTypeRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstanceType", localVarResponse);
        }
        return new ApiResponse<InstanceType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InstanceType>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstanceTypeRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInstanceType");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance-type/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Load Balancer details
   * 
   * @param id  (required)
   * @return LoadBalancer
   * @throws ApiException if fails to make API call
   */
  public LoadBalancer getLoadBalancer(UUID id) throws ApiException {
    ApiResponse<LoadBalancer> localVarResponse = getLoadBalancerWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Load Balancer details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;LoadBalancer&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LoadBalancer> getLoadBalancerWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getLoadBalancerRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getLoadBalancer", localVarResponse);
        }
        return new ApiResponse<LoadBalancer>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LoadBalancer>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getLoadBalancerRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getLoadBalancer");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Load Balancer Service details
   * 
   * @param id  (required)
   * @param serviceId  (required)
   * @return LoadBalancerService
   * @throws ApiException if fails to make API call
   */
  public LoadBalancerService getLoadBalancerService(UUID id, UUID serviceId) throws ApiException {
    ApiResponse<LoadBalancerService> localVarResponse = getLoadBalancerServiceWithHttpInfo(id, serviceId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Load Balancer Service details
   * 
   * @param id  (required)
   * @param serviceId  (required)
   * @return ApiResponse&lt;LoadBalancerService&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LoadBalancerService> getLoadBalancerServiceWithHttpInfo(UUID id, UUID serviceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getLoadBalancerServiceRequestBuilder(id, serviceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getLoadBalancerService", localVarResponse);
        }
        return new ApiResponse<LoadBalancerService>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LoadBalancerService>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getLoadBalancerServiceRequestBuilder(UUID id, UUID serviceId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getLoadBalancerService");
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceId' when calling getLoadBalancerService");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer/{id}/service/{service-id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{service-id}", ApiClient.urlEncode(serviceId.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Operation details
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation getOperation(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = getOperationWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Operation details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> getOperationWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getOperationRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getOperation", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getOperationRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getOperation");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/operation/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve an organization
   * 
   * @return Organization
   * @throws ApiException if fails to make API call
   */
  public Organization getOrganization() throws ApiException {
    ApiResponse<Organization> localVarResponse = getOrganizationWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve an organization
   * 
   * @return ApiResponse&lt;Organization&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Organization> getOrganizationWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getOrganizationRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getOrganization", localVarResponse);
        }
        return new ApiResponse<Organization>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Organization>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getOrganizationRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/organization";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Private Network details
   * 
   * @param id  (required)
   * @return PrivateNetwork
   * @throws ApiException if fails to make API call
   */
  public PrivateNetwork getPrivateNetwork(UUID id) throws ApiException {
    ApiResponse<PrivateNetwork> localVarResponse = getPrivateNetworkWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Private Network details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;PrivateNetwork&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PrivateNetwork> getPrivateNetworkWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPrivateNetworkRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPrivateNetwork", localVarResponse);
        }
        return new ApiResponse<PrivateNetwork>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PrivateNetwork>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPrivateNetworkRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getPrivateNetwork");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/private-network/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Resource Quota
   * 
   * @param entity  (required)
   * @return Quota
   * @throws ApiException if fails to make API call
   */
  public Quota getQuota(String entity) throws ApiException {
    ApiResponse<Quota> localVarResponse = getQuotaWithHttpInfo(entity);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Resource Quota
   * 
   * @param entity  (required)
   * @return ApiResponse&lt;Quota&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Quota> getQuotaWithHttpInfo(String entity) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getQuotaRequestBuilder(entity);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getQuota", localVarResponse);
        }
        return new ApiResponse<Quota>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Quota>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getQuotaRequestBuilder(String entity) throws ApiException {
    // verify the required parameter 'entity' is set
    if (entity == null) {
      throw new ApiException(400, "Missing the required parameter 'entity' when calling getQuota");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/quota/{entity}"
        .replace("{entity}", ApiClient.urlEncode(entity.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Query the PTR DNS records for an elastic IP
   * 
   * @param id  (required)
   * @return ReverseDnsRecord
   * @throws ApiException if fails to make API call
   */
  public ReverseDnsRecord getReverseDnsElasticIp(UUID id) throws ApiException {
    ApiResponse<ReverseDnsRecord> localVarResponse = getReverseDnsElasticIpWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Query the PTR DNS records for an elastic IP
   * 
   * @param id  (required)
   * @return ApiResponse&lt;ReverseDnsRecord&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReverseDnsRecord> getReverseDnsElasticIpWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getReverseDnsElasticIpRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getReverseDnsElasticIp", localVarResponse);
        }
        return new ApiResponse<ReverseDnsRecord>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReverseDnsRecord>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getReverseDnsElasticIpRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getReverseDnsElasticIp");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/reverse-dns/elastic-ip/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Query the PTR DNS records for an instance
   * 
   * @param id  (required)
   * @return ReverseDnsRecord
   * @throws ApiException if fails to make API call
   */
  public ReverseDnsRecord getReverseDnsInstance(UUID id) throws ApiException {
    ApiResponse<ReverseDnsRecord> localVarResponse = getReverseDnsInstanceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Query the PTR DNS records for an instance
   * 
   * @param id  (required)
   * @return ApiResponse&lt;ReverseDnsRecord&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReverseDnsRecord> getReverseDnsInstanceWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getReverseDnsInstanceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getReverseDnsInstance", localVarResponse);
        }
        return new ApiResponse<ReverseDnsRecord>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReverseDnsRecord>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getReverseDnsInstanceRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getReverseDnsInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/reverse-dns/instance/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Security Group details
   * 
   * @param id  (required)
   * @return SecurityGroup
   * @throws ApiException if fails to make API call
   */
  public SecurityGroup getSecurityGroup(UUID id) throws ApiException {
    ApiResponse<SecurityGroup> localVarResponse = getSecurityGroupWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Security Group details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;SecurityGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SecurityGroup> getSecurityGroupWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSecurityGroupRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSecurityGroup", localVarResponse);
        }
        return new ApiResponse<SecurityGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SecurityGroup>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSecurityGroupRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSecurityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security-group/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve SKS cluster details
   * 
   * @param id  (required)
   * @return SksCluster
   * @throws ApiException if fails to make API call
   */
  public SksCluster getSksCluster(UUID id) throws ApiException {
    ApiResponse<SksCluster> localVarResponse = getSksClusterWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve SKS cluster details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;SksCluster&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SksCluster> getSksClusterWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSksClusterRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSksCluster", localVarResponse);
        }
        return new ApiResponse<SksCluster>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SksCluster>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSksClusterRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSksCluster");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the certificate for a SKS cluster authority
   * This operation returns the certificate for the given SKS cluster authority encoded in base64.
   * @param id  (required)
   * @param authority  (required)
   * @return GetSksClusterAuthorityCert200Response
   * @throws ApiException if fails to make API call
   */
  public GetSksClusterAuthorityCert200Response getSksClusterAuthorityCert(UUID id, String authority) throws ApiException {
    ApiResponse<GetSksClusterAuthorityCert200Response> localVarResponse = getSksClusterAuthorityCertWithHttpInfo(id, authority);
    return localVarResponse.getData();
  }

  /**
   * Get the certificate for a SKS cluster authority
   * This operation returns the certificate for the given SKS cluster authority encoded in base64.
   * @param id  (required)
   * @param authority  (required)
   * @return ApiResponse&lt;GetSksClusterAuthorityCert200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetSksClusterAuthorityCert200Response> getSksClusterAuthorityCertWithHttpInfo(UUID id, String authority) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSksClusterAuthorityCertRequestBuilder(id, authority);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSksClusterAuthorityCert", localVarResponse);
        }
        return new ApiResponse<GetSksClusterAuthorityCert200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetSksClusterAuthorityCert200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSksClusterAuthorityCertRequestBuilder(UUID id, String authority) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSksClusterAuthorityCert");
    }
    // verify the required parameter 'authority' is set
    if (authority == null) {
      throw new ApiException(400, "Missing the required parameter 'authority' when calling getSksClusterAuthorityCert");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/authority/{authority}/cert"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{authority}", ApiClient.urlEncode(authority.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the latest inspection result
   * Helps troubleshoot common problems when deploying a kubernetes cluster. Inspections run every couple of minutes.
   * @param id  (required)
   * @return Map&lt;String, Object&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, Object> getSksClusterInspection(UUID id) throws ApiException {
    ApiResponse<Map<String, Object>> localVarResponse = getSksClusterInspectionWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get the latest inspection result
   * Helps troubleshoot common problems when deploying a kubernetes cluster. Inspections run every couple of minutes.
   * @param id  (required)
   * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Map<String, Object>> getSksClusterInspectionWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSksClusterInspectionRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSksClusterInspection", localVarResponse);
        }
        return new ApiResponse<Map<String, Object>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Map<String, Object>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSksClusterInspectionRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSksClusterInspection");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/inspection"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve SKS Nodepool details
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @return SksNodepool
   * @throws ApiException if fails to make API call
   */
  public SksNodepool getSksNodepool(UUID id, UUID sksNodepoolId) throws ApiException {
    ApiResponse<SksNodepool> localVarResponse = getSksNodepoolWithHttpInfo(id, sksNodepoolId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve SKS Nodepool details
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @return ApiResponse&lt;SksNodepool&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SksNodepool> getSksNodepoolWithHttpInfo(UUID id, UUID sksNodepoolId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSksNodepoolRequestBuilder(id, sksNodepoolId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSksNodepool", localVarResponse);
        }
        return new ApiResponse<SksNodepool>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SksNodepool>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSksNodepoolRequestBuilder(UUID id, UUID sksNodepoolId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSksNodepool");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling getSksNodepool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Snapshot details
   * 
   * @param id  (required)
   * @return Snapshot
   * @throws ApiException if fails to make API call
   */
  public Snapshot getSnapshot(UUID id) throws ApiException {
    ApiResponse<Snapshot> localVarResponse = getSnapshotWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Snapshot details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Snapshot&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Snapshot> getSnapshotWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSnapshotRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSnapshot", localVarResponse);
        }
        return new ApiResponse<Snapshot>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Snapshot>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSnapshotRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSnapshot");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/snapshot/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Presigned Download URL for SOS object
   * Generates Presigned Download URL for SOS object
   * @param bucket  (required)
   * @param key  (optional)
   * @return GetSosPresignedUrl200Response
   * @throws ApiException if fails to make API call
   */
  public GetSosPresignedUrl200Response getSosPresignedUrl(String bucket, String key) throws ApiException {
    ApiResponse<GetSosPresignedUrl200Response> localVarResponse = getSosPresignedUrlWithHttpInfo(bucket, key);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Presigned Download URL for SOS object
   * Generates Presigned Download URL for SOS object
   * @param bucket  (required)
   * @param key  (optional)
   * @return ApiResponse&lt;GetSosPresignedUrl200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetSosPresignedUrl200Response> getSosPresignedUrlWithHttpInfo(String bucket, String key) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSosPresignedUrlRequestBuilder(bucket, key);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSosPresignedUrl", localVarResponse);
        }
        return new ApiResponse<GetSosPresignedUrl200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetSosPresignedUrl200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSosPresignedUrlRequestBuilder(String bucket, String key) throws ApiException {
    // verify the required parameter 'bucket' is set
    if (bucket == null) {
      throw new ApiException(400, "Missing the required parameter 'bucket' when calling getSosPresignedUrl");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sos/{bucket}/presigned-url"
        .replace("{bucket}", ApiClient.urlEncode(bucket.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "key";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key", key));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve SSH key details
   * 
   * @param name  (required)
   * @return SshKey
   * @throws ApiException if fails to make API call
   */
  public SshKey getSshKey(String name) throws ApiException {
    ApiResponse<SshKey> localVarResponse = getSshKeyWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Retrieve SSH key details
   * 
   * @param name  (required)
   * @return ApiResponse&lt;SshKey&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SshKey> getSshKeyWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSshKeyRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSshKey", localVarResponse);
        }
        return new ApiResponse<SshKey>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SshKey>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSshKeyRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getSshKey");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ssh-key/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieve Template details
   * 
   * @param id  (required)
   * @return Template
   * @throws ApiException if fails to make API call
   */
  public Template getTemplate(UUID id) throws ApiException {
    ApiResponse<Template> localVarResponse = getTemplateWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Template details
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Template&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Template> getTemplateWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getTemplateRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getTemplate", localVarResponse);
        }
        return new ApiResponse<Template>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Template>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getTemplateRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getTemplate");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/template/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Anti-affinity Groups
   * 
   * @return ListAntiAffinityGroups200Response
   * @throws ApiException if fails to make API call
   */
  public ListAntiAffinityGroups200Response listAntiAffinityGroups() throws ApiException {
    ApiResponse<ListAntiAffinityGroups200Response> localVarResponse = listAntiAffinityGroupsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Anti-affinity Groups
   * 
   * @return ApiResponse&lt;ListAntiAffinityGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAntiAffinityGroups200Response> listAntiAffinityGroupsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAntiAffinityGroupsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAntiAffinityGroups", localVarResponse);
        }
        return new ApiResponse<ListAntiAffinityGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAntiAffinityGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAntiAffinityGroupsRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/anti-affinity-group";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List API keys
   * 
   * @return ListApiKeys200Response
   * @throws ApiException if fails to make API call
   */
  public ListApiKeys200Response listApiKeys() throws ApiException {
    ApiResponse<ListApiKeys200Response> localVarResponse = listApiKeysWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List API keys
   * 
   * @return ApiResponse&lt;ListApiKeys200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListApiKeys200Response> listApiKeysWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listApiKeysRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listApiKeys", localVarResponse);
        }
        return new ApiResponse<ListApiKeys200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListApiKeys200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listApiKeysRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api-key";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List block storage snapshots
   * 
   * @return ListBlockStorageSnapshots200Response
   * @throws ApiException if fails to make API call
   */
  public ListBlockStorageSnapshots200Response listBlockStorageSnapshots() throws ApiException {
    ApiResponse<ListBlockStorageSnapshots200Response> localVarResponse = listBlockStorageSnapshotsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List block storage snapshots
   * 
   * @return ApiResponse&lt;ListBlockStorageSnapshots200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListBlockStorageSnapshots200Response> listBlockStorageSnapshotsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listBlockStorageSnapshotsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listBlockStorageSnapshots", localVarResponse);
        }
        return new ApiResponse<ListBlockStorageSnapshots200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListBlockStorageSnapshots200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listBlockStorageSnapshotsRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage-snapshot";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List block storage volumes
   * 
   * @param instanceId  (optional)
   * @return ListBlockStorageVolumes200Response
   * @throws ApiException if fails to make API call
   */
  public ListBlockStorageVolumes200Response listBlockStorageVolumes(UUID instanceId) throws ApiException {
    ApiResponse<ListBlockStorageVolumes200Response> localVarResponse = listBlockStorageVolumesWithHttpInfo(instanceId);
    return localVarResponse.getData();
  }

  /**
   * List block storage volumes
   * 
   * @param instanceId  (optional)
   * @return ApiResponse&lt;ListBlockStorageVolumes200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListBlockStorageVolumes200Response> listBlockStorageVolumesWithHttpInfo(UUID instanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listBlockStorageVolumesRequestBuilder(instanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listBlockStorageVolumes", localVarResponse);
        }
        return new ApiResponse<ListBlockStorageVolumes200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListBlockStorageVolumes200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listBlockStorageVolumesRequestBuilder(UUID instanceId) throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "instance-id";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("instance-id", instanceId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS integration settings
   * Get DBaaS integration settings
   * @param integrationType  (required)
   * @param sourceType  (required)
   * @param destType  (required)
   * @return ListDbaasIntegrationSettings200Response
   * @throws ApiException if fails to make API call
   */
  public ListDbaasIntegrationSettings200Response listDbaasIntegrationSettings(String integrationType, String sourceType, String destType) throws ApiException {
    ApiResponse<ListDbaasIntegrationSettings200Response> localVarResponse = listDbaasIntegrationSettingsWithHttpInfo(integrationType, sourceType, destType);
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS integration settings
   * Get DBaaS integration settings
   * @param integrationType  (required)
   * @param sourceType  (required)
   * @param destType  (required)
   * @return ApiResponse&lt;ListDbaasIntegrationSettings200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDbaasIntegrationSettings200Response> listDbaasIntegrationSettingsWithHttpInfo(String integrationType, String sourceType, String destType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDbaasIntegrationSettingsRequestBuilder(integrationType, sourceType, destType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDbaasIntegrationSettings", localVarResponse);
        }
        return new ApiResponse<ListDbaasIntegrationSettings200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDbaasIntegrationSettings200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDbaasIntegrationSettingsRequestBuilder(String integrationType, String sourceType, String destType) throws ApiException {
    // verify the required parameter 'integrationType' is set
    if (integrationType == null) {
      throw new ApiException(400, "Missing the required parameter 'integrationType' when calling listDbaasIntegrationSettings");
    }
    // verify the required parameter 'sourceType' is set
    if (sourceType == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceType' when calling listDbaasIntegrationSettings");
    }
    // verify the required parameter 'destType' is set
    if (destType == null) {
      throw new ApiException(400, "Missing the required parameter 'destType' when calling listDbaasIntegrationSettings");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration-settings/{integration-type}/{source-type}/{dest-type}"
        .replace("{integration-type}", ApiClient.urlEncode(integrationType.toString()))
        .replace("{source-type}", ApiClient.urlEncode(sourceType.toString()))
        .replace("{dest-type}", ApiClient.urlEncode(destType.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get DBaaS integration types
   * Get DBaaS integration types
   * @return ListDbaasIntegrationTypes200Response
   * @throws ApiException if fails to make API call
   */
  public ListDbaasIntegrationTypes200Response listDbaasIntegrationTypes() throws ApiException {
    ApiResponse<ListDbaasIntegrationTypes200Response> localVarResponse = listDbaasIntegrationTypesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get DBaaS integration types
   * Get DBaaS integration types
   * @return ApiResponse&lt;ListDbaasIntegrationTypes200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDbaasIntegrationTypes200Response> listDbaasIntegrationTypesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDbaasIntegrationTypesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDbaasIntegrationTypes", localVarResponse);
        }
        return new ApiResponse<ListDbaasIntegrationTypes200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDbaasIntegrationTypes200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDbaasIntegrationTypesRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration-types";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * DBaaS Service Types
   * List available service types for DBaaS
   * @return ListDbaasServiceTypes200Response
   * @throws ApiException if fails to make API call
   */
  public ListDbaasServiceTypes200Response listDbaasServiceTypes() throws ApiException {
    ApiResponse<ListDbaasServiceTypes200Response> localVarResponse = listDbaasServiceTypesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * DBaaS Service Types
   * List available service types for DBaaS
   * @return ApiResponse&lt;ListDbaasServiceTypes200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDbaasServiceTypes200Response> listDbaasServiceTypesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDbaasServiceTypesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDbaasServiceTypes", localVarResponse);
        }
        return new ApiResponse<ListDbaasServiceTypes200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDbaasServiceTypes200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDbaasServiceTypesRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service-type";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List DBaaS services
   * List DBaaS services
   * @return ListDbaasServices200Response
   * @throws ApiException if fails to make API call
   */
  public ListDbaasServices200Response listDbaasServices() throws ApiException {
    ApiResponse<ListDbaasServices200Response> localVarResponse = listDbaasServicesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List DBaaS services
   * List DBaaS services
   * @return ApiResponse&lt;ListDbaasServices200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDbaasServices200Response> listDbaasServicesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDbaasServicesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDbaasServices", localVarResponse);
        }
        return new ApiResponse<ListDbaasServices200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDbaasServices200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDbaasServicesRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-service";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Deploy Targets
   * 
   * @return ListDeployTargets200Response
   * @throws ApiException if fails to make API call
   */
  public ListDeployTargets200Response listDeployTargets() throws ApiException {
    ApiResponse<ListDeployTargets200Response> localVarResponse = listDeployTargetsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Deploy Targets
   * 
   * @return ApiResponse&lt;ListDeployTargets200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDeployTargets200Response> listDeployTargetsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDeployTargetsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDeployTargets", localVarResponse);
        }
        return new ApiResponse<ListDeployTargets200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDeployTargets200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDeployTargetsRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deploy-target";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List DNS domain records
   * 
   * @param domainId  (required)
   * @return ListDnsDomainRecords200Response
   * @throws ApiException if fails to make API call
   */
  public ListDnsDomainRecords200Response listDnsDomainRecords(UUID domainId) throws ApiException {
    ApiResponse<ListDnsDomainRecords200Response> localVarResponse = listDnsDomainRecordsWithHttpInfo(domainId);
    return localVarResponse.getData();
  }

  /**
   * List DNS domain records
   * 
   * @param domainId  (required)
   * @return ApiResponse&lt;ListDnsDomainRecords200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDnsDomainRecords200Response> listDnsDomainRecordsWithHttpInfo(UUID domainId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDnsDomainRecordsRequestBuilder(domainId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDnsDomainRecords", localVarResponse);
        }
        return new ApiResponse<ListDnsDomainRecords200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDnsDomainRecords200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDnsDomainRecordsRequestBuilder(UUID domainId) throws ApiException {
    // verify the required parameter 'domainId' is set
    if (domainId == null) {
      throw new ApiException(400, "Missing the required parameter 'domainId' when calling listDnsDomainRecords");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dns-domain/{domain-id}/record"
        .replace("{domain-id}", ApiClient.urlEncode(domainId.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List DNS domains
   * 
   * @return ListDnsDomains200Response
   * @throws ApiException if fails to make API call
   */
  public ListDnsDomains200Response listDnsDomains() throws ApiException {
    ApiResponse<ListDnsDomains200Response> localVarResponse = listDnsDomainsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List DNS domains
   * 
   * @return ApiResponse&lt;ListDnsDomains200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListDnsDomains200Response> listDnsDomainsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDnsDomainsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDnsDomains", localVarResponse);
        }
        return new ApiResponse<ListDnsDomains200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListDnsDomains200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDnsDomainsRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dns-domain";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Elastic IPs
   * 
   * @return ListElasticIps200Response
   * @throws ApiException if fails to make API call
   */
  public ListElasticIps200Response listElasticIps() throws ApiException {
    ApiResponse<ListElasticIps200Response> localVarResponse = listElasticIpsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Elastic IPs
   * 
   * @return ApiResponse&lt;ListElasticIps200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListElasticIps200Response> listElasticIpsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listElasticIpsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listElasticIps", localVarResponse);
        }
        return new ApiResponse<ListElasticIps200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListElasticIps200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listElasticIpsRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/elastic-ip";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Events
   * Retrieve Mutation Events for a given date range. Defaults to retrieving Events for the past 24 hours.          Both a &#x60;from&#x60; and &#x60;to&#x60; arguments can be specified to filter Events over a specific period.          Events will be the the most descriptive possible but not all fields are mandatory
   * @param from  (optional)
   * @param to  (optional)
   * @return List&lt;Event&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Event> listEvents(OffsetDateTime from, OffsetDateTime to) throws ApiException {
    ApiResponse<List<Event>> localVarResponse = listEventsWithHttpInfo(from, to);
    return localVarResponse.getData();
  }

  /**
   * List Events
   * Retrieve Mutation Events for a given date range. Defaults to retrieving Events for the past 24 hours.          Both a &#x60;from&#x60; and &#x60;to&#x60; arguments can be specified to filter Events over a specific period.          Events will be the the most descriptive possible but not all fields are mandatory
   * @param from  (optional)
   * @param to  (optional)
   * @return ApiResponse&lt;List&lt;Event&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Event>> listEventsWithHttpInfo(OffsetDateTime from, OffsetDateTime to) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listEventsRequestBuilder(from, to);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listEvents", localVarResponse);
        }
        return new ApiResponse<List<Event>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Event>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listEventsRequestBuilder(OffsetDateTime from, OffsetDateTime to) throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/event";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "from";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("from", from));
    localVarQueryParameterBaseName = "to";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("to", to));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List IAM Roles
   * 
   * @return ListIamRoles200Response
   * @throws ApiException if fails to make API call
   */
  public ListIamRoles200Response listIamRoles() throws ApiException {
    ApiResponse<ListIamRoles200Response> localVarResponse = listIamRolesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List IAM Roles
   * 
   * @return ApiResponse&lt;ListIamRoles200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListIamRoles200Response> listIamRolesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listIamRolesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listIamRoles", localVarResponse);
        }
        return new ApiResponse<ListIamRoles200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListIamRoles200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listIamRolesRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Instance Pools
   * 
   * @return ListInstancePools200Response
   * @throws ApiException if fails to make API call
   */
  public ListInstancePools200Response listInstancePools() throws ApiException {
    ApiResponse<ListInstancePools200Response> localVarResponse = listInstancePoolsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Instance Pools
   * 
   * @return ApiResponse&lt;ListInstancePools200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListInstancePools200Response> listInstancePoolsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listInstancePoolsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listInstancePools", localVarResponse);
        }
        return new ApiResponse<ListInstancePools200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListInstancePools200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listInstancePoolsRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance-pool";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Compute instance Types
   * 
   * @return ListInstanceTypes200Response
   * @throws ApiException if fails to make API call
   */
  public ListInstanceTypes200Response listInstanceTypes() throws ApiException {
    ApiResponse<ListInstanceTypes200Response> localVarResponse = listInstanceTypesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Compute instance Types
   * 
   * @return ApiResponse&lt;ListInstanceTypes200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListInstanceTypes200Response> listInstanceTypesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listInstanceTypesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listInstanceTypes", localVarResponse);
        }
        return new ApiResponse<ListInstanceTypes200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListInstanceTypes200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listInstanceTypesRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance-type";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Compute instances
   * 
   * @param managerId  (optional)
   * @param managerType  (optional)
   * @param ipAddress  (optional)
   * @return ListInstances200Response
   * @throws ApiException if fails to make API call
   */
  public ListInstances200Response listInstances(UUID managerId, String managerType, String ipAddress) throws ApiException {
    ApiResponse<ListInstances200Response> localVarResponse = listInstancesWithHttpInfo(managerId, managerType, ipAddress);
    return localVarResponse.getData();
  }

  /**
   * List Compute instances
   * 
   * @param managerId  (optional)
   * @param managerType  (optional)
   * @param ipAddress  (optional)
   * @return ApiResponse&lt;ListInstances200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListInstances200Response> listInstancesWithHttpInfo(UUID managerId, String managerType, String ipAddress) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listInstancesRequestBuilder(managerId, managerType, ipAddress);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listInstances", localVarResponse);
        }
        return new ApiResponse<ListInstances200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListInstances200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listInstancesRequestBuilder(UUID managerId, String managerType, String ipAddress) throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "manager-id";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manager-id", managerId));
    localVarQueryParameterBaseName = "manager-type";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manager-type", managerType));
    localVarQueryParameterBaseName = "ip-address";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ip-address", ipAddress));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Load Balancers
   * 
   * @return ListLoadBalancers200Response
   * @throws ApiException if fails to make API call
   */
  public ListLoadBalancers200Response listLoadBalancers() throws ApiException {
    ApiResponse<ListLoadBalancers200Response> localVarResponse = listLoadBalancersWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Load Balancers
   * 
   * @return ApiResponse&lt;ListLoadBalancers200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListLoadBalancers200Response> listLoadBalancersWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listLoadBalancersRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listLoadBalancers", localVarResponse);
        }
        return new ApiResponse<ListLoadBalancers200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListLoadBalancers200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listLoadBalancersRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Private Networks
   * 
   * @return ListPrivateNetworks200Response
   * @throws ApiException if fails to make API call
   */
  public ListPrivateNetworks200Response listPrivateNetworks() throws ApiException {
    ApiResponse<ListPrivateNetworks200Response> localVarResponse = listPrivateNetworksWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Private Networks
   * 
   * @return ApiResponse&lt;ListPrivateNetworks200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListPrivateNetworks200Response> listPrivateNetworksWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listPrivateNetworksRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listPrivateNetworks", localVarResponse);
        }
        return new ApiResponse<ListPrivateNetworks200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListPrivateNetworks200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listPrivateNetworksRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/private-network";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Organization Quotas
   * 
   * @return ListQuotas200Response
   * @throws ApiException if fails to make API call
   */
  public ListQuotas200Response listQuotas() throws ApiException {
    ApiResponse<ListQuotas200Response> localVarResponse = listQuotasWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Organization Quotas
   * 
   * @return ApiResponse&lt;ListQuotas200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListQuotas200Response> listQuotasWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listQuotasRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listQuotas", localVarResponse);
        }
        return new ApiResponse<ListQuotas200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListQuotas200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listQuotasRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/quota";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Security Groups.
   * Lists security groups. When visibility is set to public, lists public security groups. Public security groups are objects maintained by Exoscale which contain source addresses for relevant services hosted by Exoscale. They can be used a source in ingress rules and as a destination in egress rules.
   * @param visibility  (optional)
   * @return ListSecurityGroups200Response
   * @throws ApiException if fails to make API call
   */
  public ListSecurityGroups200Response listSecurityGroups(String visibility) throws ApiException {
    ApiResponse<ListSecurityGroups200Response> localVarResponse = listSecurityGroupsWithHttpInfo(visibility);
    return localVarResponse.getData();
  }

  /**
   * List Security Groups.
   * Lists security groups. When visibility is set to public, lists public security groups. Public security groups are objects maintained by Exoscale which contain source addresses for relevant services hosted by Exoscale. They can be used a source in ingress rules and as a destination in egress rules.
   * @param visibility  (optional)
   * @return ApiResponse&lt;ListSecurityGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListSecurityGroups200Response> listSecurityGroupsWithHttpInfo(String visibility) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSecurityGroupsRequestBuilder(visibility);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSecurityGroups", localVarResponse);
        }
        return new ApiResponse<ListSecurityGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListSecurityGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSecurityGroupsRequestBuilder(String visibility) throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security-group";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "visibility";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("visibility", visibility));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Resources that are scheduled to be removed in future kubernetes releases
   * This operation returns the deprecated resources for a given cluster
   * @param id  (required)
   * @return List&lt;Map&lt;String, String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Map<String, String>> listSksClusterDeprecatedResources(UUID id) throws ApiException {
    ApiResponse<List<Map<String, String>>> localVarResponse = listSksClusterDeprecatedResourcesWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Resources that are scheduled to be removed in future kubernetes releases
   * This operation returns the deprecated resources for a given cluster
   * @param id  (required)
   * @return ApiResponse&lt;List&lt;Map&lt;String, String&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Map<String, String>>> listSksClusterDeprecatedResourcesWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSksClusterDeprecatedResourcesRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSksClusterDeprecatedResources", localVarResponse);
        }
        return new ApiResponse<List<Map<String, String>>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Map<String, String>>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSksClusterDeprecatedResourcesRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listSksClusterDeprecatedResources");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster-deprecated-resources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List available versions for SKS clusters
   * 
   * @param includeDeprecated  (optional)
   * @return ListSksClusterVersions200Response
   * @throws ApiException if fails to make API call
   */
  public ListSksClusterVersions200Response listSksClusterVersions(String includeDeprecated) throws ApiException {
    ApiResponse<ListSksClusterVersions200Response> localVarResponse = listSksClusterVersionsWithHttpInfo(includeDeprecated);
    return localVarResponse.getData();
  }

  /**
   * List available versions for SKS clusters
   * 
   * @param includeDeprecated  (optional)
   * @return ApiResponse&lt;ListSksClusterVersions200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListSksClusterVersions200Response> listSksClusterVersionsWithHttpInfo(String includeDeprecated) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSksClusterVersionsRequestBuilder(includeDeprecated);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSksClusterVersions", localVarResponse);
        }
        return new ApiResponse<ListSksClusterVersions200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListSksClusterVersions200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSksClusterVersionsRequestBuilder(String includeDeprecated) throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster-version";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "include-deprecated";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("include-deprecated", includeDeprecated));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List SKS clusters
   * 
   * @return ListSksClusters200Response
   * @throws ApiException if fails to make API call
   */
  public ListSksClusters200Response listSksClusters() throws ApiException {
    ApiResponse<ListSksClusters200Response> localVarResponse = listSksClustersWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List SKS clusters
   * 
   * @return ApiResponse&lt;ListSksClusters200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListSksClusters200Response> listSksClustersWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSksClustersRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSksClusters", localVarResponse);
        }
        return new ApiResponse<ListSksClusters200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListSksClusters200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSksClustersRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Snapshots
   * 
   * @return ListSnapshots200Response
   * @throws ApiException if fails to make API call
   */
  public ListSnapshots200Response listSnapshots() throws ApiException {
    ApiResponse<ListSnapshots200Response> localVarResponse = listSnapshotsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Snapshots
   * 
   * @return ApiResponse&lt;ListSnapshots200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListSnapshots200Response> listSnapshotsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSnapshotsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSnapshots", localVarResponse);
        }
        return new ApiResponse<ListSnapshots200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListSnapshots200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSnapshotsRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/snapshot";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List SOS Buckets Usage
   * 
   * @return ListSosBucketsUsage200Response
   * @throws ApiException if fails to make API call
   */
  public ListSosBucketsUsage200Response listSosBucketsUsage() throws ApiException {
    ApiResponse<ListSosBucketsUsage200Response> localVarResponse = listSosBucketsUsageWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List SOS Buckets Usage
   * 
   * @return ApiResponse&lt;ListSosBucketsUsage200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListSosBucketsUsage200Response> listSosBucketsUsageWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSosBucketsUsageRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSosBucketsUsage", localVarResponse);
        }
        return new ApiResponse<ListSosBucketsUsage200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListSosBucketsUsage200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSosBucketsUsageRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sos-buckets-usage";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List SSH keys
   * 
   * @return ListSshKeys200Response
   * @throws ApiException if fails to make API call
   */
  public ListSshKeys200Response listSshKeys() throws ApiException {
    ApiResponse<ListSshKeys200Response> localVarResponse = listSshKeysWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List SSH keys
   * 
   * @return ApiResponse&lt;ListSshKeys200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListSshKeys200Response> listSshKeysWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSshKeysRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSshKeys", localVarResponse);
        }
        return new ApiResponse<ListSshKeys200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListSshKeys200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSshKeysRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ssh-key";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Templates
   * 
   * @param visibility  (optional)
   * @param family  (optional)
   * @return ListTemplates200Response
   * @throws ApiException if fails to make API call
   */
  public ListTemplates200Response listTemplates(String visibility, String family) throws ApiException {
    ApiResponse<ListTemplates200Response> localVarResponse = listTemplatesWithHttpInfo(visibility, family);
    return localVarResponse.getData();
  }

  /**
   * List Templates
   * 
   * @param visibility  (optional)
   * @param family  (optional)
   * @return ApiResponse&lt;ListTemplates200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListTemplates200Response> listTemplatesWithHttpInfo(String visibility, String family) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listTemplatesRequestBuilder(visibility, family);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listTemplates", localVarResponse);
        }
        return new ApiResponse<ListTemplates200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListTemplates200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listTemplatesRequestBuilder(String visibility, String family) throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/template";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "visibility";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("visibility", visibility));
    localVarQueryParameterBaseName = "family";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("family", family));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Zones
   * 
   * @return ListZones200Response
   * @throws ApiException if fails to make API call
   */
  public ListZones200Response listZones() throws ApiException {
    ApiResponse<ListZones200Response> localVarResponse = listZonesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Zones
   * 
   * @return ApiResponse&lt;ListZones200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListZones200Response> listZonesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listZonesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listZones", localVarResponse);
        }
        return new ApiResponse<ListZones200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListZones200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listZonesRequestBuilder() throws ApiException {

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/zone";
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Promote a Snapshot to a Template
   * 
   * @param id  (required)
   * @param promoteSnapshotToTemplateRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation promoteSnapshotToTemplate(UUID id, PromoteSnapshotToTemplateRequest promoteSnapshotToTemplateRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = promoteSnapshotToTemplateWithHttpInfo(id, promoteSnapshotToTemplateRequest);
    return localVarResponse.getData();
  }

  /**
   * Promote a Snapshot to a Template
   * 
   * @param id  (required)
   * @param promoteSnapshotToTemplateRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> promoteSnapshotToTemplateWithHttpInfo(UUID id, PromoteSnapshotToTemplateRequest promoteSnapshotToTemplateRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = promoteSnapshotToTemplateRequestBuilder(id, promoteSnapshotToTemplateRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("promoteSnapshotToTemplate", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder promoteSnapshotToTemplateRequestBuilder(UUID id, PromoteSnapshotToTemplateRequest promoteSnapshotToTemplateRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling promoteSnapshotToTemplate");
    }
    // verify the required parameter 'promoteSnapshotToTemplateRequest' is set
    if (promoteSnapshotToTemplateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'promoteSnapshotToTemplateRequest' when calling promoteSnapshotToTemplate");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/snapshot/{id}:promote"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(promoteSnapshotToTemplateRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reboot a Compute instance
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation rebootInstance(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = rebootInstanceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Reboot a Compute instance
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> rebootInstanceWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rebootInstanceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rebootInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rebootInstanceRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling rebootInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:reboot"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Import SSH key
   * 
   * @param registerSshKeyRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation registerSshKey(RegisterSshKeyRequest registerSshKeyRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = registerSshKeyWithHttpInfo(registerSshKeyRequest);
    return localVarResponse.getData();
  }

  /**
   * Import SSH key
   * 
   * @param registerSshKeyRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> registerSshKeyWithHttpInfo(RegisterSshKeyRequest registerSshKeyRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = registerSshKeyRequestBuilder(registerSshKeyRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("registerSshKey", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder registerSshKeyRequestBuilder(RegisterSshKeyRequest registerSshKeyRequest) throws ApiException {
    // verify the required parameter 'registerSshKeyRequest' is set
    if (registerSshKeyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'registerSshKeyRequest' when calling registerSshKey");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ssh-key";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(registerSshKeyRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Register a Template
   * 
   * @param registerTemplateRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation registerTemplate(RegisterTemplateRequest registerTemplateRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = registerTemplateWithHttpInfo(registerTemplateRequest);
    return localVarResponse.getData();
  }

  /**
   * Register a Template
   * 
   * @param registerTemplateRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> registerTemplateWithHttpInfo(RegisterTemplateRequest registerTemplateRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = registerTemplateRequestBuilder(registerTemplateRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("registerTemplate", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder registerTemplateRequestBuilder(RegisterTemplateRequest registerTemplateRequest) throws ApiException {
    // verify the required parameter 'registerTemplateRequest' is set
    if (registerTemplateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'registerTemplateRequest' when calling registerTemplate");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/template";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(registerTemplateRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove an external source from a Security Group
   * 
   * @param id  (required)
   * @param removeExternalSourceFromSecurityGroupRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation removeExternalSourceFromSecurityGroup(UUID id, RemoveExternalSourceFromSecurityGroupRequest removeExternalSourceFromSecurityGroupRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = removeExternalSourceFromSecurityGroupWithHttpInfo(id, removeExternalSourceFromSecurityGroupRequest);
    return localVarResponse.getData();
  }

  /**
   * Remove an external source from a Security Group
   * 
   * @param id  (required)
   * @param removeExternalSourceFromSecurityGroupRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> removeExternalSourceFromSecurityGroupWithHttpInfo(UUID id, RemoveExternalSourceFromSecurityGroupRequest removeExternalSourceFromSecurityGroupRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeExternalSourceFromSecurityGroupRequestBuilder(id, removeExternalSourceFromSecurityGroupRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeExternalSourceFromSecurityGroup", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeExternalSourceFromSecurityGroupRequestBuilder(UUID id, RemoveExternalSourceFromSecurityGroupRequest removeExternalSourceFromSecurityGroupRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removeExternalSourceFromSecurityGroup");
    }
    // verify the required parameter 'removeExternalSourceFromSecurityGroupRequest' is set
    if (removeExternalSourceFromSecurityGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'removeExternalSourceFromSecurityGroupRequest' when calling removeExternalSourceFromSecurityGroup");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/security-group/{id}:remove-source"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(removeExternalSourceFromSecurityGroupRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Remove instance destruction protection
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation removeInstanceProtection(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = removeInstanceProtectionWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Remove instance destruction protection
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> removeInstanceProtectionWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeInstanceProtectionRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeInstanceProtection", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeInstanceProtectionRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removeInstanceProtection");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:remove-protection"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the credentials of a DBaaS Kafka user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetDbaasKafkaUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetDbaasKafkaUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset the credentials of a DBaaS Kafka user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetDbaasKafkaUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetDbaasKafkaUserPasswordRequestBuilder(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetDbaasKafkaUserPassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetDbaasKafkaUserPasswordRequestBuilder(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling resetDbaasKafkaUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling resetDbaasKafkaUserPassword");
    }
    // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
    if (resetDbaasOpensearchUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasKafkaUserPassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{service-name}/user/{username}/password/reset"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(resetDbaasOpensearchUserPasswordRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the credentials of a DBaaS mysql user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasMysqlUserPasswordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetDbaasMysqlUserPassword(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetDbaasMysqlUserPasswordWithHttpInfo(serviceName, username, resetDbaasMysqlUserPasswordRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset the credentials of a DBaaS mysql user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasMysqlUserPasswordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetDbaasMysqlUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetDbaasMysqlUserPasswordRequestBuilder(serviceName, username, resetDbaasMysqlUserPasswordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetDbaasMysqlUserPassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetDbaasMysqlUserPasswordRequestBuilder(String serviceName, String username, ResetDbaasMysqlUserPasswordRequest resetDbaasMysqlUserPasswordRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling resetDbaasMysqlUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling resetDbaasMysqlUserPassword");
    }
    // verify the required parameter 'resetDbaasMysqlUserPasswordRequest' is set
    if (resetDbaasMysqlUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetDbaasMysqlUserPasswordRequest' when calling resetDbaasMysqlUserPassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/user/{username}/password/reset"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(resetDbaasMysqlUserPasswordRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the credentials of a DBaaS OpenSearch user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetDbaasOpensearchUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetDbaasOpensearchUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset the credentials of a DBaaS OpenSearch user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetDbaasOpensearchUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetDbaasOpensearchUserPasswordRequestBuilder(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetDbaasOpensearchUserPassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetDbaasOpensearchUserPasswordRequestBuilder(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling resetDbaasOpensearchUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling resetDbaasOpensearchUserPassword");
    }
    // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
    if (resetDbaasOpensearchUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasOpensearchUserPassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{service-name}/user/{username}/password/reset"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(resetDbaasOpensearchUserPasswordRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the credentials of a DBaaS Postgres user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetDbaasPostgresUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetDbaasPostgresUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset the credentials of a DBaaS Postgres user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetDbaasPostgresUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetDbaasPostgresUserPasswordRequestBuilder(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetDbaasPostgresUserPassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetDbaasPostgresUserPasswordRequestBuilder(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling resetDbaasPostgresUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling resetDbaasPostgresUserPassword");
    }
    // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
    if (resetDbaasOpensearchUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasPostgresUserPassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/user/{username}/password/reset"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(resetDbaasOpensearchUserPasswordRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the credentials of a DBaaS Redis user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetDbaasRedisUserPassword(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetDbaasRedisUserPasswordWithHttpInfo(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset the credentials of a DBaaS Redis user
   * If no password is provided one will be generated automatically.
   * @param serviceName  (required)
   * @param username  (required)
   * @param resetDbaasOpensearchUserPasswordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetDbaasRedisUserPasswordWithHttpInfo(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetDbaasRedisUserPasswordRequestBuilder(serviceName, username, resetDbaasOpensearchUserPasswordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetDbaasRedisUserPassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetDbaasRedisUserPasswordRequestBuilder(String serviceName, String username, ResetDbaasOpensearchUserPasswordRequest resetDbaasOpensearchUserPasswordRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling resetDbaasRedisUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling resetDbaasRedisUserPassword");
    }
    // verify the required parameter 'resetDbaasOpensearchUserPasswordRequest' is set
    if (resetDbaasOpensearchUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetDbaasOpensearchUserPasswordRequest' when calling resetDbaasRedisUserPassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{service-name}/user/{username}/password/reset"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(resetDbaasOpensearchUserPasswordRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset an Elastic IP field to its default value
   * 
   * @param id  (required)
   * @param field  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetElasticIpField(UUID id, String field) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetElasticIpFieldWithHttpInfo(id, field);
    return localVarResponse.getData();
  }

  /**
   * Reset an Elastic IP field to its default value
   * 
   * @param id  (required)
   * @param field  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetElasticIpFieldWithHttpInfo(UUID id, String field) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetElasticIpFieldRequestBuilder(id, field);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetElasticIpField", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetElasticIpFieldRequestBuilder(UUID id, String field) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetElasticIpField");
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      throw new ApiException(400, "Missing the required parameter 'field' when calling resetElasticIpField");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/elastic-ip/{id}/{field}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{field}", ApiClient.urlEncode(field.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset a Compute instance to a base/target template
   * This operation re-installs a Compute instance to a base template. If target template is provided it will be used to recreated instance from. Warning: the operation wipes all data stored on the disk.
   * @param id  (required)
   * @param resetInstanceRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetInstance(UUID id, ResetInstanceRequest resetInstanceRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetInstanceWithHttpInfo(id, resetInstanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Reset a Compute instance to a base/target template
   * This operation re-installs a Compute instance to a base template. If target template is provided it will be used to recreated instance from. Warning: the operation wipes all data stored on the disk.
   * @param id  (required)
   * @param resetInstanceRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetInstanceWithHttpInfo(UUID id, ResetInstanceRequest resetInstanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetInstanceRequestBuilder(id, resetInstanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetInstanceRequestBuilder(UUID id, ResetInstanceRequest resetInstanceRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetInstance");
    }
    // verify the required parameter 'resetInstanceRequest' is set
    if (resetInstanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resetInstanceRequest' when calling resetInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:reset"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(resetInstanceRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset Instance field
   * 
   * @param id  (required)
   * @param field  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetInstanceField(UUID id, String field) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetInstanceFieldWithHttpInfo(id, field);
    return localVarResponse.getData();
  }

  /**
   * Reset Instance field
   * 
   * @param id  (required)
   * @param field  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetInstanceFieldWithHttpInfo(UUID id, String field) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetInstanceFieldRequestBuilder(id, field);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetInstanceField", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetInstanceFieldRequestBuilder(UUID id, String field) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetInstanceField");
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      throw new ApiException(400, "Missing the required parameter 'field' when calling resetInstanceField");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}/{field}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{field}", ApiClient.urlEncode(field.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset a compute instance password
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetInstancePassword(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetInstancePasswordWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Reset a compute instance password
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetInstancePasswordWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetInstancePasswordRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetInstancePassword", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetInstancePasswordRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetInstancePassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:reset-password"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset an Instance Pool field to its default value
   * 
   * @param id  (required)
   * @param field  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetInstancePoolField(UUID id, String field) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetInstancePoolFieldWithHttpInfo(id, field);
    return localVarResponse.getData();
  }

  /**
   * Reset an Instance Pool field to its default value
   * 
   * @param id  (required)
   * @param field  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetInstancePoolFieldWithHttpInfo(UUID id, String field) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetInstancePoolFieldRequestBuilder(id, field);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetInstancePoolField", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetInstancePoolFieldRequestBuilder(UUID id, String field) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetInstancePoolField");
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      throw new ApiException(400, "Missing the required parameter 'field' when calling resetInstancePoolField");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance-pool/{id}/{field}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{field}", ApiClient.urlEncode(field.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset a Load Balancer field to its default value
   * 
   * @param id  (required)
   * @param field  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetLoadBalancerField(UUID id, String field) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetLoadBalancerFieldWithHttpInfo(id, field);
    return localVarResponse.getData();
  }

  /**
   * Reset a Load Balancer field to its default value
   * 
   * @param id  (required)
   * @param field  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetLoadBalancerFieldWithHttpInfo(UUID id, String field) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetLoadBalancerFieldRequestBuilder(id, field);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetLoadBalancerField", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetLoadBalancerFieldRequestBuilder(UUID id, String field) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetLoadBalancerField");
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      throw new ApiException(400, "Missing the required parameter 'field' when calling resetLoadBalancerField");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer/{id}/{field}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{field}", ApiClient.urlEncode(field.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset a Load Balancer Service field to its default value
   * 
   * @param id  (required)
   * @param serviceId  (required)
   * @param field  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetLoadBalancerServiceField(UUID id, UUID serviceId, String field) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetLoadBalancerServiceFieldWithHttpInfo(id, serviceId, field);
    return localVarResponse.getData();
  }

  /**
   * Reset a Load Balancer Service field to its default value
   * 
   * @param id  (required)
   * @param serviceId  (required)
   * @param field  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetLoadBalancerServiceFieldWithHttpInfo(UUID id, UUID serviceId, String field) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetLoadBalancerServiceFieldRequestBuilder(id, serviceId, field);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetLoadBalancerServiceField", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetLoadBalancerServiceFieldRequestBuilder(UUID id, UUID serviceId, String field) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetLoadBalancerServiceField");
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceId' when calling resetLoadBalancerServiceField");
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      throw new ApiException(400, "Missing the required parameter 'field' when calling resetLoadBalancerServiceField");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer/{id}/service/{service-id}/{field}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{service-id}", ApiClient.urlEncode(serviceId.toString()))
        .replace("{field}", ApiClient.urlEncode(field.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset Private Network field
   * 
   * @param id  (required)
   * @param field  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetPrivateNetworkField(UUID id, String field) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetPrivateNetworkFieldWithHttpInfo(id, field);
    return localVarResponse.getData();
  }

  /**
   * Reset Private Network field
   * 
   * @param id  (required)
   * @param field  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetPrivateNetworkFieldWithHttpInfo(UUID id, String field) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetPrivateNetworkFieldRequestBuilder(id, field);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetPrivateNetworkField", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetPrivateNetworkFieldRequestBuilder(UUID id, String field) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetPrivateNetworkField");
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      throw new ApiException(400, "Missing the required parameter 'field' when calling resetPrivateNetworkField");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/private-network/{id}/{field}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{field}", ApiClient.urlEncode(field.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset an SKS cluster field to its default value
   * 
   * @param id  (required)
   * @param field  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetSksClusterField(UUID id, String field) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetSksClusterFieldWithHttpInfo(id, field);
    return localVarResponse.getData();
  }

  /**
   * Reset an SKS cluster field to its default value
   * 
   * @param id  (required)
   * @param field  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetSksClusterFieldWithHttpInfo(UUID id, String field) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetSksClusterFieldRequestBuilder(id, field);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetSksClusterField", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetSksClusterFieldRequestBuilder(UUID id, String field) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetSksClusterField");
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      throw new ApiException(400, "Missing the required parameter 'field' when calling resetSksClusterField");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/{field}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{field}", ApiClient.urlEncode(field.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset an SKS Nodepool field to its default value
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param field  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resetSksNodepoolField(UUID id, UUID sksNodepoolId, String field) throws ApiException {
    ApiResponse<Operation> localVarResponse = resetSksNodepoolFieldWithHttpInfo(id, sksNodepoolId, field);
    return localVarResponse.getData();
  }

  /**
   * Reset an SKS Nodepool field to its default value
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param field  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resetSksNodepoolFieldWithHttpInfo(UUID id, UUID sksNodepoolId, String field) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetSksNodepoolFieldRequestBuilder(id, sksNodepoolId, field);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetSksNodepoolField", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetSksNodepoolFieldRequestBuilder(UUID id, UUID sksNodepoolId, String field) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetSksNodepoolField");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling resetSksNodepoolField");
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      throw new ApiException(400, "Missing the required parameter 'field' when calling resetSksNodepoolField");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}/{field}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()))
        .replace("{field}", ApiClient.urlEncode(field.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("DELETE", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Resize a block storage volume
   * This operation resizes a Block storage volume. Note: the volume can only grow, cannot be shrunk.
   * @param id  (required)
   * @param resizeBlockStorageVolumeRequest  (required)
   * @return BlockStorageVolume
   * @throws ApiException if fails to make API call
   */
  public BlockStorageVolume resizeBlockStorageVolume(UUID id, ResizeBlockStorageVolumeRequest resizeBlockStorageVolumeRequest) throws ApiException {
    ApiResponse<BlockStorageVolume> localVarResponse = resizeBlockStorageVolumeWithHttpInfo(id, resizeBlockStorageVolumeRequest);
    return localVarResponse.getData();
  }

  /**
   * Resize a block storage volume
   * This operation resizes a Block storage volume. Note: the volume can only grow, cannot be shrunk.
   * @param id  (required)
   * @param resizeBlockStorageVolumeRequest  (required)
   * @return ApiResponse&lt;BlockStorageVolume&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BlockStorageVolume> resizeBlockStorageVolumeWithHttpInfo(UUID id, ResizeBlockStorageVolumeRequest resizeBlockStorageVolumeRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resizeBlockStorageVolumeRequestBuilder(id, resizeBlockStorageVolumeRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resizeBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<BlockStorageVolume>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BlockStorageVolume>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resizeBlockStorageVolumeRequestBuilder(UUID id, ResizeBlockStorageVolumeRequest resizeBlockStorageVolumeRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resizeBlockStorageVolume");
    }
    // verify the required parameter 'resizeBlockStorageVolumeRequest' is set
    if (resizeBlockStorageVolumeRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resizeBlockStorageVolumeRequest' when calling resizeBlockStorageVolume");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}:resize-volume"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(resizeBlockStorageVolumeRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Resize a Compute instance disk
   * This operation resizes a Compute instance&#39;s disk volume. Note: the disk can only grow, cannot be shrunk.
   * @param id  (required)
   * @param resizeInstanceDiskRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation resizeInstanceDisk(UUID id, ResizeInstanceDiskRequest resizeInstanceDiskRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = resizeInstanceDiskWithHttpInfo(id, resizeInstanceDiskRequest);
    return localVarResponse.getData();
  }

  /**
   * Resize a Compute instance disk
   * This operation resizes a Compute instance&#39;s disk volume. Note: the disk can only grow, cannot be shrunk.
   * @param id  (required)
   * @param resizeInstanceDiskRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> resizeInstanceDiskWithHttpInfo(UUID id, ResizeInstanceDiskRequest resizeInstanceDiskRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resizeInstanceDiskRequestBuilder(id, resizeInstanceDiskRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resizeInstanceDisk", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resizeInstanceDiskRequestBuilder(UUID id, ResizeInstanceDiskRequest resizeInstanceDiskRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resizeInstanceDisk");
    }
    // verify the required parameter 'resizeInstanceDiskRequest' is set
    if (resizeInstanceDiskRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resizeInstanceDiskRequest' when calling resizeInstanceDisk");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:resize-disk"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(resizeInstanceDiskRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the secrets of a DBaaS Kafka user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return DbaasUserKafkaSecrets
   * @throws ApiException if fails to make API call
   */
  public DbaasUserKafkaSecrets revealDbaasKafkaUserPassword(String serviceName, String username) throws ApiException {
    ApiResponse<DbaasUserKafkaSecrets> localVarResponse = revealDbaasKafkaUserPasswordWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Reveal the secrets of a DBaaS Kafka user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;DbaasUserKafkaSecrets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasUserKafkaSecrets> revealDbaasKafkaUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealDbaasKafkaUserPasswordRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealDbaasKafkaUserPassword", localVarResponse);
        }
        return new ApiResponse<DbaasUserKafkaSecrets>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasUserKafkaSecrets>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealDbaasKafkaUserPasswordRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling revealDbaasKafkaUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling revealDbaasKafkaUserPassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{service-name}/user/{username}/password/reveal"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the secrets of a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return DbaasUserMysqlSecrets
   * @throws ApiException if fails to make API call
   */
  public DbaasUserMysqlSecrets revealDbaasMysqlUserPassword(String serviceName, String username) throws ApiException {
    ApiResponse<DbaasUserMysqlSecrets> localVarResponse = revealDbaasMysqlUserPasswordWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Reveal the secrets of a DBaaS MySQL user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;DbaasUserMysqlSecrets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasUserMysqlSecrets> revealDbaasMysqlUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealDbaasMysqlUserPasswordRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealDbaasMysqlUserPassword", localVarResponse);
        }
        return new ApiResponse<DbaasUserMysqlSecrets>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasUserMysqlSecrets>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealDbaasMysqlUserPasswordRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling revealDbaasMysqlUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling revealDbaasMysqlUserPassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{service-name}/user/{username}/password/reveal"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the secrets of a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return DbaasUserOpensearchSecrets
   * @throws ApiException if fails to make API call
   */
  public DbaasUserOpensearchSecrets revealDbaasOpensearchUserPassword(String serviceName, String username) throws ApiException {
    ApiResponse<DbaasUserOpensearchSecrets> localVarResponse = revealDbaasOpensearchUserPasswordWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Reveal the secrets of a DBaaS OpenSearch user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;DbaasUserOpensearchSecrets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasUserOpensearchSecrets> revealDbaasOpensearchUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealDbaasOpensearchUserPasswordRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealDbaasOpensearchUserPassword", localVarResponse);
        }
        return new ApiResponse<DbaasUserOpensearchSecrets>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasUserOpensearchSecrets>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealDbaasOpensearchUserPasswordRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling revealDbaasOpensearchUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling revealDbaasOpensearchUserPassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{service-name}/user/{username}/password/reveal"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the secrets of a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return DbaasUserPostgresSecrets
   * @throws ApiException if fails to make API call
   */
  public DbaasUserPostgresSecrets revealDbaasPostgresUserPassword(String serviceName, String username) throws ApiException {
    ApiResponse<DbaasUserPostgresSecrets> localVarResponse = revealDbaasPostgresUserPasswordWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Reveal the secrets of a DBaaS Postgres user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;DbaasUserPostgresSecrets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasUserPostgresSecrets> revealDbaasPostgresUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealDbaasPostgresUserPasswordRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealDbaasPostgresUserPassword", localVarResponse);
        }
        return new ApiResponse<DbaasUserPostgresSecrets>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasUserPostgresSecrets>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealDbaasPostgresUserPasswordRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling revealDbaasPostgresUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling revealDbaasPostgresUserPassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/user/{username}/password/reveal"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the secrets of a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return DbaasUserRedisSecrets
   * @throws ApiException if fails to make API call
   */
  public DbaasUserRedisSecrets revealDbaasRedisUserPassword(String serviceName, String username) throws ApiException {
    ApiResponse<DbaasUserRedisSecrets> localVarResponse = revealDbaasRedisUserPasswordWithHttpInfo(serviceName, username);
    return localVarResponse.getData();
  }

  /**
   * Reveal the secrets of a DBaaS Redis user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @return ApiResponse&lt;DbaasUserRedisSecrets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasUserRedisSecrets> revealDbaasRedisUserPasswordWithHttpInfo(String serviceName, String username) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealDbaasRedisUserPasswordRequestBuilder(serviceName, username);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealDbaasRedisUserPassword", localVarResponse);
        }
        return new ApiResponse<DbaasUserRedisSecrets>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasUserRedisSecrets>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealDbaasRedisUserPasswordRequestBuilder(String serviceName, String username) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling revealDbaasRedisUserPassword");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling revealDbaasRedisUserPassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{service-name}/user/{username}/password/reveal"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reveal the password used during instance creation or the latest password reset.
   * Reveal the password used during instance creation or the latest password reset.             This is only available for VMs created against templates having the &#x60;password-enabled&#x60;             property set to &#x60;true&#x60;.              Passwords are transiently stored for at most 24 hours and intended to be retrieved shortly after             creation or resets.
   * @param id  (required)
   * @return InstancePassword
   * @throws ApiException if fails to make API call
   */
  public InstancePassword revealInstancePassword(UUID id) throws ApiException {
    ApiResponse<InstancePassword> localVarResponse = revealInstancePasswordWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Reveal the password used during instance creation or the latest password reset.
   * Reveal the password used during instance creation or the latest password reset.             This is only available for VMs created against templates having the &#x60;password-enabled&#x60;             property set to &#x60;true&#x60;.              Passwords are transiently stored for at most 24 hours and intended to be retrieved shortly after             creation or resets.
   * @param id  (required)
   * @return ApiResponse&lt;InstancePassword&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InstancePassword> revealInstancePasswordWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revealInstancePasswordRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revealInstancePassword", localVarResponse);
        }
        return new ApiResponse<InstancePassword>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InstancePassword>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revealInstancePasswordRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling revealInstancePassword");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:password"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("GET", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Revert a snapshot for an instance
   * This operation reverts the snapshot to the Compute instance volume, restoring stored data as it was at the time of the snapshot. The Compute instance must be previously stopped.
   * @param instanceId  (required)
   * @param revertInstanceToSnapshotRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation revertInstanceToSnapshot(UUID instanceId, RevertInstanceToSnapshotRequest revertInstanceToSnapshotRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = revertInstanceToSnapshotWithHttpInfo(instanceId, revertInstanceToSnapshotRequest);
    return localVarResponse.getData();
  }

  /**
   * Revert a snapshot for an instance
   * This operation reverts the snapshot to the Compute instance volume, restoring stored data as it was at the time of the snapshot. The Compute instance must be previously stopped.
   * @param instanceId  (required)
   * @param revertInstanceToSnapshotRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> revertInstanceToSnapshotWithHttpInfo(UUID instanceId, RevertInstanceToSnapshotRequest revertInstanceToSnapshotRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revertInstanceToSnapshotRequestBuilder(instanceId, revertInstanceToSnapshotRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revertInstanceToSnapshot", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revertInstanceToSnapshotRequestBuilder(UUID instanceId, RevertInstanceToSnapshotRequest revertInstanceToSnapshotRequest) throws ApiException {
    // verify the required parameter 'instanceId' is set
    if (instanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceId' when calling revertInstanceToSnapshot");
    }
    // verify the required parameter 'revertInstanceToSnapshotRequest' is set
    if (revertInstanceToSnapshotRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'revertInstanceToSnapshotRequest' when calling revertInstanceToSnapshot");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{instance-id}:revert-snapshot"
        .replace("{instance-id}", ApiClient.urlEncode(instanceId.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(revertInstanceToSnapshotRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rotate Exoscale CCM credentials
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation rotateSksCcmCredentials(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = rotateSksCcmCredentialsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Rotate Exoscale CCM credentials
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> rotateSksCcmCredentialsWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rotateSksCcmCredentialsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rotateSksCcmCredentials", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rotateSksCcmCredentialsRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling rotateSksCcmCredentials");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/rotate-ccm-credentials"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rotate operators certificate authority
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation rotateSksOperatorsCa(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = rotateSksOperatorsCaWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Rotate operators certificate authority
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> rotateSksOperatorsCaWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rotateSksOperatorsCaRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rotateSksOperatorsCa", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rotateSksOperatorsCaRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling rotateSksOperatorsCa");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/rotate-operators-ca"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Scale a Compute instance to a new Instance Type
   * This operation changes the Compute instance&#39;s type. Note: the new Instance Type must be within the same family (e.g. a standard instance cannot be scaled to gpu2 or storage).
   * @param id  (required)
   * @param scaleInstanceRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation scaleInstance(UUID id, ScaleInstanceRequest scaleInstanceRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = scaleInstanceWithHttpInfo(id, scaleInstanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Scale a Compute instance to a new Instance Type
   * This operation changes the Compute instance&#39;s type. Note: the new Instance Type must be within the same family (e.g. a standard instance cannot be scaled to gpu2 or storage).
   * @param id  (required)
   * @param scaleInstanceRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> scaleInstanceWithHttpInfo(UUID id, ScaleInstanceRequest scaleInstanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = scaleInstanceRequestBuilder(id, scaleInstanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("scaleInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder scaleInstanceRequestBuilder(UUID id, ScaleInstanceRequest scaleInstanceRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling scaleInstance");
    }
    // verify the required parameter 'scaleInstanceRequest' is set
    if (scaleInstanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'scaleInstanceRequest' when calling scaleInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:scale"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(scaleInstanceRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Scale an Instance Pool
   * 
   * @param id  (required)
   * @param scaleInstancePoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation scaleInstancePool(UUID id, ScaleInstancePoolRequest scaleInstancePoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = scaleInstancePoolWithHttpInfo(id, scaleInstancePoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Scale an Instance Pool
   * 
   * @param id  (required)
   * @param scaleInstancePoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> scaleInstancePoolWithHttpInfo(UUID id, ScaleInstancePoolRequest scaleInstancePoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = scaleInstancePoolRequestBuilder(id, scaleInstancePoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("scaleInstancePool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder scaleInstancePoolRequestBuilder(UUID id, ScaleInstancePoolRequest scaleInstancePoolRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling scaleInstancePool");
    }
    // verify the required parameter 'scaleInstancePoolRequest' is set
    if (scaleInstancePoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'scaleInstancePoolRequest' when calling scaleInstancePool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance-pool/{id}:scale"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(scaleInstancePoolRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Scale a SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param scaleSksNodepoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation scaleSksNodepool(UUID id, UUID sksNodepoolId, ScaleSksNodepoolRequest scaleSksNodepoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = scaleSksNodepoolWithHttpInfo(id, sksNodepoolId, scaleSksNodepoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Scale a SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param scaleSksNodepoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> scaleSksNodepoolWithHttpInfo(UUID id, UUID sksNodepoolId, ScaleSksNodepoolRequest scaleSksNodepoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = scaleSksNodepoolRequestBuilder(id, sksNodepoolId, scaleSksNodepoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("scaleSksNodepool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder scaleSksNodepoolRequestBuilder(UUID id, UUID sksNodepoolId, ScaleSksNodepoolRequest scaleSksNodepoolRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling scaleSksNodepool");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling scaleSksNodepool");
    }
    // verify the required parameter 'scaleSksNodepoolRequest' is set
    if (scaleSksNodepoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'scaleSksNodepoolRequest' when calling scaleSksNodepool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}:scale"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(scaleSksNodepoolRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate Grafana maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasGrafanaMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasGrafanaMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate Grafana maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasGrafanaMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasGrafanaMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasGrafanaMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasGrafanaMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasGrafanaMaintenance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-grafana/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate Kafka maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasKafkaMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasKafkaMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate Kafka maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasKafkaMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasKafkaMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasKafkaMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasKafkaMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasKafkaMaintenance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate MySQL maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasMysqlMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasMysqlMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate MySQL maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasMysqlMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasMysqlMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasMysqlMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasMysqlMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasMysqlMaintenance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate OpenSearch maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasOpensearchMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasOpensearchMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate OpenSearch maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasOpensearchMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasOpensearchMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasOpensearchMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasOpensearchMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasOpensearchMaintenance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate PostgreSQL maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasPgMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasPgMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate PostgreSQL maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasPgMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasPgMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasPgMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasPgMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasPgMaintenance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate Redis maintenance update
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startDbaasRedisMaintenance(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = startDbaasRedisMaintenanceWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Initiate Redis maintenance update
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startDbaasRedisMaintenanceWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDbaasRedisMaintenanceRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDbaasRedisMaintenance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDbaasRedisMaintenanceRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling startDbaasRedisMaintenance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}/maintenance/start"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Start a Compute instance
   * This operation starts a virtual machine, potentially using a rescue profile if specified
   * @param id  (required)
   * @param startInstanceRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation startInstance(UUID id, StartInstanceRequest startInstanceRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = startInstanceWithHttpInfo(id, startInstanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Start a Compute instance
   * This operation starts a virtual machine, potentially using a rescue profile if specified
   * @param id  (required)
   * @param startInstanceRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> startInstanceWithHttpInfo(UUID id, StartInstanceRequest startInstanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startInstanceRequestBuilder(id, startInstanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startInstanceRequestBuilder(UUID id, StartInstanceRequest startInstanceRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling startInstance");
    }
    // verify the required parameter 'startInstanceRequest' is set
    if (startInstanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'startInstanceRequest' when calling startInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:start"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(startInstanceRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Stop a DBaaS MySQL migration
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation stopDbaasMysqlMigration(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = stopDbaasMysqlMigrationWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Stop a DBaaS MySQL migration
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> stopDbaasMysqlMigrationWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = stopDbaasMysqlMigrationRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("stopDbaasMysqlMigration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder stopDbaasMysqlMigrationRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling stopDbaasMysqlMigration");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}/migration/stop"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Stop a DBaaS PostgreSQL migration
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation stopDbaasPgMigration(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = stopDbaasPgMigrationWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Stop a DBaaS PostgreSQL migration
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> stopDbaasPgMigrationWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = stopDbaasPgMigrationRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("stopDbaasPgMigration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder stopDbaasPgMigrationRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling stopDbaasPgMigration");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}/migration/stop"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Stop a DBaaS Redis migration
   * 
   * @param name  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation stopDbaasRedisMigration(String name) throws ApiException {
    ApiResponse<Operation> localVarResponse = stopDbaasRedisMigrationWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Stop a DBaaS Redis migration
   * 
   * @param name  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> stopDbaasRedisMigrationWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = stopDbaasRedisMigrationRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("stopDbaasRedisMigration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder stopDbaasRedisMigrationRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling stopDbaasRedisMigration");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}/migration/stop"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Stop a Compute instance
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation stopInstance(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = stopInstanceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Stop a Compute instance
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> stopInstanceWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = stopInstanceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("stopInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder stopInstanceRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling stopInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}:stop"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update block storage volume snapshot
   * 
   * @param id  (required)
   * @param updateBlockStorageSnapshotRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateBlockStorageSnapshot(UUID id, UpdateBlockStorageSnapshotRequest updateBlockStorageSnapshotRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateBlockStorageSnapshotWithHttpInfo(id, updateBlockStorageSnapshotRequest);
    return localVarResponse.getData();
  }

  /**
   * Update block storage volume snapshot
   * 
   * @param id  (required)
   * @param updateBlockStorageSnapshotRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateBlockStorageSnapshotWithHttpInfo(UUID id, UpdateBlockStorageSnapshotRequest updateBlockStorageSnapshotRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateBlockStorageSnapshotRequestBuilder(id, updateBlockStorageSnapshotRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateBlockStorageSnapshot", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateBlockStorageSnapshotRequestBuilder(UUID id, UpdateBlockStorageSnapshotRequest updateBlockStorageSnapshotRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateBlockStorageSnapshot");
    }
    // verify the required parameter 'updateBlockStorageSnapshotRequest' is set
    if (updateBlockStorageSnapshotRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateBlockStorageSnapshotRequest' when calling updateBlockStorageSnapshot");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage-snapshot/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateBlockStorageSnapshotRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update block storage volume
   * 
   * @param id  (required)
   * @param updateBlockStorageVolumeRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateBlockStorageVolume(UUID id, UpdateBlockStorageVolumeRequest updateBlockStorageVolumeRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateBlockStorageVolumeWithHttpInfo(id, updateBlockStorageVolumeRequest);
    return localVarResponse.getData();
  }

  /**
   * Update block storage volume
   * 
   * @param id  (required)
   * @param updateBlockStorageVolumeRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateBlockStorageVolumeWithHttpInfo(UUID id, UpdateBlockStorageVolumeRequest updateBlockStorageVolumeRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateBlockStorageVolumeRequestBuilder(id, updateBlockStorageVolumeRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateBlockStorageVolume", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateBlockStorageVolumeRequestBuilder(UUID id, UpdateBlockStorageVolumeRequest updateBlockStorageVolumeRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateBlockStorageVolume");
    }
    // verify the required parameter 'updateBlockStorageVolumeRequest' is set
    if (updateBlockStorageVolumeRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateBlockStorageVolumeRequest' when calling updateBlockStorageVolume");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/block-storage/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateBlockStorageVolumeRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a existing DBaaS integration
   * Update a existing DBaaS integration
   * @param id  (required)
   * @param updateDbaasIntegrationRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasIntegration(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasIntegrationWithHttpInfo(id, updateDbaasIntegrationRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a existing DBaaS integration
   * Update a existing DBaaS integration
   * @param id  (required)
   * @param updateDbaasIntegrationRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasIntegrationWithHttpInfo(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasIntegrationRequestBuilder(id, updateDbaasIntegrationRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasIntegration", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasIntegrationRequestBuilder(UUID id, UpdateDbaasIntegrationRequest updateDbaasIntegrationRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateDbaasIntegration");
    }
    // verify the required parameter 'updateDbaasIntegrationRequest' is set
    if (updateDbaasIntegrationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasIntegrationRequest' when calling updateDbaasIntegration");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-integration/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateDbaasIntegrationRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a DBaaS OpenSearch ACL configuration
   * 
   * @param name  (required)
   * @param dbaasOpensearchAclConfig  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasOpensearchAclConfig(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasOpensearchAclConfigWithHttpInfo(name, dbaasOpensearchAclConfig);
    return localVarResponse.getData();
  }

  /**
   * Create a DBaaS OpenSearch ACL configuration
   * 
   * @param name  (required)
   * @param dbaasOpensearchAclConfig  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasOpensearchAclConfigWithHttpInfo(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasOpensearchAclConfigRequestBuilder(name, dbaasOpensearchAclConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasOpensearchAclConfig", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasOpensearchAclConfigRequestBuilder(String name, DbaasOpensearchAclConfig dbaasOpensearchAclConfig) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasOpensearchAclConfig");
    }
    // verify the required parameter 'dbaasOpensearchAclConfig' is set
    if (dbaasOpensearchAclConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'dbaasOpensearchAclConfig' when calling updateDbaasOpensearchAclConfig");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}/acl-config"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(dbaasOpensearchAclConfig);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param connectionPoolName  (required)
   * @param updateDbaasPgConnectionPoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasPgConnectionPool(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasPgConnectionPoolWithHttpInfo(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS PostgreSQL connection pool
   * 
   * @param serviceName  (required)
   * @param connectionPoolName  (required)
   * @param updateDbaasPgConnectionPoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasPgConnectionPoolWithHttpInfo(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasPgConnectionPoolRequestBuilder(serviceName, connectionPoolName, updateDbaasPgConnectionPoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasPgConnectionPool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasPgConnectionPoolRequestBuilder(String serviceName, String connectionPoolName, UpdateDbaasPgConnectionPoolRequest updateDbaasPgConnectionPoolRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling updateDbaasPgConnectionPool");
    }
    // verify the required parameter 'connectionPoolName' is set
    if (connectionPoolName == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionPoolName' when calling updateDbaasPgConnectionPool");
    }
    // verify the required parameter 'updateDbaasPgConnectionPoolRequest' is set
    if (updateDbaasPgConnectionPoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasPgConnectionPoolRequest' when calling updateDbaasPgConnectionPool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/connection-pool/{connection-pool-name}"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{connection-pool-name}", ApiClient.urlEncode(connectionPoolName.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateDbaasPgConnectionPoolRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update access control for one service user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @param updateDbaasPostgresAllowReplicationRequest  (required)
   * @return DbaasPostgresUsers
   * @throws ApiException if fails to make API call
   */
  public DbaasPostgresUsers updateDbaasPostgresAllowReplication(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest) throws ApiException {
    ApiResponse<DbaasPostgresUsers> localVarResponse = updateDbaasPostgresAllowReplicationWithHttpInfo(serviceName, username, updateDbaasPostgresAllowReplicationRequest);
    return localVarResponse.getData();
  }

  /**
   * Update access control for one service user
   * 
   * @param serviceName  (required)
   * @param username  (required)
   * @param updateDbaasPostgresAllowReplicationRequest  (required)
   * @return ApiResponse&lt;DbaasPostgresUsers&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DbaasPostgresUsers> updateDbaasPostgresAllowReplicationWithHttpInfo(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasPostgresAllowReplicationRequestBuilder(serviceName, username, updateDbaasPostgresAllowReplicationRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasPostgresAllowReplication", localVarResponse);
        }
        return new ApiResponse<DbaasPostgresUsers>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DbaasPostgresUsers>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasPostgresAllowReplicationRequestBuilder(String serviceName, String username, UpdateDbaasPostgresAllowReplicationRequest updateDbaasPostgresAllowReplicationRequest) throws ApiException {
    // verify the required parameter 'serviceName' is set
    if (serviceName == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceName' when calling updateDbaasPostgresAllowReplication");
    }
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling updateDbaasPostgresAllowReplication");
    }
    // verify the required parameter 'updateDbaasPostgresAllowReplicationRequest' is set
    if (updateDbaasPostgresAllowReplicationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasPostgresAllowReplicationRequest' when calling updateDbaasPostgresAllowReplication");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{service-name}/user/{username}/allow-replication"
        .replace("{service-name}", ApiClient.urlEncode(serviceName.toString()))
        .replace("{username}", ApiClient.urlEncode(username.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateDbaasPostgresAllowReplicationRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS Grafana service
   * 
   * @param name  (required)
   * @param updateDbaasServiceGrafanaRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServiceGrafana(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServiceGrafanaWithHttpInfo(name, updateDbaasServiceGrafanaRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS Grafana service
   * 
   * @param name  (required)
   * @param updateDbaasServiceGrafanaRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServiceGrafanaWithHttpInfo(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServiceGrafanaRequestBuilder(name, updateDbaasServiceGrafanaRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServiceGrafana", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServiceGrafanaRequestBuilder(String name, UpdateDbaasServiceGrafanaRequest updateDbaasServiceGrafanaRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServiceGrafana");
    }
    // verify the required parameter 'updateDbaasServiceGrafanaRequest' is set
    if (updateDbaasServiceGrafanaRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServiceGrafanaRequest' when calling updateDbaasServiceGrafana");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-grafana/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateDbaasServiceGrafanaRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS Kafka service
   * Update a DBaaS Kafka service
   * @param name  (required)
   * @param updateDbaasServiceKafkaRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServiceKafka(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServiceKafkaWithHttpInfo(name, updateDbaasServiceKafkaRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS Kafka service
   * Update a DBaaS Kafka service
   * @param name  (required)
   * @param updateDbaasServiceKafkaRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServiceKafkaWithHttpInfo(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServiceKafkaRequestBuilder(name, updateDbaasServiceKafkaRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServiceKafka", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServiceKafkaRequestBuilder(String name, UpdateDbaasServiceKafkaRequest updateDbaasServiceKafkaRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServiceKafka");
    }
    // verify the required parameter 'updateDbaasServiceKafkaRequest' is set
    if (updateDbaasServiceKafkaRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServiceKafkaRequest' when calling updateDbaasServiceKafka");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-kafka/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateDbaasServiceKafkaRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS MySQL service
   * Update a DBaaS MySQL service
   * @param name  (required)
   * @param updateDbaasServiceMysqlRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServiceMysql(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServiceMysqlWithHttpInfo(name, updateDbaasServiceMysqlRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS MySQL service
   * Update a DBaaS MySQL service
   * @param name  (required)
   * @param updateDbaasServiceMysqlRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServiceMysqlWithHttpInfo(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServiceMysqlRequestBuilder(name, updateDbaasServiceMysqlRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServiceMysql", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServiceMysqlRequestBuilder(String name, UpdateDbaasServiceMysqlRequest updateDbaasServiceMysqlRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServiceMysql");
    }
    // verify the required parameter 'updateDbaasServiceMysqlRequest' is set
    if (updateDbaasServiceMysqlRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServiceMysqlRequest' when calling updateDbaasServiceMysql");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-mysql/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateDbaasServiceMysqlRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS OpenSearch service
   * Update a DBaaS OpenSearch service
   * @param name  (required)
   * @param updateDbaasServiceOpensearchRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServiceOpensearch(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServiceOpensearchWithHttpInfo(name, updateDbaasServiceOpensearchRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS OpenSearch service
   * Update a DBaaS OpenSearch service
   * @param name  (required)
   * @param updateDbaasServiceOpensearchRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServiceOpensearchWithHttpInfo(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServiceOpensearchRequestBuilder(name, updateDbaasServiceOpensearchRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServiceOpensearch", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServiceOpensearchRequestBuilder(String name, UpdateDbaasServiceOpensearchRequest updateDbaasServiceOpensearchRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServiceOpensearch");
    }
    // verify the required parameter 'updateDbaasServiceOpensearchRequest' is set
    if (updateDbaasServiceOpensearchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServiceOpensearchRequest' when calling updateDbaasServiceOpensearch");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-opensearch/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateDbaasServiceOpensearchRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS PostgreSQL service
   * Update a DBaaS PostgreSQL service
   * @param name  (required)
   * @param updateDbaasServicePgRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServicePg(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServicePgWithHttpInfo(name, updateDbaasServicePgRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS PostgreSQL service
   * Update a DBaaS PostgreSQL service
   * @param name  (required)
   * @param updateDbaasServicePgRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServicePgWithHttpInfo(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServicePgRequestBuilder(name, updateDbaasServicePgRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServicePg", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServicePgRequestBuilder(String name, UpdateDbaasServicePgRequest updateDbaasServicePgRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServicePg");
    }
    // verify the required parameter 'updateDbaasServicePgRequest' is set
    if (updateDbaasServicePgRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServicePgRequest' when calling updateDbaasServicePg");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-postgres/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateDbaasServicePgRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a DBaaS Redis service
   * Update a DBaaS Redis service
   * @param name  (required)
   * @param updateDbaasServiceRedisRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDbaasServiceRedis(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDbaasServiceRedisWithHttpInfo(name, updateDbaasServiceRedisRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a DBaaS Redis service
   * Update a DBaaS Redis service
   * @param name  (required)
   * @param updateDbaasServiceRedisRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDbaasServiceRedisWithHttpInfo(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDbaasServiceRedisRequestBuilder(name, updateDbaasServiceRedisRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDbaasServiceRedis", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDbaasServiceRedisRequestBuilder(String name, UpdateDbaasServiceRedisRequest updateDbaasServiceRedisRequest) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDbaasServiceRedis");
    }
    // verify the required parameter 'updateDbaasServiceRedisRequest' is set
    if (updateDbaasServiceRedisRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDbaasServiceRedisRequest' when calling updateDbaasServiceRedis");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dbaas-redis/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateDbaasServiceRedisRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update DNS domain record
   * 
   * @param domainId  (required)
   * @param recordId  (required)
   * @param updateDnsDomainRecordRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateDnsDomainRecord(UUID domainId, UUID recordId, UpdateDnsDomainRecordRequest updateDnsDomainRecordRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateDnsDomainRecordWithHttpInfo(domainId, recordId, updateDnsDomainRecordRequest);
    return localVarResponse.getData();
  }

  /**
   * Update DNS domain record
   * 
   * @param domainId  (required)
   * @param recordId  (required)
   * @param updateDnsDomainRecordRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateDnsDomainRecordWithHttpInfo(UUID domainId, UUID recordId, UpdateDnsDomainRecordRequest updateDnsDomainRecordRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDnsDomainRecordRequestBuilder(domainId, recordId, updateDnsDomainRecordRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDnsDomainRecord", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDnsDomainRecordRequestBuilder(UUID domainId, UUID recordId, UpdateDnsDomainRecordRequest updateDnsDomainRecordRequest) throws ApiException {
    // verify the required parameter 'domainId' is set
    if (domainId == null) {
      throw new ApiException(400, "Missing the required parameter 'domainId' when calling updateDnsDomainRecord");
    }
    // verify the required parameter 'recordId' is set
    if (recordId == null) {
      throw new ApiException(400, "Missing the required parameter 'recordId' when calling updateDnsDomainRecord");
    }
    // verify the required parameter 'updateDnsDomainRecordRequest' is set
    if (updateDnsDomainRecordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDnsDomainRecordRequest' when calling updateDnsDomainRecord");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dns-domain/{domain-id}/record/{record-id}"
        .replace("{domain-id}", ApiClient.urlEncode(domainId.toString()))
        .replace("{record-id}", ApiClient.urlEncode(recordId.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateDnsDomainRecordRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update an Elastic IP
   * 
   * @param id  (required)
   * @param updateElasticIpRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateElasticIp(UUID id, UpdateElasticIpRequest updateElasticIpRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateElasticIpWithHttpInfo(id, updateElasticIpRequest);
    return localVarResponse.getData();
  }

  /**
   * Update an Elastic IP
   * 
   * @param id  (required)
   * @param updateElasticIpRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateElasticIpWithHttpInfo(UUID id, UpdateElasticIpRequest updateElasticIpRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateElasticIpRequestBuilder(id, updateElasticIpRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateElasticIp", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateElasticIpRequestBuilder(UUID id, UpdateElasticIpRequest updateElasticIpRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateElasticIp");
    }
    // verify the required parameter 'updateElasticIpRequest' is set
    if (updateElasticIpRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateElasticIpRequest' when calling updateElasticIp");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/elastic-ip/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateElasticIpRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update IAM Organization Policy
   * 
   * @param iamPolicy  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateIamOrganizationPolicy(IamPolicy iamPolicy) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateIamOrganizationPolicyWithHttpInfo(iamPolicy);
    return localVarResponse.getData();
  }

  /**
   * Update IAM Organization Policy
   * 
   * @param iamPolicy  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateIamOrganizationPolicyWithHttpInfo(IamPolicy iamPolicy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateIamOrganizationPolicyRequestBuilder(iamPolicy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateIamOrganizationPolicy", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateIamOrganizationPolicyRequestBuilder(IamPolicy iamPolicy) throws ApiException {
    // verify the required parameter 'iamPolicy' is set
    if (iamPolicy == null) {
      throw new ApiException(400, "Missing the required parameter 'iamPolicy' when calling updateIamOrganizationPolicy");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-organization-policy";
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(iamPolicy);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update IAM Role
   * 
   * @param id  (required)
   * @param updateIamRoleRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateIamRole(UUID id, UpdateIamRoleRequest updateIamRoleRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateIamRoleWithHttpInfo(id, updateIamRoleRequest);
    return localVarResponse.getData();
  }

  /**
   * Update IAM Role
   * 
   * @param id  (required)
   * @param updateIamRoleRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateIamRoleWithHttpInfo(UUID id, UpdateIamRoleRequest updateIamRoleRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateIamRoleRequestBuilder(id, updateIamRoleRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateIamRole", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateIamRoleRequestBuilder(UUID id, UpdateIamRoleRequest updateIamRoleRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateIamRole");
    }
    // verify the required parameter 'updateIamRoleRequest' is set
    if (updateIamRoleRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateIamRoleRequest' when calling updateIamRole");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateIamRoleRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update IAM Role Policy
   * 
   * @param id  (required)
   * @param iamPolicy  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateIamRolePolicy(UUID id, IamPolicy iamPolicy) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateIamRolePolicyWithHttpInfo(id, iamPolicy);
    return localVarResponse.getData();
  }

  /**
   * Update IAM Role Policy
   * 
   * @param id  (required)
   * @param iamPolicy  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateIamRolePolicyWithHttpInfo(UUID id, IamPolicy iamPolicy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateIamRolePolicyRequestBuilder(id, iamPolicy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateIamRolePolicy", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateIamRolePolicyRequestBuilder(UUID id, IamPolicy iamPolicy) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateIamRolePolicy");
    }
    // verify the required parameter 'iamPolicy' is set
    if (iamPolicy == null) {
      throw new ApiException(400, "Missing the required parameter 'iamPolicy' when calling updateIamRolePolicy");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/iam-role/{id}:policy"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(iamPolicy);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a Compute instance
   * 
   * @param id  (required)
   * @param updateInstanceRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateInstance(UUID id, UpdateInstanceRequest updateInstanceRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateInstanceWithHttpInfo(id, updateInstanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Compute instance
   * 
   * @param id  (required)
   * @param updateInstanceRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateInstanceWithHttpInfo(UUID id, UpdateInstanceRequest updateInstanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateInstanceRequestBuilder(id, updateInstanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateInstanceRequestBuilder(UUID id, UpdateInstanceRequest updateInstanceRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateInstance");
    }
    // verify the required parameter 'updateInstanceRequest' is set
    if (updateInstanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateInstanceRequest' when calling updateInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateInstanceRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update an Instance Pool
   * 
   * @param id  (required)
   * @param updateInstancePoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateInstancePool(UUID id, UpdateInstancePoolRequest updateInstancePoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateInstancePoolWithHttpInfo(id, updateInstancePoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Update an Instance Pool
   * 
   * @param id  (required)
   * @param updateInstancePoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateInstancePoolWithHttpInfo(UUID id, UpdateInstancePoolRequest updateInstancePoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateInstancePoolRequestBuilder(id, updateInstancePoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateInstancePool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateInstancePoolRequestBuilder(UUID id, UpdateInstancePoolRequest updateInstancePoolRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateInstancePool");
    }
    // verify the required parameter 'updateInstancePoolRequest' is set
    if (updateInstancePoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateInstancePoolRequest' when calling updateInstancePool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/instance-pool/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateInstancePoolRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a Load Balancer
   * 
   * @param id  (required)
   * @param updateLoadBalancerRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateLoadBalancer(UUID id, UpdateLoadBalancerRequest updateLoadBalancerRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateLoadBalancerWithHttpInfo(id, updateLoadBalancerRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Load Balancer
   * 
   * @param id  (required)
   * @param updateLoadBalancerRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateLoadBalancerWithHttpInfo(UUID id, UpdateLoadBalancerRequest updateLoadBalancerRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateLoadBalancerRequestBuilder(id, updateLoadBalancerRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateLoadBalancer", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateLoadBalancerRequestBuilder(UUID id, UpdateLoadBalancerRequest updateLoadBalancerRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateLoadBalancer");
    }
    // verify the required parameter 'updateLoadBalancerRequest' is set
    if (updateLoadBalancerRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateLoadBalancerRequest' when calling updateLoadBalancer");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateLoadBalancerRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a Load Balancer Service
   * 
   * @param id  (required)
   * @param serviceId  (required)
   * @param updateLoadBalancerServiceRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateLoadBalancerService(UUID id, UUID serviceId, UpdateLoadBalancerServiceRequest updateLoadBalancerServiceRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateLoadBalancerServiceWithHttpInfo(id, serviceId, updateLoadBalancerServiceRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Load Balancer Service
   * 
   * @param id  (required)
   * @param serviceId  (required)
   * @param updateLoadBalancerServiceRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateLoadBalancerServiceWithHttpInfo(UUID id, UUID serviceId, UpdateLoadBalancerServiceRequest updateLoadBalancerServiceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateLoadBalancerServiceRequestBuilder(id, serviceId, updateLoadBalancerServiceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateLoadBalancerService", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateLoadBalancerServiceRequestBuilder(UUID id, UUID serviceId, UpdateLoadBalancerServiceRequest updateLoadBalancerServiceRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateLoadBalancerService");
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceId' when calling updateLoadBalancerService");
    }
    // verify the required parameter 'updateLoadBalancerServiceRequest' is set
    if (updateLoadBalancerServiceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateLoadBalancerServiceRequest' when calling updateLoadBalancerService");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/load-balancer/{id}/service/{service-id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{service-id}", ApiClient.urlEncode(serviceId.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateLoadBalancerServiceRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a Private Network
   * 
   * @param id  (required)
   * @param updatePrivateNetworkRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updatePrivateNetwork(UUID id, UpdatePrivateNetworkRequest updatePrivateNetworkRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updatePrivateNetworkWithHttpInfo(id, updatePrivateNetworkRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Private Network
   * 
   * @param id  (required)
   * @param updatePrivateNetworkRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updatePrivateNetworkWithHttpInfo(UUID id, UpdatePrivateNetworkRequest updatePrivateNetworkRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updatePrivateNetworkRequestBuilder(id, updatePrivateNetworkRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updatePrivateNetwork", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updatePrivateNetworkRequestBuilder(UUID id, UpdatePrivateNetworkRequest updatePrivateNetworkRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updatePrivateNetwork");
    }
    // verify the required parameter 'updatePrivateNetworkRequest' is set
    if (updatePrivateNetworkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updatePrivateNetworkRequest' when calling updatePrivateNetwork");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/private-network/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updatePrivateNetworkRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update the IP address of an instance attached to a managed private network
   * 
   * @param id  (required)
   * @param updatePrivateNetworkInstanceIpRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updatePrivateNetworkInstanceIp(UUID id, UpdatePrivateNetworkInstanceIpRequest updatePrivateNetworkInstanceIpRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updatePrivateNetworkInstanceIpWithHttpInfo(id, updatePrivateNetworkInstanceIpRequest);
    return localVarResponse.getData();
  }

  /**
   * Update the IP address of an instance attached to a managed private network
   * 
   * @param id  (required)
   * @param updatePrivateNetworkInstanceIpRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updatePrivateNetworkInstanceIpWithHttpInfo(UUID id, UpdatePrivateNetworkInstanceIpRequest updatePrivateNetworkInstanceIpRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updatePrivateNetworkInstanceIpRequestBuilder(id, updatePrivateNetworkInstanceIpRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updatePrivateNetworkInstanceIp", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updatePrivateNetworkInstanceIpRequestBuilder(UUID id, UpdatePrivateNetworkInstanceIpRequest updatePrivateNetworkInstanceIpRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updatePrivateNetworkInstanceIp");
    }
    // verify the required parameter 'updatePrivateNetworkInstanceIpRequest' is set
    if (updatePrivateNetworkInstanceIpRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updatePrivateNetworkInstanceIpRequest' when calling updatePrivateNetworkInstanceIp");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/private-network/{id}:update-ip"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updatePrivateNetworkInstanceIpRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update/Create the PTR DNS record for an elastic IP
   * 
   * @param id  (required)
   * @param updateReverseDnsElasticIpRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateReverseDnsElasticIp(UUID id, UpdateReverseDnsElasticIpRequest updateReverseDnsElasticIpRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateReverseDnsElasticIpWithHttpInfo(id, updateReverseDnsElasticIpRequest);
    return localVarResponse.getData();
  }

  /**
   * Update/Create the PTR DNS record for an elastic IP
   * 
   * @param id  (required)
   * @param updateReverseDnsElasticIpRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateReverseDnsElasticIpWithHttpInfo(UUID id, UpdateReverseDnsElasticIpRequest updateReverseDnsElasticIpRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateReverseDnsElasticIpRequestBuilder(id, updateReverseDnsElasticIpRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateReverseDnsElasticIp", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateReverseDnsElasticIpRequestBuilder(UUID id, UpdateReverseDnsElasticIpRequest updateReverseDnsElasticIpRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateReverseDnsElasticIp");
    }
    // verify the required parameter 'updateReverseDnsElasticIpRequest' is set
    if (updateReverseDnsElasticIpRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateReverseDnsElasticIpRequest' when calling updateReverseDnsElasticIp");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/reverse-dns/elastic-ip/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateReverseDnsElasticIpRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update/Create the PTR DNS record for an instance
   * 
   * @param id  (required)
   * @param updateReverseDnsElasticIpRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateReverseDnsInstance(UUID id, UpdateReverseDnsElasticIpRequest updateReverseDnsElasticIpRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateReverseDnsInstanceWithHttpInfo(id, updateReverseDnsElasticIpRequest);
    return localVarResponse.getData();
  }

  /**
   * Update/Create the PTR DNS record for an instance
   * 
   * @param id  (required)
   * @param updateReverseDnsElasticIpRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateReverseDnsInstanceWithHttpInfo(UUID id, UpdateReverseDnsElasticIpRequest updateReverseDnsElasticIpRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateReverseDnsInstanceRequestBuilder(id, updateReverseDnsElasticIpRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateReverseDnsInstance", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateReverseDnsInstanceRequestBuilder(UUID id, UpdateReverseDnsElasticIpRequest updateReverseDnsElasticIpRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateReverseDnsInstance");
    }
    // verify the required parameter 'updateReverseDnsElasticIpRequest' is set
    if (updateReverseDnsElasticIpRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateReverseDnsElasticIpRequest' when calling updateReverseDnsInstance");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/reverse-dns/instance/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateReverseDnsElasticIpRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("POST", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update an SKS cluster
   * 
   * @param id  (required)
   * @param updateSksClusterRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateSksCluster(UUID id, UpdateSksClusterRequest updateSksClusterRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateSksClusterWithHttpInfo(id, updateSksClusterRequest);
    return localVarResponse.getData();
  }

  /**
   * Update an SKS cluster
   * 
   * @param id  (required)
   * @param updateSksClusterRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateSksClusterWithHttpInfo(UUID id, UpdateSksClusterRequest updateSksClusterRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSksClusterRequestBuilder(id, updateSksClusterRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateSksCluster", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSksClusterRequestBuilder(UUID id, UpdateSksClusterRequest updateSksClusterRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateSksCluster");
    }
    // verify the required parameter 'updateSksClusterRequest' is set
    if (updateSksClusterRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateSksClusterRequest' when calling updateSksCluster");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateSksClusterRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update an SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param updateSksNodepoolRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateSksNodepool(UUID id, UUID sksNodepoolId, UpdateSksNodepoolRequest updateSksNodepoolRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateSksNodepoolWithHttpInfo(id, sksNodepoolId, updateSksNodepoolRequest);
    return localVarResponse.getData();
  }

  /**
   * Update an SKS Nodepool
   * 
   * @param id  (required)
   * @param sksNodepoolId  (required)
   * @param updateSksNodepoolRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateSksNodepoolWithHttpInfo(UUID id, UUID sksNodepoolId, UpdateSksNodepoolRequest updateSksNodepoolRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSksNodepoolRequestBuilder(id, sksNodepoolId, updateSksNodepoolRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateSksNodepool", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSksNodepoolRequestBuilder(UUID id, UUID sksNodepoolId, UpdateSksNodepoolRequest updateSksNodepoolRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateSksNodepool");
    }
    // verify the required parameter 'sksNodepoolId' is set
    if (sksNodepoolId == null) {
      throw new ApiException(400, "Missing the required parameter 'sksNodepoolId' when calling updateSksNodepool");
    }
    // verify the required parameter 'updateSksNodepoolRequest' is set
    if (updateSksNodepoolRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateSksNodepoolRequest' when calling updateSksNodepool");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/nodepool/{sks-nodepool-id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{sks-nodepool-id}", ApiClient.urlEncode(sksNodepoolId.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateSksNodepoolRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update template attributes
   * 
   * @param id  (required)
   * @param updateTemplateRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation updateTemplate(UUID id, UpdateTemplateRequest updateTemplateRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = updateTemplateWithHttpInfo(id, updateTemplateRequest);
    return localVarResponse.getData();
  }

  /**
   * Update template attributes
   * 
   * @param id  (required)
   * @param updateTemplateRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> updateTemplateWithHttpInfo(UUID id, UpdateTemplateRequest updateTemplateRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateTemplateRequestBuilder(id, updateTemplateRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateTemplate", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateTemplateRequestBuilder(UUID id, UpdateTemplateRequest updateTemplateRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateTemplate");
    }
    // verify the required parameter 'updateTemplateRequest' is set
    if (updateTemplateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateTemplateRequest' when calling updateTemplate");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/template/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(updateTemplateRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Upgrade an SKS cluster
   * 
   * @param id  (required)
   * @param upgradeSksClusterRequest  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation upgradeSksCluster(UUID id, UpgradeSksClusterRequest upgradeSksClusterRequest) throws ApiException {
    ApiResponse<Operation> localVarResponse = upgradeSksClusterWithHttpInfo(id, upgradeSksClusterRequest);
    return localVarResponse.getData();
  }

  /**
   * Upgrade an SKS cluster
   * 
   * @param id  (required)
   * @param upgradeSksClusterRequest  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> upgradeSksClusterWithHttpInfo(UUID id, UpgradeSksClusterRequest upgradeSksClusterRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = upgradeSksClusterRequestBuilder(id, upgradeSksClusterRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("upgradeSksCluster", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder upgradeSksClusterRequestBuilder(UUID id, UpgradeSksClusterRequest upgradeSksClusterRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling upgradeSksCluster");
    }
    // verify the required parameter 'upgradeSksClusterRequest' is set
    if (upgradeSksClusterRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'upgradeSksClusterRequest' when calling upgradeSksCluster");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/upgrade"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;
          try{
          requestBody = memberVarObjectMapper.writeValueAsString(upgradeSksClusterRequest);
          } catch (JsonProcessingException e) {
          throw new ApiException(500, "Failed to serialize request body: " + e.getMessage());
          }


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(requestBody));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Upgrade a SKS cluster to pro
   * 
   * @param id  (required)
   * @return Operation
   * @throws ApiException if fails to make API call
   */
  public Operation upgradeSksClusterServiceLevel(UUID id) throws ApiException {
    ApiResponse<Operation> localVarResponse = upgradeSksClusterServiceLevelWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Upgrade a SKS cluster to pro
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Operation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Operation> upgradeSksClusterServiceLevelWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = upgradeSksClusterServiceLevelRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("upgradeSksClusterServiceLevel", localVarResponse);
        }
        return new ApiResponse<Operation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Operation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder upgradeSksClusterServiceLevelRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling upgradeSksClusterServiceLevel");
    }

    Credentials credentials = apiClient.getCredentials();
    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/sks-cluster/{id}/upgrade-service-level"
        .replace("{id}", ApiClient.urlEncode(id.toString()));
      String requestBody = null;
      String authorizationValue;


      try{
      authorizationValue = credentials.generateSignature("PUT", "/v2"+localVarPath , requestBody != null ? requestBody : "");
      } catch (Exception e) {
      throw new ApiException(500, "Failed to generate signature: " + e.getMessage());
      }
      localVarRequestBuilder.header("Authorization", authorizationValue);
    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
