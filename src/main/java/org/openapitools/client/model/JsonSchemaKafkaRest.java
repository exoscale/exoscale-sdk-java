/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JsonSchemaKafkaRest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class JsonSchemaKafkaRest {
  /**
   * The number of acknowledgments the producer requires the leader to have received before considering a request complete. If set to &#39;all&#39; or &#39;-1&#39;, the leader will wait for the full set of in-sync replicas to acknowledge the record.
   */
  @JsonAdapter(ProducerAcksEnum.Adapter.class)
  public enum ProducerAcksEnum {
    ALL("all"),
    
    _1("-1"),
    
    _0("0"),
    
    _12("1");

    private String value;

    ProducerAcksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProducerAcksEnum fromValue(String value) {
      for (ProducerAcksEnum b : ProducerAcksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProducerAcksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProducerAcksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProducerAcksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProducerAcksEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProducerAcksEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCER_ACKS = "producer_acks";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ACKS)
  private ProducerAcksEnum producerAcks = ProducerAcksEnum._12;

  /**
   * Specify the default compression type for producers. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;none&#39; which is the default and equivalent to no compression.
   */
  @JsonAdapter(ProducerCompressionTypeEnum.Adapter.class)
  public enum ProducerCompressionTypeEnum {
    GZIP("gzip"),
    
    SNAPPY("snappy"),
    
    LZ4("lz4"),
    
    ZSTD("zstd"),
    
    NONE("none");

    private String value;

    ProducerCompressionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProducerCompressionTypeEnum fromValue(String value) {
      for (ProducerCompressionTypeEnum b : ProducerCompressionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProducerCompressionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProducerCompressionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProducerCompressionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProducerCompressionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProducerCompressionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCER_COMPRESSION_TYPE = "producer_compression_type";
  @SerializedName(SERIALIZED_NAME_PRODUCER_COMPRESSION_TYPE)
  private ProducerCompressionTypeEnum producerCompressionType;

  public static final String SERIALIZED_NAME_PRODUCER_LINGER_MS = "producer_linger_ms";
  @SerializedName(SERIALIZED_NAME_PRODUCER_LINGER_MS)
  private Integer producerLingerMs = 0;

  public static final String SERIALIZED_NAME_PRODUCER_MAX_REQUEST_SIZE = "producer_max_request_size";
  @SerializedName(SERIALIZED_NAME_PRODUCER_MAX_REQUEST_SIZE)
  private Integer producerMaxRequestSize = 1048576;

  public static final String SERIALIZED_NAME_CONSUMER_ENABLE_AUTO_COMMIT = "consumer_enable_auto_commit";
  @SerializedName(SERIALIZED_NAME_CONSUMER_ENABLE_AUTO_COMMIT)
  private Boolean consumerEnableAutoCommit = true;

  public static final String SERIALIZED_NAME_CONSUMER_REQUEST_MAX_BYTES = "consumer_request_max_bytes";
  @SerializedName(SERIALIZED_NAME_CONSUMER_REQUEST_MAX_BYTES)
  private Integer consumerRequestMaxBytes = 67108864;

  /**
   * The maximum total time to wait for messages for a request if the maximum number of messages has not yet been reached
   */
  @JsonAdapter(ConsumerRequestTimeoutMsEnum.Adapter.class)
  public enum ConsumerRequestTimeoutMsEnum {
    NUMBER_1000(1000),
    
    NUMBER_15000(15000),
    
    NUMBER_30000(30000);

    private Integer value;

    ConsumerRequestTimeoutMsEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConsumerRequestTimeoutMsEnum fromValue(Integer value) {
      for (ConsumerRequestTimeoutMsEnum b : ConsumerRequestTimeoutMsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConsumerRequestTimeoutMsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConsumerRequestTimeoutMsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConsumerRequestTimeoutMsEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ConsumerRequestTimeoutMsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ConsumerRequestTimeoutMsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONSUMER_REQUEST_TIMEOUT_MS = "consumer_request_timeout_ms";
  @SerializedName(SERIALIZED_NAME_CONSUMER_REQUEST_TIMEOUT_MS)
  private ConsumerRequestTimeoutMsEnum consumerRequestTimeoutMs = ConsumerRequestTimeoutMsEnum.NUMBER_1000;

  public static final String SERIALIZED_NAME_SIMPLECONSUMER_POOL_SIZE_MAX = "simpleconsumer_pool_size_max";
  @SerializedName(SERIALIZED_NAME_SIMPLECONSUMER_POOL_SIZE_MAX)
  private Integer simpleconsumerPoolSizeMax = 25;

  public JsonSchemaKafkaRest() {
  }

  public JsonSchemaKafkaRest producerAcks(ProducerAcksEnum producerAcks) {
    this.producerAcks = producerAcks;
    return this;
  }

   /**
   * The number of acknowledgments the producer requires the leader to have received before considering a request complete. If set to &#39;all&#39; or &#39;-1&#39;, the leader will wait for the full set of in-sync replicas to acknowledge the record.
   * @return producerAcks
  **/
  @javax.annotation.Nullable
  public ProducerAcksEnum getProducerAcks() {
    return producerAcks;
  }

  public void setProducerAcks(ProducerAcksEnum producerAcks) {
    this.producerAcks = producerAcks;
  }


  public JsonSchemaKafkaRest producerCompressionType(ProducerCompressionTypeEnum producerCompressionType) {
    this.producerCompressionType = producerCompressionType;
    return this;
  }

   /**
   * Specify the default compression type for producers. This configuration accepts the standard compression codecs (&#39;gzip&#39;, &#39;snappy&#39;, &#39;lz4&#39;, &#39;zstd&#39;). It additionally accepts &#39;none&#39; which is the default and equivalent to no compression.
   * @return producerCompressionType
  **/
  @javax.annotation.Nullable
  public ProducerCompressionTypeEnum getProducerCompressionType() {
    return producerCompressionType;
  }

  public void setProducerCompressionType(ProducerCompressionTypeEnum producerCompressionType) {
    this.producerCompressionType = producerCompressionType;
  }


  public JsonSchemaKafkaRest producerLingerMs(Integer producerLingerMs) {
    this.producerLingerMs = producerLingerMs;
    return this;
  }

   /**
   * Wait for up to the given delay to allow batching records together
   * minimum: 0
   * maximum: 5000
   * @return producerLingerMs
  **/
  @javax.annotation.Nullable
  public Integer getProducerLingerMs() {
    return producerLingerMs;
  }

  public void setProducerLingerMs(Integer producerLingerMs) {
    this.producerLingerMs = producerLingerMs;
  }


  public JsonSchemaKafkaRest producerMaxRequestSize(Integer producerMaxRequestSize) {
    this.producerMaxRequestSize = producerMaxRequestSize;
    return this;
  }

   /**
   * The maximum size of a request in bytes. Note that Kafka broker can also cap the record batch size.
   * minimum: 0
   * maximum: 2147483647
   * @return producerMaxRequestSize
  **/
  @javax.annotation.Nullable
  public Integer getProducerMaxRequestSize() {
    return producerMaxRequestSize;
  }

  public void setProducerMaxRequestSize(Integer producerMaxRequestSize) {
    this.producerMaxRequestSize = producerMaxRequestSize;
  }


  public JsonSchemaKafkaRest consumerEnableAutoCommit(Boolean consumerEnableAutoCommit) {
    this.consumerEnableAutoCommit = consumerEnableAutoCommit;
    return this;
  }

   /**
   * If true the consumer&#39;s offset will be periodically committed to Kafka in the background
   * @return consumerEnableAutoCommit
  **/
  @javax.annotation.Nullable
  public Boolean getConsumerEnableAutoCommit() {
    return consumerEnableAutoCommit;
  }

  public void setConsumerEnableAutoCommit(Boolean consumerEnableAutoCommit) {
    this.consumerEnableAutoCommit = consumerEnableAutoCommit;
  }


  public JsonSchemaKafkaRest consumerRequestMaxBytes(Integer consumerRequestMaxBytes) {
    this.consumerRequestMaxBytes = consumerRequestMaxBytes;
    return this;
  }

   /**
   * Maximum number of bytes in unencoded message keys and values by a single request
   * minimum: 0
   * maximum: 671088640
   * @return consumerRequestMaxBytes
  **/
  @javax.annotation.Nullable
  public Integer getConsumerRequestMaxBytes() {
    return consumerRequestMaxBytes;
  }

  public void setConsumerRequestMaxBytes(Integer consumerRequestMaxBytes) {
    this.consumerRequestMaxBytes = consumerRequestMaxBytes;
  }


  public JsonSchemaKafkaRest consumerRequestTimeoutMs(ConsumerRequestTimeoutMsEnum consumerRequestTimeoutMs) {
    this.consumerRequestTimeoutMs = consumerRequestTimeoutMs;
    return this;
  }

   /**
   * The maximum total time to wait for messages for a request if the maximum number of messages has not yet been reached
   * minimum: 1000
   * maximum: 30000
   * @return consumerRequestTimeoutMs
  **/
  @javax.annotation.Nullable
  public ConsumerRequestTimeoutMsEnum getConsumerRequestTimeoutMs() {
    return consumerRequestTimeoutMs;
  }

  public void setConsumerRequestTimeoutMs(ConsumerRequestTimeoutMsEnum consumerRequestTimeoutMs) {
    this.consumerRequestTimeoutMs = consumerRequestTimeoutMs;
  }


  public JsonSchemaKafkaRest simpleconsumerPoolSizeMax(Integer simpleconsumerPoolSizeMax) {
    this.simpleconsumerPoolSizeMax = simpleconsumerPoolSizeMax;
    return this;
  }

   /**
   * Maximum number of SimpleConsumers that can be instantiated per broker
   * minimum: 10
   * maximum: 250
   * @return simpleconsumerPoolSizeMax
  **/
  @javax.annotation.Nullable
  public Integer getSimpleconsumerPoolSizeMax() {
    return simpleconsumerPoolSizeMax;
  }

  public void setSimpleconsumerPoolSizeMax(Integer simpleconsumerPoolSizeMax) {
    this.simpleconsumerPoolSizeMax = simpleconsumerPoolSizeMax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchemaKafkaRest jsonSchemaKafkaRest = (JsonSchemaKafkaRest) o;
    return Objects.equals(this.producerAcks, jsonSchemaKafkaRest.producerAcks) &&
        Objects.equals(this.producerCompressionType, jsonSchemaKafkaRest.producerCompressionType) &&
        Objects.equals(this.producerLingerMs, jsonSchemaKafkaRest.producerLingerMs) &&
        Objects.equals(this.producerMaxRequestSize, jsonSchemaKafkaRest.producerMaxRequestSize) &&
        Objects.equals(this.consumerEnableAutoCommit, jsonSchemaKafkaRest.consumerEnableAutoCommit) &&
        Objects.equals(this.consumerRequestMaxBytes, jsonSchemaKafkaRest.consumerRequestMaxBytes) &&
        Objects.equals(this.consumerRequestTimeoutMs, jsonSchemaKafkaRest.consumerRequestTimeoutMs) &&
        Objects.equals(this.simpleconsumerPoolSizeMax, jsonSchemaKafkaRest.simpleconsumerPoolSizeMax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(producerAcks, producerCompressionType, producerLingerMs, producerMaxRequestSize, consumerEnableAutoCommit, consumerRequestMaxBytes, consumerRequestTimeoutMs, simpleconsumerPoolSizeMax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchemaKafkaRest {\n");
    sb.append("    producerAcks: ").append(toIndentedString(producerAcks)).append("\n");
    sb.append("    producerCompressionType: ").append(toIndentedString(producerCompressionType)).append("\n");
    sb.append("    producerLingerMs: ").append(toIndentedString(producerLingerMs)).append("\n");
    sb.append("    producerMaxRequestSize: ").append(toIndentedString(producerMaxRequestSize)).append("\n");
    sb.append("    consumerEnableAutoCommit: ").append(toIndentedString(consumerEnableAutoCommit)).append("\n");
    sb.append("    consumerRequestMaxBytes: ").append(toIndentedString(consumerRequestMaxBytes)).append("\n");
    sb.append("    consumerRequestTimeoutMs: ").append(toIndentedString(consumerRequestTimeoutMs)).append("\n");
    sb.append("    simpleconsumerPoolSizeMax: ").append(toIndentedString(simpleconsumerPoolSizeMax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("producer_acks");
    openapiFields.add("producer_compression_type");
    openapiFields.add("producer_linger_ms");
    openapiFields.add("producer_max_request_size");
    openapiFields.add("consumer_enable_auto_commit");
    openapiFields.add("consumer_request_max_bytes");
    openapiFields.add("consumer_request_timeout_ms");
    openapiFields.add("simpleconsumer_pool_size_max");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to JsonSchemaKafkaRest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JsonSchemaKafkaRest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonSchemaKafkaRest is not found in the empty JSON string", JsonSchemaKafkaRest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JsonSchemaKafkaRest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JsonSchemaKafkaRest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("producer_acks") != null && !jsonObj.get("producer_acks").isJsonNull()) && !jsonObj.get("producer_acks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer_acks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer_acks").toString()));
      }
      // validate the optional field `producer_acks`
      if (jsonObj.get("producer_acks") != null && !jsonObj.get("producer_acks").isJsonNull()) {
        ProducerAcksEnum.validateJsonElement(jsonObj.get("producer_acks"));
      }
      if ((jsonObj.get("producer_compression_type") != null && !jsonObj.get("producer_compression_type").isJsonNull()) && !jsonObj.get("producer_compression_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer_compression_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer_compression_type").toString()));
      }
      // validate the optional field `producer_compression_type`
      if (jsonObj.get("producer_compression_type") != null && !jsonObj.get("producer_compression_type").isJsonNull()) {
        ProducerCompressionTypeEnum.validateJsonElement(jsonObj.get("producer_compression_type"));
      }
      // validate the optional field `consumer_request_timeout_ms`
      if (jsonObj.get("consumer_request_timeout_ms") != null && !jsonObj.get("consumer_request_timeout_ms").isJsonNull()) {
        ConsumerRequestTimeoutMsEnum.validateJsonElement(jsonObj.get("consumer_request_timeout_ms"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonSchemaKafkaRest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonSchemaKafkaRest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonSchemaKafkaRest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonSchemaKafkaRest.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonSchemaKafkaRest>() {
           @Override
           public void write(JsonWriter out, JsonSchemaKafkaRest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonSchemaKafkaRest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JsonSchemaKafkaRest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JsonSchemaKafkaRest
  * @throws IOException if the JSON string is invalid with respect to JsonSchemaKafkaRest
  */
  public static JsonSchemaKafkaRest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonSchemaKafkaRest.class);
  }

 /**
  * Convert an instance of JsonSchemaKafkaRest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

