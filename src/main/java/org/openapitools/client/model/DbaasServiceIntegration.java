/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Integrations with other services
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasServiceIntegration {
  public static final String SERIALIZED_NAME_INTEGRATION_STATUS = "integration-status";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_STATUS)
  private Object integrationStatus;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SOURCE_SERVICE_TYPE = "source-service-type";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVICE_TYPE)
  private String sourceServiceType;

  public static final String SERIALIZED_NAME_SOURCE_ENDPOINT = "source-endpoint";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENDPOINT)
  private String sourceEndpoint;

  public static final String SERIALIZED_NAME_DEST_SERVICE_TYPE = "dest-service-type";
  @SerializedName(SERIALIZED_NAME_DEST_SERVICE_TYPE)
  private String destServiceType;

  public static final String SERIALIZED_NAME_INTEGRATION_TYPE = "integration-type";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_TYPE)
  private String integrationType;

  public static final String SERIALIZED_NAME_DEST_ENDPOINT = "dest-endpoint";
  @SerializedName(SERIALIZED_NAME_DEST_ENDPOINT)
  private String destEndpoint;

  public static final String SERIALIZED_NAME_USER_CONFIG = "user-config";
  @SerializedName(SERIALIZED_NAME_USER_CONFIG)
  private Object userConfig;

  public static final String SERIALIZED_NAME_DEST_ENDPOINT_ID = "dest-endpoint-id";
  @SerializedName(SERIALIZED_NAME_DEST_ENDPOINT_ID)
  private String destEndpointId;

  public static final String SERIALIZED_NAME_SERVICE_INTEGRATION_ID = "service-integration-id";
  @SerializedName(SERIALIZED_NAME_SERVICE_INTEGRATION_ID)
  private String serviceIntegrationId;

  public static final String SERIALIZED_NAME_DEST_SERVICE = "dest-service";
  @SerializedName(SERIALIZED_NAME_DEST_SERVICE)
  private String destService;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_SOURCE_ENDPOINT_ID = "source-endpoint-id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENDPOINT_ID)
  private String sourceEndpointId;

  public static final String SERIALIZED_NAME_SOURCE_SERVICE = "source-service";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVICE)
  private String sourceService;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public DbaasServiceIntegration() {
  }

  public DbaasServiceIntegration integrationStatus(Object integrationStatus) {
    this.integrationStatus = integrationStatus;
    return this;
  }

   /**
   * Integration status
   * @return integrationStatus
  **/
  @javax.annotation.Nullable
  public Object getIntegrationStatus() {
    return integrationStatus;
  }

  public void setIntegrationStatus(Object integrationStatus) {
    this.integrationStatus = integrationStatus;
  }


  public DbaasServiceIntegration description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the integration
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DbaasServiceIntegration sourceServiceType(String sourceServiceType) {
    this.sourceServiceType = sourceServiceType;
    return this;
  }

   /**
   * Get sourceServiceType
   * @return sourceServiceType
  **/
  @javax.annotation.Nonnull
  public String getSourceServiceType() {
    return sourceServiceType;
  }

  public void setSourceServiceType(String sourceServiceType) {
    this.sourceServiceType = sourceServiceType;
  }


  public DbaasServiceIntegration sourceEndpoint(String sourceEndpoint) {
    this.sourceEndpoint = sourceEndpoint;
    return this;
  }

   /**
   * Source endpoint name
   * @return sourceEndpoint
  **/
  @javax.annotation.Nullable
  public String getSourceEndpoint() {
    return sourceEndpoint;
  }

  public void setSourceEndpoint(String sourceEndpoint) {
    this.sourceEndpoint = sourceEndpoint;
  }


  public DbaasServiceIntegration destServiceType(String destServiceType) {
    this.destServiceType = destServiceType;
    return this;
  }

   /**
   * Get destServiceType
   * @return destServiceType
  **/
  @javax.annotation.Nonnull
  public String getDestServiceType() {
    return destServiceType;
  }

  public void setDestServiceType(String destServiceType) {
    this.destServiceType = destServiceType;
  }


  public DbaasServiceIntegration integrationType(String integrationType) {
    this.integrationType = integrationType;
    return this;
  }

   /**
   * Type of the integration
   * @return integrationType
  **/
  @javax.annotation.Nonnull
  public String getIntegrationType() {
    return integrationType;
  }

  public void setIntegrationType(String integrationType) {
    this.integrationType = integrationType;
  }


  public DbaasServiceIntegration destEndpoint(String destEndpoint) {
    this.destEndpoint = destEndpoint;
    return this;
  }

   /**
   * Destination endpoint name
   * @return destEndpoint
  **/
  @javax.annotation.Nullable
  public String getDestEndpoint() {
    return destEndpoint;
  }

  public void setDestEndpoint(String destEndpoint) {
    this.destEndpoint = destEndpoint;
  }


  public DbaasServiceIntegration userConfig(Object userConfig) {
    this.userConfig = userConfig;
    return this;
  }

   /**
   * Service integration settings
   * @return userConfig
  **/
  @javax.annotation.Nullable
  public Object getUserConfig() {
    return userConfig;
  }

  public void setUserConfig(Object userConfig) {
    this.userConfig = userConfig;
  }


  public DbaasServiceIntegration destEndpointId(String destEndpointId) {
    this.destEndpointId = destEndpointId;
    return this;
  }

   /**
   * Destination endpoint id
   * @return destEndpointId
  **/
  @javax.annotation.Nullable
  public String getDestEndpointId() {
    return destEndpointId;
  }

  public void setDestEndpointId(String destEndpointId) {
    this.destEndpointId = destEndpointId;
  }


  public DbaasServiceIntegration serviceIntegrationId(String serviceIntegrationId) {
    this.serviceIntegrationId = serviceIntegrationId;
    return this;
  }

   /**
   * Integration ID
   * @return serviceIntegrationId
  **/
  @javax.annotation.Nonnull
  public String getServiceIntegrationId() {
    return serviceIntegrationId;
  }

  public void setServiceIntegrationId(String serviceIntegrationId) {
    this.serviceIntegrationId = serviceIntegrationId;
  }


  public DbaasServiceIntegration destService(String destService) {
    this.destService = destService;
    return this;
  }

   /**
   * Destination service name
   * @return destService
  **/
  @javax.annotation.Nonnull
  public String getDestService() {
    return destService;
  }

  public void setDestService(String destService) {
    this.destService = destService;
  }


  public DbaasServiceIntegration active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * True when integration is active
   * @return active
  **/
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public DbaasServiceIntegration sourceEndpointId(String sourceEndpointId) {
    this.sourceEndpointId = sourceEndpointId;
    return this;
  }

   /**
   * Source endpoint ID
   * @return sourceEndpointId
  **/
  @javax.annotation.Nullable
  public String getSourceEndpointId() {
    return sourceEndpointId;
  }

  public void setSourceEndpointId(String sourceEndpointId) {
    this.sourceEndpointId = sourceEndpointId;
  }


  public DbaasServiceIntegration sourceService(String sourceService) {
    this.sourceService = sourceService;
    return this;
  }

   /**
   * Source service name
   * @return sourceService
  **/
  @javax.annotation.Nonnull
  public String getSourceService() {
    return sourceService;
  }

  public void setSourceService(String sourceService) {
    this.sourceService = sourceService;
  }


  public DbaasServiceIntegration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * True when integration is enabled
   * @return enabled
  **/
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasServiceIntegration dbaasServiceIntegration = (DbaasServiceIntegration) o;
    return Objects.equals(this.integrationStatus, dbaasServiceIntegration.integrationStatus) &&
        Objects.equals(this.description, dbaasServiceIntegration.description) &&
        Objects.equals(this.sourceServiceType, dbaasServiceIntegration.sourceServiceType) &&
        Objects.equals(this.sourceEndpoint, dbaasServiceIntegration.sourceEndpoint) &&
        Objects.equals(this.destServiceType, dbaasServiceIntegration.destServiceType) &&
        Objects.equals(this.integrationType, dbaasServiceIntegration.integrationType) &&
        Objects.equals(this.destEndpoint, dbaasServiceIntegration.destEndpoint) &&
        Objects.equals(this.userConfig, dbaasServiceIntegration.userConfig) &&
        Objects.equals(this.destEndpointId, dbaasServiceIntegration.destEndpointId) &&
        Objects.equals(this.serviceIntegrationId, dbaasServiceIntegration.serviceIntegrationId) &&
        Objects.equals(this.destService, dbaasServiceIntegration.destService) &&
        Objects.equals(this.active, dbaasServiceIntegration.active) &&
        Objects.equals(this.sourceEndpointId, dbaasServiceIntegration.sourceEndpointId) &&
        Objects.equals(this.sourceService, dbaasServiceIntegration.sourceService) &&
        Objects.equals(this.enabled, dbaasServiceIntegration.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integrationStatus, description, sourceServiceType, sourceEndpoint, destServiceType, integrationType, destEndpoint, userConfig, destEndpointId, serviceIntegrationId, destService, active, sourceEndpointId, sourceService, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasServiceIntegration {\n");
    sb.append("    integrationStatus: ").append(toIndentedString(integrationStatus)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sourceServiceType: ").append(toIndentedString(sourceServiceType)).append("\n");
    sb.append("    sourceEndpoint: ").append(toIndentedString(sourceEndpoint)).append("\n");
    sb.append("    destServiceType: ").append(toIndentedString(destServiceType)).append("\n");
    sb.append("    integrationType: ").append(toIndentedString(integrationType)).append("\n");
    sb.append("    destEndpoint: ").append(toIndentedString(destEndpoint)).append("\n");
    sb.append("    userConfig: ").append(toIndentedString(userConfig)).append("\n");
    sb.append("    destEndpointId: ").append(toIndentedString(destEndpointId)).append("\n");
    sb.append("    serviceIntegrationId: ").append(toIndentedString(serviceIntegrationId)).append("\n");
    sb.append("    destService: ").append(toIndentedString(destService)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    sourceEndpointId: ").append(toIndentedString(sourceEndpointId)).append("\n");
    sb.append("    sourceService: ").append(toIndentedString(sourceService)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("integration-status");
    openapiFields.add("description");
    openapiFields.add("source-service-type");
    openapiFields.add("source-endpoint");
    openapiFields.add("dest-service-type");
    openapiFields.add("integration-type");
    openapiFields.add("dest-endpoint");
    openapiFields.add("user-config");
    openapiFields.add("dest-endpoint-id");
    openapiFields.add("service-integration-id");
    openapiFields.add("dest-service");
    openapiFields.add("active");
    openapiFields.add("source-endpoint-id");
    openapiFields.add("source-service");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("source-service-type");
    openapiRequiredFields.add("dest-service-type");
    openapiRequiredFields.add("integration-type");
    openapiRequiredFields.add("service-integration-id");
    openapiRequiredFields.add("dest-service");
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("source-service");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasServiceIntegration
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasServiceIntegration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasServiceIntegration is not found in the empty JSON string", DbaasServiceIntegration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasServiceIntegration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasServiceIntegration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DbaasServiceIntegration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("source-service-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source-service-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source-service-type").toString()));
      }
      if ((jsonObj.get("source-endpoint") != null && !jsonObj.get("source-endpoint").isJsonNull()) && !jsonObj.get("source-endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source-endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source-endpoint").toString()));
      }
      if (!jsonObj.get("dest-service-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dest-service-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dest-service-type").toString()));
      }
      if (!jsonObj.get("integration-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integration-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integration-type").toString()));
      }
      if ((jsonObj.get("dest-endpoint") != null && !jsonObj.get("dest-endpoint").isJsonNull()) && !jsonObj.get("dest-endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dest-endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dest-endpoint").toString()));
      }
      if ((jsonObj.get("dest-endpoint-id") != null && !jsonObj.get("dest-endpoint-id").isJsonNull()) && !jsonObj.get("dest-endpoint-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dest-endpoint-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dest-endpoint-id").toString()));
      }
      if (!jsonObj.get("service-integration-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service-integration-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service-integration-id").toString()));
      }
      if (!jsonObj.get("dest-service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dest-service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dest-service").toString()));
      }
      if ((jsonObj.get("source-endpoint-id") != null && !jsonObj.get("source-endpoint-id").isJsonNull()) && !jsonObj.get("source-endpoint-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source-endpoint-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source-endpoint-id").toString()));
      }
      if (!jsonObj.get("source-service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source-service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source-service").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasServiceIntegration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasServiceIntegration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasServiceIntegration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasServiceIntegration.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasServiceIntegration>() {
           @Override
           public void write(JsonWriter out, DbaasServiceIntegration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasServiceIntegration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasServiceIntegration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasServiceIntegration
  * @throws IOException if the JSON string is invalid with respect to DbaasServiceIntegration
  */
  public static DbaasServiceIntegration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasServiceIntegration.class);
  }

 /**
  * Convert an instance of DbaasServiceIntegration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

