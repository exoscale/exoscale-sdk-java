/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GrafanaDateFormatSpecifications {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_date")
    private Optional<? extends String> fullDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval_second")
    private Optional<? extends String> intervalSecond;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval_minute")
    private Optional<? extends String> intervalMinute;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval_hour")
    private Optional<? extends String> intervalHour;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval_day")
    private Optional<? extends String> intervalDay;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval_month")
    private Optional<? extends String> intervalMonth;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval_year")
    private Optional<? extends String> intervalYear;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_timezone")
    private Optional<? extends String> defaultTimezone;

    public GrafanaDateFormatSpecifications(
            @JsonProperty("full_date") Optional<? extends String> fullDate,
            @JsonProperty("interval_second") Optional<? extends String> intervalSecond,
            @JsonProperty("interval_minute") Optional<? extends String> intervalMinute,
            @JsonProperty("interval_hour") Optional<? extends String> intervalHour,
            @JsonProperty("interval_day") Optional<? extends String> intervalDay,
            @JsonProperty("interval_month") Optional<? extends String> intervalMonth,
            @JsonProperty("interval_year") Optional<? extends String> intervalYear,
            @JsonProperty("default_timezone") Optional<? extends String> defaultTimezone) {
        Utils.checkNotNull(fullDate, "fullDate");
        Utils.checkNotNull(intervalSecond, "intervalSecond");
        Utils.checkNotNull(intervalMinute, "intervalMinute");
        Utils.checkNotNull(intervalHour, "intervalHour");
        Utils.checkNotNull(intervalDay, "intervalDay");
        Utils.checkNotNull(intervalMonth, "intervalMonth");
        Utils.checkNotNull(intervalYear, "intervalYear");
        Utils.checkNotNull(defaultTimezone, "defaultTimezone");
        this.fullDate = fullDate;
        this.intervalSecond = intervalSecond;
        this.intervalMinute = intervalMinute;
        this.intervalHour = intervalHour;
        this.intervalDay = intervalDay;
        this.intervalMonth = intervalMonth;
        this.intervalYear = intervalYear;
        this.defaultTimezone = defaultTimezone;
    }

    public Optional<? extends String> fullDate() {
        return fullDate;
    }

    public Optional<? extends String> intervalSecond() {
        return intervalSecond;
    }

    public Optional<? extends String> intervalMinute() {
        return intervalMinute;
    }

    public Optional<? extends String> intervalHour() {
        return intervalHour;
    }

    public Optional<? extends String> intervalDay() {
        return intervalDay;
    }

    public Optional<? extends String> intervalMonth() {
        return intervalMonth;
    }

    public Optional<? extends String> intervalYear() {
        return intervalYear;
    }

    public Optional<? extends String> defaultTimezone() {
        return defaultTimezone;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GrafanaDateFormatSpecifications withFullDate(String fullDate) {
        Utils.checkNotNull(fullDate, "fullDate");
        this.fullDate = Optional.ofNullable(fullDate);
        return this;
    }

    public GrafanaDateFormatSpecifications withFullDate(Optional<? extends String> fullDate) {
        Utils.checkNotNull(fullDate, "fullDate");
        this.fullDate = fullDate;
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalSecond(String intervalSecond) {
        Utils.checkNotNull(intervalSecond, "intervalSecond");
        this.intervalSecond = Optional.ofNullable(intervalSecond);
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalSecond(Optional<? extends String> intervalSecond) {
        Utils.checkNotNull(intervalSecond, "intervalSecond");
        this.intervalSecond = intervalSecond;
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalMinute(String intervalMinute) {
        Utils.checkNotNull(intervalMinute, "intervalMinute");
        this.intervalMinute = Optional.ofNullable(intervalMinute);
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalMinute(Optional<? extends String> intervalMinute) {
        Utils.checkNotNull(intervalMinute, "intervalMinute");
        this.intervalMinute = intervalMinute;
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalHour(String intervalHour) {
        Utils.checkNotNull(intervalHour, "intervalHour");
        this.intervalHour = Optional.ofNullable(intervalHour);
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalHour(Optional<? extends String> intervalHour) {
        Utils.checkNotNull(intervalHour, "intervalHour");
        this.intervalHour = intervalHour;
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalDay(String intervalDay) {
        Utils.checkNotNull(intervalDay, "intervalDay");
        this.intervalDay = Optional.ofNullable(intervalDay);
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalDay(Optional<? extends String> intervalDay) {
        Utils.checkNotNull(intervalDay, "intervalDay");
        this.intervalDay = intervalDay;
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalMonth(String intervalMonth) {
        Utils.checkNotNull(intervalMonth, "intervalMonth");
        this.intervalMonth = Optional.ofNullable(intervalMonth);
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalMonth(Optional<? extends String> intervalMonth) {
        Utils.checkNotNull(intervalMonth, "intervalMonth");
        this.intervalMonth = intervalMonth;
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalYear(String intervalYear) {
        Utils.checkNotNull(intervalYear, "intervalYear");
        this.intervalYear = Optional.ofNullable(intervalYear);
        return this;
    }

    public GrafanaDateFormatSpecifications withIntervalYear(Optional<? extends String> intervalYear) {
        Utils.checkNotNull(intervalYear, "intervalYear");
        this.intervalYear = intervalYear;
        return this;
    }

    public GrafanaDateFormatSpecifications withDefaultTimezone(String defaultTimezone) {
        Utils.checkNotNull(defaultTimezone, "defaultTimezone");
        this.defaultTimezone = Optional.ofNullable(defaultTimezone);
        return this;
    }

    public GrafanaDateFormatSpecifications withDefaultTimezone(Optional<? extends String> defaultTimezone) {
        Utils.checkNotNull(defaultTimezone, "defaultTimezone");
        this.defaultTimezone = defaultTimezone;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GrafanaDateFormatSpecifications other = (GrafanaDateFormatSpecifications) o;
        return 
            java.util.Objects.deepEquals(this.fullDate, other.fullDate) &&
            java.util.Objects.deepEquals(this.intervalSecond, other.intervalSecond) &&
            java.util.Objects.deepEquals(this.intervalMinute, other.intervalMinute) &&
            java.util.Objects.deepEquals(this.intervalHour, other.intervalHour) &&
            java.util.Objects.deepEquals(this.intervalDay, other.intervalDay) &&
            java.util.Objects.deepEquals(this.intervalMonth, other.intervalMonth) &&
            java.util.Objects.deepEquals(this.intervalYear, other.intervalYear) &&
            java.util.Objects.deepEquals(this.defaultTimezone, other.defaultTimezone);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            fullDate,
            intervalSecond,
            intervalMinute,
            intervalHour,
            intervalDay,
            intervalMonth,
            intervalYear,
            defaultTimezone);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GrafanaDateFormatSpecifications.class,
                "fullDate", fullDate,
                "intervalSecond", intervalSecond,
                "intervalMinute", intervalMinute,
                "intervalHour", intervalHour,
                "intervalDay", intervalDay,
                "intervalMonth", intervalMonth,
                "intervalYear", intervalYear,
                "defaultTimezone", defaultTimezone);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> fullDate = Optional.empty();
 
        private Optional<? extends String> intervalSecond = Optional.empty();
 
        private Optional<? extends String> intervalMinute = Optional.empty();
 
        private Optional<? extends String> intervalHour = Optional.empty();
 
        private Optional<? extends String> intervalDay = Optional.empty();
 
        private Optional<? extends String> intervalMonth = Optional.empty();
 
        private Optional<? extends String> intervalYear = Optional.empty();
 
        private Optional<? extends String> defaultTimezone = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder fullDate(String fullDate) {
            Utils.checkNotNull(fullDate, "fullDate");
            this.fullDate = Optional.ofNullable(fullDate);
            return this;
        }

        public Builder fullDate(Optional<? extends String> fullDate) {
            Utils.checkNotNull(fullDate, "fullDate");
            this.fullDate = fullDate;
            return this;
        }

        public Builder intervalSecond(String intervalSecond) {
            Utils.checkNotNull(intervalSecond, "intervalSecond");
            this.intervalSecond = Optional.ofNullable(intervalSecond);
            return this;
        }

        public Builder intervalSecond(Optional<? extends String> intervalSecond) {
            Utils.checkNotNull(intervalSecond, "intervalSecond");
            this.intervalSecond = intervalSecond;
            return this;
        }

        public Builder intervalMinute(String intervalMinute) {
            Utils.checkNotNull(intervalMinute, "intervalMinute");
            this.intervalMinute = Optional.ofNullable(intervalMinute);
            return this;
        }

        public Builder intervalMinute(Optional<? extends String> intervalMinute) {
            Utils.checkNotNull(intervalMinute, "intervalMinute");
            this.intervalMinute = intervalMinute;
            return this;
        }

        public Builder intervalHour(String intervalHour) {
            Utils.checkNotNull(intervalHour, "intervalHour");
            this.intervalHour = Optional.ofNullable(intervalHour);
            return this;
        }

        public Builder intervalHour(Optional<? extends String> intervalHour) {
            Utils.checkNotNull(intervalHour, "intervalHour");
            this.intervalHour = intervalHour;
            return this;
        }

        public Builder intervalDay(String intervalDay) {
            Utils.checkNotNull(intervalDay, "intervalDay");
            this.intervalDay = Optional.ofNullable(intervalDay);
            return this;
        }

        public Builder intervalDay(Optional<? extends String> intervalDay) {
            Utils.checkNotNull(intervalDay, "intervalDay");
            this.intervalDay = intervalDay;
            return this;
        }

        public Builder intervalMonth(String intervalMonth) {
            Utils.checkNotNull(intervalMonth, "intervalMonth");
            this.intervalMonth = Optional.ofNullable(intervalMonth);
            return this;
        }

        public Builder intervalMonth(Optional<? extends String> intervalMonth) {
            Utils.checkNotNull(intervalMonth, "intervalMonth");
            this.intervalMonth = intervalMonth;
            return this;
        }

        public Builder intervalYear(String intervalYear) {
            Utils.checkNotNull(intervalYear, "intervalYear");
            this.intervalYear = Optional.ofNullable(intervalYear);
            return this;
        }

        public Builder intervalYear(Optional<? extends String> intervalYear) {
            Utils.checkNotNull(intervalYear, "intervalYear");
            this.intervalYear = intervalYear;
            return this;
        }

        public Builder defaultTimezone(String defaultTimezone) {
            Utils.checkNotNull(defaultTimezone, "defaultTimezone");
            this.defaultTimezone = Optional.ofNullable(defaultTimezone);
            return this;
        }

        public Builder defaultTimezone(Optional<? extends String> defaultTimezone) {
            Utils.checkNotNull(defaultTimezone, "defaultTimezone");
            this.defaultTimezone = defaultTimezone;
            return this;
        }
        
        public GrafanaDateFormatSpecifications build() {
            return new GrafanaDateFormatSpecifications(
                fullDate,
                intervalSecond,
                intervalMinute,
                intervalHour,
                intervalDay,
                intervalMonth,
                intervalYear,
                defaultTimezone);
        }
    }
}

