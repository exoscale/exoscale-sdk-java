/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SMTPServerSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class SMTPServerSettings {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_SKIP_VERIFY = "skip_verify";
  @SerializedName(SERIALIZED_NAME_SKIP_VERIFY)
  private Boolean skipVerify;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_FROM_ADDRESS = "from_address";
  @SerializedName(SERIALIZED_NAME_FROM_ADDRESS)
  private String fromAddress;

  public static final String SERIALIZED_NAME_FROM_NAME = "from_name";
  @SerializedName(SERIALIZED_NAME_FROM_NAME)
  private String fromName;

  /**
   * Gets or Sets starttlsPolicy
   */
  @JsonAdapter(StarttlsPolicyEnum.Adapter.class)
  public enum StarttlsPolicyEnum {
    OPPORTUNISTICSTARTTLS("OpportunisticStartTLS"),
    
    MANDATORYSTARTTLS("MandatoryStartTLS"),
    
    NOSTARTTLS("NoStartTLS");

    private String value;

    StarttlsPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StarttlsPolicyEnum fromValue(String value) {
      for (StarttlsPolicyEnum b : StarttlsPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StarttlsPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StarttlsPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StarttlsPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StarttlsPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StarttlsPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STARTTLS_POLICY = "starttls_policy";
  @SerializedName(SERIALIZED_NAME_STARTTLS_POLICY)
  private StarttlsPolicyEnum starttlsPolicy;

  public SMTPServerSettings() {
  }

  public SMTPServerSettings host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public SMTPServerSettings port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @javax.annotation.Nonnull
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public SMTPServerSettings skipVerify(Boolean skipVerify) {
    this.skipVerify = skipVerify;
    return this;
  }

   /**
   * Get skipVerify
   * @return skipVerify
  **/
  @javax.annotation.Nullable
  public Boolean getSkipVerify() {
    return skipVerify;
  }

  public void setSkipVerify(Boolean skipVerify) {
    this.skipVerify = skipVerify;
  }


  public SMTPServerSettings username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public SMTPServerSettings password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public SMTPServerSettings fromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
    return this;
  }

   /**
   * Get fromAddress
   * @return fromAddress
  **/
  @javax.annotation.Nonnull
  public String getFromAddress() {
    return fromAddress;
  }

  public void setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
  }


  public SMTPServerSettings fromName(String fromName) {
    this.fromName = fromName;
    return this;
  }

   /**
   * Get fromName
   * @return fromName
  **/
  @javax.annotation.Nullable
  public String getFromName() {
    return fromName;
  }

  public void setFromName(String fromName) {
    this.fromName = fromName;
  }


  public SMTPServerSettings starttlsPolicy(StarttlsPolicyEnum starttlsPolicy) {
    this.starttlsPolicy = starttlsPolicy;
    return this;
  }

   /**
   * Get starttlsPolicy
   * @return starttlsPolicy
  **/
  @javax.annotation.Nullable
  public StarttlsPolicyEnum getStarttlsPolicy() {
    return starttlsPolicy;
  }

  public void setStarttlsPolicy(StarttlsPolicyEnum starttlsPolicy) {
    this.starttlsPolicy = starttlsPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SMTPServerSettings smTPServerSettings = (SMTPServerSettings) o;
    return Objects.equals(this.host, smTPServerSettings.host) &&
        Objects.equals(this.port, smTPServerSettings.port) &&
        Objects.equals(this.skipVerify, smTPServerSettings.skipVerify) &&
        Objects.equals(this.username, smTPServerSettings.username) &&
        Objects.equals(this.password, smTPServerSettings.password) &&
        Objects.equals(this.fromAddress, smTPServerSettings.fromAddress) &&
        Objects.equals(this.fromName, smTPServerSettings.fromName) &&
        Objects.equals(this.starttlsPolicy, smTPServerSettings.starttlsPolicy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, port, skipVerify, username, password, fromAddress, fromName, starttlsPolicy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SMTPServerSettings {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    skipVerify: ").append(toIndentedString(skipVerify)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    starttlsPolicy: ").append(toIndentedString(starttlsPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("host");
    openapiFields.add("port");
    openapiFields.add("skip_verify");
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("from_address");
    openapiFields.add("from_name");
    openapiFields.add("starttls_policy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("from_address");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SMTPServerSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SMTPServerSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SMTPServerSettings is not found in the empty JSON string", SMTPServerSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SMTPServerSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SMTPServerSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SMTPServerSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("from_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_address").toString()));
      }
      if ((jsonObj.get("from_name") != null && !jsonObj.get("from_name").isJsonNull()) && !jsonObj.get("from_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_name").toString()));
      }
      if ((jsonObj.get("starttls_policy") != null && !jsonObj.get("starttls_policy").isJsonNull()) && !jsonObj.get("starttls_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `starttls_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("starttls_policy").toString()));
      }
      // validate the optional field `starttls_policy`
      if (jsonObj.get("starttls_policy") != null && !jsonObj.get("starttls_policy").isJsonNull()) {
        StarttlsPolicyEnum.validateJsonElement(jsonObj.get("starttls_policy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SMTPServerSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SMTPServerSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SMTPServerSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SMTPServerSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<SMTPServerSettings>() {
           @Override
           public void write(JsonWriter out, SMTPServerSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SMTPServerSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SMTPServerSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SMTPServerSettings
  * @throws IOException if the JSON string is invalid with respect to SMTPServerSettings
  */
  public static SMTPServerSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SMTPServerSettings.class);
  }

 /**
  * Convert an instance of SMTPServerSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

