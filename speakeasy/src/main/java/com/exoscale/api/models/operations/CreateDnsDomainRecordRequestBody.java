/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateDnsDomainRecordRequestBody {

    /**
     * DNS domain record name
     */
    @JsonProperty("name")
    private String name;

    /**
     * DNS domain record type
     */
    @JsonProperty("type")
    private CreateDnsDomainRecordType type;

    /**
     * DNS domain record content
     */
    @JsonProperty("content")
    private String content;

    /**
     * DNS domain record TTL
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ttl")
    private Optional<? extends Long> ttl;

    /**
     * DNS domain record priority
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private Optional<? extends Long> priority;

    public CreateDnsDomainRecordRequestBody(
            @JsonProperty("name") String name,
            @JsonProperty("type") CreateDnsDomainRecordType type,
            @JsonProperty("content") String content,
            @JsonProperty("ttl") Optional<? extends Long> ttl,
            @JsonProperty("priority") Optional<? extends Long> priority) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(ttl, "ttl");
        Utils.checkNotNull(priority, "priority");
        this.name = name;
        this.type = type;
        this.content = content;
        this.ttl = ttl;
        this.priority = priority;
    }

    /**
     * DNS domain record name
     */
    public String name() {
        return name;
    }

    /**
     * DNS domain record type
     */
    public CreateDnsDomainRecordType type() {
        return type;
    }

    /**
     * DNS domain record content
     */
    public String content() {
        return content;
    }

    /**
     * DNS domain record TTL
     */
    public Optional<? extends Long> ttl() {
        return ttl;
    }

    /**
     * DNS domain record priority
     */
    public Optional<? extends Long> priority() {
        return priority;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * DNS domain record name
     */
    public CreateDnsDomainRecordRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * DNS domain record type
     */
    public CreateDnsDomainRecordRequestBody withType(CreateDnsDomainRecordType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * DNS domain record content
     */
    public CreateDnsDomainRecordRequestBody withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    /**
     * DNS domain record TTL
     */
    public CreateDnsDomainRecordRequestBody withTtl(long ttl) {
        Utils.checkNotNull(ttl, "ttl");
        this.ttl = Optional.ofNullable(ttl);
        return this;
    }

    /**
     * DNS domain record TTL
     */
    public CreateDnsDomainRecordRequestBody withTtl(Optional<? extends Long> ttl) {
        Utils.checkNotNull(ttl, "ttl");
        this.ttl = ttl;
        return this;
    }

    /**
     * DNS domain record priority
     */
    public CreateDnsDomainRecordRequestBody withPriority(long priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = Optional.ofNullable(priority);
        return this;
    }

    /**
     * DNS domain record priority
     */
    public CreateDnsDomainRecordRequestBody withPriority(Optional<? extends Long> priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = priority;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDnsDomainRecordRequestBody other = (CreateDnsDomainRecordRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.content, other.content) &&
            java.util.Objects.deepEquals(this.ttl, other.ttl) &&
            java.util.Objects.deepEquals(this.priority, other.priority);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            type,
            content,
            ttl,
            priority);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDnsDomainRecordRequestBody.class,
                "name", name,
                "type", type,
                "content", content,
                "ttl", ttl,
                "priority", priority);
    }
    
    public final static class Builder {
 
        private String name;
 
        private CreateDnsDomainRecordType type;
 
        private String content;
 
        private Optional<? extends Long> ttl = Optional.empty();
 
        private Optional<? extends Long> priority = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * DNS domain record name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * DNS domain record type
         */
        public Builder type(CreateDnsDomainRecordType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * DNS domain record content
         */
        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        /**
         * DNS domain record TTL
         */
        public Builder ttl(long ttl) {
            Utils.checkNotNull(ttl, "ttl");
            this.ttl = Optional.ofNullable(ttl);
            return this;
        }

        /**
         * DNS domain record TTL
         */
        public Builder ttl(Optional<? extends Long> ttl) {
            Utils.checkNotNull(ttl, "ttl");
            this.ttl = ttl;
            return this;
        }

        /**
         * DNS domain record priority
         */
        public Builder priority(long priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = Optional.ofNullable(priority);
            return this;
        }

        /**
         * DNS domain record priority
         */
        public Builder priority(Optional<? extends Long> priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = priority;
            return this;
        }
        
        public CreateDnsDomainRecordRequestBody build() {
            return new CreateDnsDomainRecordRequestBody(
                name,
                type,
                content,
                ttl,
                priority);
        }
    }
}

