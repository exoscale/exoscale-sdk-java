/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Settings6 type.
 */
public class Settings6 {
    private Kafka kafka;
    private KafkaConnect kafkaConnect;
    private KafkaRest kafkaRest;
    private SchemaRegistry schemaRegistry;

    /**
     * Default constructor.
     */
    public Settings6() {
    }

    /**
     * Initialization constructor.
     * @param  kafka  Kafka value for kafka.
     * @param  kafkaConnect  KafkaConnect value for kafkaConnect.
     * @param  kafkaRest  KafkaRest value for kafkaRest.
     * @param  schemaRegistry  SchemaRegistry value for schemaRegistry.
     */
    public Settings6(
            Kafka kafka,
            KafkaConnect kafkaConnect,
            KafkaRest kafkaRest,
            SchemaRegistry schemaRegistry) {
        this.kafka = kafka;
        this.kafkaConnect = kafkaConnect;
        this.kafkaRest = kafkaRest;
        this.schemaRegistry = schemaRegistry;
    }

    /**
     * Getter for Kafka.
     * Kafka broker configuration values
     * @return Returns the Kafka
     */
    @JsonGetter("kafka")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Kafka getKafka() {
        return kafka;
    }

    /**
     * Setter for Kafka.
     * Kafka broker configuration values
     * @param kafka Value for Kafka
     */
    @JsonSetter("kafka")
    public void setKafka(Kafka kafka) {
        this.kafka = kafka;
    }

    /**
     * Getter for KafkaConnect.
     * Kafka Connect configuration values
     * @return Returns the KafkaConnect
     */
    @JsonGetter("kafka-connect")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public KafkaConnect getKafkaConnect() {
        return kafkaConnect;
    }

    /**
     * Setter for KafkaConnect.
     * Kafka Connect configuration values
     * @param kafkaConnect Value for KafkaConnect
     */
    @JsonSetter("kafka-connect")
    public void setKafkaConnect(KafkaConnect kafkaConnect) {
        this.kafkaConnect = kafkaConnect;
    }

    /**
     * Getter for KafkaRest.
     * Kafka REST configuration
     * @return Returns the KafkaRest
     */
    @JsonGetter("kafka-rest")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public KafkaRest getKafkaRest() {
        return kafkaRest;
    }

    /**
     * Setter for KafkaRest.
     * Kafka REST configuration
     * @param kafkaRest Value for KafkaRest
     */
    @JsonSetter("kafka-rest")
    public void setKafkaRest(KafkaRest kafkaRest) {
        this.kafkaRest = kafkaRest;
    }

    /**
     * Getter for SchemaRegistry.
     * Schema Registry configuration
     * @return Returns the SchemaRegistry
     */
    @JsonGetter("schema-registry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SchemaRegistry getSchemaRegistry() {
        return schemaRegistry;
    }

    /**
     * Setter for SchemaRegistry.
     * Schema Registry configuration
     * @param schemaRegistry Value for SchemaRegistry
     */
    @JsonSetter("schema-registry")
    public void setSchemaRegistry(SchemaRegistry schemaRegistry) {
        this.schemaRegistry = schemaRegistry;
    }

    /**
     * Converts this Settings6 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Settings6 [" + "kafka=" + kafka + ", kafkaConnect=" + kafkaConnect + ", kafkaRest="
                + kafkaRest + ", schemaRegistry=" + schemaRegistry + "]";
    }

    /**
     * Builds a new {@link Settings6.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Settings6.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .kafka(getKafka())
                .kafkaConnect(getKafkaConnect())
                .kafkaRest(getKafkaRest())
                .schemaRegistry(getSchemaRegistry());
        return builder;
    }

    /**
     * Class to build instances of {@link Settings6}.
     */
    public static class Builder {
        private Kafka kafka;
        private KafkaConnect kafkaConnect;
        private KafkaRest kafkaRest;
        private SchemaRegistry schemaRegistry;



        /**
         * Setter for kafka.
         * @param  kafka  Kafka value for kafka.
         * @return Builder
         */
        public Builder kafka(Kafka kafka) {
            this.kafka = kafka;
            return this;
        }

        /**
         * Setter for kafkaConnect.
         * @param  kafkaConnect  KafkaConnect value for kafkaConnect.
         * @return Builder
         */
        public Builder kafkaConnect(KafkaConnect kafkaConnect) {
            this.kafkaConnect = kafkaConnect;
            return this;
        }

        /**
         * Setter for kafkaRest.
         * @param  kafkaRest  KafkaRest value for kafkaRest.
         * @return Builder
         */
        public Builder kafkaRest(KafkaRest kafkaRest) {
            this.kafkaRest = kafkaRest;
            return this;
        }

        /**
         * Setter for schemaRegistry.
         * @param  schemaRegistry  SchemaRegistry value for schemaRegistry.
         * @return Builder
         */
        public Builder schemaRegistry(SchemaRegistry schemaRegistry) {
            this.schemaRegistry = schemaRegistry;
            return this;
        }

        /**
         * Builds a new {@link Settings6} object using the set fields.
         * @return {@link Settings6}
         */
        public Settings6 build() {
            return new Settings6(kafka, kafkaConnect, kafkaRest, schemaRegistry);
        }
    }
}
