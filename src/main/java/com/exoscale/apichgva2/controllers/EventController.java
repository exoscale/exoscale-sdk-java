/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.DateTimeHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.Event;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class EventController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public EventController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Retrieve Mutation Events for a given date range. Defaults to retrieving Events for the past
     * 24 hours. Both a `from` and `to` arguments can be specified to filter Events over a specific
     * period. Events will be the the most descriptive possible but not all fields are mandatory.
     * @param  from  Optional parameter: Example:
     * @param  to  Optional parameter: Example:
     * @return    Returns the List of Event response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Event> listEvents(
            final LocalDateTime from,
            final LocalDateTime to) throws ApiException, IOException {
        return prepareListEventsRequest(from, to).execute();
    }

    /**
     * Retrieve Mutation Events for a given date range. Defaults to retrieving Events for the past
     * 24 hours. Both a `from` and `to` arguments can be specified to filter Events over a specific
     * period. Events will be the the most descriptive possible but not all fields are mandatory.
     * @param  from  Optional parameter: Example:
     * @param  to  Optional parameter: Example:
     * @return    Returns the List of Event response from the API call
     */
    public CompletableFuture<List<Event>> listEventsAsync(
            final LocalDateTime from,
            final LocalDateTime to) {
        try { 
            return prepareListEventsRequest(from, to).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listEvents.
     */
    private ApiCall<List<Event>, ApiException> prepareListEventsRequest(
            final LocalDateTime from,
            final LocalDateTime to) throws IOException {
        return new ApiCall.Builder<List<Event>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/event")
                        .queryParam(param -> param.key("from")
                                .value(DateTimeHelper.toRfc8601DateTime(from)).isRequired(false))
                        .queryParam(param -> param.key("to")
                                .value(DateTimeHelper.toRfc8601DateTime(to)).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Event[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}