/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for DbaasRedisRequest type.
 */
public class DbaasRedisRequest {
    private Maintenance maintenance;
    private String plan;
    private Boolean terminationProtection;
    private List<String> ipFilter;
    private Migration migration;
    private RedisSettings redisSettings;

    /**
     * Default constructor.
     */
    public DbaasRedisRequest() {
    }

    /**
     * Initialization constructor.
     * @param  maintenance  Maintenance value for maintenance.
     * @param  plan  String value for plan.
     * @param  terminationProtection  Boolean value for terminationProtection.
     * @param  ipFilter  List of String value for ipFilter.
     * @param  migration  Migration value for migration.
     * @param  redisSettings  RedisSettings value for redisSettings.
     */
    public DbaasRedisRequest(
            Maintenance maintenance,
            String plan,
            Boolean terminationProtection,
            List<String> ipFilter,
            Migration migration,
            RedisSettings redisSettings) {
        this.maintenance = maintenance;
        this.plan = plan;
        this.terminationProtection = terminationProtection;
        this.ipFilter = ipFilter;
        this.migration = migration;
        this.redisSettings = redisSettings;
    }

    /**
     * Getter for Maintenance.
     * Automatic maintenance settings
     * @return Returns the Maintenance
     */
    @JsonGetter("maintenance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Maintenance getMaintenance() {
        return maintenance;
    }

    /**
     * Setter for Maintenance.
     * Automatic maintenance settings
     * @param maintenance Value for Maintenance
     */
    @JsonSetter("maintenance")
    public void setMaintenance(Maintenance maintenance) {
        this.maintenance = maintenance;
    }

    /**
     * Getter for Plan.
     * Subscription plan
     * @return Returns the String
     */
    @JsonGetter("plan")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPlan() {
        return plan;
    }

    /**
     * Setter for Plan.
     * Subscription plan
     * @param plan Value for String
     */
    @JsonSetter("plan")
    public void setPlan(String plan) {
        this.plan = plan;
    }

    /**
     * Getter for TerminationProtection.
     * Service is protected against termination and powering off
     * @return Returns the Boolean
     */
    @JsonGetter("termination-protection")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTerminationProtection() {
        return terminationProtection;
    }

    /**
     * Setter for TerminationProtection.
     * Service is protected against termination and powering off
     * @param terminationProtection Value for Boolean
     */
    @JsonSetter("termination-protection")
    public void setTerminationProtection(Boolean terminationProtection) {
        this.terminationProtection = terminationProtection;
    }

    /**
     * Getter for IpFilter.
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     * @return Returns the List of String
     */
    @JsonGetter("ip-filter")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getIpFilter() {
        return ipFilter;
    }

    /**
     * Setter for IpFilter.
     * Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
     * @param ipFilter Value for List of String
     */
    @JsonSetter("ip-filter")
    public void setIpFilter(List<String> ipFilter) {
        this.ipFilter = ipFilter;
    }

    /**
     * Getter for Migration.
     * Migrate data from existing server
     * @return Returns the Migration
     */
    @JsonGetter("migration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Migration getMigration() {
        return migration;
    }

    /**
     * Setter for Migration.
     * Migrate data from existing server
     * @param migration Value for Migration
     */
    @JsonSetter("migration")
    public void setMigration(Migration migration) {
        this.migration = migration;
    }

    /**
     * Getter for RedisSettings.
     * @return Returns the RedisSettings
     */
    @JsonGetter("redis-settings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RedisSettings getRedisSettings() {
        return redisSettings;
    }

    /**
     * Setter for RedisSettings.
     * @param redisSettings Value for RedisSettings
     */
    @JsonSetter("redis-settings")
    public void setRedisSettings(RedisSettings redisSettings) {
        this.redisSettings = redisSettings;
    }

    /**
     * Converts this DbaasRedisRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DbaasRedisRequest [" + "maintenance=" + maintenance + ", plan=" + plan
                + ", terminationProtection=" + terminationProtection + ", ipFilter=" + ipFilter
                + ", migration=" + migration + ", redisSettings=" + redisSettings + "]";
    }

    /**
     * Builds a new {@link DbaasRedisRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DbaasRedisRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .maintenance(getMaintenance())
                .plan(getPlan())
                .terminationProtection(getTerminationProtection())
                .ipFilter(getIpFilter())
                .migration(getMigration())
                .redisSettings(getRedisSettings());
        return builder;
    }

    /**
     * Class to build instances of {@link DbaasRedisRequest}.
     */
    public static class Builder {
        private Maintenance maintenance;
        private String plan;
        private Boolean terminationProtection;
        private List<String> ipFilter;
        private Migration migration;
        private RedisSettings redisSettings;



        /**
         * Setter for maintenance.
         * @param  maintenance  Maintenance value for maintenance.
         * @return Builder
         */
        public Builder maintenance(Maintenance maintenance) {
            this.maintenance = maintenance;
            return this;
        }

        /**
         * Setter for plan.
         * @param  plan  String value for plan.
         * @return Builder
         */
        public Builder plan(String plan) {
            this.plan = plan;
            return this;
        }

        /**
         * Setter for terminationProtection.
         * @param  terminationProtection  Boolean value for terminationProtection.
         * @return Builder
         */
        public Builder terminationProtection(Boolean terminationProtection) {
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Setter for ipFilter.
         * @param  ipFilter  List of String value for ipFilter.
         * @return Builder
         */
        public Builder ipFilter(List<String> ipFilter) {
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * Setter for migration.
         * @param  migration  Migration value for migration.
         * @return Builder
         */
        public Builder migration(Migration migration) {
            this.migration = migration;
            return this;
        }

        /**
         * Setter for redisSettings.
         * @param  redisSettings  RedisSettings value for redisSettings.
         * @return Builder
         */
        public Builder redisSettings(RedisSettings redisSettings) {
            this.redisSettings = redisSettings;
            return this;
        }

        /**
         * Builds a new {@link DbaasRedisRequest} object using the set fields.
         * @return {@link DbaasRedisRequest}
         */
        public DbaasRedisRequest build() {
            return new DbaasRedisRequest(maintenance, plan, terminationProtection, ipFilter,
                    migration, redisSettings);
        }
    }
}
