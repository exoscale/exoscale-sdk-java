/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class DbaasServiceMysql {

    /**
     * Service last update timestamp (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated-at")
    private Optional<? extends OffsetDateTime> updatedAt;

    /**
     * Number of service nodes in the active plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-count")
    private Optional<? extends Long> nodeCount;

    /**
     * MySQL connection information properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection-info")
    private Optional<? extends ConnectionInfo> connectionInfo;

    /**
     * Backup schedule
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup-schedule")
    private Optional<? extends BackupSchedule> backupSchedule;

    /**
     * Number of CPUs for each node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-cpu-count")
    private Optional<? extends Long> nodeCpuCount;

    /**
     * Service integrations
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrations")
    private Optional<? extends java.util.List<DbaasIntegration>> integrations;

    /**
     * The zone where the service is running
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    private Optional<? extends String> zone;

    /**
     * State of individual service nodes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-states")
    private Optional<? extends java.util.List<DbaasNodeState>> nodeStates;

    @JsonProperty("name")
    private String name;

    @JsonProperty("type")
    private String type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends EnumServiceState> state;

    /**
     * List of MySQL databases
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databases")
    private Optional<? extends java.util.List<String>> databases;

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip-filter")
    private Optional<? extends java.util.List<String>> ipFilter;

    /**
     * List of backups for the service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backups")
    private Optional<? extends java.util.List<DbaasServiceBackup>> backups;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    /**
     * Service notifications
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifications")
    private Optional<? extends java.util.List<DbaasServiceNotification>> notifications;

    /**
     * Service component information objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("components")
    private Optional<? extends java.util.List<Components>> components;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mysql-settings")
    private Optional<? extends JsonSchemaMysql> mysqlSettings;

    /**
     * Automatic maintenance settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenance")
    private Optional<? extends DbaasServiceMaintenance> maintenance;

    /**
     * TODO UNIT disk space for data storage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disk-size")
    private Optional<? extends Long> diskSize;

    /**
     * TODO UNIT of memory for each node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-memory")
    private Optional<? extends Long> nodeMemory;

    /**
     * URI for connecting to the service (may be absent)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    private Optional<? extends String> uri;

    /**
     * service_uri parameterized into key-value pairs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri-params")
    private Optional<? extends UriParams> uriParams;

    /**
     * MySQL version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    /**
     * Service creation timestamp (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * Subscription plan
     */
    @JsonProperty("plan")
    private String plan;

    /**
     * List of service users
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    private Optional<? extends java.util.List<Users>> users;

    public DbaasServiceMysql(
            @JsonProperty("updated-at") Optional<? extends OffsetDateTime> updatedAt,
            @JsonProperty("node-count") Optional<? extends Long> nodeCount,
            @JsonProperty("connection-info") Optional<? extends ConnectionInfo> connectionInfo,
            @JsonProperty("backup-schedule") Optional<? extends BackupSchedule> backupSchedule,
            @JsonProperty("node-cpu-count") Optional<? extends Long> nodeCpuCount,
            @JsonProperty("integrations") Optional<? extends java.util.List<DbaasIntegration>> integrations,
            @JsonProperty("zone") Optional<? extends String> zone,
            @JsonProperty("node-states") Optional<? extends java.util.List<DbaasNodeState>> nodeStates,
            @JsonProperty("name") String name,
            @JsonProperty("type") String type,
            @JsonProperty("state") Optional<? extends EnumServiceState> state,
            @JsonProperty("databases") Optional<? extends java.util.List<String>> databases,
            @JsonProperty("ip-filter") Optional<? extends java.util.List<String>> ipFilter,
            @JsonProperty("backups") Optional<? extends java.util.List<DbaasServiceBackup>> backups,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("notifications") Optional<? extends java.util.List<DbaasServiceNotification>> notifications,
            @JsonProperty("components") Optional<? extends java.util.List<Components>> components,
            @JsonProperty("mysql-settings") Optional<? extends JsonSchemaMysql> mysqlSettings,
            @JsonProperty("maintenance") Optional<? extends DbaasServiceMaintenance> maintenance,
            @JsonProperty("disk-size") Optional<? extends Long> diskSize,
            @JsonProperty("node-memory") Optional<? extends Long> nodeMemory,
            @JsonProperty("uri") Optional<? extends String> uri,
            @JsonProperty("uri-params") Optional<? extends UriParams> uriParams,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("plan") String plan,
            @JsonProperty("users") Optional<? extends java.util.List<Users>> users) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(nodeCount, "nodeCount");
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        Utils.checkNotNull(integrations, "integrations");
        Utils.checkNotNull(zone, "zone");
        Utils.checkNotNull(nodeStates, "nodeStates");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(databases, "databases");
        Utils.checkNotNull(ipFilter, "ipFilter");
        Utils.checkNotNull(backups, "backups");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(notifications, "notifications");
        Utils.checkNotNull(components, "components");
        Utils.checkNotNull(mysqlSettings, "mysqlSettings");
        Utils.checkNotNull(maintenance, "maintenance");
        Utils.checkNotNull(diskSize, "diskSize");
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        Utils.checkNotNull(uri, "uri");
        Utils.checkNotNull(uriParams, "uriParams");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(plan, "plan");
        Utils.checkNotNull(users, "users");
        this.updatedAt = updatedAt;
        this.nodeCount = nodeCount;
        this.connectionInfo = connectionInfo;
        this.backupSchedule = backupSchedule;
        this.nodeCpuCount = nodeCpuCount;
        this.integrations = integrations;
        this.zone = zone;
        this.nodeStates = nodeStates;
        this.name = name;
        this.type = type;
        this.state = state;
        this.databases = databases;
        this.ipFilter = ipFilter;
        this.backups = backups;
        this.terminationProtection = terminationProtection;
        this.notifications = notifications;
        this.components = components;
        this.mysqlSettings = mysqlSettings;
        this.maintenance = maintenance;
        this.diskSize = diskSize;
        this.nodeMemory = nodeMemory;
        this.uri = uri;
        this.uriParams = uriParams;
        this.version = version;
        this.createdAt = createdAt;
        this.plan = plan;
        this.users = users;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public Optional<? extends OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * Number of service nodes in the active plan
     */
    public Optional<? extends Long> nodeCount() {
        return nodeCount;
    }

    /**
     * MySQL connection information properties
     */
    public Optional<? extends ConnectionInfo> connectionInfo() {
        return connectionInfo;
    }

    /**
     * Backup schedule
     */
    public Optional<? extends BackupSchedule> backupSchedule() {
        return backupSchedule;
    }

    /**
     * Number of CPUs for each node
     */
    public Optional<? extends Long> nodeCpuCount() {
        return nodeCpuCount;
    }

    /**
     * Service integrations
     */
    public Optional<? extends java.util.List<DbaasIntegration>> integrations() {
        return integrations;
    }

    /**
     * The zone where the service is running
     */
    public Optional<? extends String> zone() {
        return zone;
    }

    /**
     * State of individual service nodes
     */
    public Optional<? extends java.util.List<DbaasNodeState>> nodeStates() {
        return nodeStates;
    }

    public String name() {
        return name;
    }

    public String type() {
        return type;
    }

    public Optional<? extends EnumServiceState> state() {
        return state;
    }

    /**
     * List of MySQL databases
     */
    public Optional<? extends java.util.List<String>> databases() {
        return databases;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public Optional<? extends java.util.List<String>> ipFilter() {
        return ipFilter;
    }

    /**
     * List of backups for the service
     */
    public Optional<? extends java.util.List<DbaasServiceBackup>> backups() {
        return backups;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    /**
     * Service notifications
     */
    public Optional<? extends java.util.List<DbaasServiceNotification>> notifications() {
        return notifications;
    }

    /**
     * Service component information objects
     */
    public Optional<? extends java.util.List<Components>> components() {
        return components;
    }

    public Optional<? extends JsonSchemaMysql> mysqlSettings() {
        return mysqlSettings;
    }

    /**
     * Automatic maintenance settings
     */
    public Optional<? extends DbaasServiceMaintenance> maintenance() {
        return maintenance;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public Optional<? extends Long> diskSize() {
        return diskSize;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public Optional<? extends Long> nodeMemory() {
        return nodeMemory;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public Optional<? extends String> uri() {
        return uri;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public Optional<? extends UriParams> uriParams() {
        return uriParams;
    }

    /**
     * MySQL version
     */
    public Optional<? extends String> version() {
        return version;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Subscription plan
     */
    public String plan() {
        return plan;
    }

    /**
     * List of service users
     */
    public Optional<? extends java.util.List<Users>> users() {
        return users;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public DbaasServiceMysql withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public DbaasServiceMysql withUpdatedAt(Optional<? extends OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Number of service nodes in the active plan
     */
    public DbaasServiceMysql withNodeCount(long nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = Optional.ofNullable(nodeCount);
        return this;
    }

    /**
     * Number of service nodes in the active plan
     */
    public DbaasServiceMysql withNodeCount(Optional<? extends Long> nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * MySQL connection information properties
     */
    public DbaasServiceMysql withConnectionInfo(ConnectionInfo connectionInfo) {
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        this.connectionInfo = Optional.ofNullable(connectionInfo);
        return this;
    }

    /**
     * MySQL connection information properties
     */
    public DbaasServiceMysql withConnectionInfo(Optional<? extends ConnectionInfo> connectionInfo) {
        Utils.checkNotNull(connectionInfo, "connectionInfo");
        this.connectionInfo = connectionInfo;
        return this;
    }

    /**
     * Backup schedule
     */
    public DbaasServiceMysql withBackupSchedule(BackupSchedule backupSchedule) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.backupSchedule = Optional.ofNullable(backupSchedule);
        return this;
    }

    /**
     * Backup schedule
     */
    public DbaasServiceMysql withBackupSchedule(Optional<? extends BackupSchedule> backupSchedule) {
        Utils.checkNotNull(backupSchedule, "backupSchedule");
        this.backupSchedule = backupSchedule;
        return this;
    }

    /**
     * Number of CPUs for each node
     */
    public DbaasServiceMysql withNodeCpuCount(long nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
        return this;
    }

    /**
     * Number of CPUs for each node
     */
    public DbaasServiceMysql withNodeCpuCount(Optional<? extends Long> nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = nodeCpuCount;
        return this;
    }

    /**
     * Service integrations
     */
    public DbaasServiceMysql withIntegrations(java.util.List<DbaasIntegration> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = Optional.ofNullable(integrations);
        return this;
    }

    /**
     * Service integrations
     */
    public DbaasServiceMysql withIntegrations(Optional<? extends java.util.List<DbaasIntegration>> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = integrations;
        return this;
    }

    /**
     * The zone where the service is running
     */
    public DbaasServiceMysql withZone(String zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = Optional.ofNullable(zone);
        return this;
    }

    /**
     * The zone where the service is running
     */
    public DbaasServiceMysql withZone(Optional<? extends String> zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = zone;
        return this;
    }

    /**
     * State of individual service nodes
     */
    public DbaasServiceMysql withNodeStates(java.util.List<DbaasNodeState> nodeStates) {
        Utils.checkNotNull(nodeStates, "nodeStates");
        this.nodeStates = Optional.ofNullable(nodeStates);
        return this;
    }

    /**
     * State of individual service nodes
     */
    public DbaasServiceMysql withNodeStates(Optional<? extends java.util.List<DbaasNodeState>> nodeStates) {
        Utils.checkNotNull(nodeStates, "nodeStates");
        this.nodeStates = nodeStates;
        return this;
    }

    public DbaasServiceMysql withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public DbaasServiceMysql withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public DbaasServiceMysql withState(EnumServiceState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public DbaasServiceMysql withState(Optional<? extends EnumServiceState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * List of MySQL databases
     */
    public DbaasServiceMysql withDatabases(java.util.List<String> databases) {
        Utils.checkNotNull(databases, "databases");
        this.databases = Optional.ofNullable(databases);
        return this;
    }

    /**
     * List of MySQL databases
     */
    public DbaasServiceMysql withDatabases(Optional<? extends java.util.List<String>> databases) {
        Utils.checkNotNull(databases, "databases");
        this.databases = databases;
        return this;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public DbaasServiceMysql withIpFilter(java.util.List<String> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = Optional.ofNullable(ipFilter);
        return this;
    }

    /**
     * Allowed CIDR address blocks for incoming connections
     */
    public DbaasServiceMysql withIpFilter(Optional<? extends java.util.List<String>> ipFilter) {
        Utils.checkNotNull(ipFilter, "ipFilter");
        this.ipFilter = ipFilter;
        return this;
    }

    /**
     * List of backups for the service
     */
    public DbaasServiceMysql withBackups(java.util.List<DbaasServiceBackup> backups) {
        Utils.checkNotNull(backups, "backups");
        this.backups = Optional.ofNullable(backups);
        return this;
    }

    /**
     * List of backups for the service
     */
    public DbaasServiceMysql withBackups(Optional<? extends java.util.List<DbaasServiceBackup>> backups) {
        Utils.checkNotNull(backups, "backups");
        this.backups = backups;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public DbaasServiceMysql withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public DbaasServiceMysql withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    /**
     * Service notifications
     */
    public DbaasServiceMysql withNotifications(java.util.List<DbaasServiceNotification> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = Optional.ofNullable(notifications);
        return this;
    }

    /**
     * Service notifications
     */
    public DbaasServiceMysql withNotifications(Optional<? extends java.util.List<DbaasServiceNotification>> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = notifications;
        return this;
    }

    /**
     * Service component information objects
     */
    public DbaasServiceMysql withComponents(java.util.List<Components> components) {
        Utils.checkNotNull(components, "components");
        this.components = Optional.ofNullable(components);
        return this;
    }

    /**
     * Service component information objects
     */
    public DbaasServiceMysql withComponents(Optional<? extends java.util.List<Components>> components) {
        Utils.checkNotNull(components, "components");
        this.components = components;
        return this;
    }

    public DbaasServiceMysql withMysqlSettings(JsonSchemaMysql mysqlSettings) {
        Utils.checkNotNull(mysqlSettings, "mysqlSettings");
        this.mysqlSettings = Optional.ofNullable(mysqlSettings);
        return this;
    }

    public DbaasServiceMysql withMysqlSettings(Optional<? extends JsonSchemaMysql> mysqlSettings) {
        Utils.checkNotNull(mysqlSettings, "mysqlSettings");
        this.mysqlSettings = mysqlSettings;
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public DbaasServiceMysql withMaintenance(DbaasServiceMaintenance maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = Optional.ofNullable(maintenance);
        return this;
    }

    /**
     * Automatic maintenance settings
     */
    public DbaasServiceMysql withMaintenance(Optional<? extends DbaasServiceMaintenance> maintenance) {
        Utils.checkNotNull(maintenance, "maintenance");
        this.maintenance = maintenance;
        return this;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public DbaasServiceMysql withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = Optional.ofNullable(diskSize);
        return this;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public DbaasServiceMysql withDiskSize(Optional<? extends Long> diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public DbaasServiceMysql withNodeMemory(long nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = Optional.ofNullable(nodeMemory);
        return this;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public DbaasServiceMysql withNodeMemory(Optional<? extends Long> nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = nodeMemory;
        return this;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public DbaasServiceMysql withUri(String uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = Optional.ofNullable(uri);
        return this;
    }

    /**
     * URI for connecting to the service (may be absent)
     */
    public DbaasServiceMysql withUri(Optional<? extends String> uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = uri;
        return this;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public DbaasServiceMysql withUriParams(UriParams uriParams) {
        Utils.checkNotNull(uriParams, "uriParams");
        this.uriParams = Optional.ofNullable(uriParams);
        return this;
    }

    /**
     * service_uri parameterized into key-value pairs
     */
    public DbaasServiceMysql withUriParams(Optional<? extends UriParams> uriParams) {
        Utils.checkNotNull(uriParams, "uriParams");
        this.uriParams = uriParams;
        return this;
    }

    /**
     * MySQL version
     */
    public DbaasServiceMysql withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * MySQL version
     */
    public DbaasServiceMysql withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public DbaasServiceMysql withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public DbaasServiceMysql withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Subscription plan
     */
    public DbaasServiceMysql withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }

    /**
     * List of service users
     */
    public DbaasServiceMysql withUsers(java.util.List<Users> users) {
        Utils.checkNotNull(users, "users");
        this.users = Optional.ofNullable(users);
        return this;
    }

    /**
     * List of service users
     */
    public DbaasServiceMysql withUsers(Optional<? extends java.util.List<Users>> users) {
        Utils.checkNotNull(users, "users");
        this.users = users;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceMysql other = (DbaasServiceMysql) o;
        return 
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.nodeCount, other.nodeCount) &&
            java.util.Objects.deepEquals(this.connectionInfo, other.connectionInfo) &&
            java.util.Objects.deepEquals(this.backupSchedule, other.backupSchedule) &&
            java.util.Objects.deepEquals(this.nodeCpuCount, other.nodeCpuCount) &&
            java.util.Objects.deepEquals(this.integrations, other.integrations) &&
            java.util.Objects.deepEquals(this.zone, other.zone) &&
            java.util.Objects.deepEquals(this.nodeStates, other.nodeStates) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.databases, other.databases) &&
            java.util.Objects.deepEquals(this.ipFilter, other.ipFilter) &&
            java.util.Objects.deepEquals(this.backups, other.backups) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.notifications, other.notifications) &&
            java.util.Objects.deepEquals(this.components, other.components) &&
            java.util.Objects.deepEquals(this.mysqlSettings, other.mysqlSettings) &&
            java.util.Objects.deepEquals(this.maintenance, other.maintenance) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize) &&
            java.util.Objects.deepEquals(this.nodeMemory, other.nodeMemory) &&
            java.util.Objects.deepEquals(this.uri, other.uri) &&
            java.util.Objects.deepEquals(this.uriParams, other.uriParams) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.plan, other.plan) &&
            java.util.Objects.deepEquals(this.users, other.users);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            updatedAt,
            nodeCount,
            connectionInfo,
            backupSchedule,
            nodeCpuCount,
            integrations,
            zone,
            nodeStates,
            name,
            type,
            state,
            databases,
            ipFilter,
            backups,
            terminationProtection,
            notifications,
            components,
            mysqlSettings,
            maintenance,
            diskSize,
            nodeMemory,
            uri,
            uriParams,
            version,
            createdAt,
            plan,
            users);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceMysql.class,
                "updatedAt", updatedAt,
                "nodeCount", nodeCount,
                "connectionInfo", connectionInfo,
                "backupSchedule", backupSchedule,
                "nodeCpuCount", nodeCpuCount,
                "integrations", integrations,
                "zone", zone,
                "nodeStates", nodeStates,
                "name", name,
                "type", type,
                "state", state,
                "databases", databases,
                "ipFilter", ipFilter,
                "backups", backups,
                "terminationProtection", terminationProtection,
                "notifications", notifications,
                "components", components,
                "mysqlSettings", mysqlSettings,
                "maintenance", maintenance,
                "diskSize", diskSize,
                "nodeMemory", nodeMemory,
                "uri", uri,
                "uriParams", uriParams,
                "version", version,
                "createdAt", createdAt,
                "plan", plan,
                "users", users);
    }
    
    public final static class Builder {
 
        private Optional<? extends OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<? extends Long> nodeCount = Optional.empty();
 
        private Optional<? extends ConnectionInfo> connectionInfo = Optional.empty();
 
        private Optional<? extends BackupSchedule> backupSchedule = Optional.empty();
 
        private Optional<? extends Long> nodeCpuCount = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasIntegration>> integrations = Optional.empty();
 
        private Optional<? extends String> zone = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasNodeState>> nodeStates = Optional.empty();
 
        private String name;
 
        private String type;
 
        private Optional<? extends EnumServiceState> state = Optional.empty();
 
        private Optional<? extends java.util.List<String>> databases = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ipFilter = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceBackup>> backups = Optional.empty();
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceNotification>> notifications = Optional.empty();
 
        private Optional<? extends java.util.List<Components>> components = Optional.empty();
 
        private Optional<? extends JsonSchemaMysql> mysqlSettings = Optional.empty();
 
        private Optional<? extends DbaasServiceMaintenance> maintenance = Optional.empty();
 
        private Optional<? extends Long> diskSize = Optional.empty();
 
        private Optional<? extends Long> nodeMemory = Optional.empty();
 
        private Optional<? extends String> uri = Optional.empty();
 
        private Optional<? extends UriParams> uriParams = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private String plan;
 
        private Optional<? extends java.util.List<Users>> users = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Service last update timestamp (ISO 8601)
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Service last update timestamp (ISO 8601)
         */
        public Builder updatedAt(Optional<? extends OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Number of service nodes in the active plan
         */
        public Builder nodeCount(long nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = Optional.ofNullable(nodeCount);
            return this;
        }

        /**
         * Number of service nodes in the active plan
         */
        public Builder nodeCount(Optional<? extends Long> nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = nodeCount;
            return this;
        }

        /**
         * MySQL connection information properties
         */
        public Builder connectionInfo(ConnectionInfo connectionInfo) {
            Utils.checkNotNull(connectionInfo, "connectionInfo");
            this.connectionInfo = Optional.ofNullable(connectionInfo);
            return this;
        }

        /**
         * MySQL connection information properties
         */
        public Builder connectionInfo(Optional<? extends ConnectionInfo> connectionInfo) {
            Utils.checkNotNull(connectionInfo, "connectionInfo");
            this.connectionInfo = connectionInfo;
            return this;
        }

        /**
         * Backup schedule
         */
        public Builder backupSchedule(BackupSchedule backupSchedule) {
            Utils.checkNotNull(backupSchedule, "backupSchedule");
            this.backupSchedule = Optional.ofNullable(backupSchedule);
            return this;
        }

        /**
         * Backup schedule
         */
        public Builder backupSchedule(Optional<? extends BackupSchedule> backupSchedule) {
            Utils.checkNotNull(backupSchedule, "backupSchedule");
            this.backupSchedule = backupSchedule;
            return this;
        }

        /**
         * Number of CPUs for each node
         */
        public Builder nodeCpuCount(long nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
            return this;
        }

        /**
         * Number of CPUs for each node
         */
        public Builder nodeCpuCount(Optional<? extends Long> nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = nodeCpuCount;
            return this;
        }

        /**
         * Service integrations
         */
        public Builder integrations(java.util.List<DbaasIntegration> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = Optional.ofNullable(integrations);
            return this;
        }

        /**
         * Service integrations
         */
        public Builder integrations(Optional<? extends java.util.List<DbaasIntegration>> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = integrations;
            return this;
        }

        /**
         * The zone where the service is running
         */
        public Builder zone(String zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = Optional.ofNullable(zone);
            return this;
        }

        /**
         * The zone where the service is running
         */
        public Builder zone(Optional<? extends String> zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = zone;
            return this;
        }

        /**
         * State of individual service nodes
         */
        public Builder nodeStates(java.util.List<DbaasNodeState> nodeStates) {
            Utils.checkNotNull(nodeStates, "nodeStates");
            this.nodeStates = Optional.ofNullable(nodeStates);
            return this;
        }

        /**
         * State of individual service nodes
         */
        public Builder nodeStates(Optional<? extends java.util.List<DbaasNodeState>> nodeStates) {
            Utils.checkNotNull(nodeStates, "nodeStates");
            this.nodeStates = nodeStates;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder state(EnumServiceState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends EnumServiceState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * List of MySQL databases
         */
        public Builder databases(java.util.List<String> databases) {
            Utils.checkNotNull(databases, "databases");
            this.databases = Optional.ofNullable(databases);
            return this;
        }

        /**
         * List of MySQL databases
         */
        public Builder databases(Optional<? extends java.util.List<String>> databases) {
            Utils.checkNotNull(databases, "databases");
            this.databases = databases;
            return this;
        }

        /**
         * Allowed CIDR address blocks for incoming connections
         */
        public Builder ipFilter(java.util.List<String> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = Optional.ofNullable(ipFilter);
            return this;
        }

        /**
         * Allowed CIDR address blocks for incoming connections
         */
        public Builder ipFilter(Optional<? extends java.util.List<String>> ipFilter) {
            Utils.checkNotNull(ipFilter, "ipFilter");
            this.ipFilter = ipFilter;
            return this;
        }

        /**
         * List of backups for the service
         */
        public Builder backups(java.util.List<DbaasServiceBackup> backups) {
            Utils.checkNotNull(backups, "backups");
            this.backups = Optional.ofNullable(backups);
            return this;
        }

        /**
         * List of backups for the service
         */
        public Builder backups(Optional<? extends java.util.List<DbaasServiceBackup>> backups) {
            Utils.checkNotNull(backups, "backups");
            this.backups = backups;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Service notifications
         */
        public Builder notifications(java.util.List<DbaasServiceNotification> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = Optional.ofNullable(notifications);
            return this;
        }

        /**
         * Service notifications
         */
        public Builder notifications(Optional<? extends java.util.List<DbaasServiceNotification>> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = notifications;
            return this;
        }

        /**
         * Service component information objects
         */
        public Builder components(java.util.List<Components> components) {
            Utils.checkNotNull(components, "components");
            this.components = Optional.ofNullable(components);
            return this;
        }

        /**
         * Service component information objects
         */
        public Builder components(Optional<? extends java.util.List<Components>> components) {
            Utils.checkNotNull(components, "components");
            this.components = components;
            return this;
        }

        public Builder mysqlSettings(JsonSchemaMysql mysqlSettings) {
            Utils.checkNotNull(mysqlSettings, "mysqlSettings");
            this.mysqlSettings = Optional.ofNullable(mysqlSettings);
            return this;
        }

        public Builder mysqlSettings(Optional<? extends JsonSchemaMysql> mysqlSettings) {
            Utils.checkNotNull(mysqlSettings, "mysqlSettings");
            this.mysqlSettings = mysqlSettings;
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(DbaasServiceMaintenance maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = Optional.ofNullable(maintenance);
            return this;
        }

        /**
         * Automatic maintenance settings
         */
        public Builder maintenance(Optional<? extends DbaasServiceMaintenance> maintenance) {
            Utils.checkNotNull(maintenance, "maintenance");
            this.maintenance = maintenance;
            return this;
        }

        /**
         * TODO UNIT disk space for data storage
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = Optional.ofNullable(diskSize);
            return this;
        }

        /**
         * TODO UNIT disk space for data storage
         */
        public Builder diskSize(Optional<? extends Long> diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }

        /**
         * TODO UNIT of memory for each node
         */
        public Builder nodeMemory(long nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = Optional.ofNullable(nodeMemory);
            return this;
        }

        /**
         * TODO UNIT of memory for each node
         */
        public Builder nodeMemory(Optional<? extends Long> nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = nodeMemory;
            return this;
        }

        /**
         * URI for connecting to the service (may be absent)
         */
        public Builder uri(String uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = Optional.ofNullable(uri);
            return this;
        }

        /**
         * URI for connecting to the service (may be absent)
         */
        public Builder uri(Optional<? extends String> uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = uri;
            return this;
        }

        /**
         * service_uri parameterized into key-value pairs
         */
        public Builder uriParams(UriParams uriParams) {
            Utils.checkNotNull(uriParams, "uriParams");
            this.uriParams = Optional.ofNullable(uriParams);
            return this;
        }

        /**
         * service_uri parameterized into key-value pairs
         */
        public Builder uriParams(Optional<? extends UriParams> uriParams) {
            Utils.checkNotNull(uriParams, "uriParams");
            this.uriParams = uriParams;
            return this;
        }

        /**
         * MySQL version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * MySQL version
         */
        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Service creation timestamp (ISO 8601)
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Service creation timestamp (ISO 8601)
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }

        /**
         * List of service users
         */
        public Builder users(java.util.List<Users> users) {
            Utils.checkNotNull(users, "users");
            this.users = Optional.ofNullable(users);
            return this;
        }

        /**
         * List of service users
         */
        public Builder users(Optional<? extends java.util.List<Users>> users) {
            Utils.checkNotNull(users, "users");
            this.users = users;
            return this;
        }
        
        public DbaasServiceMysql build() {
            return new DbaasServiceMysql(
                updatedAt,
                nodeCount,
                connectionInfo,
                backupSchedule,
                nodeCpuCount,
                integrations,
                zone,
                nodeStates,
                name,
                type,
                state,
                databases,
                ipFilter,
                backups,
                terminationProtection,
                notifications,
                components,
                mysqlSettings,
                maintenance,
                diskSize,
                nodeMemory,
                uri,
                uriParams,
                version,
                createdAt,
                plan,
                users);
        }
    }
}

