/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Kafka connection information properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasServiceKafkaConnectionInfo {
  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<String> nodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCESS_CERT = "access-cert";
  @SerializedName(SERIALIZED_NAME_ACCESS_CERT)
  private String accessCert;

  public static final String SERIALIZED_NAME_ACCESS_KEY = "access-key";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY)
  private String accessKey;

  public static final String SERIALIZED_NAME_CONNECT_URI = "connect-uri";
  @SerializedName(SERIALIZED_NAME_CONNECT_URI)
  private String connectUri;

  public static final String SERIALIZED_NAME_REST_URI = "rest-uri";
  @SerializedName(SERIALIZED_NAME_REST_URI)
  private String restUri;

  public static final String SERIALIZED_NAME_REGISTRY_URI = "registry-uri";
  @SerializedName(SERIALIZED_NAME_REGISTRY_URI)
  private String registryUri;

  public DbaasServiceKafkaConnectionInfo() {
  }

  public DbaasServiceKafkaConnectionInfo nodes(List<String> nodes) {
    this.nodes = nodes;
    return this;
  }

  public DbaasServiceKafkaConnectionInfo addNodesItem(String nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * Get nodes
   * @return nodes
  **/
  @javax.annotation.Nullable
  public List<String> getNodes() {
    return nodes;
  }

  public void setNodes(List<String> nodes) {
    this.nodes = nodes;
  }


  public DbaasServiceKafkaConnectionInfo accessCert(String accessCert) {
    this.accessCert = accessCert;
    return this;
  }

   /**
   * Get accessCert
   * @return accessCert
  **/
  @javax.annotation.Nullable
  public String getAccessCert() {
    return accessCert;
  }

  public void setAccessCert(String accessCert) {
    this.accessCert = accessCert;
  }


  public DbaasServiceKafkaConnectionInfo accessKey(String accessKey) {
    this.accessKey = accessKey;
    return this;
  }

   /**
   * Get accessKey
   * @return accessKey
  **/
  @javax.annotation.Nullable
  public String getAccessKey() {
    return accessKey;
  }

  public void setAccessKey(String accessKey) {
    this.accessKey = accessKey;
  }


  public DbaasServiceKafkaConnectionInfo connectUri(String connectUri) {
    this.connectUri = connectUri;
    return this;
  }

   /**
   * Get connectUri
   * @return connectUri
  **/
  @javax.annotation.Nullable
  public String getConnectUri() {
    return connectUri;
  }

  public void setConnectUri(String connectUri) {
    this.connectUri = connectUri;
  }


  public DbaasServiceKafkaConnectionInfo restUri(String restUri) {
    this.restUri = restUri;
    return this;
  }

   /**
   * Get restUri
   * @return restUri
  **/
  @javax.annotation.Nullable
  public String getRestUri() {
    return restUri;
  }

  public void setRestUri(String restUri) {
    this.restUri = restUri;
  }


  public DbaasServiceKafkaConnectionInfo registryUri(String registryUri) {
    this.registryUri = registryUri;
    return this;
  }

   /**
   * Get registryUri
   * @return registryUri
  **/
  @javax.annotation.Nullable
  public String getRegistryUri() {
    return registryUri;
  }

  public void setRegistryUri(String registryUri) {
    this.registryUri = registryUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasServiceKafkaConnectionInfo dbaasServiceKafkaConnectionInfo = (DbaasServiceKafkaConnectionInfo) o;
    return Objects.equals(this.nodes, dbaasServiceKafkaConnectionInfo.nodes) &&
        Objects.equals(this.accessCert, dbaasServiceKafkaConnectionInfo.accessCert) &&
        Objects.equals(this.accessKey, dbaasServiceKafkaConnectionInfo.accessKey) &&
        Objects.equals(this.connectUri, dbaasServiceKafkaConnectionInfo.connectUri) &&
        Objects.equals(this.restUri, dbaasServiceKafkaConnectionInfo.restUri) &&
        Objects.equals(this.registryUri, dbaasServiceKafkaConnectionInfo.registryUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodes, accessCert, accessKey, connectUri, restUri, registryUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasServiceKafkaConnectionInfo {\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    accessCert: ").append(toIndentedString(accessCert)).append("\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    connectUri: ").append(toIndentedString(connectUri)).append("\n");
    sb.append("    restUri: ").append(toIndentedString(restUri)).append("\n");
    sb.append("    registryUri: ").append(toIndentedString(registryUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nodes");
    openapiFields.add("access-cert");
    openapiFields.add("access-key");
    openapiFields.add("connect-uri");
    openapiFields.add("rest-uri");
    openapiFields.add("registry-uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasServiceKafkaConnectionInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasServiceKafkaConnectionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasServiceKafkaConnectionInfo is not found in the empty JSON string", DbaasServiceKafkaConnectionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasServiceKafkaConnectionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasServiceKafkaConnectionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull() && !jsonObj.get("nodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
      }
      if ((jsonObj.get("access-cert") != null && !jsonObj.get("access-cert").isJsonNull()) && !jsonObj.get("access-cert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access-cert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access-cert").toString()));
      }
      if ((jsonObj.get("access-key") != null && !jsonObj.get("access-key").isJsonNull()) && !jsonObj.get("access-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access-key").toString()));
      }
      if ((jsonObj.get("connect-uri") != null && !jsonObj.get("connect-uri").isJsonNull()) && !jsonObj.get("connect-uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connect-uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connect-uri").toString()));
      }
      if ((jsonObj.get("rest-uri") != null && !jsonObj.get("rest-uri").isJsonNull()) && !jsonObj.get("rest-uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rest-uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rest-uri").toString()));
      }
      if ((jsonObj.get("registry-uri") != null && !jsonObj.get("registry-uri").isJsonNull()) && !jsonObj.get("registry-uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registry-uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registry-uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasServiceKafkaConnectionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasServiceKafkaConnectionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasServiceKafkaConnectionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasServiceKafkaConnectionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasServiceKafkaConnectionInfo>() {
           @Override
           public void write(JsonWriter out, DbaasServiceKafkaConnectionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasServiceKafkaConnectionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasServiceKafkaConnectionInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasServiceKafkaConnectionInfo
  * @throws IOException if the JSON string is invalid with respect to DbaasServiceKafkaConnectionInfo
  */
  public static DbaasServiceKafkaConnectionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasServiceKafkaConnectionInfo.class);
  }

 /**
  * Convert an instance of DbaasServiceKafkaConnectionInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

