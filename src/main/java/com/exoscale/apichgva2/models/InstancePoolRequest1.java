/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for InstancePoolRequest1 type.
 */
public class InstancePoolRequest1 {
    private OptionalNullable<List<AntiAffinityGroup>> antiAffinityGroups;
    private String description;
    private PublicIpAssignmentEnum publicIpAssignment;
    private Map<String, String> labels;
    private OptionalNullable<List<SecurityGroup>> securityGroups;
    private OptionalNullable<List<ElasticIp>> elasticIps;
    private String name;
    private InstanceType instanceType;
    private OptionalNullable<Long> minAvailable;
    private OptionalNullable<List<PrivateNetwork>> privateNetworks;
    private Template template;
    private SshKey sshKey;
    private OptionalNullable<String> instancePrefix;
    private OptionalNullable<String> userData;
    private DeployTarget deployTarget;
    private Boolean ipv6Enabled;
    private Long diskSize;
    private OptionalNullable<List<SshKey>> sshKeys;

    /**
     * Default constructor.
     */
    public InstancePoolRequest1() {
    }

    /**
     * Initialization constructor.
     * @param  antiAffinityGroups  List of AntiAffinityGroup value for antiAffinityGroups.
     * @param  description  String value for description.
     * @param  publicIpAssignment  PublicIpAssignmentEnum value for publicIpAssignment.
     * @param  labels  Map of String, value for labels.
     * @param  securityGroups  List of SecurityGroup value for securityGroups.
     * @param  elasticIps  List of ElasticIp value for elasticIps.
     * @param  name  String value for name.
     * @param  instanceType  InstanceType value for instanceType.
     * @param  minAvailable  Long value for minAvailable.
     * @param  privateNetworks  List of PrivateNetwork value for privateNetworks.
     * @param  template  Template value for template.
     * @param  sshKey  SshKey value for sshKey.
     * @param  instancePrefix  String value for instancePrefix.
     * @param  userData  String value for userData.
     * @param  deployTarget  DeployTarget value for deployTarget.
     * @param  ipv6Enabled  Boolean value for ipv6Enabled.
     * @param  diskSize  Long value for diskSize.
     * @param  sshKeys  List of SshKey value for sshKeys.
     */
    public InstancePoolRequest1(
            List<AntiAffinityGroup> antiAffinityGroups,
            String description,
            PublicIpAssignmentEnum publicIpAssignment,
            Map<String, String> labels,
            List<SecurityGroup> securityGroups,
            List<ElasticIp> elasticIps,
            String name,
            InstanceType instanceType,
            Long minAvailable,
            List<PrivateNetwork> privateNetworks,
            Template template,
            SshKey sshKey,
            String instancePrefix,
            String userData,
            DeployTarget deployTarget,
            Boolean ipv6Enabled,
            Long diskSize,
            List<SshKey> sshKeys) {
        this.antiAffinityGroups = OptionalNullable.of(antiAffinityGroups);
        this.description = description;
        this.publicIpAssignment = publicIpAssignment;
        this.labels = labels;
        this.securityGroups = OptionalNullable.of(securityGroups);
        this.elasticIps = OptionalNullable.of(elasticIps);
        this.name = name;
        this.instanceType = instanceType;
        this.minAvailable = OptionalNullable.of(minAvailable);
        this.privateNetworks = OptionalNullable.of(privateNetworks);
        this.template = template;
        this.sshKey = sshKey;
        this.instancePrefix = OptionalNullable.of(instancePrefix);
        this.userData = OptionalNullable.of(userData);
        this.deployTarget = deployTarget;
        this.ipv6Enabled = ipv6Enabled;
        this.diskSize = diskSize;
        this.sshKeys = OptionalNullable.of(sshKeys);
    }

    /**
     * Initialization constructor.
     * @param  antiAffinityGroups  List of AntiAffinityGroup value for antiAffinityGroups.
     * @param  description  String value for description.
     * @param  publicIpAssignment  PublicIpAssignmentEnum value for publicIpAssignment.
     * @param  labels  Map of String, value for labels.
     * @param  securityGroups  List of SecurityGroup value for securityGroups.
     * @param  elasticIps  List of ElasticIp value for elasticIps.
     * @param  name  String value for name.
     * @param  instanceType  InstanceType value for instanceType.
     * @param  minAvailable  Long value for minAvailable.
     * @param  privateNetworks  List of PrivateNetwork value for privateNetworks.
     * @param  template  Template value for template.
     * @param  sshKey  SshKey value for sshKey.
     * @param  instancePrefix  String value for instancePrefix.
     * @param  userData  String value for userData.
     * @param  deployTarget  DeployTarget value for deployTarget.
     * @param  ipv6Enabled  Boolean value for ipv6Enabled.
     * @param  diskSize  Long value for diskSize.
     * @param  sshKeys  List of SshKey value for sshKeys.
     */

    protected InstancePoolRequest1(OptionalNullable<List<AntiAffinityGroup>> antiAffinityGroups,
            String description, PublicIpAssignmentEnum publicIpAssignment,
            Map<String, String> labels, OptionalNullable<List<SecurityGroup>> securityGroups,
            OptionalNullable<List<ElasticIp>> elasticIps, String name, InstanceType instanceType,
            OptionalNullable<Long> minAvailable,
            OptionalNullable<List<PrivateNetwork>> privateNetworks, Template template,
            SshKey sshKey, OptionalNullable<String> instancePrefix,
            OptionalNullable<String> userData, DeployTarget deployTarget, Boolean ipv6Enabled,
            Long diskSize, OptionalNullable<List<SshKey>> sshKeys) {
        this.antiAffinityGroups = antiAffinityGroups;
        this.description = description;
        this.publicIpAssignment = publicIpAssignment;
        this.labels = labels;
        this.securityGroups = securityGroups;
        this.elasticIps = elasticIps;
        this.name = name;
        this.instanceType = instanceType;
        this.minAvailable = minAvailable;
        this.privateNetworks = privateNetworks;
        this.template = template;
        this.sshKey = sshKey;
        this.instancePrefix = instancePrefix;
        this.userData = userData;
        this.deployTarget = deployTarget;
        this.ipv6Enabled = ipv6Enabled;
        this.diskSize = diskSize;
        this.sshKeys = sshKeys;
    }

    /**
     * Internal Getter for AntiAffinityGroups.
     * Instance Pool Anti-affinity Groups
     * @return Returns the Internal List of AntiAffinityGroup
     */
    @JsonGetter("anti-affinity-groups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<AntiAffinityGroup>> internalGetAntiAffinityGroups() {
        return this.antiAffinityGroups;
    }

    /**
     * Getter for AntiAffinityGroups.
     * Instance Pool Anti-affinity Groups
     * @return Returns the List of AntiAffinityGroup
     */
    public List<AntiAffinityGroup> getAntiAffinityGroups() {
        return OptionalNullable.getFrom(antiAffinityGroups);
    }

    /**
     * Setter for AntiAffinityGroups.
     * Instance Pool Anti-affinity Groups
     * @param antiAffinityGroups Value for List of AntiAffinityGroup
     */
    @JsonSetter("anti-affinity-groups")
    public void setAntiAffinityGroups(List<AntiAffinityGroup> antiAffinityGroups) {
        this.antiAffinityGroups = OptionalNullable.of(antiAffinityGroups);
    }

    /**
     * UnSetter for AntiAffinityGroups.
     * Instance Pool Anti-affinity Groups
     */
    public void unsetAntiAffinityGroups() {
        antiAffinityGroups = null;
    }

    /**
     * Getter for Description.
     * Instance Pool description
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * Instance Pool description
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for PublicIpAssignment.
     * @return Returns the PublicIpAssignmentEnum
     */
    @JsonGetter("public-ip-assignment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PublicIpAssignmentEnum getPublicIpAssignment() {
        return publicIpAssignment;
    }

    /**
     * Setter for PublicIpAssignment.
     * @param publicIpAssignment Value for PublicIpAssignmentEnum
     */
    @JsonSetter("public-ip-assignment")
    public void setPublicIpAssignment(PublicIpAssignmentEnum publicIpAssignment) {
        this.publicIpAssignment = publicIpAssignment;
    }

    /**
     * Getter for Labels.
     * @return Returns the Map of String, String
     */
    @JsonGetter("labels")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getLabels() {
        return labels;
    }

    /**
     * Setter for Labels.
     * @param labels Value for Map of String, String
     */
    @JsonSetter("labels")
    public void setLabels(Map<String, String> labels) {
        this.labels = labels;
    }

    /**
     * Internal Getter for SecurityGroups.
     * Instance Pool Security Groups
     * @return Returns the Internal List of SecurityGroup
     */
    @JsonGetter("security-groups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<SecurityGroup>> internalGetSecurityGroups() {
        return this.securityGroups;
    }

    /**
     * Getter for SecurityGroups.
     * Instance Pool Security Groups
     * @return Returns the List of SecurityGroup
     */
    public List<SecurityGroup> getSecurityGroups() {
        return OptionalNullable.getFrom(securityGroups);
    }

    /**
     * Setter for SecurityGroups.
     * Instance Pool Security Groups
     * @param securityGroups Value for List of SecurityGroup
     */
    @JsonSetter("security-groups")
    public void setSecurityGroups(List<SecurityGroup> securityGroups) {
        this.securityGroups = OptionalNullable.of(securityGroups);
    }

    /**
     * UnSetter for SecurityGroups.
     * Instance Pool Security Groups
     */
    public void unsetSecurityGroups() {
        securityGroups = null;
    }

    /**
     * Internal Getter for ElasticIps.
     * Instances Elastic IPs
     * @return Returns the Internal List of ElasticIp
     */
    @JsonGetter("elastic-ips")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<ElasticIp>> internalGetElasticIps() {
        return this.elasticIps;
    }

    /**
     * Getter for ElasticIps.
     * Instances Elastic IPs
     * @return Returns the List of ElasticIp
     */
    public List<ElasticIp> getElasticIps() {
        return OptionalNullable.getFrom(elasticIps);
    }

    /**
     * Setter for ElasticIps.
     * Instances Elastic IPs
     * @param elasticIps Value for List of ElasticIp
     */
    @JsonSetter("elastic-ips")
    public void setElasticIps(List<ElasticIp> elasticIps) {
        this.elasticIps = OptionalNullable.of(elasticIps);
    }

    /**
     * UnSetter for ElasticIps.
     * Instances Elastic IPs
     */
    public void unsetElasticIps() {
        elasticIps = null;
    }

    /**
     * Getter for Name.
     * Instance Pool name
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Instance Pool name
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for InstanceType.
     * Compute instance type
     * @return Returns the InstanceType
     */
    @JsonGetter("instance-type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InstanceType getInstanceType() {
        return instanceType;
    }

    /**
     * Setter for InstanceType.
     * Compute instance type
     * @param instanceType Value for InstanceType
     */
    @JsonSetter("instance-type")
    public void setInstanceType(InstanceType instanceType) {
        this.instanceType = instanceType;
    }

    /**
     * Internal Getter for MinAvailable.
     * Minimum number of running Instances
     * @return Returns the Internal Long
     */
    @JsonGetter("min-available")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Long> internalGetMinAvailable() {
        return this.minAvailable;
    }

    /**
     * Getter for MinAvailable.
     * Minimum number of running Instances
     * @return Returns the Long
     */
    public Long getMinAvailable() {
        return OptionalNullable.getFrom(minAvailable);
    }

    /**
     * Setter for MinAvailable.
     * Minimum number of running Instances
     * @param minAvailable Value for Long
     */
    @JsonSetter("min-available")
    public void setMinAvailable(Long minAvailable) {
        this.minAvailable = OptionalNullable.of(minAvailable);
    }

    /**
     * UnSetter for MinAvailable.
     * Minimum number of running Instances
     */
    public void unsetMinAvailable() {
        minAvailable = null;
    }

    /**
     * Internal Getter for PrivateNetworks.
     * Instance Pool Private Networks
     * @return Returns the Internal List of PrivateNetwork
     */
    @JsonGetter("private-networks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<PrivateNetwork>> internalGetPrivateNetworks() {
        return this.privateNetworks;
    }

    /**
     * Getter for PrivateNetworks.
     * Instance Pool Private Networks
     * @return Returns the List of PrivateNetwork
     */
    public List<PrivateNetwork> getPrivateNetworks() {
        return OptionalNullable.getFrom(privateNetworks);
    }

    /**
     * Setter for PrivateNetworks.
     * Instance Pool Private Networks
     * @param privateNetworks Value for List of PrivateNetwork
     */
    @JsonSetter("private-networks")
    public void setPrivateNetworks(List<PrivateNetwork> privateNetworks) {
        this.privateNetworks = OptionalNullable.of(privateNetworks);
    }

    /**
     * UnSetter for PrivateNetworks.
     * Instance Pool Private Networks
     */
    public void unsetPrivateNetworks() {
        privateNetworks = null;
    }

    /**
     * Getter for Template.
     * Instance template
     * @return Returns the Template
     */
    @JsonGetter("template")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Template getTemplate() {
        return template;
    }

    /**
     * Setter for Template.
     * Instance template
     * @param template Value for Template
     */
    @JsonSetter("template")
    public void setTemplate(Template template) {
        this.template = template;
    }

    /**
     * Getter for SshKey.
     * SSH key
     * @return Returns the SshKey
     */
    @JsonGetter("ssh-key")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SshKey getSshKey() {
        return sshKey;
    }

    /**
     * Setter for SshKey.
     * SSH key
     * @param sshKey Value for SshKey
     */
    @JsonSetter("ssh-key")
    public void setSshKey(SshKey sshKey) {
        this.sshKey = sshKey;
    }

    /**
     * Internal Getter for InstancePrefix.
     * Prefix to apply to Instances names (default: pool)
     * @return Returns the Internal String
     */
    @JsonGetter("instance-prefix")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInstancePrefix() {
        return this.instancePrefix;
    }

    /**
     * Getter for InstancePrefix.
     * Prefix to apply to Instances names (default: pool)
     * @return Returns the String
     */
    public String getInstancePrefix() {
        return OptionalNullable.getFrom(instancePrefix);
    }

    /**
     * Setter for InstancePrefix.
     * Prefix to apply to Instances names (default: pool)
     * @param instancePrefix Value for String
     */
    @JsonSetter("instance-prefix")
    public void setInstancePrefix(String instancePrefix) {
        this.instancePrefix = OptionalNullable.of(instancePrefix);
    }

    /**
     * UnSetter for InstancePrefix.
     * Prefix to apply to Instances names (default: pool)
     */
    public void unsetInstancePrefix() {
        instancePrefix = null;
    }

    /**
     * Internal Getter for UserData.
     * Instances Cloud-init user-data
     * @return Returns the Internal String
     */
    @JsonGetter("user-data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUserData() {
        return this.userData;
    }

    /**
     * Getter for UserData.
     * Instances Cloud-init user-data
     * @return Returns the String
     */
    public String getUserData() {
        return OptionalNullable.getFrom(userData);
    }

    /**
     * Setter for UserData.
     * Instances Cloud-init user-data
     * @param userData Value for String
     */
    @JsonSetter("user-data")
    public void setUserData(String userData) {
        this.userData = OptionalNullable.of(userData);
    }

    /**
     * UnSetter for UserData.
     * Instances Cloud-init user-data
     */
    public void unsetUserData() {
        userData = null;
    }

    /**
     * Getter for DeployTarget.
     * Deploy target
     * @return Returns the DeployTarget
     */
    @JsonGetter("deploy-target")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DeployTarget getDeployTarget() {
        return deployTarget;
    }

    /**
     * Setter for DeployTarget.
     * Deploy target
     * @param deployTarget Value for DeployTarget
     */
    @JsonSetter("deploy-target")
    public void setDeployTarget(DeployTarget deployTarget) {
        this.deployTarget = deployTarget;
    }

    /**
     * Getter for Ipv6Enabled.
     * Enable IPv6. DEPRECATED: use `public-ip-assignments`.
     * @return Returns the Boolean
     */
    @JsonGetter("ipv6-enabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIpv6Enabled() {
        return ipv6Enabled;
    }

    /**
     * Setter for Ipv6Enabled.
     * Enable IPv6. DEPRECATED: use `public-ip-assignments`.
     * @param ipv6Enabled Value for Boolean
     */
    @JsonSetter("ipv6-enabled")
    public void setIpv6Enabled(Boolean ipv6Enabled) {
        this.ipv6Enabled = ipv6Enabled;
    }

    /**
     * Getter for DiskSize.
     * Instances disk size in GB
     * @return Returns the Long
     */
    @JsonGetter("disk-size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getDiskSize() {
        return diskSize;
    }

    /**
     * Setter for DiskSize.
     * Instances disk size in GB
     * @param diskSize Value for Long
     */
    @JsonSetter("disk-size")
    public void setDiskSize(Long diskSize) {
        this.diskSize = diskSize;
    }

    /**
     * Internal Getter for SshKeys.
     * Instances SSH keys
     * @return Returns the Internal List of SshKey
     */
    @JsonGetter("ssh-keys")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<SshKey>> internalGetSshKeys() {
        return this.sshKeys;
    }

    /**
     * Getter for SshKeys.
     * Instances SSH keys
     * @return Returns the List of SshKey
     */
    public List<SshKey> getSshKeys() {
        return OptionalNullable.getFrom(sshKeys);
    }

    /**
     * Setter for SshKeys.
     * Instances SSH keys
     * @param sshKeys Value for List of SshKey
     */
    @JsonSetter("ssh-keys")
    public void setSshKeys(List<SshKey> sshKeys) {
        this.sshKeys = OptionalNullable.of(sshKeys);
    }

    /**
     * UnSetter for SshKeys.
     * Instances SSH keys
     */
    public void unsetSshKeys() {
        sshKeys = null;
    }

    /**
     * Converts this InstancePoolRequest1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "InstancePoolRequest1 [" + "antiAffinityGroups=" + antiAffinityGroups
                + ", description=" + description + ", publicIpAssignment=" + publicIpAssignment
                + ", labels=" + labels + ", securityGroups=" + securityGroups + ", elasticIps="
                + elasticIps + ", name=" + name + ", instanceType=" + instanceType
                + ", minAvailable=" + minAvailable + ", privateNetworks=" + privateNetworks
                + ", template=" + template + ", sshKey=" + sshKey + ", instancePrefix="
                + instancePrefix + ", userData=" + userData + ", deployTarget=" + deployTarget
                + ", ipv6Enabled=" + ipv6Enabled + ", diskSize=" + diskSize + ", sshKeys=" + sshKeys
                + "]";
    }

    /**
     * Builds a new {@link InstancePoolRequest1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link InstancePoolRequest1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .description(getDescription())
                .publicIpAssignment(getPublicIpAssignment())
                .labels(getLabels())
                .name(getName())
                .instanceType(getInstanceType())
                .template(getTemplate())
                .sshKey(getSshKey())
                .deployTarget(getDeployTarget())
                .ipv6Enabled(getIpv6Enabled())
                .diskSize(getDiskSize());
        builder.antiAffinityGroups = internalGetAntiAffinityGroups();
        builder.securityGroups = internalGetSecurityGroups();
        builder.elasticIps = internalGetElasticIps();
        builder.minAvailable = internalGetMinAvailable();
        builder.privateNetworks = internalGetPrivateNetworks();
        builder.instancePrefix = internalGetInstancePrefix();
        builder.userData = internalGetUserData();
        builder.sshKeys = internalGetSshKeys();
        return builder;
    }

    /**
     * Class to build instances of {@link InstancePoolRequest1}.
     */
    public static class Builder {
        private OptionalNullable<List<AntiAffinityGroup>> antiAffinityGroups;
        private String description;
        private PublicIpAssignmentEnum publicIpAssignment;
        private Map<String, String> labels;
        private OptionalNullable<List<SecurityGroup>> securityGroups;
        private OptionalNullable<List<ElasticIp>> elasticIps;
        private String name;
        private InstanceType instanceType;
        private OptionalNullable<Long> minAvailable;
        private OptionalNullable<List<PrivateNetwork>> privateNetworks;
        private Template template;
        private SshKey sshKey;
        private OptionalNullable<String> instancePrefix;
        private OptionalNullable<String> userData;
        private DeployTarget deployTarget;
        private Boolean ipv6Enabled;
        private Long diskSize;
        private OptionalNullable<List<SshKey>> sshKeys;



        /**
         * Setter for antiAffinityGroups.
         * @param  antiAffinityGroups  List of AntiAffinityGroup value for antiAffinityGroups.
         * @return Builder
         */
        public Builder antiAffinityGroups(List<AntiAffinityGroup> antiAffinityGroups) {
            this.antiAffinityGroups = OptionalNullable.of(antiAffinityGroups);
            return this;
        }

        /**
         * UnSetter for antiAffinityGroups.
         * @return Builder
         */
        public Builder unsetAntiAffinityGroups() {
            antiAffinityGroups = null;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for publicIpAssignment.
         * @param  publicIpAssignment  PublicIpAssignmentEnum value for publicIpAssignment.
         * @return Builder
         */
        public Builder publicIpAssignment(PublicIpAssignmentEnum publicIpAssignment) {
            this.publicIpAssignment = publicIpAssignment;
            return this;
        }

        /**
         * Setter for labels.
         * @param  labels  Map of String, value for labels.
         * @return Builder
         */
        public Builder labels(Map<String, String> labels) {
            this.labels = labels;
            return this;
        }

        /**
         * Setter for securityGroups.
         * @param  securityGroups  List of SecurityGroup value for securityGroups.
         * @return Builder
         */
        public Builder securityGroups(List<SecurityGroup> securityGroups) {
            this.securityGroups = OptionalNullable.of(securityGroups);
            return this;
        }

        /**
         * UnSetter for securityGroups.
         * @return Builder
         */
        public Builder unsetSecurityGroups() {
            securityGroups = null;
            return this;
        }

        /**
         * Setter for elasticIps.
         * @param  elasticIps  List of ElasticIp value for elasticIps.
         * @return Builder
         */
        public Builder elasticIps(List<ElasticIp> elasticIps) {
            this.elasticIps = OptionalNullable.of(elasticIps);
            return this;
        }

        /**
         * UnSetter for elasticIps.
         * @return Builder
         */
        public Builder unsetElasticIps() {
            elasticIps = null;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for instanceType.
         * @param  instanceType  InstanceType value for instanceType.
         * @return Builder
         */
        public Builder instanceType(InstanceType instanceType) {
            this.instanceType = instanceType;
            return this;
        }

        /**
         * Setter for minAvailable.
         * @param  minAvailable  Long value for minAvailable.
         * @return Builder
         */
        public Builder minAvailable(Long minAvailable) {
            this.minAvailable = OptionalNullable.of(minAvailable);
            return this;
        }

        /**
         * UnSetter for minAvailable.
         * @return Builder
         */
        public Builder unsetMinAvailable() {
            minAvailable = null;
            return this;
        }

        /**
         * Setter for privateNetworks.
         * @param  privateNetworks  List of PrivateNetwork value for privateNetworks.
         * @return Builder
         */
        public Builder privateNetworks(List<PrivateNetwork> privateNetworks) {
            this.privateNetworks = OptionalNullable.of(privateNetworks);
            return this;
        }

        /**
         * UnSetter for privateNetworks.
         * @return Builder
         */
        public Builder unsetPrivateNetworks() {
            privateNetworks = null;
            return this;
        }

        /**
         * Setter for template.
         * @param  template  Template value for template.
         * @return Builder
         */
        public Builder template(Template template) {
            this.template = template;
            return this;
        }

        /**
         * Setter for sshKey.
         * @param  sshKey  SshKey value for sshKey.
         * @return Builder
         */
        public Builder sshKey(SshKey sshKey) {
            this.sshKey = sshKey;
            return this;
        }

        /**
         * Setter for instancePrefix.
         * @param  instancePrefix  String value for instancePrefix.
         * @return Builder
         */
        public Builder instancePrefix(String instancePrefix) {
            this.instancePrefix = OptionalNullable.of(instancePrefix);
            return this;
        }

        /**
         * UnSetter for instancePrefix.
         * @return Builder
         */
        public Builder unsetInstancePrefix() {
            instancePrefix = null;
            return this;
        }

        /**
         * Setter for userData.
         * @param  userData  String value for userData.
         * @return Builder
         */
        public Builder userData(String userData) {
            this.userData = OptionalNullable.of(userData);
            return this;
        }

        /**
         * UnSetter for userData.
         * @return Builder
         */
        public Builder unsetUserData() {
            userData = null;
            return this;
        }

        /**
         * Setter for deployTarget.
         * @param  deployTarget  DeployTarget value for deployTarget.
         * @return Builder
         */
        public Builder deployTarget(DeployTarget deployTarget) {
            this.deployTarget = deployTarget;
            return this;
        }

        /**
         * Setter for ipv6Enabled.
         * @param  ipv6Enabled  Boolean value for ipv6Enabled.
         * @return Builder
         */
        public Builder ipv6Enabled(Boolean ipv6Enabled) {
            this.ipv6Enabled = ipv6Enabled;
            return this;
        }

        /**
         * Setter for diskSize.
         * @param  diskSize  Long value for diskSize.
         * @return Builder
         */
        public Builder diskSize(Long diskSize) {
            this.diskSize = diskSize;
            return this;
        }

        /**
         * Setter for sshKeys.
         * @param  sshKeys  List of SshKey value for sshKeys.
         * @return Builder
         */
        public Builder sshKeys(List<SshKey> sshKeys) {
            this.sshKeys = OptionalNullable.of(sshKeys);
            return this;
        }

        /**
         * UnSetter for sshKeys.
         * @return Builder
         */
        public Builder unsetSshKeys() {
            sshKeys = null;
            return this;
        }

        /**
         * Builds a new {@link InstancePoolRequest1} object using the set fields.
         * @return {@link InstancePoolRequest1}
         */
        public InstancePoolRequest1 build() {
            return new InstancePoolRequest1(antiAffinityGroups, description, publicIpAssignment,
                    labels, securityGroups, elasticIps, name, instanceType, minAvailable,
                    privateNetworks, template, sshKey, instancePrefix, userData, deployTarget,
                    ipv6Enabled, diskSize, sshKeys);
        }
    }
}
