/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * SksNodepoolTaint - Nodepool taint
 */

public class SksNodepoolTaint {

    /**
     * Nodepool taint value
     */
    @JsonProperty("value")
    private String value;

    /**
     * Nodepool taint effect
     */
    @JsonProperty("effect")
    private Effect effect;

    public SksNodepoolTaint(
            @JsonProperty("value") String value,
            @JsonProperty("effect") Effect effect) {
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(effect, "effect");
        this.value = value;
        this.effect = effect;
    }

    /**
     * Nodepool taint value
     */
    public String value() {
        return value;
    }

    /**
     * Nodepool taint effect
     */
    public Effect effect() {
        return effect;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Nodepool taint value
     */
    public SksNodepoolTaint withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * Nodepool taint effect
     */
    public SksNodepoolTaint withEffect(Effect effect) {
        Utils.checkNotNull(effect, "effect");
        this.effect = effect;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SksNodepoolTaint other = (SksNodepoolTaint) o;
        return 
            java.util.Objects.deepEquals(this.value, other.value) &&
            java.util.Objects.deepEquals(this.effect, other.effect);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            value,
            effect);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SksNodepoolTaint.class,
                "value", value,
                "effect", effect);
    }
    
    public final static class Builder {
 
        private String value;
 
        private Effect effect;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Nodepool taint value
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * Nodepool taint effect
         */
        public Builder effect(Effect effect) {
            Utils.checkNotNull(effect, "effect");
            this.effect = effect;
            return this;
        }
        
        public SksNodepoolTaint build() {
            return new SksNodepoolTaint(
                value,
                effect);
        }
    }
}

