/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class UpdateInstanceRequestBody {

    /**
     * Instance name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Instance Cloud-init user-data
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user-data")
    private Optional<? extends String> userData;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public-ip-assignment")
    private Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    private Optional<? extends java.util.Map<String, String>> labels;

    public UpdateInstanceRequestBody(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("user-data") Optional<? extends String> userData,
            @JsonProperty("public-ip-assignment") Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment,
            @JsonProperty("labels") Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(userData, "userData");
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        Utils.checkNotNull(labels, "labels");
        this.name = name;
        this.userData = userData;
        this.publicIpAssignment = publicIpAssignment;
        this.labels = labels;
    }

    /**
     * Instance name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Instance Cloud-init user-data
     */
    public Optional<? extends String> userData() {
        return userData;
    }

    public Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment() {
        return publicIpAssignment;
    }

    public Optional<? extends java.util.Map<String, String>> labels() {
        return labels;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Instance name
     */
    public UpdateInstanceRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Instance name
     */
    public UpdateInstanceRequestBody withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Instance Cloud-init user-data
     */
    public UpdateInstanceRequestBody withUserData(String userData) {
        Utils.checkNotNull(userData, "userData");
        this.userData = Optional.ofNullable(userData);
        return this;
    }

    /**
     * Instance Cloud-init user-data
     */
    public UpdateInstanceRequestBody withUserData(Optional<? extends String> userData) {
        Utils.checkNotNull(userData, "userData");
        this.userData = userData;
        return this;
    }

    public UpdateInstanceRequestBody withPublicIpAssignment(com.exoscale.api.models.components.PublicIpAssignment publicIpAssignment) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        this.publicIpAssignment = Optional.ofNullable(publicIpAssignment);
        return this;
    }

    public UpdateInstanceRequestBody withPublicIpAssignment(Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment) {
        Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
        this.publicIpAssignment = publicIpAssignment;
        return this;
    }

    public UpdateInstanceRequestBody withLabels(java.util.Map<String, String> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = Optional.ofNullable(labels);
        return this;
    }

    public UpdateInstanceRequestBody withLabels(Optional<? extends java.util.Map<String, String>> labels) {
        Utils.checkNotNull(labels, "labels");
        this.labels = labels;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateInstanceRequestBody other = (UpdateInstanceRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.userData, other.userData) &&
            java.util.Objects.deepEquals(this.publicIpAssignment, other.publicIpAssignment) &&
            java.util.Objects.deepEquals(this.labels, other.labels);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            userData,
            publicIpAssignment,
            labels);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateInstanceRequestBody.class,
                "name", name,
                "userData", userData,
                "publicIpAssignment", publicIpAssignment,
                "labels", labels);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> userData = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment = Optional.empty();
 
        private Optional<? extends java.util.Map<String, String>> labels = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Instance name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Instance name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Instance Cloud-init user-data
         */
        public Builder userData(String userData) {
            Utils.checkNotNull(userData, "userData");
            this.userData = Optional.ofNullable(userData);
            return this;
        }

        /**
         * Instance Cloud-init user-data
         */
        public Builder userData(Optional<? extends String> userData) {
            Utils.checkNotNull(userData, "userData");
            this.userData = userData;
            return this;
        }

        public Builder publicIpAssignment(com.exoscale.api.models.components.PublicIpAssignment publicIpAssignment) {
            Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
            this.publicIpAssignment = Optional.ofNullable(publicIpAssignment);
            return this;
        }

        public Builder publicIpAssignment(Optional<? extends com.exoscale.api.models.components.PublicIpAssignment> publicIpAssignment) {
            Utils.checkNotNull(publicIpAssignment, "publicIpAssignment");
            this.publicIpAssignment = publicIpAssignment;
            return this;
        }

        public Builder labels(java.util.Map<String, String> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Optional<? extends java.util.Map<String, String>> labels) {
            Utils.checkNotNull(labels, "labels");
            this.labels = labels;
            return this;
        }
        
        public UpdateInstanceRequestBody build() {
            return new UpdateInstanceRequestBody(
                name,
                userData,
                publicIpAssignment,
                labels);
        }
    }
}

