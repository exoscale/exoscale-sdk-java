/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SearchTaskSettings
 */
@JsonPropertyOrder({
  SearchTaskSettings.JSON_PROPERTY_TOTAL_HEAP_PERCENT_THRESHOLD,
  SearchTaskSettings.JSON_PROPERTY_ELAPSED_TIME_MILLIS_THRESHOLD,
  SearchTaskSettings.JSON_PROPERTY_CANCELLATION_RATE,
  SearchTaskSettings.JSON_PROPERTY_HEAP_VARIANCE,
  SearchTaskSettings.JSON_PROPERTY_HEAP_MOVING_AVERAGE_WINDOW_SIZE,
  SearchTaskSettings.JSON_PROPERTY_CANCELLATION_RATIO,
  SearchTaskSettings.JSON_PROPERTY_HEAP_PERCENT_THRESHOLD,
  SearchTaskSettings.JSON_PROPERTY_CPU_TIME_MILLIS_THRESHOLD,
  SearchTaskSettings.JSON_PROPERTY_CANCELLATION_BURST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class SearchTaskSettings {
  public static final String JSON_PROPERTY_TOTAL_HEAP_PERCENT_THRESHOLD = "total_heap_percent_threshold";
  private BigDecimal totalHeapPercentThreshold;

  public static final String JSON_PROPERTY_ELAPSED_TIME_MILLIS_THRESHOLD = "elapsed_time_millis_threshold";
  private Integer elapsedTimeMillisThreshold;

  public static final String JSON_PROPERTY_CANCELLATION_RATE = "cancellation_rate";
  private BigDecimal cancellationRate;

  public static final String JSON_PROPERTY_HEAP_VARIANCE = "heap_variance";
  private BigDecimal heapVariance;

  public static final String JSON_PROPERTY_HEAP_MOVING_AVERAGE_WINDOW_SIZE = "heap_moving_average_window_size";
  private Integer heapMovingAverageWindowSize;

  public static final String JSON_PROPERTY_CANCELLATION_RATIO = "cancellation_ratio";
  private BigDecimal cancellationRatio;

  public static final String JSON_PROPERTY_HEAP_PERCENT_THRESHOLD = "heap_percent_threshold";
  private BigDecimal heapPercentThreshold;

  public static final String JSON_PROPERTY_CPU_TIME_MILLIS_THRESHOLD = "cpu_time_millis_threshold";
  private Integer cpuTimeMillisThreshold;

  public static final String JSON_PROPERTY_CANCELLATION_BURST = "cancellation_burst";
  private BigDecimal cancellationBurst;

  public SearchTaskSettings() { 
  }

  public SearchTaskSettings totalHeapPercentThreshold(BigDecimal totalHeapPercentThreshold) {
    this.totalHeapPercentThreshold = totalHeapPercentThreshold;
    return this;
  }

   /**
   * The heap usage threshold (as a percentage) required for the sum of heap usages of all search tasks before cancellation is applied. Default is 0.5
   * minimum: 0.0
   * maximum: 1.0
   * @return totalHeapPercentThreshold
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_HEAP_PERCENT_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTotalHeapPercentThreshold() {
    return totalHeapPercentThreshold;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_HEAP_PERCENT_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalHeapPercentThreshold(BigDecimal totalHeapPercentThreshold) {
    this.totalHeapPercentThreshold = totalHeapPercentThreshold;
  }


  public SearchTaskSettings elapsedTimeMillisThreshold(Integer elapsedTimeMillisThreshold) {
    this.elapsedTimeMillisThreshold = elapsedTimeMillisThreshold;
    return this;
  }

   /**
   * The elapsed time threshold (in milliseconds) required for an individual parent task before it is considered for cancellation. Default is 45000
   * minimum: 0
   * @return elapsedTimeMillisThreshold
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELAPSED_TIME_MILLIS_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getElapsedTimeMillisThreshold() {
    return elapsedTimeMillisThreshold;
  }


  @JsonProperty(JSON_PROPERTY_ELAPSED_TIME_MILLIS_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElapsedTimeMillisThreshold(Integer elapsedTimeMillisThreshold) {
    this.elapsedTimeMillisThreshold = elapsedTimeMillisThreshold;
  }


  public SearchTaskSettings cancellationRate(BigDecimal cancellationRate) {
    this.cancellationRate = cancellationRate;
    return this;
  }

   /**
   * The maximum number of search tasks to cancel per millisecond of elapsed time. Default is 0.003
   * minimum: 0.0
   * @return cancellationRate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANCELLATION_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCancellationRate() {
    return cancellationRate;
  }


  @JsonProperty(JSON_PROPERTY_CANCELLATION_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCancellationRate(BigDecimal cancellationRate) {
    this.cancellationRate = cancellationRate;
  }


  public SearchTaskSettings heapVariance(BigDecimal heapVariance) {
    this.heapVariance = heapVariance;
    return this;
  }

   /**
   * The heap usage variance required for an individual parent task before it is considered for cancellation. A task is considered for cancellation when taskHeapUsage is greater than or equal to heapUsageMovingAverage * variance. Default is 2.0
   * minimum: 0.0
   * @return heapVariance
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEAP_VARIANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getHeapVariance() {
    return heapVariance;
  }


  @JsonProperty(JSON_PROPERTY_HEAP_VARIANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeapVariance(BigDecimal heapVariance) {
    this.heapVariance = heapVariance;
  }


  public SearchTaskSettings heapMovingAverageWindowSize(Integer heapMovingAverageWindowSize) {
    this.heapMovingAverageWindowSize = heapMovingAverageWindowSize;
    return this;
  }

   /**
   * The window size used to calculate the rolling average of the heap usage for the completed parent tasks. Default is 10
   * minimum: 0
   * @return heapMovingAverageWindowSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEAP_MOVING_AVERAGE_WINDOW_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHeapMovingAverageWindowSize() {
    return heapMovingAverageWindowSize;
  }


  @JsonProperty(JSON_PROPERTY_HEAP_MOVING_AVERAGE_WINDOW_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeapMovingAverageWindowSize(Integer heapMovingAverageWindowSize) {
    this.heapMovingAverageWindowSize = heapMovingAverageWindowSize;
  }


  public SearchTaskSettings cancellationRatio(BigDecimal cancellationRatio) {
    this.cancellationRatio = cancellationRatio;
    return this;
  }

   /**
   * The maximum number of search tasks to cancel, as a percentage of successful search task completions. Default is 0.1
   * minimum: 0.0
   * maximum: 1.0
   * @return cancellationRatio
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANCELLATION_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCancellationRatio() {
    return cancellationRatio;
  }


  @JsonProperty(JSON_PROPERTY_CANCELLATION_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCancellationRatio(BigDecimal cancellationRatio) {
    this.cancellationRatio = cancellationRatio;
  }


  public SearchTaskSettings heapPercentThreshold(BigDecimal heapPercentThreshold) {
    this.heapPercentThreshold = heapPercentThreshold;
    return this;
  }

   /**
   * The heap usage threshold (as a percentage) required for an individual parent task before it is considered for cancellation. Default is 0.2
   * minimum: 0.0
   * maximum: 1.0
   * @return heapPercentThreshold
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEAP_PERCENT_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getHeapPercentThreshold() {
    return heapPercentThreshold;
  }


  @JsonProperty(JSON_PROPERTY_HEAP_PERCENT_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeapPercentThreshold(BigDecimal heapPercentThreshold) {
    this.heapPercentThreshold = heapPercentThreshold;
  }


  public SearchTaskSettings cpuTimeMillisThreshold(Integer cpuTimeMillisThreshold) {
    this.cpuTimeMillisThreshold = cpuTimeMillisThreshold;
    return this;
  }

   /**
   * The CPU usage threshold (in milliseconds) required for an individual parent task before it is considered for cancellation. Default is 30000
   * minimum: 0
   * @return cpuTimeMillisThreshold
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CPU_TIME_MILLIS_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCpuTimeMillisThreshold() {
    return cpuTimeMillisThreshold;
  }


  @JsonProperty(JSON_PROPERTY_CPU_TIME_MILLIS_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpuTimeMillisThreshold(Integer cpuTimeMillisThreshold) {
    this.cpuTimeMillisThreshold = cpuTimeMillisThreshold;
  }


  public SearchTaskSettings cancellationBurst(BigDecimal cancellationBurst) {
    this.cancellationBurst = cancellationBurst;
    return this;
  }

   /**
   * The maximum number of search tasks to cancel in a single iteration of the observer thread. Default is 5.0
   * minimum: 1.0
   * @return cancellationBurst
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANCELLATION_BURST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCancellationBurst() {
    return cancellationBurst;
  }


  @JsonProperty(JSON_PROPERTY_CANCELLATION_BURST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCancellationBurst(BigDecimal cancellationBurst) {
    this.cancellationBurst = cancellationBurst;
  }


  /**
   * Return true if this Search_task_settings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchTaskSettings searchTaskSettings = (SearchTaskSettings) o;
    return Objects.equals(this.totalHeapPercentThreshold, searchTaskSettings.totalHeapPercentThreshold) &&
        Objects.equals(this.elapsedTimeMillisThreshold, searchTaskSettings.elapsedTimeMillisThreshold) &&
        Objects.equals(this.cancellationRate, searchTaskSettings.cancellationRate) &&
        Objects.equals(this.heapVariance, searchTaskSettings.heapVariance) &&
        Objects.equals(this.heapMovingAverageWindowSize, searchTaskSettings.heapMovingAverageWindowSize) &&
        Objects.equals(this.cancellationRatio, searchTaskSettings.cancellationRatio) &&
        Objects.equals(this.heapPercentThreshold, searchTaskSettings.heapPercentThreshold) &&
        Objects.equals(this.cpuTimeMillisThreshold, searchTaskSettings.cpuTimeMillisThreshold) &&
        Objects.equals(this.cancellationBurst, searchTaskSettings.cancellationBurst);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalHeapPercentThreshold, elapsedTimeMillisThreshold, cancellationRate, heapVariance, heapMovingAverageWindowSize, cancellationRatio, heapPercentThreshold, cpuTimeMillisThreshold, cancellationBurst);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchTaskSettings {\n");
    sb.append("    totalHeapPercentThreshold: ").append(toIndentedString(totalHeapPercentThreshold)).append("\n");
    sb.append("    elapsedTimeMillisThreshold: ").append(toIndentedString(elapsedTimeMillisThreshold)).append("\n");
    sb.append("    cancellationRate: ").append(toIndentedString(cancellationRate)).append("\n");
    sb.append("    heapVariance: ").append(toIndentedString(heapVariance)).append("\n");
    sb.append("    heapMovingAverageWindowSize: ").append(toIndentedString(heapMovingAverageWindowSize)).append("\n");
    sb.append("    cancellationRatio: ").append(toIndentedString(cancellationRatio)).append("\n");
    sb.append("    heapPercentThreshold: ").append(toIndentedString(heapPercentThreshold)).append("\n");
    sb.append("    cpuTimeMillisThreshold: ").append(toIndentedString(cpuTimeMillisThreshold)).append("\n");
    sb.append("    cancellationBurst: ").append(toIndentedString(cancellationBurst)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `total_heap_percent_threshold` to the URL query string
    if (getTotalHeapPercentThreshold() != null) {
      joiner.add(String.format("%stotal_heap_percent_threshold%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalHeapPercentThreshold()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `elapsed_time_millis_threshold` to the URL query string
    if (getElapsedTimeMillisThreshold() != null) {
      joiner.add(String.format("%selapsed_time_millis_threshold%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getElapsedTimeMillisThreshold()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cancellation_rate` to the URL query string
    if (getCancellationRate() != null) {
      joiner.add(String.format("%scancellation_rate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCancellationRate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `heap_variance` to the URL query string
    if (getHeapVariance() != null) {
      joiner.add(String.format("%sheap_variance%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeapVariance()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `heap_moving_average_window_size` to the URL query string
    if (getHeapMovingAverageWindowSize() != null) {
      joiner.add(String.format("%sheap_moving_average_window_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeapMovingAverageWindowSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cancellation_ratio` to the URL query string
    if (getCancellationRatio() != null) {
      joiner.add(String.format("%scancellation_ratio%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCancellationRatio()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `heap_percent_threshold` to the URL query string
    if (getHeapPercentThreshold() != null) {
      joiner.add(String.format("%sheap_percent_threshold%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeapPercentThreshold()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cpu_time_millis_threshold` to the URL query string
    if (getCpuTimeMillisThreshold() != null) {
      joiner.add(String.format("%scpu_time_millis_threshold%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCpuTimeMillisThreshold()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cancellation_burst` to the URL query string
    if (getCancellationBurst() != null) {
      joiner.add(String.format("%scancellation_burst%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCancellationBurst()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

