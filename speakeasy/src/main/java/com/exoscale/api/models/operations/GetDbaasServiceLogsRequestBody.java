/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GetDbaasServiceLogsRequestBody {

    /**
     * How many log entries to receive at most, up to 500 (default: 100)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    private Optional<? extends Long> limit;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort-order")
    private Optional<? extends com.exoscale.api.models.components.EnumSortOrder> sortOrder;

    /**
     * Opaque offset identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    private Optional<? extends String> offset;

    public GetDbaasServiceLogsRequestBody(
            @JsonProperty("limit") Optional<? extends Long> limit,
            @JsonProperty("sort-order") Optional<? extends com.exoscale.api.models.components.EnumSortOrder> sortOrder,
            @JsonProperty("offset") Optional<? extends String> offset) {
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(sortOrder, "sortOrder");
        Utils.checkNotNull(offset, "offset");
        this.limit = limit;
        this.sortOrder = sortOrder;
        this.offset = offset;
    }

    /**
     * How many log entries to receive at most, up to 500 (default: 100)
     */
    public Optional<? extends Long> limit() {
        return limit;
    }

    public Optional<? extends com.exoscale.api.models.components.EnumSortOrder> sortOrder() {
        return sortOrder;
    }

    /**
     * Opaque offset identifier
     */
    public Optional<? extends String> offset() {
        return offset;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * How many log entries to receive at most, up to 500 (default: 100)
     */
    public GetDbaasServiceLogsRequestBody withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * How many log entries to receive at most, up to 500 (default: 100)
     */
    public GetDbaasServiceLogsRequestBody withLimit(Optional<? extends Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public GetDbaasServiceLogsRequestBody withSortOrder(com.exoscale.api.models.components.EnumSortOrder sortOrder) {
        Utils.checkNotNull(sortOrder, "sortOrder");
        this.sortOrder = Optional.ofNullable(sortOrder);
        return this;
    }

    public GetDbaasServiceLogsRequestBody withSortOrder(Optional<? extends com.exoscale.api.models.components.EnumSortOrder> sortOrder) {
        Utils.checkNotNull(sortOrder, "sortOrder");
        this.sortOrder = sortOrder;
        return this;
    }

    /**
     * Opaque offset identifier
     */
    public GetDbaasServiceLogsRequestBody withOffset(String offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }

    /**
     * Opaque offset identifier
     */
    public GetDbaasServiceLogsRequestBody withOffset(Optional<? extends String> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDbaasServiceLogsRequestBody other = (GetDbaasServiceLogsRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.limit, other.limit) &&
            java.util.Objects.deepEquals(this.sortOrder, other.sortOrder) &&
            java.util.Objects.deepEquals(this.offset, other.offset);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            limit,
            sortOrder,
            offset);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDbaasServiceLogsRequestBody.class,
                "limit", limit,
                "sortOrder", sortOrder,
                "offset", offset);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> limit = Optional.empty();
 
        private Optional<? extends com.exoscale.api.models.components.EnumSortOrder> sortOrder = Optional.empty();
 
        private Optional<? extends String> offset = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * How many log entries to receive at most, up to 500 (default: 100)
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * How many log entries to receive at most, up to 500 (default: 100)
         */
        public Builder limit(Optional<? extends Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        public Builder sortOrder(com.exoscale.api.models.components.EnumSortOrder sortOrder) {
            Utils.checkNotNull(sortOrder, "sortOrder");
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        public Builder sortOrder(Optional<? extends com.exoscale.api.models.components.EnumSortOrder> sortOrder) {
            Utils.checkNotNull(sortOrder, "sortOrder");
            this.sortOrder = sortOrder;
            return this;
        }

        /**
         * Opaque offset identifier
         */
        public Builder offset(String offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        /**
         * Opaque offset identifier
         */
        public Builder offset(Optional<? extends String> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }
        
        public GetDbaasServiceLogsRequestBody build() {
            return new GetDbaasServiceLogsRequestBody(
                limit,
                sortOrder,
                offset);
        }
    }
}

