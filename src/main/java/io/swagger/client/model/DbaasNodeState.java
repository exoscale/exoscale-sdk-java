/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.DbaasNodeStateProgressUpdate;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Automatic maintenance settings
 */
@Schema(description = "Automatic maintenance settings")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class DbaasNodeState {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("progress-updates")
  private List<DbaasNodeStateProgressUpdate> progressUpdates = null;

  /**
   * Role of this node. Only returned for a subset of service types
   */
  public enum RoleEnum {
    STANDBY("standby"),
    MASTER("master"),
    READ_REPLICA("read-replica");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static RoleEnum fromValue(String input) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("role")
  private RoleEnum role = null;

  /**
   * Current state of the service node
   */
  public enum StateEnum {
    LEAVING("leaving"),
    RUNNING("running"),
    SYNCING_DATA("syncing_data"),
    SETTING_UP_VM("setting_up_vm"),
    UNKNOWN("unknown");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String input) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private StateEnum state = null;

  public DbaasNodeState name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the service node
   * @return name
  **/
  @Schema(required = true, description = "Name of the service node")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DbaasNodeState progressUpdates(List<DbaasNodeStateProgressUpdate> progressUpdates) {
    this.progressUpdates = progressUpdates;
    return this;
  }

  public DbaasNodeState addProgressUpdatesItem(DbaasNodeStateProgressUpdate progressUpdatesItem) {
    if (this.progressUpdates == null) {
      this.progressUpdates = new ArrayList<>();
    }
    this.progressUpdates.add(progressUpdatesItem);
    return this;
  }

   /**
   * Extra information regarding the progress for current state
   * @return progressUpdates
  **/
  @Schema(description = "Extra information regarding the progress for current state")
  public List<DbaasNodeStateProgressUpdate> getProgressUpdates() {
    return progressUpdates;
  }

  public void setProgressUpdates(List<DbaasNodeStateProgressUpdate> progressUpdates) {
    this.progressUpdates = progressUpdates;
  }

  public DbaasNodeState role(RoleEnum role) {
    this.role = role;
    return this;
  }

   /**
   * Role of this node. Only returned for a subset of service types
   * @return role
  **/
  @Schema(description = "Role of this node. Only returned for a subset of service types")
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }

  public DbaasNodeState state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Current state of the service node
   * @return state
  **/
  @Schema(required = true, description = "Current state of the service node")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasNodeState dbaasNodeState = (DbaasNodeState) o;
    return Objects.equals(this.name, dbaasNodeState.name) &&
        Objects.equals(this.progressUpdates, dbaasNodeState.progressUpdates) &&
        Objects.equals(this.role, dbaasNodeState.role) &&
        Objects.equals(this.state, dbaasNodeState.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, progressUpdates, role, state);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasNodeState {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    progressUpdates: ").append(toIndentedString(progressUpdates)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
