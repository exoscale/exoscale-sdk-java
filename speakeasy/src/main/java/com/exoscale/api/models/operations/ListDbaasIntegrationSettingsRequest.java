/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.operations;

import com.exoscale.api.utils.SpeakeasyMetadata;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class ListDbaasIntegrationSettingsRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=integration-type")
    private String integrationType;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=source-type")
    private String sourceType;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=dest-type")
    private String destType;

    public ListDbaasIntegrationSettingsRequest(
            String integrationType,
            String sourceType,
            String destType) {
        Utils.checkNotNull(integrationType, "integrationType");
        Utils.checkNotNull(sourceType, "sourceType");
        Utils.checkNotNull(destType, "destType");
        this.integrationType = integrationType;
        this.sourceType = sourceType;
        this.destType = destType;
    }

    public String integrationType() {
        return integrationType;
    }

    public String sourceType() {
        return sourceType;
    }

    public String destType() {
        return destType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListDbaasIntegrationSettingsRequest withIntegrationType(String integrationType) {
        Utils.checkNotNull(integrationType, "integrationType");
        this.integrationType = integrationType;
        return this;
    }

    public ListDbaasIntegrationSettingsRequest withSourceType(String sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = sourceType;
        return this;
    }

    public ListDbaasIntegrationSettingsRequest withDestType(String destType) {
        Utils.checkNotNull(destType, "destType");
        this.destType = destType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListDbaasIntegrationSettingsRequest other = (ListDbaasIntegrationSettingsRequest) o;
        return 
            java.util.Objects.deepEquals(this.integrationType, other.integrationType) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.destType, other.destType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            integrationType,
            sourceType,
            destType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListDbaasIntegrationSettingsRequest.class,
                "integrationType", integrationType,
                "sourceType", sourceType,
                "destType", destType);
    }
    
    public final static class Builder {
 
        private String integrationType;
 
        private String sourceType;
 
        private String destType;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder integrationType(String integrationType) {
            Utils.checkNotNull(integrationType, "integrationType");
            this.integrationType = integrationType;
            return this;
        }

        public Builder sourceType(String sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = sourceType;
            return this;
        }

        public Builder destType(String destType) {
            Utils.checkNotNull(destType, "destType");
            this.destType = destType;
            return this;
        }
        
        public ListDbaasIntegrationSettingsRequest build() {
            return new ListDbaasIntegrationSettingsRequest(
                integrationType,
                sourceType,
                destType);
        }
    }
}

