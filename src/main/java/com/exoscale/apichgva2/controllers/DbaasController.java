/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.DbaasCaCertificateResponse;
import com.exoscale.apichgva2.models.DbaasGrafanaRequest;
import com.exoscale.apichgva2.models.DbaasGrafanaRequest1;
import com.exoscale.apichgva2.models.DbaasIntegration;
import com.exoscale.apichgva2.models.DbaasIntegrationRequest;
import com.exoscale.apichgva2.models.DbaasIntegrationRequest1;
import com.exoscale.apichgva2.models.DbaasIntegrationSettingsDestTypeResponse;
import com.exoscale.apichgva2.models.DbaasIntegrationTypesResponse;
import com.exoscale.apichgva2.models.DbaasKafkaAcls;
import com.exoscale.apichgva2.models.DbaasKafkaRequest;
import com.exoscale.apichgva2.models.DbaasKafkaRequest1;
import com.exoscale.apichgva2.models.DbaasKafkaSchemaRegistryAclEntry;
import com.exoscale.apichgva2.models.DbaasKafkaTopicAclEntry;
import com.exoscale.apichgva2.models.DbaasKafkaUserPasswordResetRequest;
import com.exoscale.apichgva2.models.DbaasKafkaUserRequest;
import com.exoscale.apichgva2.models.DbaasMigrationStatus;
import com.exoscale.apichgva2.models.DbaasMysqlDatabaseRequest;
import com.exoscale.apichgva2.models.DbaasMysqlRequest;
import com.exoscale.apichgva2.models.DbaasMysqlRequest1;
import com.exoscale.apichgva2.models.DbaasMysqlUserPasswordResetRequest;
import com.exoscale.apichgva2.models.DbaasMysqlUserRequest;
import com.exoscale.apichgva2.models.DbaasOpensearchAclConfig;
import com.exoscale.apichgva2.models.DbaasOpensearchRequest;
import com.exoscale.apichgva2.models.DbaasOpensearchRequest1;
import com.exoscale.apichgva2.models.DbaasOpensearchUserPasswordResetRequest;
import com.exoscale.apichgva2.models.DbaasOpensearchUserRequest;
import com.exoscale.apichgva2.models.DbaasPostgresConnectionPoolRequest;
import com.exoscale.apichgva2.models.DbaasPostgresConnectionPoolRequest1;
import com.exoscale.apichgva2.models.DbaasPostgresDatabaseRequest;
import com.exoscale.apichgva2.models.DbaasPostgresRequest;
import com.exoscale.apichgva2.models.DbaasPostgresRequest1;
import com.exoscale.apichgva2.models.DbaasPostgresUpgradeCheckRequest;
import com.exoscale.apichgva2.models.DbaasPostgresUserAllowReplicationRequest;
import com.exoscale.apichgva2.models.DbaasPostgresUserPasswordResetRequest;
import com.exoscale.apichgva2.models.DbaasPostgresUserRequest;
import com.exoscale.apichgva2.models.DbaasPostgresUsers;
import com.exoscale.apichgva2.models.DbaasRedisRequest;
import com.exoscale.apichgva2.models.DbaasRedisRequest1;
import com.exoscale.apichgva2.models.DbaasServiceGrafana;
import com.exoscale.apichgva2.models.DbaasServiceKafka;
import com.exoscale.apichgva2.models.DbaasServiceLogs;
import com.exoscale.apichgva2.models.DbaasServiceLogsRequest;
import com.exoscale.apichgva2.models.DbaasServiceMetricsRequest;
import com.exoscale.apichgva2.models.DbaasServiceMetricsResponse;
import com.exoscale.apichgva2.models.DbaasServiceMysql;
import com.exoscale.apichgva2.models.DbaasServiceOpensearch;
import com.exoscale.apichgva2.models.DbaasServicePg;
import com.exoscale.apichgva2.models.DbaasServiceRedis;
import com.exoscale.apichgva2.models.DbaasServiceResponse;
import com.exoscale.apichgva2.models.DbaasServiceType;
import com.exoscale.apichgva2.models.DbaasServiceTypeResponse;
import com.exoscale.apichgva2.models.DbaasSettingsGrafanaResponse;
import com.exoscale.apichgva2.models.DbaasSettingsKafkaResponse;
import com.exoscale.apichgva2.models.DbaasSettingsMysqlResponse;
import com.exoscale.apichgva2.models.DbaasSettingsOpensearchResponse;
import com.exoscale.apichgva2.models.DbaasSettingsPgResponse;
import com.exoscale.apichgva2.models.DbaasSettingsRedisResponse;
import com.exoscale.apichgva2.models.DbaasTask;
import com.exoscale.apichgva2.models.DbaasTaskMigrationCheckRequest;
import com.exoscale.apichgva2.models.Operation;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DbaasController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DbaasController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasOpensearchAclConfig response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasOpensearchAclConfig getDbaasOpensearchAclConfig(
            final String name) throws ApiException, IOException {
        return prepareGetDbaasOpensearchAclConfigRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasOpensearchAclConfig response from the API call
     */
    public CompletableFuture<DbaasOpensearchAclConfig> getDbaasOpensearchAclConfigAsync(
            final String name) {
        try { 
            return prepareGetDbaasOpensearchAclConfigRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasOpensearchAclConfig.
     */
    private ApiCall<DbaasOpensearchAclConfig, ApiException> prepareGetDbaasOpensearchAclConfigRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<DbaasOpensearchAclConfig, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-opensearch/{name}/acl-config")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasOpensearchAclConfig.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateDbaasOpensearchAclConfig(
            final String name,
            final DbaasOpensearchAclConfig body) throws ApiException, IOException {
        return prepareUpdateDbaasOpensearchAclConfigRequest(name, body).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateDbaasOpensearchAclConfigAsync(
            final String name,
            final DbaasOpensearchAclConfig body) {
        try { 
            return prepareUpdateDbaasOpensearchAclConfigRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDbaasOpensearchAclConfig.
     */
    private ApiCall<Operation, ApiException> prepareUpdateDbaasOpensearchAclConfigRequest(
            final String name,
            final DbaasOpensearchAclConfig body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-opensearch/{name}/acl-config")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation startDbaasGrafanaMaintenance(
            final String name) throws ApiException, IOException {
        return prepareStartDbaasGrafanaMaintenanceRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> startDbaasGrafanaMaintenanceAsync(
            final String name) {
        try { 
            return prepareStartDbaasGrafanaMaintenanceRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for startDbaasGrafanaMaintenance.
     */
    private ApiCall<Operation, ApiException> prepareStartDbaasGrafanaMaintenanceRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-grafana/{name}/maintenance/start")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Check whether you can upgrade Postgres service to a newer version.
     * @param  service  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the DbaasTask response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasTask createDbaasPgUpgradeCheck(
            final String service,
            final DbaasPostgresUpgradeCheckRequest body) throws ApiException, IOException {
        return prepareCreateDbaasPgUpgradeCheckRequest(service, body).execute();
    }

    /**
     * Check whether you can upgrade Postgres service to a newer version.
     * @param  service  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the DbaasTask response from the API call
     */
    public CompletableFuture<DbaasTask> createDbaasPgUpgradeCheckAsync(
            final String service,
            final DbaasPostgresUpgradeCheckRequest body) {
        try { 
            return prepareCreateDbaasPgUpgradeCheckRequest(service, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasPgUpgradeCheck.
     */
    private ApiCall<DbaasTask, ApiException> prepareCreateDbaasPgUpgradeCheckRequest(
            final String service,
            final DbaasPostgresUpgradeCheckRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<DbaasTask, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{service}/upgrade-check")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service").value(service)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasTask.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * If no password is provided one will be generated automatically.
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation resetDbaasMysqlUserPassword(
            final String serviceName,
            final String username,
            final DbaasMysqlUserPasswordResetRequest body) throws ApiException, IOException {
        return prepareResetDbaasMysqlUserPasswordRequest(serviceName, username, body).execute();
    }

    /**
     * If no password is provided one will be generated automatically.
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> resetDbaasMysqlUserPasswordAsync(
            final String serviceName,
            final String username,
            final DbaasMysqlUserPasswordResetRequest body) {
        try { 
            return prepareResetDbaasMysqlUserPasswordRequest(serviceName, username, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resetDbaasMysqlUserPassword.
     */
    private ApiCall<Operation, ApiException> prepareResetDbaasMysqlUserPasswordRequest(
            final String serviceName,
            final String username,
            final DbaasMysqlUserPasswordResetRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{service-name}/user/{username}/password/reset")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasPgConnectionPool(
            final String serviceName,
            final DbaasPostgresConnectionPoolRequest body) throws ApiException, IOException {
        return prepareCreateDbaasPgConnectionPoolRequest(serviceName, body).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasPgConnectionPoolAsync(
            final String serviceName,
            final DbaasPostgresConnectionPoolRequest body) {
        try { 
            return prepareCreateDbaasPgConnectionPoolRequest(serviceName, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasPgConnectionPool.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasPgConnectionPoolRequest(
            final String serviceName,
            final DbaasPostgresConnectionPoolRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{service-name}/connection-pool")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update a DBaaS MySQL service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateDbaasServiceMysql(
            final String name,
            final DbaasMysqlRequest body) throws ApiException, IOException {
        return prepareUpdateDbaasServiceMysqlRequest(name, body).execute();
    }

    /**
     * Update a DBaaS MySQL service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateDbaasServiceMysqlAsync(
            final String name,
            final DbaasMysqlRequest body) {
        try { 
            return prepareUpdateDbaasServiceMysqlRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDbaasServiceMysql.
     */
    private ApiCall<Operation, ApiException> prepareUpdateDbaasServiceMysqlRequest(
            final String name,
            final DbaasMysqlRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a DBaaS MySQL service.
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServiceMysql response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServiceMysql getDbaasServiceMysql(
            final String name) throws ApiException, IOException {
        return prepareGetDbaasServiceMysqlRequest(name).execute();
    }

    /**
     * Get a DBaaS MySQL service.
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServiceMysql response from the API call
     */
    public CompletableFuture<DbaasServiceMysql> getDbaasServiceMysqlAsync(
            final String name) {
        try { 
            return prepareGetDbaasServiceMysqlRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasServiceMysql.
     */
    private ApiCall<DbaasServiceMysql, ApiException> prepareGetDbaasServiceMysqlRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<DbaasServiceMysql, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServiceMysql.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a DBaaS MySQL service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasServiceMysql(
            final String name,
            final DbaasMysqlRequest1 body) throws ApiException, IOException {
        return prepareCreateDbaasServiceMysqlRequest(name, body).execute();
    }

    /**
     * Create a DBaaS MySQL service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasServiceMysqlAsync(
            final String name,
            final DbaasMysqlRequest1 body) {
        try { 
            return prepareCreateDbaasServiceMysqlRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasServiceMysql.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasServiceMysqlRequest(
            final String name,
            final DbaasMysqlRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasServiceMysql(
            final String name) throws ApiException, IOException {
        return prepareDeleteDbaasServiceMysqlRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasServiceMysqlAsync(
            final String name) {
        try { 
            return prepareDeleteDbaasServiceMysqlRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasServiceMysql.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasServiceMysqlRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasMysqlUser(
            final String serviceName,
            final DbaasMysqlUserRequest body) throws ApiException, IOException {
        return prepareCreateDbaasMysqlUserRequest(serviceName, body).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasMysqlUserAsync(
            final String serviceName,
            final DbaasMysqlUserRequest body) {
        try { 
            return prepareCreateDbaasMysqlUserRequest(serviceName, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasMysqlUser.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasMysqlUserRequest(
            final String serviceName,
            final DbaasMysqlUserRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{service-name}/user")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List available service types for DBaaS.
     * @return    Returns the DbaasServiceTypeResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServiceTypeResponse listDbaasServiceTypes() throws ApiException, IOException {
        return prepareListDbaasServiceTypesRequest().execute();
    }

    /**
     * List available service types for DBaaS.
     * @return    Returns the DbaasServiceTypeResponse response from the API call
     */
    public CompletableFuture<DbaasServiceTypeResponse> listDbaasServiceTypesAsync() {
        try { 
            return prepareListDbaasServiceTypesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDbaasServiceTypes.
     */
    private ApiCall<DbaasServiceTypeResponse, ApiException> prepareListDbaasServiceTypesRequest() throws IOException {
        return new ApiCall.Builder<DbaasServiceTypeResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-service-type")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServiceTypeResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List DBaaS services.
     * @return    Returns the DbaasServiceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServiceResponse listDbaasServices() throws ApiException, IOException {
        return prepareListDbaasServicesRequest().execute();
    }

    /**
     * List DBaaS services.
     * @return    Returns the DbaasServiceResponse response from the API call
     */
    public CompletableFuture<DbaasServiceResponse> listDbaasServicesAsync() {
        try { 
            return prepareListDbaasServicesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDbaasServices.
     */
    private ApiCall<DbaasServiceResponse, ApiException> prepareListDbaasServicesRequest() throws IOException {
        return new ApiCall.Builder<DbaasServiceResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-service")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServiceResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected
     * connection.
     * @return    Returns the DbaasCaCertificateResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasCaCertificateResponse getDbaasCaCertificate() throws ApiException, IOException {
        return prepareGetDbaasCaCertificateRequest().execute();
    }

    /**
     * Returns a CA Certificate required to reach a DBaaS service through a TLS-protected
     * connection.
     * @return    Returns the DbaasCaCertificateResponse response from the API call
     */
    public CompletableFuture<DbaasCaCertificateResponse> getDbaasCaCertificateAsync() {
        try { 
            return prepareGetDbaasCaCertificateRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasCaCertificate.
     */
    private ApiCall<DbaasCaCertificateResponse, ApiException> prepareGetDbaasCaCertificateRequest() throws IOException {
        return new ApiCall.Builder<DbaasCaCertificateResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-ca-certificate")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasCaCertificateResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get DBaaS Grafana settings.
     * @return    Returns the DbaasSettingsGrafanaResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasSettingsGrafanaResponse getDbaasSettingsGrafana() throws ApiException, IOException {
        return prepareGetDbaasSettingsGrafanaRequest().execute();
    }

    /**
     * Get DBaaS Grafana settings.
     * @return    Returns the DbaasSettingsGrafanaResponse response from the API call
     */
    public CompletableFuture<DbaasSettingsGrafanaResponse> getDbaasSettingsGrafanaAsync() {
        try { 
            return prepareGetDbaasSettingsGrafanaRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasSettingsGrafana.
     */
    private ApiCall<DbaasSettingsGrafanaResponse, ApiException> prepareGetDbaasSettingsGrafanaRequest() throws IOException {
        return new ApiCall.Builder<DbaasSettingsGrafanaResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-settings-grafana")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasSettingsGrafanaResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  databaseName  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasPgDatabase(
            final String serviceName,
            final String databaseName) throws ApiException, IOException {
        return prepareDeleteDbaasPgDatabaseRequest(serviceName, databaseName).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  databaseName  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasPgDatabaseAsync(
            final String serviceName,
            final String databaseName) {
        try { 
            return prepareDeleteDbaasPgDatabaseRequest(serviceName, databaseName).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasPgDatabase.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasPgDatabaseRequest(
            final String serviceName,
            final String databaseName) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{service-name}/database/{database-name}")
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("database-name").value(databaseName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation stopDbaasPgMigration(
            final String name) throws ApiException, IOException {
        return prepareStopDbaasPgMigrationRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> stopDbaasPgMigrationAsync(
            final String name) {
        try { 
            return prepareStopDbaasPgMigrationRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for stopDbaasPgMigration.
     */
    private ApiCall<Operation, ApiException> prepareStopDbaasPgMigrationRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{name}/migration/stop")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServiceKafka response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServiceKafka getDbaasServiceKafka(
            final String name) throws ApiException, IOException {
        return prepareGetDbaasServiceKafkaRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServiceKafka response from the API call
     */
    public CompletableFuture<DbaasServiceKafka> getDbaasServiceKafkaAsync(
            final String name) {
        try { 
            return prepareGetDbaasServiceKafkaRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasServiceKafka.
     */
    private ApiCall<DbaasServiceKafka, ApiException> prepareGetDbaasServiceKafkaRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<DbaasServiceKafka, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServiceKafka.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a DBaaS Kafka service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasServiceKafka(
            final String name,
            final DbaasKafkaRequest body) throws ApiException, IOException {
        return prepareCreateDbaasServiceKafkaRequest(name, body).execute();
    }

    /**
     * Create a DBaaS Kafka service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasServiceKafkaAsync(
            final String name,
            final DbaasKafkaRequest body) {
        try { 
            return prepareCreateDbaasServiceKafkaRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasServiceKafka.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasServiceKafkaRequest(
            final String name,
            final DbaasKafkaRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update a DBaaS Kafka service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateDbaasServiceKafka(
            final String name,
            final DbaasKafkaRequest1 body) throws ApiException, IOException {
        return prepareUpdateDbaasServiceKafkaRequest(name, body).execute();
    }

    /**
     * Update a DBaaS Kafka service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateDbaasServiceKafkaAsync(
            final String name,
            final DbaasKafkaRequest1 body) {
        try { 
            return prepareUpdateDbaasServiceKafkaRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDbaasServiceKafka.
     */
    private ApiCall<Operation, ApiException> prepareUpdateDbaasServiceKafkaRequest(
            final String name,
            final DbaasKafkaRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasServiceKafka(
            final String name) throws ApiException, IOException {
        return prepareDeleteDbaasServiceKafkaRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasServiceKafkaAsync(
            final String name) {
        try { 
            return prepareDeleteDbaasServiceKafkaRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasServiceKafka.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasServiceKafkaRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns the default settings for Redis.
     * @return    Returns the DbaasSettingsRedisResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasSettingsRedisResponse getDbaasSettingsRedis() throws ApiException, IOException {
        return prepareGetDbaasSettingsRedisRequest().execute();
    }

    /**
     * Returns the default settings for Redis.
     * @return    Returns the DbaasSettingsRedisResponse response from the API call
     */
    public CompletableFuture<DbaasSettingsRedisResponse> getDbaasSettingsRedisAsync() {
        try { 
            return prepareGetDbaasSettingsRedisRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasSettingsRedis.
     */
    private ApiCall<DbaasSettingsRedisResponse, ApiException> prepareGetDbaasSettingsRedisRequest() throws IOException {
        return new ApiCall.Builder<DbaasSettingsRedisResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-settings-redis")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasSettingsRedisResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasKafkaSchemaRegistryAclConfig(
            final String name,
            final DbaasKafkaSchemaRegistryAclEntry body) throws ApiException, IOException {
        return prepareCreateDbaasKafkaSchemaRegistryAclConfigRequest(name, body).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasKafkaSchemaRegistryAclConfigAsync(
            final String name,
            final DbaasKafkaSchemaRegistryAclEntry body) {
        try { 
            return prepareCreateDbaasKafkaSchemaRegistryAclConfigRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasKafkaSchemaRegistryAclConfig.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasKafkaSchemaRegistryAclConfigRequest(
            final String name,
            final DbaasKafkaSchemaRegistryAclEntry body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{name}/schema-registry/acl-config")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasPostgresUser(
            final String serviceName,
            final DbaasPostgresUserRequest body) throws ApiException, IOException {
        return prepareCreateDbaasPostgresUserRequest(serviceName, body).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasPostgresUserAsync(
            final String serviceName,
            final DbaasPostgresUserRequest body) {
        try { 
            return prepareCreateDbaasPostgresUserRequest(serviceName, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasPostgresUser.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasPostgresUserRequest(
            final String serviceName,
            final DbaasPostgresUserRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{service-name}/user")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasOpensearchUser(
            final String serviceName,
            final String username) throws ApiException, IOException {
        return prepareDeleteDbaasOpensearchUserRequest(serviceName, username).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasOpensearchUserAsync(
            final String serviceName,
            final String username) {
        try { 
            return prepareDeleteDbaasOpensearchUserRequest(serviceName, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasOpensearchUser.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasOpensearchUserRequest(
            final String serviceName,
            final String username) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-opensearch/{service-name}/user/{username}")
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasKafkaUser(
            final String serviceName,
            final DbaasKafkaUserRequest body) throws ApiException, IOException {
        return prepareCreateDbaasKafkaUserRequest(serviceName, body).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasKafkaUserAsync(
            final String serviceName,
            final DbaasKafkaUserRequest body) {
        try { 
            return prepareCreateDbaasKafkaUserRequest(serviceName, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasKafkaUser.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasKafkaUserRequest(
            final String serviceName,
            final DbaasKafkaUserRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{service-name}/user")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get DBaaS MySQL settings.
     * @return    Returns the DbaasSettingsMysqlResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasSettingsMysqlResponse getDbaasSettingsMysql() throws ApiException, IOException {
        return prepareGetDbaasSettingsMysqlRequest().execute();
    }

    /**
     * Get DBaaS MySQL settings.
     * @return    Returns the DbaasSettingsMysqlResponse response from the API call
     */
    public CompletableFuture<DbaasSettingsMysqlResponse> getDbaasSettingsMysqlAsync() {
        try { 
            return prepareGetDbaasSettingsMysqlRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasSettingsMysql.
     */
    private ApiCall<DbaasSettingsMysqlResponse, ApiException> prepareGetDbaasSettingsMysqlRequest() throws IOException {
        return new ApiCall.Builder<DbaasSettingsMysqlResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-settings-mysql")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasSettingsMysqlResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasPgDatabase(
            final String serviceName,
            final DbaasPostgresDatabaseRequest body) throws ApiException, IOException {
        return prepareCreateDbaasPgDatabaseRequest(serviceName, body).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasPgDatabaseAsync(
            final String serviceName,
            final DbaasPostgresDatabaseRequest body) {
        try { 
            return prepareCreateDbaasPgDatabaseRequest(serviceName, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasPgDatabase.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasPgDatabaseRequest(
            final String serviceName,
            final DbaasPostgresDatabaseRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{service-name}/database")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasOpensearchUser(
            final String serviceName,
            final DbaasOpensearchUserRequest body) throws ApiException, IOException {
        return prepareCreateDbaasOpensearchUserRequest(serviceName, body).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasOpensearchUserAsync(
            final String serviceName,
            final DbaasOpensearchUserRequest body) {
        try { 
            return prepareCreateDbaasOpensearchUserRequest(serviceName, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasOpensearchUser.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasOpensearchUserRequest(
            final String serviceName,
            final DbaasOpensearchUserRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-opensearch/{service-name}/user")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get DBaaS integration types.
     * @return    Returns the DbaasIntegrationTypesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasIntegrationTypesResponse listDbaasIntegrationTypes() throws ApiException, IOException {
        return prepareListDbaasIntegrationTypesRequest().execute();
    }

    /**
     * Get DBaaS integration types.
     * @return    Returns the DbaasIntegrationTypesResponse response from the API call
     */
    public CompletableFuture<DbaasIntegrationTypesResponse> listDbaasIntegrationTypesAsync() {
        try { 
            return prepareListDbaasIntegrationTypesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDbaasIntegrationTypes.
     */
    private ApiCall<DbaasIntegrationTypesResponse, ApiException> prepareListDbaasIntegrationTypesRequest() throws IOException {
        return new ApiCall.Builder<DbaasIntegrationTypesResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-integration-types")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasIntegrationTypesResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasPostgresUser(
            final String serviceName,
            final String username) throws ApiException, IOException {
        return prepareDeleteDbaasPostgresUserRequest(serviceName, username).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasPostgresUserAsync(
            final String serviceName,
            final String username) {
        try { 
            return prepareDeleteDbaasPostgresUserRequest(serviceName, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasPostgresUser.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasPostgresUserRequest(
            final String serviceName,
            final String username) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{service-name}/user/{username}")
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the DbaasPostgresUsers response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasPostgresUsers updateDbaasPostgresAllowReplication(
            final String serviceName,
            final String username,
            final DbaasPostgresUserAllowReplicationRequest body) throws ApiException, IOException {
        return prepareUpdateDbaasPostgresAllowReplicationRequest(serviceName, username,
                body).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the DbaasPostgresUsers response from the API call
     */
    public CompletableFuture<DbaasPostgresUsers> updateDbaasPostgresAllowReplicationAsync(
            final String serviceName,
            final String username,
            final DbaasPostgresUserAllowReplicationRequest body) {
        try { 
            return prepareUpdateDbaasPostgresAllowReplicationRequest(serviceName, username,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDbaasPostgresAllowReplication.
     */
    private ApiCall<DbaasPostgresUsers, ApiException> prepareUpdateDbaasPostgresAllowReplicationRequest(
            final String serviceName,
            final String username,
            final DbaasPostgresUserAllowReplicationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<DbaasPostgresUsers, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{service-name}/user/{username}/allow-replication")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasPostgresUsers.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasKafkaTopicAclConfig(
            final String name,
            final DbaasKafkaTopicAclEntry body) throws ApiException, IOException {
        return prepareCreateDbaasKafkaTopicAclConfigRequest(name, body).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasKafkaTopicAclConfigAsync(
            final String name,
            final DbaasKafkaTopicAclEntry body) {
        try { 
            return prepareCreateDbaasKafkaTopicAclConfigRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasKafkaTopicAclConfig.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasKafkaTopicAclConfigRequest(
            final String name,
            final DbaasKafkaTopicAclEntry body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{name}/topic/acl-config")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  databaseName  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasMysqlDatabase(
            final String serviceName,
            final String databaseName) throws ApiException, IOException {
        return prepareDeleteDbaasMysqlDatabaseRequest(serviceName, databaseName).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  databaseName  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasMysqlDatabaseAsync(
            final String serviceName,
            final String databaseName) {
        try { 
            return prepareDeleteDbaasMysqlDatabaseRequest(serviceName, databaseName).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasMysqlDatabase.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasMysqlDatabaseRequest(
            final String serviceName,
            final String databaseName) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{service-name}/database/{database-name}")
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("database-name").value(databaseName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get logs of DBaaS service.
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the DbaasServiceLogs response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServiceLogs getDbaasServiceLogs(
            final String serviceName,
            final DbaasServiceLogsRequest body) throws ApiException, IOException {
        return prepareGetDbaasServiceLogsRequest(serviceName, body).execute();
    }

    /**
     * Get logs of DBaaS service.
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the DbaasServiceLogs response from the API call
     */
    public CompletableFuture<DbaasServiceLogs> getDbaasServiceLogsAsync(
            final String serviceName,
            final DbaasServiceLogsRequest body) {
        try { 
            return prepareGetDbaasServiceLogsRequest(serviceName, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasServiceLogs.
     */
    private ApiCall<DbaasServiceLogs, ApiException> prepareGetDbaasServiceLogsRequest(
            final String serviceName,
            final DbaasServiceLogsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<DbaasServiceLogs, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-service-logs/{service-name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServiceLogs.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation startDbaasPgMaintenance(
            final String name) throws ApiException, IOException {
        return prepareStartDbaasPgMaintenanceRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> startDbaasPgMaintenanceAsync(
            final String name) {
        try { 
            return prepareStartDbaasPgMaintenanceRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for startDbaasPgMaintenance.
     */
    private ApiCall<Operation, ApiException> prepareStartDbaasPgMaintenanceRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{name}/maintenance/start")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  aclId  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasKafkaSchemaRegistryAclConfig(
            final String name,
            final String aclId) throws ApiException, IOException {
        return prepareDeleteDbaasKafkaSchemaRegistryAclConfigRequest(name, aclId).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  aclId  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasKafkaSchemaRegistryAclConfigAsync(
            final String name,
            final String aclId) {
        try { 
            return prepareDeleteDbaasKafkaSchemaRegistryAclConfigRequest(name, aclId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasKafkaSchemaRegistryAclConfig.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasKafkaSchemaRegistryAclConfigRequest(
            final String name,
            final String aclId) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{name}/schema-registry/acl-config/{acl-id}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("acl-id").value(aclId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasKafkaUser(
            final String serviceName,
            final String username) throws ApiException, IOException {
        return prepareDeleteDbaasKafkaUserRequest(serviceName, username).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasKafkaUserAsync(
            final String serviceName,
            final String username) {
        try { 
            return prepareDeleteDbaasKafkaUserRequest(serviceName, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasKafkaUser.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasKafkaUserRequest(
            final String serviceName,
            final String username) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{service-name}/user/{username}")
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a DBaaS service type.
     * @param  serviceTypeName  Required parameter: Example:
     * @return    Returns the DbaasServiceType response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServiceType getDbaasServiceType(
            final String serviceTypeName) throws ApiException, IOException {
        return prepareGetDbaasServiceTypeRequest(serviceTypeName).execute();
    }

    /**
     * Get a DBaaS service type.
     * @param  serviceTypeName  Required parameter: Example:
     * @return    Returns the DbaasServiceType response from the API call
     */
    public CompletableFuture<DbaasServiceType> getDbaasServiceTypeAsync(
            final String serviceTypeName) {
        try { 
            return prepareGetDbaasServiceTypeRequest(serviceTypeName).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasServiceType.
     */
    private ApiCall<DbaasServiceType, ApiException> prepareGetDbaasServiceTypeRequest(
            final String serviceTypeName) throws IOException {
        return new ApiCall.Builder<DbaasServiceType, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-service-type/{service-type-name}")
                        .templateParam(param -> param.key("service-type-name").value(serviceTypeName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServiceType.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation startDbaasMysqlMaintenance(
            final String name) throws ApiException, IOException {
        return prepareStartDbaasMysqlMaintenanceRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> startDbaasMysqlMaintenanceAsync(
            final String name) {
        try { 
            return prepareStartDbaasMysqlMaintenanceRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for startDbaasMysqlMaintenance.
     */
    private ApiCall<Operation, ApiException> prepareStartDbaasMysqlMaintenanceRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{name}/maintenance/start")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * If no password is provided one will be generated automatically.
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation resetDbaasOpensearchUserPassword(
            final String serviceName,
            final String username,
            final DbaasOpensearchUserPasswordResetRequest body) throws ApiException, IOException {
        return prepareResetDbaasOpensearchUserPasswordRequest(serviceName, username,
                body).execute();
    }

    /**
     * If no password is provided one will be generated automatically.
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> resetDbaasOpensearchUserPasswordAsync(
            final String serviceName,
            final String username,
            final DbaasOpensearchUserPasswordResetRequest body) {
        try { 
            return prepareResetDbaasOpensearchUserPasswordRequest(serviceName, username,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resetDbaasOpensearchUserPassword.
     */
    private ApiCall<Operation, ApiException> prepareResetDbaasOpensearchUserPasswordRequest(
            final String serviceName,
            final String username,
            final DbaasOpensearchUserPasswordResetRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-opensearch/{service-name}/user/{username}/password/reset")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get metrics of DBaaS service.
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the DbaasServiceMetricsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServiceMetricsResponse getDbaasServiceMetrics(
            final String serviceName,
            final DbaasServiceMetricsRequest body) throws ApiException, IOException {
        return prepareGetDbaasServiceMetricsRequest(serviceName, body).execute();
    }

    /**
     * Get metrics of DBaaS service.
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the DbaasServiceMetricsResponse response from the API call
     */
    public CompletableFuture<DbaasServiceMetricsResponse> getDbaasServiceMetricsAsync(
            final String serviceName,
            final DbaasServiceMetricsRequest body) {
        try { 
            return prepareGetDbaasServiceMetricsRequest(serviceName, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasServiceMetrics.
     */
    private ApiCall<DbaasServiceMetricsResponse, ApiException> prepareGetDbaasServiceMetricsRequest(
            final String serviceName,
            final DbaasServiceMetricsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<DbaasServiceMetricsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-service-metrics/{service-name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServiceMetricsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a DBaaS task to check migration.
     * @param  service  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasTaskMigrationCheck(
            final String service,
            final DbaasTaskMigrationCheckRequest body) throws ApiException, IOException {
        return prepareCreateDbaasTaskMigrationCheckRequest(service, body).execute();
    }

    /**
     * Create a DBaaS task to check migration.
     * @param  service  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasTaskMigrationCheckAsync(
            final String service,
            final DbaasTaskMigrationCheckRequest body) {
        try { 
            return prepareCreateDbaasTaskMigrationCheckRequest(service, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasTaskMigrationCheck.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasTaskMigrationCheckRequest(
            final String service,
            final DbaasTaskMigrationCheckRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-task-migration-check/{service}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service").value(service)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a DBaaS Integration.
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasIntegration(
            final UUID id) throws ApiException, IOException {
        return prepareDeleteDbaasIntegrationRequest(id).execute();
    }

    /**
     * Delete a DBaaS Integration.
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasIntegrationAsync(
            final UUID id) {
        try { 
            return prepareDeleteDbaasIntegrationRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasIntegration.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasIntegrationRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-integration/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update a existing DBaaS integration.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateDbaasIntegration(
            final UUID id,
            final DbaasIntegrationRequest body) throws ApiException, IOException {
        return prepareUpdateDbaasIntegrationRequest(id, body).execute();
    }

    /**
     * Update a existing DBaaS integration.
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateDbaasIntegrationAsync(
            final UUID id,
            final DbaasIntegrationRequest body) {
        try { 
            return prepareUpdateDbaasIntegrationRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDbaasIntegration.
     */
    private ApiCall<Operation, ApiException> prepareUpdateDbaasIntegrationRequest(
            final UUID id,
            final DbaasIntegrationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-integration/{id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a DBaaS Integration.
     * @param  id  Required parameter: Example:
     * @return    Returns the DbaasIntegration response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasIntegration getDbaasIntegration(
            final UUID id) throws ApiException, IOException {
        return prepareGetDbaasIntegrationRequest(id).execute();
    }

    /**
     * Get a DBaaS Integration.
     * @param  id  Required parameter: Example:
     * @return    Returns the DbaasIntegration response from the API call
     */
    public CompletableFuture<DbaasIntegration> getDbaasIntegrationAsync(
            final UUID id) {
        try { 
            return prepareGetDbaasIntegrationRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasIntegration.
     */
    private ApiCall<DbaasIntegration, ApiException> prepareGetDbaasIntegrationRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<DbaasIntegration, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-integration/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasIntegration.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get DBaaS integration settings.
     * @param  integrationType  Required parameter: Example:
     * @param  sourceType  Required parameter: Example:
     * @param  destType  Required parameter: Example:
     * @return    Returns the DbaasIntegrationSettingsDestTypeResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasIntegrationSettingsDestTypeResponse listDbaasIntegrationSettings(
            final String integrationType,
            final String sourceType,
            final String destType) throws ApiException, IOException {
        return prepareListDbaasIntegrationSettingsRequest(integrationType, sourceType,
                destType).execute();
    }

    /**
     * Get DBaaS integration settings.
     * @param  integrationType  Required parameter: Example:
     * @param  sourceType  Required parameter: Example:
     * @param  destType  Required parameter: Example:
     * @return    Returns the DbaasIntegrationSettingsDestTypeResponse response from the API call
     */
    public CompletableFuture<DbaasIntegrationSettingsDestTypeResponse> listDbaasIntegrationSettingsAsync(
            final String integrationType,
            final String sourceType,
            final String destType) {
        try { 
            return prepareListDbaasIntegrationSettingsRequest(integrationType, sourceType,
            destType).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDbaasIntegrationSettings.
     */
    private ApiCall<DbaasIntegrationSettingsDestTypeResponse, ApiException> prepareListDbaasIntegrationSettingsRequest(
            final String integrationType,
            final String sourceType,
            final String destType) throws IOException {
        return new ApiCall.Builder<DbaasIntegrationSettingsDestTypeResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-integration-settings/{integration-type}/{source-type}/{dest-type}")
                        .templateParam(param -> param.key("integration-type").value(integrationType)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("source-type").value(sourceType)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("dest-type").value(destType)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasIntegrationSettingsDestTypeResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get DBaaS PostgreSQL settings.
     * @return    Returns the DbaasSettingsPgResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasSettingsPgResponse getDbaasSettingsPg() throws ApiException, IOException {
        return prepareGetDbaasSettingsPgRequest().execute();
    }

    /**
     * Get DBaaS PostgreSQL settings.
     * @return    Returns the DbaasSettingsPgResponse response from the API call
     */
    public CompletableFuture<DbaasSettingsPgResponse> getDbaasSettingsPgAsync() {
        try { 
            return prepareGetDbaasSettingsPgRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasSettingsPg.
     */
    private ApiCall<DbaasSettingsPgResponse, ApiException> prepareGetDbaasSettingsPgRequest() throws IOException {
        return new ApiCall.Builder<DbaasSettingsPgResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-settings-pg")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasSettingsPgResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation stopDbaasRedisMigration(
            final String name) throws ApiException, IOException {
        return prepareStopDbaasRedisMigrationRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> stopDbaasRedisMigrationAsync(
            final String name) {
        try { 
            return prepareStopDbaasRedisMigrationRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for stopDbaasRedisMigration.
     */
    private ApiCall<Operation, ApiException> prepareStopDbaasRedisMigrationRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-redis/{name}/migration/stop")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation stopDbaasMysqlMigration(
            final String name) throws ApiException, IOException {
        return prepareStopDbaasMysqlMigrationRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> stopDbaasMysqlMigrationAsync(
            final String name) {
        try { 
            return prepareStopDbaasMysqlMigrationRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for stopDbaasMysqlMigration.
     */
    private ApiCall<Operation, ApiException> prepareStopDbaasMysqlMigrationRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{name}/migration/stop")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation startDbaasKafkaMaintenance(
            final String name) throws ApiException, IOException {
        return prepareStartDbaasKafkaMaintenanceRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> startDbaasKafkaMaintenanceAsync(
            final String name) {
        try { 
            return prepareStartDbaasKafkaMaintenanceRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for startDbaasKafkaMaintenance.
     */
    private ApiCall<Operation, ApiException> prepareStartDbaasKafkaMaintenanceRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{name}/maintenance/start")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  connectionPoolName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateDbaasPgConnectionPool(
            final String serviceName,
            final String connectionPoolName,
            final DbaasPostgresConnectionPoolRequest1 body) throws ApiException, IOException {
        return prepareUpdateDbaasPgConnectionPoolRequest(serviceName, connectionPoolName,
                body).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  connectionPoolName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateDbaasPgConnectionPoolAsync(
            final String serviceName,
            final String connectionPoolName,
            final DbaasPostgresConnectionPoolRequest1 body) {
        try { 
            return prepareUpdateDbaasPgConnectionPoolRequest(serviceName, connectionPoolName,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDbaasPgConnectionPool.
     */
    private ApiCall<Operation, ApiException> prepareUpdateDbaasPgConnectionPoolRequest(
            final String serviceName,
            final String connectionPoolName,
            final DbaasPostgresConnectionPoolRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{service-name}/connection-pool/{connection-pool-name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("connection-pool-name").value(connectionPoolName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  connectionPoolName  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasPgConnectionPool(
            final String serviceName,
            final String connectionPoolName) throws ApiException, IOException {
        return prepareDeleteDbaasPgConnectionPoolRequest(serviceName, connectionPoolName).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  connectionPoolName  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasPgConnectionPoolAsync(
            final String serviceName,
            final String connectionPoolName) {
        try { 
            return prepareDeleteDbaasPgConnectionPoolRequest(serviceName,
            connectionPoolName).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasPgConnectionPool.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasPgConnectionPoolRequest(
            final String serviceName,
            final String connectionPoolName) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{service-name}/connection-pool/{connection-pool-name}")
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("connection-pool-name").value(connectionPoolName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a DBaaS migration status.
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasMigrationStatus response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasMigrationStatus getDbaasMigrationStatus(
            final String name) throws ApiException, IOException {
        return prepareGetDbaasMigrationStatusRequest(name).execute();
    }

    /**
     * Get a DBaaS migration status.
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasMigrationStatus response from the API call
     */
    public CompletableFuture<DbaasMigrationStatus> getDbaasMigrationStatusAsync(
            final String name) {
        try { 
            return prepareGetDbaasMigrationStatusRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasMigrationStatus.
     */
    private ApiCall<DbaasMigrationStatus, ApiException> prepareGetDbaasMigrationStatusRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<DbaasMigrationStatus, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-migration-status/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasMigrationStatus.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasMysqlUser(
            final String serviceName,
            final String username) throws ApiException, IOException {
        return prepareDeleteDbaasMysqlUserRequest(serviceName, username).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasMysqlUserAsync(
            final String serviceName,
            final String username) {
        try { 
            return prepareDeleteDbaasMysqlUserRequest(serviceName, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasMysqlUser.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasMysqlUserRequest(
            final String serviceName,
            final String username) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{service-name}/user/{username}")
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a DBaaS service.
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasService(
            final String name) throws ApiException, IOException {
        return prepareDeleteDbaasServiceRequest(name).execute();
    }

    /**
     * Delete a DBaaS service.
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasServiceAsync(
            final String name) {
        try { 
            return prepareDeleteDbaasServiceRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasService.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasServiceRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-service/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasMysqlDatabase(
            final String serviceName,
            final DbaasMysqlDatabaseRequest body) throws ApiException, IOException {
        return prepareCreateDbaasMysqlDatabaseRequest(serviceName, body).execute();
    }

    /**
     * @param  serviceName  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasMysqlDatabaseAsync(
            final String serviceName,
            final DbaasMysqlDatabaseRequest body) {
        try { 
            return prepareCreateDbaasMysqlDatabaseRequest(serviceName, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasMysqlDatabase.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasMysqlDatabaseRequest(
            final String serviceName,
            final DbaasMysqlDatabaseRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-mysql/{service-name}/database")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get DBaaS Kafka settings.
     * @return    Returns the DbaasSettingsKafkaResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasSettingsKafkaResponse getDbaasSettingsKafka() throws ApiException, IOException {
        return prepareGetDbaasSettingsKafkaRequest().execute();
    }

    /**
     * Get DBaaS Kafka settings.
     * @return    Returns the DbaasSettingsKafkaResponse response from the API call
     */
    public CompletableFuture<DbaasSettingsKafkaResponse> getDbaasSettingsKafkaAsync() {
        try { 
            return prepareGetDbaasSettingsKafkaRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasSettingsKafka.
     */
    private ApiCall<DbaasSettingsKafkaResponse, ApiException> prepareGetDbaasSettingsKafkaRequest() throws IOException {
        return new ApiCall.Builder<DbaasSettingsKafkaResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-settings-kafka")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasSettingsKafkaResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get DBaaS OpenSearch settings.
     * @return    Returns the DbaasSettingsOpensearchResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasSettingsOpensearchResponse getDbaasSettingsOpensearch() throws ApiException, IOException {
        return prepareGetDbaasSettingsOpensearchRequest().execute();
    }

    /**
     * Get DBaaS OpenSearch settings.
     * @return    Returns the DbaasSettingsOpensearchResponse response from the API call
     */
    public CompletableFuture<DbaasSettingsOpensearchResponse> getDbaasSettingsOpensearchAsync() {
        try { 
            return prepareGetDbaasSettingsOpensearchRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasSettingsOpensearch.
     */
    private ApiCall<DbaasSettingsOpensearchResponse, ApiException> prepareGetDbaasSettingsOpensearchRequest() throws IOException {
        return new ApiCall.Builder<DbaasSettingsOpensearchResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-settings-opensearch")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasSettingsOpensearchResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasServiceGrafana(
            final String name) throws ApiException, IOException {
        return prepareDeleteDbaasServiceGrafanaRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasServiceGrafanaAsync(
            final String name) {
        try { 
            return prepareDeleteDbaasServiceGrafanaRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasServiceGrafana.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasServiceGrafanaRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-grafana/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServiceGrafana response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServiceGrafana getDbaasServiceGrafana(
            final String name) throws ApiException, IOException {
        return prepareGetDbaasServiceGrafanaRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServiceGrafana response from the API call
     */
    public CompletableFuture<DbaasServiceGrafana> getDbaasServiceGrafanaAsync(
            final String name) {
        try { 
            return prepareGetDbaasServiceGrafanaRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasServiceGrafana.
     */
    private ApiCall<DbaasServiceGrafana, ApiException> prepareGetDbaasServiceGrafanaRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<DbaasServiceGrafana, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-grafana/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServiceGrafana.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateDbaasServiceGrafana(
            final String name,
            final DbaasGrafanaRequest body) throws ApiException, IOException {
        return prepareUpdateDbaasServiceGrafanaRequest(name, body).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateDbaasServiceGrafanaAsync(
            final String name,
            final DbaasGrafanaRequest body) {
        try { 
            return prepareUpdateDbaasServiceGrafanaRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDbaasServiceGrafana.
     */
    private ApiCall<Operation, ApiException> prepareUpdateDbaasServiceGrafanaRequest(
            final String name,
            final DbaasGrafanaRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-grafana/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a DBaaS Grafana service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasServiceGrafana(
            final String name,
            final DbaasGrafanaRequest1 body) throws ApiException, IOException {
        return prepareCreateDbaasServiceGrafanaRequest(name, body).execute();
    }

    /**
     * Create a DBaaS Grafana service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasServiceGrafanaAsync(
            final String name,
            final DbaasGrafanaRequest1 body) {
        try { 
            return prepareCreateDbaasServiceGrafanaRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasServiceGrafana.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasServiceGrafanaRequest(
            final String name,
            final DbaasGrafanaRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-grafana/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation startDbaasOpensearchMaintenance(
            final String name) throws ApiException, IOException {
        return prepareStartDbaasOpensearchMaintenanceRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> startDbaasOpensearchMaintenanceAsync(
            final String name) {
        try { 
            return prepareStartDbaasOpensearchMaintenanceRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for startDbaasOpensearchMaintenance.
     */
    private ApiCall<Operation, ApiException> prepareStartDbaasOpensearchMaintenanceRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-opensearch/{name}/maintenance/start")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasKafkaAcls response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasKafkaAcls getDbaasKafkaAclConfig(
            final String name) throws ApiException, IOException {
        return prepareGetDbaasKafkaAclConfigRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasKafkaAcls response from the API call
     */
    public CompletableFuture<DbaasKafkaAcls> getDbaasKafkaAclConfigAsync(
            final String name) {
        try { 
            return prepareGetDbaasKafkaAclConfigRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasKafkaAclConfig.
     */
    private ApiCall<DbaasKafkaAcls, ApiException> prepareGetDbaasKafkaAclConfigRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<DbaasKafkaAcls, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{name}/acl-config")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasKafkaAcls.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * If no password is provided one will be generated automatically.
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation resetDbaasKafkaUserPassword(
            final String serviceName,
            final String username,
            final DbaasKafkaUserPasswordResetRequest body) throws ApiException, IOException {
        return prepareResetDbaasKafkaUserPasswordRequest(serviceName, username, body).execute();
    }

    /**
     * If no password is provided one will be generated automatically.
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> resetDbaasKafkaUserPasswordAsync(
            final String serviceName,
            final String username,
            final DbaasKafkaUserPasswordResetRequest body) {
        try { 
            return prepareResetDbaasKafkaUserPasswordRequest(serviceName, username, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resetDbaasKafkaUserPassword.
     */
    private ApiCall<Operation, ApiException> prepareResetDbaasKafkaUserPasswordRequest(
            final String serviceName,
            final String username,
            final DbaasKafkaUserPasswordResetRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{service-name}/user/{username}/password/reset")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a DBaaS OpenSearch service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasServiceOpensearch(
            final String name,
            final DbaasOpensearchRequest body) throws ApiException, IOException {
        return prepareCreateDbaasServiceOpensearchRequest(name, body).execute();
    }

    /**
     * Create a DBaaS OpenSearch service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasServiceOpensearchAsync(
            final String name,
            final DbaasOpensearchRequest body) {
        try { 
            return prepareCreateDbaasServiceOpensearchRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasServiceOpensearch.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasServiceOpensearchRequest(
            final String name,
            final DbaasOpensearchRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-opensearch/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a DBaaS OpenSearch service.
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServiceOpensearch response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServiceOpensearch getDbaasServiceOpensearch(
            final String name) throws ApiException, IOException {
        return prepareGetDbaasServiceOpensearchRequest(name).execute();
    }

    /**
     * Get a DBaaS OpenSearch service.
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServiceOpensearch response from the API call
     */
    public CompletableFuture<DbaasServiceOpensearch> getDbaasServiceOpensearchAsync(
            final String name) {
        try { 
            return prepareGetDbaasServiceOpensearchRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasServiceOpensearch.
     */
    private ApiCall<DbaasServiceOpensearch, ApiException> prepareGetDbaasServiceOpensearchRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<DbaasServiceOpensearch, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-opensearch/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServiceOpensearch.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasServiceOpensearch(
            final String name) throws ApiException, IOException {
        return prepareDeleteDbaasServiceOpensearchRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasServiceOpensearchAsync(
            final String name) {
        try { 
            return prepareDeleteDbaasServiceOpensearchRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasServiceOpensearch.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasServiceOpensearchRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-opensearch/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update a DBaaS OpenSearch service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateDbaasServiceOpensearch(
            final String name,
            final DbaasOpensearchRequest1 body) throws ApiException, IOException {
        return prepareUpdateDbaasServiceOpensearchRequest(name, body).execute();
    }

    /**
     * Update a DBaaS OpenSearch service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateDbaasServiceOpensearchAsync(
            final String name,
            final DbaasOpensearchRequest1 body) {
        try { 
            return prepareUpdateDbaasServiceOpensearchRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDbaasServiceOpensearch.
     */
    private ApiCall<Operation, ApiException> prepareUpdateDbaasServiceOpensearchRequest(
            final String name,
            final DbaasOpensearchRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-opensearch/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasServiceRedis(
            final String name) throws ApiException, IOException {
        return prepareDeleteDbaasServiceRedisRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasServiceRedisAsync(
            final String name) {
        try { 
            return prepareDeleteDbaasServiceRedisRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasServiceRedis.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasServiceRedisRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-redis/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update a DBaaS Redis service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateDbaasServiceRedis(
            final String name,
            final DbaasRedisRequest body) throws ApiException, IOException {
        return prepareUpdateDbaasServiceRedisRequest(name, body).execute();
    }

    /**
     * Update a DBaaS Redis service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateDbaasServiceRedisAsync(
            final String name,
            final DbaasRedisRequest body) {
        try { 
            return prepareUpdateDbaasServiceRedisRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDbaasServiceRedis.
     */
    private ApiCall<Operation, ApiException> prepareUpdateDbaasServiceRedisRequest(
            final String name,
            final DbaasRedisRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-redis/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a DBaaS Redis service.
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServiceRedis response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServiceRedis getDbaasServiceRedis(
            final String name) throws ApiException, IOException {
        return prepareGetDbaasServiceRedisRequest(name).execute();
    }

    /**
     * Get a DBaaS Redis service.
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServiceRedis response from the API call
     */
    public CompletableFuture<DbaasServiceRedis> getDbaasServiceRedisAsync(
            final String name) {
        try { 
            return prepareGetDbaasServiceRedisRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasServiceRedis.
     */
    private ApiCall<DbaasServiceRedis, ApiException> prepareGetDbaasServiceRedisRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<DbaasServiceRedis, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-redis/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServiceRedis.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a DBaaS Redis service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasServiceRedis(
            final String name,
            final DbaasRedisRequest1 body) throws ApiException, IOException {
        return prepareCreateDbaasServiceRedisRequest(name, body).execute();
    }

    /**
     * Create a DBaaS Redis service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasServiceRedisAsync(
            final String name,
            final DbaasRedisRequest1 body) {
        try { 
            return prepareCreateDbaasServiceRedisRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasServiceRedis.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasServiceRedisRequest(
            final String name,
            final DbaasRedisRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-redis/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update a DBaaS PostgreSQL service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation updateDbaasServicePg(
            final String name,
            final DbaasPostgresRequest body) throws ApiException, IOException {
        return prepareUpdateDbaasServicePgRequest(name, body).execute();
    }

    /**
     * Update a DBaaS PostgreSQL service.
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> updateDbaasServicePgAsync(
            final String name,
            final DbaasPostgresRequest body) {
        try { 
            return prepareUpdateDbaasServicePgRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDbaasServicePg.
     */
    private ApiCall<Operation, ApiException> prepareUpdateDbaasServicePgRequest(
            final String name,
            final DbaasPostgresRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a DBaaS PostgreSQL service.
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServicePg response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasServicePg getDbaasServicePg(
            final String name) throws ApiException, IOException {
        return prepareGetDbaasServicePgRequest(name).execute();
    }

    /**
     * Get a DBaaS PostgreSQL service.
     * @param  name  Required parameter: Example:
     * @return    Returns the DbaasServicePg response from the API call
     */
    public CompletableFuture<DbaasServicePg> getDbaasServicePgAsync(
            final String name) {
        try { 
            return prepareGetDbaasServicePgRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasServicePg.
     */
    private ApiCall<DbaasServicePg, ApiException> prepareGetDbaasServicePgRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<DbaasServicePg, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasServicePg.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasServicePg(
            final String name,
            final DbaasPostgresRequest1 body) throws ApiException, IOException {
        return prepareCreateDbaasServicePgRequest(name, body).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasServicePgAsync(
            final String name,
            final DbaasPostgresRequest1 body) {
        try { 
            return prepareCreateDbaasServicePgRequest(name, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasServicePg.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasServicePgRequest(
            final String name,
            final DbaasPostgresRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{name}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasServicePg(
            final String name) throws ApiException, IOException {
        return prepareDeleteDbaasServicePgRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasServicePgAsync(
            final String name) {
        try { 
            return prepareDeleteDbaasServicePgRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasServicePg.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasServicePgRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a new DBaaS integration between two services.
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createDbaasIntegration(
            final DbaasIntegrationRequest1 body) throws ApiException, IOException {
        return prepareCreateDbaasIntegrationRequest(body).execute();
    }

    /**
     * Create a new DBaaS integration between two services.
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createDbaasIntegrationAsync(
            final DbaasIntegrationRequest1 body) {
        try { 
            return prepareCreateDbaasIntegrationRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDbaasIntegration.
     */
    private ApiCall<Operation, ApiException> prepareCreateDbaasIntegrationRequest(
            final DbaasIntegrationRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-integration")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a DBaaS task.
     * @param  service  Required parameter: Example:
     * @param  id  Required parameter: Example:
     * @return    Returns the DbaasTask response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DbaasTask getDbaasTask(
            final String service,
            final UUID id) throws ApiException, IOException {
        return prepareGetDbaasTaskRequest(service, id).execute();
    }

    /**
     * Get a DBaaS task.
     * @param  service  Required parameter: Example:
     * @param  id  Required parameter: Example:
     * @return    Returns the DbaasTask response from the API call
     */
    public CompletableFuture<DbaasTask> getDbaasTaskAsync(
            final String service,
            final UUID id) {
        try { 
            return prepareGetDbaasTaskRequest(service, id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDbaasTask.
     */
    private ApiCall<DbaasTask, ApiException> prepareGetDbaasTaskRequest(
            final String service,
            final UUID id) throws IOException {
        return new ApiCall.Builder<DbaasTask, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-task/{service}/{id}")
                        .templateParam(param -> param.key("service").value(service)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DbaasTask.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation startDbaasRedisMaintenance(
            final String name) throws ApiException, IOException {
        return prepareStartDbaasRedisMaintenanceRequest(name).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> startDbaasRedisMaintenanceAsync(
            final String name) {
        try { 
            return prepareStartDbaasRedisMaintenanceRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for startDbaasRedisMaintenance.
     */
    private ApiCall<Operation, ApiException> prepareStartDbaasRedisMaintenanceRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-redis/{name}/maintenance/start")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  aclId  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteDbaasKafkaTopicAclConfig(
            final String name,
            final String aclId) throws ApiException, IOException {
        return prepareDeleteDbaasKafkaTopicAclConfigRequest(name, aclId).execute();
    }

    /**
     * @param  name  Required parameter: Example:
     * @param  aclId  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteDbaasKafkaTopicAclConfigAsync(
            final String name,
            final String aclId) {
        try { 
            return prepareDeleteDbaasKafkaTopicAclConfigRequest(name, aclId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDbaasKafkaTopicAclConfig.
     */
    private ApiCall<Operation, ApiException> prepareDeleteDbaasKafkaTopicAclConfigRequest(
            final String name,
            final String aclId) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-kafka/{name}/topic/acl-config/{acl-id}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("acl-id").value(aclId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * If no password is provided one will be generated automatically.
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation resetDbaasPostgresUserPassword(
            final String serviceName,
            final String username,
            final DbaasPostgresUserPasswordResetRequest body) throws ApiException, IOException {
        return prepareResetDbaasPostgresUserPasswordRequest(serviceName, username, body).execute();
    }

    /**
     * If no password is provided one will be generated automatically.
     * @param  serviceName  Required parameter: Example:
     * @param  username  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> resetDbaasPostgresUserPasswordAsync(
            final String serviceName,
            final String username,
            final DbaasPostgresUserPasswordResetRequest body) {
        try { 
            return prepareResetDbaasPostgresUserPasswordRequest(serviceName, username, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for resetDbaasPostgresUserPassword.
     */
    private ApiCall<Operation, ApiException> prepareResetDbaasPostgresUserPasswordRequest(
            final String serviceName,
            final String username,
            final DbaasPostgresUserPasswordResetRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/dbaas-postgres/{service-name}/user/{username}/password/reset")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("service-name").value(serviceName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}