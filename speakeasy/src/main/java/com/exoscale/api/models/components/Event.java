/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * Event - A notable Mutation Event which happened on the infrastructure
 */

public class Event {

    /**
     * Operation unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request-id")
    private Optional<? extends String> requestId;

    /**
     * Operation targeted zone
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    private Optional<? extends String> zone;

    /**
     * Client IP address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote-addr")
    private Optional<? extends String> remoteAddr;

    /**
     * Query string parameters (free form map)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("get-params")
    private Optional<? extends GetParams> getParams;

    /**
     * Body parameters (free form map)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body-params")
    private Optional<? extends BodyParams> bodyParams;

    /**
     * Operation HTTP status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends Long> status;

    /**
     * Operation request URI
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    private Optional<? extends String> uri;

    /**
     * Operation processing time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("elapsed-ms")
    private Optional<? extends Long> elapsedMs;

    /**
     * Time at which the event happened, millisecond resolution
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<? extends OffsetDateTime> timestamp;

    /**
     * URI path parameters (free form map)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path-params")
    private Optional<? extends PathParams> pathParams;

    /**
     * Operation handler name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("handler")
    private Optional<? extends String> handler;

    /**
     * Operation message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<? extends String> message;

    public Event(
            @JsonProperty("request-id") Optional<? extends String> requestId,
            @JsonProperty("zone") Optional<? extends String> zone,
            @JsonProperty("remote-addr") Optional<? extends String> remoteAddr,
            @JsonProperty("get-params") Optional<? extends GetParams> getParams,
            @JsonProperty("body-params") Optional<? extends BodyParams> bodyParams,
            @JsonProperty("status") Optional<? extends Long> status,
            @JsonProperty("uri") Optional<? extends String> uri,
            @JsonProperty("elapsed-ms") Optional<? extends Long> elapsedMs,
            @JsonProperty("timestamp") Optional<? extends OffsetDateTime> timestamp,
            @JsonProperty("path-params") Optional<? extends PathParams> pathParams,
            @JsonProperty("handler") Optional<? extends String> handler,
            @JsonProperty("message") Optional<? extends String> message) {
        Utils.checkNotNull(requestId, "requestId");
        Utils.checkNotNull(zone, "zone");
        Utils.checkNotNull(remoteAddr, "remoteAddr");
        Utils.checkNotNull(getParams, "getParams");
        Utils.checkNotNull(bodyParams, "bodyParams");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(uri, "uri");
        Utils.checkNotNull(elapsedMs, "elapsedMs");
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(pathParams, "pathParams");
        Utils.checkNotNull(handler, "handler");
        Utils.checkNotNull(message, "message");
        this.requestId = requestId;
        this.zone = zone;
        this.remoteAddr = remoteAddr;
        this.getParams = getParams;
        this.bodyParams = bodyParams;
        this.status = status;
        this.uri = uri;
        this.elapsedMs = elapsedMs;
        this.timestamp = timestamp;
        this.pathParams = pathParams;
        this.handler = handler;
        this.message = message;
    }

    /**
     * Operation unique identifier
     */
    public Optional<? extends String> requestId() {
        return requestId;
    }

    /**
     * Operation targeted zone
     */
    public Optional<? extends String> zone() {
        return zone;
    }

    /**
     * Client IP address
     */
    public Optional<? extends String> remoteAddr() {
        return remoteAddr;
    }

    /**
     * Query string parameters (free form map)
     */
    public Optional<? extends GetParams> getParams() {
        return getParams;
    }

    /**
     * Body parameters (free form map)
     */
    public Optional<? extends BodyParams> bodyParams() {
        return bodyParams;
    }

    /**
     * Operation HTTP status
     */
    public Optional<? extends Long> status() {
        return status;
    }

    /**
     * Operation request URI
     */
    public Optional<? extends String> uri() {
        return uri;
    }

    /**
     * Operation processing time
     */
    public Optional<? extends Long> elapsedMs() {
        return elapsedMs;
    }

    /**
     * Time at which the event happened, millisecond resolution
     */
    public Optional<? extends OffsetDateTime> timestamp() {
        return timestamp;
    }

    /**
     * URI path parameters (free form map)
     */
    public Optional<? extends PathParams> pathParams() {
        return pathParams;
    }

    /**
     * Operation handler name
     */
    public Optional<? extends String> handler() {
        return handler;
    }

    /**
     * Operation message
     */
    public Optional<? extends String> message() {
        return message;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Operation unique identifier
     */
    public Event withRequestId(String requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = Optional.ofNullable(requestId);
        return this;
    }

    /**
     * Operation unique identifier
     */
    public Event withRequestId(Optional<? extends String> requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = requestId;
        return this;
    }

    /**
     * Operation targeted zone
     */
    public Event withZone(String zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = Optional.ofNullable(zone);
        return this;
    }

    /**
     * Operation targeted zone
     */
    public Event withZone(Optional<? extends String> zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = zone;
        return this;
    }

    /**
     * Client IP address
     */
    public Event withRemoteAddr(String remoteAddr) {
        Utils.checkNotNull(remoteAddr, "remoteAddr");
        this.remoteAddr = Optional.ofNullable(remoteAddr);
        return this;
    }

    /**
     * Client IP address
     */
    public Event withRemoteAddr(Optional<? extends String> remoteAddr) {
        Utils.checkNotNull(remoteAddr, "remoteAddr");
        this.remoteAddr = remoteAddr;
        return this;
    }

    /**
     * Query string parameters (free form map)
     */
    public Event withGetParams(GetParams getParams) {
        Utils.checkNotNull(getParams, "getParams");
        this.getParams = Optional.ofNullable(getParams);
        return this;
    }

    /**
     * Query string parameters (free form map)
     */
    public Event withGetParams(Optional<? extends GetParams> getParams) {
        Utils.checkNotNull(getParams, "getParams");
        this.getParams = getParams;
        return this;
    }

    /**
     * Body parameters (free form map)
     */
    public Event withBodyParams(BodyParams bodyParams) {
        Utils.checkNotNull(bodyParams, "bodyParams");
        this.bodyParams = Optional.ofNullable(bodyParams);
        return this;
    }

    /**
     * Body parameters (free form map)
     */
    public Event withBodyParams(Optional<? extends BodyParams> bodyParams) {
        Utils.checkNotNull(bodyParams, "bodyParams");
        this.bodyParams = bodyParams;
        return this;
    }

    /**
     * Operation HTTP status
     */
    public Event withStatus(long status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Operation HTTP status
     */
    public Event withStatus(Optional<? extends Long> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Operation request URI
     */
    public Event withUri(String uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = Optional.ofNullable(uri);
        return this;
    }

    /**
     * Operation request URI
     */
    public Event withUri(Optional<? extends String> uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = uri;
        return this;
    }

    /**
     * Operation processing time
     */
    public Event withElapsedMs(long elapsedMs) {
        Utils.checkNotNull(elapsedMs, "elapsedMs");
        this.elapsedMs = Optional.ofNullable(elapsedMs);
        return this;
    }

    /**
     * Operation processing time
     */
    public Event withElapsedMs(Optional<? extends Long> elapsedMs) {
        Utils.checkNotNull(elapsedMs, "elapsedMs");
        this.elapsedMs = elapsedMs;
        return this;
    }

    /**
     * Time at which the event happened, millisecond resolution
     */
    public Event withTimestamp(OffsetDateTime timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    /**
     * Time at which the event happened, millisecond resolution
     */
    public Event withTimestamp(Optional<? extends OffsetDateTime> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    /**
     * URI path parameters (free form map)
     */
    public Event withPathParams(PathParams pathParams) {
        Utils.checkNotNull(pathParams, "pathParams");
        this.pathParams = Optional.ofNullable(pathParams);
        return this;
    }

    /**
     * URI path parameters (free form map)
     */
    public Event withPathParams(Optional<? extends PathParams> pathParams) {
        Utils.checkNotNull(pathParams, "pathParams");
        this.pathParams = pathParams;
        return this;
    }

    /**
     * Operation handler name
     */
    public Event withHandler(String handler) {
        Utils.checkNotNull(handler, "handler");
        this.handler = Optional.ofNullable(handler);
        return this;
    }

    /**
     * Operation handler name
     */
    public Event withHandler(Optional<? extends String> handler) {
        Utils.checkNotNull(handler, "handler");
        this.handler = handler;
        return this;
    }

    /**
     * Operation message
     */
    public Event withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    /**
     * Operation message
     */
    public Event withMessage(Optional<? extends String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Event other = (Event) o;
        return 
            java.util.Objects.deepEquals(this.requestId, other.requestId) &&
            java.util.Objects.deepEquals(this.zone, other.zone) &&
            java.util.Objects.deepEquals(this.remoteAddr, other.remoteAddr) &&
            java.util.Objects.deepEquals(this.getParams, other.getParams) &&
            java.util.Objects.deepEquals(this.bodyParams, other.bodyParams) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.uri, other.uri) &&
            java.util.Objects.deepEquals(this.elapsedMs, other.elapsedMs) &&
            java.util.Objects.deepEquals(this.timestamp, other.timestamp) &&
            java.util.Objects.deepEquals(this.pathParams, other.pathParams) &&
            java.util.Objects.deepEquals(this.handler, other.handler) &&
            java.util.Objects.deepEquals(this.message, other.message);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            requestId,
            zone,
            remoteAddr,
            getParams,
            bodyParams,
            status,
            uri,
            elapsedMs,
            timestamp,
            pathParams,
            handler,
            message);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Event.class,
                "requestId", requestId,
                "zone", zone,
                "remoteAddr", remoteAddr,
                "getParams", getParams,
                "bodyParams", bodyParams,
                "status", status,
                "uri", uri,
                "elapsedMs", elapsedMs,
                "timestamp", timestamp,
                "pathParams", pathParams,
                "handler", handler,
                "message", message);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> requestId = Optional.empty();
 
        private Optional<? extends String> zone = Optional.empty();
 
        private Optional<? extends String> remoteAddr = Optional.empty();
 
        private Optional<? extends GetParams> getParams = Optional.empty();
 
        private Optional<? extends BodyParams> bodyParams = Optional.empty();
 
        private Optional<? extends Long> status = Optional.empty();
 
        private Optional<? extends String> uri = Optional.empty();
 
        private Optional<? extends Long> elapsedMs = Optional.empty();
 
        private Optional<? extends OffsetDateTime> timestamp = Optional.empty();
 
        private Optional<? extends PathParams> pathParams = Optional.empty();
 
        private Optional<? extends String> handler = Optional.empty();
 
        private Optional<? extends String> message = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Operation unique identifier
         */
        public Builder requestId(String requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = Optional.ofNullable(requestId);
            return this;
        }

        /**
         * Operation unique identifier
         */
        public Builder requestId(Optional<? extends String> requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = requestId;
            return this;
        }

        /**
         * Operation targeted zone
         */
        public Builder zone(String zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = Optional.ofNullable(zone);
            return this;
        }

        /**
         * Operation targeted zone
         */
        public Builder zone(Optional<? extends String> zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = zone;
            return this;
        }

        /**
         * Client IP address
         */
        public Builder remoteAddr(String remoteAddr) {
            Utils.checkNotNull(remoteAddr, "remoteAddr");
            this.remoteAddr = Optional.ofNullable(remoteAddr);
            return this;
        }

        /**
         * Client IP address
         */
        public Builder remoteAddr(Optional<? extends String> remoteAddr) {
            Utils.checkNotNull(remoteAddr, "remoteAddr");
            this.remoteAddr = remoteAddr;
            return this;
        }

        /**
         * Query string parameters (free form map)
         */
        public Builder getParams(GetParams getParams) {
            Utils.checkNotNull(getParams, "getParams");
            this.getParams = Optional.ofNullable(getParams);
            return this;
        }

        /**
         * Query string parameters (free form map)
         */
        public Builder getParams(Optional<? extends GetParams> getParams) {
            Utils.checkNotNull(getParams, "getParams");
            this.getParams = getParams;
            return this;
        }

        /**
         * Body parameters (free form map)
         */
        public Builder bodyParams(BodyParams bodyParams) {
            Utils.checkNotNull(bodyParams, "bodyParams");
            this.bodyParams = Optional.ofNullable(bodyParams);
            return this;
        }

        /**
         * Body parameters (free form map)
         */
        public Builder bodyParams(Optional<? extends BodyParams> bodyParams) {
            Utils.checkNotNull(bodyParams, "bodyParams");
            this.bodyParams = bodyParams;
            return this;
        }

        /**
         * Operation HTTP status
         */
        public Builder status(long status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Operation HTTP status
         */
        public Builder status(Optional<? extends Long> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Operation request URI
         */
        public Builder uri(String uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = Optional.ofNullable(uri);
            return this;
        }

        /**
         * Operation request URI
         */
        public Builder uri(Optional<? extends String> uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = uri;
            return this;
        }

        /**
         * Operation processing time
         */
        public Builder elapsedMs(long elapsedMs) {
            Utils.checkNotNull(elapsedMs, "elapsedMs");
            this.elapsedMs = Optional.ofNullable(elapsedMs);
            return this;
        }

        /**
         * Operation processing time
         */
        public Builder elapsedMs(Optional<? extends Long> elapsedMs) {
            Utils.checkNotNull(elapsedMs, "elapsedMs");
            this.elapsedMs = elapsedMs;
            return this;
        }

        /**
         * Time at which the event happened, millisecond resolution
         */
        public Builder timestamp(OffsetDateTime timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * Time at which the event happened, millisecond resolution
         */
        public Builder timestamp(Optional<? extends OffsetDateTime> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        /**
         * URI path parameters (free form map)
         */
        public Builder pathParams(PathParams pathParams) {
            Utils.checkNotNull(pathParams, "pathParams");
            this.pathParams = Optional.ofNullable(pathParams);
            return this;
        }

        /**
         * URI path parameters (free form map)
         */
        public Builder pathParams(Optional<? extends PathParams> pathParams) {
            Utils.checkNotNull(pathParams, "pathParams");
            this.pathParams = pathParams;
            return this;
        }

        /**
         * Operation handler name
         */
        public Builder handler(String handler) {
            Utils.checkNotNull(handler, "handler");
            this.handler = Optional.ofNullable(handler);
            return this;
        }

        /**
         * Operation handler name
         */
        public Builder handler(Optional<? extends String> handler) {
            Utils.checkNotNull(handler, "handler");
            this.handler = handler;
            return this;
        }

        /**
         * Operation message
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        /**
         * Operation message
         */
        public Builder message(Optional<? extends String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }
        
        public Event build() {
            return new Event(
                requestId,
                zone,
                remoteAddr,
                getParams,
                bodyParams,
                status,
                uri,
                elapsedMs,
                timestamp,
                pathParams,
                handler,
                message);
        }
    }
}

