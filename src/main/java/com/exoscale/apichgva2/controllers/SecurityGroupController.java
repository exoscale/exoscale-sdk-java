/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.controllers;

import com.exoscale.apichgva2.ApiHelper;
import com.exoscale.apichgva2.Server;
import com.exoscale.apichgva2.exceptions.ApiException;
import com.exoscale.apichgva2.http.request.HttpMethod;
import com.exoscale.apichgva2.models.Operation;
import com.exoscale.apichgva2.models.SecurityGroup;
import com.exoscale.apichgva2.models.SecurityGroupAddSourceRequest;
import com.exoscale.apichgva2.models.SecurityGroupAttachRequest;
import com.exoscale.apichgva2.models.SecurityGroupDetachRequest;
import com.exoscale.apichgva2.models.SecurityGroupRemoveSourceRequest;
import com.exoscale.apichgva2.models.SecurityGroupRequest;
import com.exoscale.apichgva2.models.SecurityGroupResponse;
import com.exoscale.apichgva2.models.SecurityGroupRulesRequest;
import com.exoscale.apichgva2.models.Visibility2Enum;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SecurityGroupController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SecurityGroupController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  ruleId  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteRuleFromSecurityGroup(
            final UUID id,
            final UUID ruleId) throws ApiException, IOException {
        return prepareDeleteRuleFromSecurityGroupRequest(id, ruleId).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  ruleId  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteRuleFromSecurityGroupAsync(
            final UUID id,
            final UUID ruleId) {
        try { 
            return prepareDeleteRuleFromSecurityGroupRequest(id, ruleId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteRuleFromSecurityGroup.
     */
    private ApiCall<Operation, ApiException> prepareDeleteRuleFromSecurityGroupRequest(
            final UUID id,
            final UUID ruleId) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/security-group/{id}/rules/{rule-id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("rule-id").value(ruleId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation createSecurityGroup(
            final SecurityGroupRequest body) throws ApiException, IOException {
        return prepareCreateSecurityGroupRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> createSecurityGroupAsync(
            final SecurityGroupRequest body) {
        try { 
            return prepareCreateSecurityGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createSecurityGroup.
     */
    private ApiCall<Operation, ApiException> prepareCreateSecurityGroupRequest(
            final SecurityGroupRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/security-group")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists security groups. When visibility is set to public, lists public security groups. Public
     * security groups are objects maintained by Exoscale which contain source addresses for
     * relevant services hosted by Exoscale. They can be used a source in ingress rules and as a
     * destination in egress rules.
     * @param  visibility  Optional parameter: Example:
     * @return    Returns the SecurityGroupResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SecurityGroupResponse listSecurityGroups(
            final Visibility2Enum visibility) throws ApiException, IOException {
        return prepareListSecurityGroupsRequest(visibility).execute();
    }

    /**
     * Lists security groups. When visibility is set to public, lists public security groups. Public
     * security groups are objects maintained by Exoscale which contain source addresses for
     * relevant services hosted by Exoscale. They can be used a source in ingress rules and as a
     * destination in egress rules.
     * @param  visibility  Optional parameter: Example:
     * @return    Returns the SecurityGroupResponse response from the API call
     */
    public CompletableFuture<SecurityGroupResponse> listSecurityGroupsAsync(
            final Visibility2Enum visibility) {
        try { 
            return prepareListSecurityGroupsRequest(visibility).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listSecurityGroups.
     */
    private ApiCall<SecurityGroupResponse, ApiException> prepareListSecurityGroupsRequest(
            final Visibility2Enum visibility) throws IOException {
        return new ApiCall.Builder<SecurityGroupResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/security-group")
                        .queryParam(param -> param.key("visibility")
                                .value((visibility != null) ? visibility.value() : null).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SecurityGroupResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the SecurityGroup response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SecurityGroup getSecurityGroup(
            final UUID id) throws ApiException, IOException {
        return prepareGetSecurityGroupRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the SecurityGroup response from the API call
     */
    public CompletableFuture<SecurityGroup> getSecurityGroupAsync(
            final UUID id) {
        try { 
            return prepareGetSecurityGroupRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getSecurityGroup.
     */
    private ApiCall<SecurityGroup, ApiException> prepareGetSecurityGroupRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<SecurityGroup, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/security-group/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SecurityGroup.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation deleteSecurityGroup(
            final UUID id) throws ApiException, IOException {
        return prepareDeleteSecurityGroupRequest(id).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> deleteSecurityGroupAsync(
            final UUID id) {
        try { 
            return prepareDeleteSecurityGroupRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteSecurityGroup.
     */
    private ApiCall<Operation, ApiException> prepareDeleteSecurityGroupRequest(
            final UUID id) throws IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/security-group/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation attachInstanceToSecurityGroup(
            final UUID id,
            final SecurityGroupAttachRequest body) throws ApiException, IOException {
        return prepareAttachInstanceToSecurityGroupRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> attachInstanceToSecurityGroupAsync(
            final UUID id,
            final SecurityGroupAttachRequest body) {
        try { 
            return prepareAttachInstanceToSecurityGroupRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for attachInstanceToSecurityGroup.
     */
    private ApiCall<Operation, ApiException> prepareAttachInstanceToSecurityGroupRequest(
            final UUID id,
            final SecurityGroupAttachRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/security-group/{id}:attach")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation addRuleToSecurityGroup(
            final UUID id,
            final SecurityGroupRulesRequest body) throws ApiException, IOException {
        return prepareAddRuleToSecurityGroupRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> addRuleToSecurityGroupAsync(
            final UUID id,
            final SecurityGroupRulesRequest body) {
        try { 
            return prepareAddRuleToSecurityGroupRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addRuleToSecurityGroup.
     */
    private ApiCall<Operation, ApiException> prepareAddRuleToSecurityGroupRequest(
            final UUID id,
            final SecurityGroupRulesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/security-group/{id}/rules")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation removeExternalSourceFromSecurityGroup(
            final UUID id,
            final SecurityGroupRemoveSourceRequest body) throws ApiException, IOException {
        return prepareRemoveExternalSourceFromSecurityGroupRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> removeExternalSourceFromSecurityGroupAsync(
            final UUID id,
            final SecurityGroupRemoveSourceRequest body) {
        try { 
            return prepareRemoveExternalSourceFromSecurityGroupRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for removeExternalSourceFromSecurityGroup.
     */
    private ApiCall<Operation, ApiException> prepareRemoveExternalSourceFromSecurityGroupRequest(
            final UUID id,
            final SecurityGroupRemoveSourceRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/security-group/{id}:remove-source")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation detachInstanceFromSecurityGroup(
            final UUID id,
            final SecurityGroupDetachRequest body) throws ApiException, IOException {
        return prepareDetachInstanceFromSecurityGroupRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> detachInstanceFromSecurityGroupAsync(
            final UUID id,
            final SecurityGroupDetachRequest body) {
        try { 
            return prepareDetachInstanceFromSecurityGroupRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for detachInstanceFromSecurityGroup.
     */
    private ApiCall<Operation, ApiException> prepareDetachInstanceFromSecurityGroupRequest(
            final UUID id,
            final SecurityGroupDetachRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/security-group/{id}:detach")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Operation addExternalSourceToSecurityGroup(
            final UUID id,
            final SecurityGroupAddSourceRequest body) throws ApiException, IOException {
        return prepareAddExternalSourceToSecurityGroupRequest(id, body).execute();
    }

    /**
     * @param  id  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Operation response from the API call
     */
    public CompletableFuture<Operation> addExternalSourceToSecurityGroupAsync(
            final UUID id,
            final SecurityGroupAddSourceRequest body) {
        try { 
            return prepareAddExternalSourceToSecurityGroupRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addExternalSourceToSecurityGroup.
     */
    private ApiCall<Operation, ApiException> prepareAddExternalSourceToSecurityGroupRequest(
            final UUID id,
            final SecurityGroupAddSourceRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Operation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/security-group/{id}:add-source")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Operation.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}