/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class Rules {

    /**
     * OpenSearch index pattern
     */
    @JsonProperty("index")
    private String index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permission")
    private Optional<? extends EnumOpensearchRulePermission> permission;

    public Rules(
            @JsonProperty("index") String index,
            @JsonProperty("permission") Optional<? extends EnumOpensearchRulePermission> permission) {
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(permission, "permission");
        this.index = index;
        this.permission = permission;
    }

    /**
     * OpenSearch index pattern
     */
    public String index() {
        return index;
    }

    public Optional<? extends EnumOpensearchRulePermission> permission() {
        return permission;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * OpenSearch index pattern
     */
    public Rules withIndex(String index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public Rules withPermission(EnumOpensearchRulePermission permission) {
        Utils.checkNotNull(permission, "permission");
        this.permission = Optional.ofNullable(permission);
        return this;
    }

    public Rules withPermission(Optional<? extends EnumOpensearchRulePermission> permission) {
        Utils.checkNotNull(permission, "permission");
        this.permission = permission;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Rules other = (Rules) o;
        return 
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.permission, other.permission);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            index,
            permission);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Rules.class,
                "index", index,
                "permission", permission);
    }
    
    public final static class Builder {
 
        private String index;
 
        private Optional<? extends EnumOpensearchRulePermission> permission = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * OpenSearch index pattern
         */
        public Builder index(String index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder permission(EnumOpensearchRulePermission permission) {
            Utils.checkNotNull(permission, "permission");
            this.permission = Optional.ofNullable(permission);
            return this;
        }

        public Builder permission(Optional<? extends EnumOpensearchRulePermission> permission) {
            Utils.checkNotNull(permission, "permission");
            this.permission = permission;
            return this;
        }
        
        public Rules build() {
            return new Rules(
                index,
                permission);
        }
    }
}

