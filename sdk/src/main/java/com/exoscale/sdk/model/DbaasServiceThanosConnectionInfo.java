/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.exoscale.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Thanos connection information properties
 */
@JsonPropertyOrder({
  DbaasServiceThanosConnectionInfo.JSON_PROPERTY_QUERY_FRONTEND_URI,
  DbaasServiceThanosConnectionInfo.JSON_PROPERTY_QUERY_URI,
  DbaasServiceThanosConnectionInfo.JSON_PROPERTY_RECEIVER_REMOTE_WRITE_URI,
  DbaasServiceThanosConnectionInfo.JSON_PROPERTY_RULER_URI
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DbaasServiceThanosConnectionInfo {
  public static final String JSON_PROPERTY_QUERY_FRONTEND_URI = "query-frontend-uri";
  private String queryFrontendUri;

  public static final String JSON_PROPERTY_QUERY_URI = "query-uri";
  private String queryUri;

  public static final String JSON_PROPERTY_RECEIVER_REMOTE_WRITE_URI = "receiver-remote-write-uri";
  private String receiverRemoteWriteUri;

  public static final String JSON_PROPERTY_RULER_URI = "ruler-uri";
  private String rulerUri;

  public DbaasServiceThanosConnectionInfo() { 
  }

  public DbaasServiceThanosConnectionInfo queryFrontendUri(String queryFrontendUri) {
    this.queryFrontendUri = queryFrontendUri;
    return this;
  }

   /**
   * Get queryFrontendUri
   * @return queryFrontendUri
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUERY_FRONTEND_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQueryFrontendUri() {
    return queryFrontendUri;
  }


  @JsonProperty(JSON_PROPERTY_QUERY_FRONTEND_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueryFrontendUri(String queryFrontendUri) {
    this.queryFrontendUri = queryFrontendUri;
  }


  public DbaasServiceThanosConnectionInfo queryUri(String queryUri) {
    this.queryUri = queryUri;
    return this;
  }

   /**
   * Get queryUri
   * @return queryUri
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUERY_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQueryUri() {
    return queryUri;
  }


  @JsonProperty(JSON_PROPERTY_QUERY_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueryUri(String queryUri) {
    this.queryUri = queryUri;
  }


  public DbaasServiceThanosConnectionInfo receiverRemoteWriteUri(String receiverRemoteWriteUri) {
    this.receiverRemoteWriteUri = receiverRemoteWriteUri;
    return this;
  }

   /**
   * Get receiverRemoteWriteUri
   * @return receiverRemoteWriteUri
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECEIVER_REMOTE_WRITE_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReceiverRemoteWriteUri() {
    return receiverRemoteWriteUri;
  }


  @JsonProperty(JSON_PROPERTY_RECEIVER_REMOTE_WRITE_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReceiverRemoteWriteUri(String receiverRemoteWriteUri) {
    this.receiverRemoteWriteUri = receiverRemoteWriteUri;
  }


  public DbaasServiceThanosConnectionInfo rulerUri(String rulerUri) {
    this.rulerUri = rulerUri;
    return this;
  }

   /**
   * Get rulerUri
   * @return rulerUri
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RULER_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRulerUri() {
    return rulerUri;
  }


  @JsonProperty(JSON_PROPERTY_RULER_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRulerUri(String rulerUri) {
    this.rulerUri = rulerUri;
  }


  /**
   * Return true if this dbaas_service_thanos_connection_info object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasServiceThanosConnectionInfo dbaasServiceThanosConnectionInfo = (DbaasServiceThanosConnectionInfo) o;
    return Objects.equals(this.queryFrontendUri, dbaasServiceThanosConnectionInfo.queryFrontendUri) &&
        Objects.equals(this.queryUri, dbaasServiceThanosConnectionInfo.queryUri) &&
        Objects.equals(this.receiverRemoteWriteUri, dbaasServiceThanosConnectionInfo.receiverRemoteWriteUri) &&
        Objects.equals(this.rulerUri, dbaasServiceThanosConnectionInfo.rulerUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryFrontendUri, queryUri, receiverRemoteWriteUri, rulerUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasServiceThanosConnectionInfo {\n");
    sb.append("    queryFrontendUri: ").append(toIndentedString(queryFrontendUri)).append("\n");
    sb.append("    queryUri: ").append(toIndentedString(queryUri)).append("\n");
    sb.append("    receiverRemoteWriteUri: ").append(toIndentedString(receiverRemoteWriteUri)).append("\n");
    sb.append("    rulerUri: ").append(toIndentedString(rulerUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `query-frontend-uri` to the URL query string
    if (getQueryFrontendUri() != null) {
      joiner.add(String.format("%squery-frontend-uri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQueryFrontendUri()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `query-uri` to the URL query string
    if (getQueryUri() != null) {
      joiner.add(String.format("%squery-uri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQueryUri()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `receiver-remote-write-uri` to the URL query string
    if (getReceiverRemoteWriteUri() != null) {
      joiner.add(String.format("%sreceiver-remote-write-uri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReceiverRemoteWriteUri()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ruler-uri` to the URL query string
    if (getRulerUri() != null) {
      joiner.add(String.format("%sruler-uri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRulerUri()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

