/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * DbaasServiceUpdate - Update waiting to be installed
 */

public class DbaasServiceUpdate {

    /**
     * Description of the update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Deadline for installing the update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deadline")
    private Optional<? extends OffsetDateTime> deadline;

    /**
     * The earliest time the update will be automatically applied
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start-after")
    private Optional<? extends OffsetDateTime> startAfter;

    /**
     * The time when the update will be automatically applied
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start-at")
    private Optional<? extends OffsetDateTime> startAt;

    public DbaasServiceUpdate(
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("deadline") Optional<? extends OffsetDateTime> deadline,
            @JsonProperty("start-after") Optional<? extends OffsetDateTime> startAfter,
            @JsonProperty("start-at") Optional<? extends OffsetDateTime> startAt) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(deadline, "deadline");
        Utils.checkNotNull(startAfter, "startAfter");
        Utils.checkNotNull(startAt, "startAt");
        this.description = description;
        this.deadline = deadline;
        this.startAfter = startAfter;
        this.startAt = startAt;
    }

    /**
     * Description of the update
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Deadline for installing the update
     */
    public Optional<? extends OffsetDateTime> deadline() {
        return deadline;
    }

    /**
     * The earliest time the update will be automatically applied
     */
    public Optional<? extends OffsetDateTime> startAfter() {
        return startAfter;
    }

    /**
     * The time when the update will be automatically applied
     */
    public Optional<? extends OffsetDateTime> startAt() {
        return startAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Description of the update
     */
    public DbaasServiceUpdate withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Description of the update
     */
    public DbaasServiceUpdate withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Deadline for installing the update
     */
    public DbaasServiceUpdate withDeadline(OffsetDateTime deadline) {
        Utils.checkNotNull(deadline, "deadline");
        this.deadline = Optional.ofNullable(deadline);
        return this;
    }

    /**
     * Deadline for installing the update
     */
    public DbaasServiceUpdate withDeadline(Optional<? extends OffsetDateTime> deadline) {
        Utils.checkNotNull(deadline, "deadline");
        this.deadline = deadline;
        return this;
    }

    /**
     * The earliest time the update will be automatically applied
     */
    public DbaasServiceUpdate withStartAfter(OffsetDateTime startAfter) {
        Utils.checkNotNull(startAfter, "startAfter");
        this.startAfter = Optional.ofNullable(startAfter);
        return this;
    }

    /**
     * The earliest time the update will be automatically applied
     */
    public DbaasServiceUpdate withStartAfter(Optional<? extends OffsetDateTime> startAfter) {
        Utils.checkNotNull(startAfter, "startAfter");
        this.startAfter = startAfter;
        return this;
    }

    /**
     * The time when the update will be automatically applied
     */
    public DbaasServiceUpdate withStartAt(OffsetDateTime startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = Optional.ofNullable(startAt);
        return this;
    }

    /**
     * The time when the update will be automatically applied
     */
    public DbaasServiceUpdate withStartAt(Optional<? extends OffsetDateTime> startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = startAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceUpdate other = (DbaasServiceUpdate) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.deadline, other.deadline) &&
            java.util.Objects.deepEquals(this.startAfter, other.startAfter) &&
            java.util.Objects.deepEquals(this.startAt, other.startAt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            deadline,
            startAfter,
            startAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceUpdate.class,
                "description", description,
                "deadline", deadline,
                "startAfter", startAfter,
                "startAt", startAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends OffsetDateTime> deadline = Optional.empty();
 
        private Optional<? extends OffsetDateTime> startAfter = Optional.empty();
 
        private Optional<? extends OffsetDateTime> startAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Description of the update
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Description of the update
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Deadline for installing the update
         */
        public Builder deadline(OffsetDateTime deadline) {
            Utils.checkNotNull(deadline, "deadline");
            this.deadline = Optional.ofNullable(deadline);
            return this;
        }

        /**
         * Deadline for installing the update
         */
        public Builder deadline(Optional<? extends OffsetDateTime> deadline) {
            Utils.checkNotNull(deadline, "deadline");
            this.deadline = deadline;
            return this;
        }

        /**
         * The earliest time the update will be automatically applied
         */
        public Builder startAfter(OffsetDateTime startAfter) {
            Utils.checkNotNull(startAfter, "startAfter");
            this.startAfter = Optional.ofNullable(startAfter);
            return this;
        }

        /**
         * The earliest time the update will be automatically applied
         */
        public Builder startAfter(Optional<? extends OffsetDateTime> startAfter) {
            Utils.checkNotNull(startAfter, "startAfter");
            this.startAfter = startAfter;
            return this;
        }

        /**
         * The time when the update will be automatically applied
         */
        public Builder startAt(OffsetDateTime startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        /**
         * The time when the update will be automatically applied
         */
        public Builder startAt(Optional<? extends OffsetDateTime> startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = startAt;
            return this;
        }
        
        public DbaasServiceUpdate build() {
            return new DbaasServiceUpdate(
                description,
                deadline,
                startAfter,
                startAt);
        }
    }
}

