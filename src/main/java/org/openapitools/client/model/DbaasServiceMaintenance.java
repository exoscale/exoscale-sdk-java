/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DbaasServiceUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Automatic maintenance settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasServiceMaintenance {
  /**
   * Day of week for installing updates
   */
  @JsonAdapter(DowEnum.Adapter.class)
  public enum DowEnum {
    SATURDAY("saturday"),
    
    TUESDAY("tuesday"),
    
    NEVER("never"),
    
    WEDNESDAY("wednesday"),
    
    SUNDAY("sunday"),
    
    FRIDAY("friday"),
    
    MONDAY("monday"),
    
    THURSDAY("thursday");

    private String value;

    DowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DowEnum fromValue(String value) {
      for (DowEnum b : DowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOW = "dow";
  @SerializedName(SERIALIZED_NAME_DOW)
  private DowEnum dow;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_UPDATES = "updates";
  @SerializedName(SERIALIZED_NAME_UPDATES)
  private List<DbaasServiceUpdate> updates = new ArrayList<>();

  public DbaasServiceMaintenance() {
  }

  public DbaasServiceMaintenance dow(DowEnum dow) {
    this.dow = dow;
    return this;
  }

   /**
   * Day of week for installing updates
   * @return dow
  **/
  @javax.annotation.Nonnull
  public DowEnum getDow() {
    return dow;
  }

  public void setDow(DowEnum dow) {
    this.dow = dow;
  }


  public DbaasServiceMaintenance time(String time) {
    this.time = time;
    return this;
  }

   /**
   * Time for installing updates, UTC
   * @return time
  **/
  @javax.annotation.Nonnull
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public DbaasServiceMaintenance updates(List<DbaasServiceUpdate> updates) {
    this.updates = updates;
    return this;
  }

  public DbaasServiceMaintenance addUpdatesItem(DbaasServiceUpdate updatesItem) {
    if (this.updates == null) {
      this.updates = new ArrayList<>();
    }
    this.updates.add(updatesItem);
    return this;
  }

   /**
   * List of updates waiting to be installed
   * @return updates
  **/
  @javax.annotation.Nonnull
  public List<DbaasServiceUpdate> getUpdates() {
    return updates;
  }

  public void setUpdates(List<DbaasServiceUpdate> updates) {
    this.updates = updates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasServiceMaintenance dbaasServiceMaintenance = (DbaasServiceMaintenance) o;
    return Objects.equals(this.dow, dbaasServiceMaintenance.dow) &&
        Objects.equals(this.time, dbaasServiceMaintenance.time) &&
        Objects.equals(this.updates, dbaasServiceMaintenance.updates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dow, time, updates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasServiceMaintenance {\n");
    sb.append("    dow: ").append(toIndentedString(dow)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    updates: ").append(toIndentedString(updates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dow");
    openapiFields.add("time");
    openapiFields.add("updates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dow");
    openapiRequiredFields.add("time");
    openapiRequiredFields.add("updates");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasServiceMaintenance
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasServiceMaintenance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasServiceMaintenance is not found in the empty JSON string", DbaasServiceMaintenance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasServiceMaintenance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasServiceMaintenance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DbaasServiceMaintenance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dow").toString()));
      }
      // validate the required field `dow`
      DowEnum.validateJsonElement(jsonObj.get("dow"));
      if (!jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("updates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `updates` to be an array in the JSON string but got `%s`", jsonObj.get("updates").toString()));
      }

      JsonArray jsonArrayupdates = jsonObj.getAsJsonArray("updates");
      // validate the required field `updates` (array)
      for (int i = 0; i < jsonArrayupdates.size(); i++) {
        DbaasServiceUpdate.validateJsonElement(jsonArrayupdates.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasServiceMaintenance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasServiceMaintenance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasServiceMaintenance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasServiceMaintenance.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasServiceMaintenance>() {
           @Override
           public void write(JsonWriter out, DbaasServiceMaintenance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasServiceMaintenance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasServiceMaintenance given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasServiceMaintenance
  * @throws IOException if the JSON string is invalid with respect to DbaasServiceMaintenance
  */
  public static DbaasServiceMaintenance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasServiceMaintenance.class);
  }

 /**
  * Convert an instance of DbaasServiceMaintenance to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

