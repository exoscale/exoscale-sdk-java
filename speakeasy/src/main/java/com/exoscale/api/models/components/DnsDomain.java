/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * DnsDomain - DNS domain
 */

public class DnsDomain {

    /**
     * DNS domain ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * DNS domain creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * DNS domain unicode name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unicode-name")
    private Optional<? extends String> unicodeName;

    public DnsDomain(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("unicode-name") Optional<? extends String> unicodeName) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(unicodeName, "unicodeName");
        this.id = id;
        this.createdAt = createdAt;
        this.unicodeName = unicodeName;
    }

    /**
     * DNS domain ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * DNS domain creation date
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * DNS domain unicode name
     */
    public Optional<? extends String> unicodeName() {
        return unicodeName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * DNS domain ID
     */
    public DnsDomain withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * DNS domain ID
     */
    public DnsDomain withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * DNS domain creation date
     */
    public DnsDomain withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * DNS domain creation date
     */
    public DnsDomain withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * DNS domain unicode name
     */
    public DnsDomain withUnicodeName(String unicodeName) {
        Utils.checkNotNull(unicodeName, "unicodeName");
        this.unicodeName = Optional.ofNullable(unicodeName);
        return this;
    }

    /**
     * DNS domain unicode name
     */
    public DnsDomain withUnicodeName(Optional<? extends String> unicodeName) {
        Utils.checkNotNull(unicodeName, "unicodeName");
        this.unicodeName = unicodeName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DnsDomain other = (DnsDomain) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.unicodeName, other.unicodeName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            createdAt,
            unicodeName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DnsDomain.class,
                "id", id,
                "createdAt", createdAt,
                "unicodeName", unicodeName);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends String> unicodeName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * DNS domain ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * DNS domain ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * DNS domain creation date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * DNS domain creation date
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * DNS domain unicode name
         */
        public Builder unicodeName(String unicodeName) {
            Utils.checkNotNull(unicodeName, "unicodeName");
            this.unicodeName = Optional.ofNullable(unicodeName);
            return this;
        }

        /**
         * DNS domain unicode name
         */
        public Builder unicodeName(Optional<? extends String> unicodeName) {
            Utils.checkNotNull(unicodeName, "unicodeName");
            this.unicodeName = unicodeName;
            return this;
        }
        
        public DnsDomain build() {
            return new DnsDomain(
                id,
                createdAt,
                unicodeName);
        }
    }
}

