/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Zone - Zone
 */

public class Zone {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends ZoneName> name;

    /**
     * Zone API endpoint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api-endpoint")
    private Optional<? extends String> apiEndpoint;

    /**
     * Zone SOS endpoint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sos-endpoint")
    private Optional<? extends String> sosEndpoint;

    public Zone(
            @JsonProperty("name") Optional<? extends ZoneName> name,
            @JsonProperty("api-endpoint") Optional<? extends String> apiEndpoint,
            @JsonProperty("sos-endpoint") Optional<? extends String> sosEndpoint) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(apiEndpoint, "apiEndpoint");
        Utils.checkNotNull(sosEndpoint, "sosEndpoint");
        this.name = name;
        this.apiEndpoint = apiEndpoint;
        this.sosEndpoint = sosEndpoint;
    }

    public Optional<? extends ZoneName> name() {
        return name;
    }

    /**
     * Zone API endpoint
     */
    public Optional<? extends String> apiEndpoint() {
        return apiEndpoint;
    }

    /**
     * Zone SOS endpoint
     */
    public Optional<? extends String> sosEndpoint() {
        return sosEndpoint;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Zone withName(ZoneName name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public Zone withName(Optional<? extends ZoneName> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Zone API endpoint
     */
    public Zone withApiEndpoint(String apiEndpoint) {
        Utils.checkNotNull(apiEndpoint, "apiEndpoint");
        this.apiEndpoint = Optional.ofNullable(apiEndpoint);
        return this;
    }

    /**
     * Zone API endpoint
     */
    public Zone withApiEndpoint(Optional<? extends String> apiEndpoint) {
        Utils.checkNotNull(apiEndpoint, "apiEndpoint");
        this.apiEndpoint = apiEndpoint;
        return this;
    }

    /**
     * Zone SOS endpoint
     */
    public Zone withSosEndpoint(String sosEndpoint) {
        Utils.checkNotNull(sosEndpoint, "sosEndpoint");
        this.sosEndpoint = Optional.ofNullable(sosEndpoint);
        return this;
    }

    /**
     * Zone SOS endpoint
     */
    public Zone withSosEndpoint(Optional<? extends String> sosEndpoint) {
        Utils.checkNotNull(sosEndpoint, "sosEndpoint");
        this.sosEndpoint = sosEndpoint;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Zone other = (Zone) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.apiEndpoint, other.apiEndpoint) &&
            java.util.Objects.deepEquals(this.sosEndpoint, other.sosEndpoint);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            apiEndpoint,
            sosEndpoint);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Zone.class,
                "name", name,
                "apiEndpoint", apiEndpoint,
                "sosEndpoint", sosEndpoint);
    }
    
    public final static class Builder {
 
        private Optional<? extends ZoneName> name = Optional.empty();
 
        private Optional<? extends String> apiEndpoint = Optional.empty();
 
        private Optional<? extends String> sosEndpoint = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(ZoneName name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends ZoneName> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Zone API endpoint
         */
        public Builder apiEndpoint(String apiEndpoint) {
            Utils.checkNotNull(apiEndpoint, "apiEndpoint");
            this.apiEndpoint = Optional.ofNullable(apiEndpoint);
            return this;
        }

        /**
         * Zone API endpoint
         */
        public Builder apiEndpoint(Optional<? extends String> apiEndpoint) {
            Utils.checkNotNull(apiEndpoint, "apiEndpoint");
            this.apiEndpoint = apiEndpoint;
            return this;
        }

        /**
         * Zone SOS endpoint
         */
        public Builder sosEndpoint(String sosEndpoint) {
            Utils.checkNotNull(sosEndpoint, "sosEndpoint");
            this.sosEndpoint = Optional.ofNullable(sosEndpoint);
            return this;
        }

        /**
         * Zone SOS endpoint
         */
        public Builder sosEndpoint(Optional<? extends String> sosEndpoint) {
            Utils.checkNotNull(sosEndpoint, "sosEndpoint");
            this.sosEndpoint = sosEndpoint;
            return this;
        }
        
        public Zone build() {
            return new Zone(
                name,
                apiEndpoint,
                sosEndpoint);
        }
    }
}

