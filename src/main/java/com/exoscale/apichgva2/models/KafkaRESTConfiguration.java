/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for KafkaRESTConfiguration type.
 */
public class KafkaRESTConfiguration {
    private ProducerAcksEnum producerAcks;
    private ProducerCompressionTypeEnum producerCompressionType;
    private Integer producerLingerMs;
    private Integer producerMaxRequestSize;
    private Boolean consumerEnableAutoCommit;
    private Integer consumerRequestMaxBytes;
    private ConsumerRequestTimeoutMsEnum consumerRequestTimeoutMs;
    private Integer simpleconsumerPoolSizeMax;

    /**
     * Default constructor.
     */
    public KafkaRESTConfiguration() {
        producerAcks = ProducerAcksEnum.ENUM_11;
        producerLingerMs = 0;
        producerMaxRequestSize = 1048576;
        consumerEnableAutoCommit = true;
        consumerRequestMaxBytes = 67108864;
        consumerRequestTimeoutMs = ConsumerRequestTimeoutMsEnum.ENUM_1000;
        simpleconsumerPoolSizeMax = 25;
    }

    /**
     * Initialization constructor.
     * @param  producerAcks  ProducerAcksEnum value for producerAcks.
     * @param  producerCompressionType  ProducerCompressionTypeEnum value for
     *         producerCompressionType.
     * @param  producerLingerMs  Integer value for producerLingerMs.
     * @param  producerMaxRequestSize  Integer value for producerMaxRequestSize.
     * @param  consumerEnableAutoCommit  Boolean value for consumerEnableAutoCommit.
     * @param  consumerRequestMaxBytes  Integer value for consumerRequestMaxBytes.
     * @param  consumerRequestTimeoutMs  ConsumerRequestTimeoutMsEnum value for
     *         consumerRequestTimeoutMs.
     * @param  simpleconsumerPoolSizeMax  Integer value for simpleconsumerPoolSizeMax.
     */
    public KafkaRESTConfiguration(
            ProducerAcksEnum producerAcks,
            ProducerCompressionTypeEnum producerCompressionType,
            Integer producerLingerMs,
            Integer producerMaxRequestSize,
            Boolean consumerEnableAutoCommit,
            Integer consumerRequestMaxBytes,
            ConsumerRequestTimeoutMsEnum consumerRequestTimeoutMs,
            Integer simpleconsumerPoolSizeMax) {
        this.producerAcks = producerAcks;
        this.producerCompressionType = producerCompressionType;
        this.producerLingerMs = producerLingerMs;
        this.producerMaxRequestSize = producerMaxRequestSize;
        this.consumerEnableAutoCommit = consumerEnableAutoCommit;
        this.consumerRequestMaxBytes = consumerRequestMaxBytes;
        this.consumerRequestTimeoutMs = consumerRequestTimeoutMs;
        this.simpleconsumerPoolSizeMax = simpleconsumerPoolSizeMax;
    }

    /**
     * Getter for ProducerAcks.
     * The number of acknowledgments the producer requires the leader to have received before
     * considering a request complete. If set to 'all' or '-1', the leader will wait for the full
     * set of in-sync replicas to acknowledge the record.
     * @return Returns the ProducerAcksEnum
     */
    @JsonGetter("producer_acks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ProducerAcksEnum getProducerAcks() {
        return producerAcks;
    }

    /**
     * Setter for ProducerAcks.
     * The number of acknowledgments the producer requires the leader to have received before
     * considering a request complete. If set to 'all' or '-1', the leader will wait for the full
     * set of in-sync replicas to acknowledge the record.
     * @param producerAcks Value for ProducerAcksEnum
     */
    @JsonSetter("producer_acks")
    public void setProducerAcks(ProducerAcksEnum producerAcks) {
        this.producerAcks = producerAcks;
    }

    /**
     * Getter for ProducerCompressionType.
     * Specify the default compression type for producers. This configuration accepts the standard
     * compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is
     * the default and equivalent to no compression.
     * @return Returns the ProducerCompressionTypeEnum
     */
    @JsonGetter("producer_compression_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ProducerCompressionTypeEnum getProducerCompressionType() {
        return producerCompressionType;
    }

    /**
     * Setter for ProducerCompressionType.
     * Specify the default compression type for producers. This configuration accepts the standard
     * compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is
     * the default and equivalent to no compression.
     * @param producerCompressionType Value for ProducerCompressionTypeEnum
     */
    @JsonSetter("producer_compression_type")
    public void setProducerCompressionType(ProducerCompressionTypeEnum producerCompressionType) {
        this.producerCompressionType = producerCompressionType;
    }

    /**
     * Getter for ProducerLingerMs.
     * Wait for up to the given delay to allow batching records together
     * @return Returns the Integer
     */
    @JsonGetter("producer_linger_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getProducerLingerMs() {
        return producerLingerMs;
    }

    /**
     * Setter for ProducerLingerMs.
     * Wait for up to the given delay to allow batching records together
     * @param producerLingerMs Value for Integer
     */
    @JsonSetter("producer_linger_ms")
    public void setProducerLingerMs(Integer producerLingerMs) {
        this.producerLingerMs = producerLingerMs;
    }

    /**
     * Getter for ProducerMaxRequestSize.
     * The maximum size of a request in bytes. Note that Kafka broker can also cap the record batch
     * size.
     * @return Returns the Integer
     */
    @JsonGetter("producer_max_request_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getProducerMaxRequestSize() {
        return producerMaxRequestSize;
    }

    /**
     * Setter for ProducerMaxRequestSize.
     * The maximum size of a request in bytes. Note that Kafka broker can also cap the record batch
     * size.
     * @param producerMaxRequestSize Value for Integer
     */
    @JsonSetter("producer_max_request_size")
    public void setProducerMaxRequestSize(Integer producerMaxRequestSize) {
        this.producerMaxRequestSize = producerMaxRequestSize;
    }

    /**
     * Getter for ConsumerEnableAutoCommit.
     * If true the consumer's offset will be periodically committed to Kafka in the background
     * @return Returns the Boolean
     */
    @JsonGetter("consumer_enable_auto_commit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getConsumerEnableAutoCommit() {
        return consumerEnableAutoCommit;
    }

    /**
     * Setter for ConsumerEnableAutoCommit.
     * If true the consumer's offset will be periodically committed to Kafka in the background
     * @param consumerEnableAutoCommit Value for Boolean
     */
    @JsonSetter("consumer_enable_auto_commit")
    public void setConsumerEnableAutoCommit(Boolean consumerEnableAutoCommit) {
        this.consumerEnableAutoCommit = consumerEnableAutoCommit;
    }

    /**
     * Getter for ConsumerRequestMaxBytes.
     * Maximum number of bytes in unencoded message keys and values by a single request
     * @return Returns the Integer
     */
    @JsonGetter("consumer_request_max_bytes")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getConsumerRequestMaxBytes() {
        return consumerRequestMaxBytes;
    }

    /**
     * Setter for ConsumerRequestMaxBytes.
     * Maximum number of bytes in unencoded message keys and values by a single request
     * @param consumerRequestMaxBytes Value for Integer
     */
    @JsonSetter("consumer_request_max_bytes")
    public void setConsumerRequestMaxBytes(Integer consumerRequestMaxBytes) {
        this.consumerRequestMaxBytes = consumerRequestMaxBytes;
    }

    /**
     * Getter for ConsumerRequestTimeoutMs.
     * The maximum total time to wait for messages for a request if the maximum number of messages
     * has not yet been reached
     * @return Returns the ConsumerRequestTimeoutMsEnum
     */
    @JsonGetter("consumer_request_timeout_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ConsumerRequestTimeoutMsEnum getConsumerRequestTimeoutMs() {
        return consumerRequestTimeoutMs;
    }

    /**
     * Setter for ConsumerRequestTimeoutMs.
     * The maximum total time to wait for messages for a request if the maximum number of messages
     * has not yet been reached
     * @param consumerRequestTimeoutMs Value for ConsumerRequestTimeoutMsEnum
     */
    @JsonSetter("consumer_request_timeout_ms")
    public void setConsumerRequestTimeoutMs(ConsumerRequestTimeoutMsEnum consumerRequestTimeoutMs) {
        this.consumerRequestTimeoutMs = consumerRequestTimeoutMs;
    }

    /**
     * Getter for SimpleconsumerPoolSizeMax.
     * Maximum number of SimpleConsumers that can be instantiated per broker
     * @return Returns the Integer
     */
    @JsonGetter("simpleconsumer_pool_size_max")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSimpleconsumerPoolSizeMax() {
        return simpleconsumerPoolSizeMax;
    }

    /**
     * Setter for SimpleconsumerPoolSizeMax.
     * Maximum number of SimpleConsumers that can be instantiated per broker
     * @param simpleconsumerPoolSizeMax Value for Integer
     */
    @JsonSetter("simpleconsumer_pool_size_max")
    public void setSimpleconsumerPoolSizeMax(Integer simpleconsumerPoolSizeMax) {
        this.simpleconsumerPoolSizeMax = simpleconsumerPoolSizeMax;
    }

    /**
     * Converts this KafkaRESTConfiguration into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "KafkaRESTConfiguration [" + "producerAcks=" + producerAcks
                + ", producerCompressionType=" + producerCompressionType + ", producerLingerMs="
                + producerLingerMs + ", producerMaxRequestSize=" + producerMaxRequestSize
                + ", consumerEnableAutoCommit=" + consumerEnableAutoCommit
                + ", consumerRequestMaxBytes=" + consumerRequestMaxBytes
                + ", consumerRequestTimeoutMs=" + consumerRequestTimeoutMs
                + ", simpleconsumerPoolSizeMax=" + simpleconsumerPoolSizeMax + "]";
    }

    /**
     * Builds a new {@link KafkaRESTConfiguration.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link KafkaRESTConfiguration.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .producerAcks(getProducerAcks())
                .producerCompressionType(getProducerCompressionType())
                .producerLingerMs(getProducerLingerMs())
                .producerMaxRequestSize(getProducerMaxRequestSize())
                .consumerEnableAutoCommit(getConsumerEnableAutoCommit())
                .consumerRequestMaxBytes(getConsumerRequestMaxBytes())
                .consumerRequestTimeoutMs(getConsumerRequestTimeoutMs())
                .simpleconsumerPoolSizeMax(getSimpleconsumerPoolSizeMax());
        return builder;
    }

    /**
     * Class to build instances of {@link KafkaRESTConfiguration}.
     */
    public static class Builder {
        private ProducerAcksEnum producerAcks = ProducerAcksEnum.ENUM_11;
        private ProducerCompressionTypeEnum producerCompressionType;
        private Integer producerLingerMs = 0;
        private Integer producerMaxRequestSize = 1048576;
        private Boolean consumerEnableAutoCommit = true;
        private Integer consumerRequestMaxBytes = 67108864;
        private ConsumerRequestTimeoutMsEnum consumerRequestTimeoutMs =
                ConsumerRequestTimeoutMsEnum.ENUM_1000;
        private Integer simpleconsumerPoolSizeMax = 25;



        /**
         * Setter for producerAcks.
         * @param  producerAcks  ProducerAcksEnum value for producerAcks.
         * @return Builder
         */
        public Builder producerAcks(ProducerAcksEnum producerAcks) {
            this.producerAcks = producerAcks;
            return this;
        }

        /**
         * Setter for producerCompressionType.
         * @param  producerCompressionType  ProducerCompressionTypeEnum value for
         *         producerCompressionType.
         * @return Builder
         */
        public Builder producerCompressionType(
                ProducerCompressionTypeEnum producerCompressionType) {
            this.producerCompressionType = producerCompressionType;
            return this;
        }

        /**
         * Setter for producerLingerMs.
         * @param  producerLingerMs  Integer value for producerLingerMs.
         * @return Builder
         */
        public Builder producerLingerMs(Integer producerLingerMs) {
            this.producerLingerMs = producerLingerMs;
            return this;
        }

        /**
         * Setter for producerMaxRequestSize.
         * @param  producerMaxRequestSize  Integer value for producerMaxRequestSize.
         * @return Builder
         */
        public Builder producerMaxRequestSize(Integer producerMaxRequestSize) {
            this.producerMaxRequestSize = producerMaxRequestSize;
            return this;
        }

        /**
         * Setter for consumerEnableAutoCommit.
         * @param  consumerEnableAutoCommit  Boolean value for consumerEnableAutoCommit.
         * @return Builder
         */
        public Builder consumerEnableAutoCommit(Boolean consumerEnableAutoCommit) {
            this.consumerEnableAutoCommit = consumerEnableAutoCommit;
            return this;
        }

        /**
         * Setter for consumerRequestMaxBytes.
         * @param  consumerRequestMaxBytes  Integer value for consumerRequestMaxBytes.
         * @return Builder
         */
        public Builder consumerRequestMaxBytes(Integer consumerRequestMaxBytes) {
            this.consumerRequestMaxBytes = consumerRequestMaxBytes;
            return this;
        }

        /**
         * Setter for consumerRequestTimeoutMs.
         * @param  consumerRequestTimeoutMs  ConsumerRequestTimeoutMsEnum value for
         *         consumerRequestTimeoutMs.
         * @return Builder
         */
        public Builder consumerRequestTimeoutMs(
                ConsumerRequestTimeoutMsEnum consumerRequestTimeoutMs) {
            this.consumerRequestTimeoutMs = consumerRequestTimeoutMs;
            return this;
        }

        /**
         * Setter for simpleconsumerPoolSizeMax.
         * @param  simpleconsumerPoolSizeMax  Integer value for simpleconsumerPoolSizeMax.
         * @return Builder
         */
        public Builder simpleconsumerPoolSizeMax(Integer simpleconsumerPoolSizeMax) {
            this.simpleconsumerPoolSizeMax = simpleconsumerPoolSizeMax;
            return this;
        }

        /**
         * Builds a new {@link KafkaRESTConfiguration} object using the set fields.
         * @return {@link KafkaRESTConfiguration}
         */
        public KafkaRESTConfiguration build() {
            return new KafkaRESTConfiguration(producerAcks, producerCompressionType,
                    producerLingerMs, producerMaxRequestSize, consumerEnableAutoCommit,
                    consumerRequestMaxBytes, consumerRequestTimeoutMs, simpleconsumerPoolSizeMax);
        }
    }
}
