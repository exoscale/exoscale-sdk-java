/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnumPgPoolMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DbaasServicePgConnectionPoolsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class DbaasServicePgConnectionPoolsInner {
  public static final String SERIALIZED_NAME_CONNECTION_URI = "connection-uri";
  @SerializedName(SERIALIZED_NAME_CONNECTION_URI)
  private String connectionUri;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private EnumPgPoolMode mode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public DbaasServicePgConnectionPoolsInner() {
  }

  public DbaasServicePgConnectionPoolsInner connectionUri(String connectionUri) {
    this.connectionUri = connectionUri;
    return this;
  }

   /**
   * Connection URI for the DB pool
   * @return connectionUri
  **/
  @javax.annotation.Nonnull
  public String getConnectionUri() {
    return connectionUri;
  }

  public void setConnectionUri(String connectionUri) {
    this.connectionUri = connectionUri;
  }


  public DbaasServicePgConnectionPoolsInner database(String database) {
    this.database = database;
    return this;
  }

   /**
   * Get database
   * @return database
  **/
  @javax.annotation.Nonnull
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public DbaasServicePgConnectionPoolsInner mode(EnumPgPoolMode mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @javax.annotation.Nonnull
  public EnumPgPoolMode getMode() {
    return mode;
  }

  public void setMode(EnumPgPoolMode mode) {
    this.mode = mode;
  }


  public DbaasServicePgConnectionPoolsInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DbaasServicePgConnectionPoolsInner size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * minimum: 1
   * maximum: 10000
   * @return size
  **/
  @javax.annotation.Nonnull
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public DbaasServicePgConnectionPoolsInner username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasServicePgConnectionPoolsInner dbaasServicePgConnectionPoolsInner = (DbaasServicePgConnectionPoolsInner) o;
    return Objects.equals(this.connectionUri, dbaasServicePgConnectionPoolsInner.connectionUri) &&
        Objects.equals(this.database, dbaasServicePgConnectionPoolsInner.database) &&
        Objects.equals(this.mode, dbaasServicePgConnectionPoolsInner.mode) &&
        Objects.equals(this.name, dbaasServicePgConnectionPoolsInner.name) &&
        Objects.equals(this.size, dbaasServicePgConnectionPoolsInner.size) &&
        Objects.equals(this.username, dbaasServicePgConnectionPoolsInner.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionUri, database, mode, name, size, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasServicePgConnectionPoolsInner {\n");
    sb.append("    connectionUri: ").append(toIndentedString(connectionUri)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connection-uri");
    openapiFields.add("database");
    openapiFields.add("mode");
    openapiFields.add("name");
    openapiFields.add("size");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connection-uri");
    openapiRequiredFields.add("database");
    openapiRequiredFields.add("mode");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("username");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DbaasServicePgConnectionPoolsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbaasServicePgConnectionPoolsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbaasServicePgConnectionPoolsInner is not found in the empty JSON string", DbaasServicePgConnectionPoolsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbaasServicePgConnectionPoolsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbaasServicePgConnectionPoolsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DbaasServicePgConnectionPoolsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connection-uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection-uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection-uri").toString()));
      }
      if (!jsonObj.get("database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database").toString()));
      }
      // validate the required field `mode`
      EnumPgPoolMode.validateJsonElement(jsonObj.get("mode"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbaasServicePgConnectionPoolsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbaasServicePgConnectionPoolsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbaasServicePgConnectionPoolsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbaasServicePgConnectionPoolsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DbaasServicePgConnectionPoolsInner>() {
           @Override
           public void write(JsonWriter out, DbaasServicePgConnectionPoolsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbaasServicePgConnectionPoolsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DbaasServicePgConnectionPoolsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DbaasServicePgConnectionPoolsInner
  * @throws IOException if the JSON string is invalid with respect to DbaasServicePgConnectionPoolsInner
  */
  public static DbaasServicePgConnectionPoolsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbaasServicePgConnectionPoolsInner.class);
  }

 /**
  * Convert an instance of DbaasServicePgConnectionPoolsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

