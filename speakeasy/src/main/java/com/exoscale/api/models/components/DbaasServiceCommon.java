/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class DbaasServiceCommon {

    /**
     * Service last update timestamp (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated-at")
    private Optional<? extends OffsetDateTime> updatedAt;

    /**
     * Number of service nodes in the active plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-count")
    private Optional<? extends Long> nodeCount;

    /**
     * Number of CPUs for each node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-cpu-count")
    private Optional<? extends Long> nodeCpuCount;

    /**
     * Service integrations
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrations")
    private Optional<? extends java.util.List<DbaasIntegration>> integrations;

    /**
     * The zone where the service is running
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    private Optional<? extends String> zone;

    @JsonProperty("name")
    private String name;

    @JsonProperty("type")
    private String type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends EnumServiceState> state;

    /**
     * Service is protected against termination and powering off
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination-protection")
    private Optional<? extends Boolean> terminationProtection;

    /**
     * Service notifications
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifications")
    private Optional<? extends java.util.List<DbaasServiceNotification>> notifications;

    /**
     * TODO UNIT disk space for data storage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disk-size")
    private Optional<? extends Long> diskSize;

    /**
     * TODO UNIT of memory for each node
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node-memory")
    private Optional<? extends Long> nodeMemory;

    /**
     * Service creation timestamp (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created-at")
    private Optional<? extends OffsetDateTime> createdAt;

    /**
     * Subscription plan
     */
    @JsonProperty("plan")
    private String plan;

    public DbaasServiceCommon(
            @JsonProperty("updated-at") Optional<? extends OffsetDateTime> updatedAt,
            @JsonProperty("node-count") Optional<? extends Long> nodeCount,
            @JsonProperty("node-cpu-count") Optional<? extends Long> nodeCpuCount,
            @JsonProperty("integrations") Optional<? extends java.util.List<DbaasIntegration>> integrations,
            @JsonProperty("zone") Optional<? extends String> zone,
            @JsonProperty("name") String name,
            @JsonProperty("type") String type,
            @JsonProperty("state") Optional<? extends EnumServiceState> state,
            @JsonProperty("termination-protection") Optional<? extends Boolean> terminationProtection,
            @JsonProperty("notifications") Optional<? extends java.util.List<DbaasServiceNotification>> notifications,
            @JsonProperty("disk-size") Optional<? extends Long> diskSize,
            @JsonProperty("node-memory") Optional<? extends Long> nodeMemory,
            @JsonProperty("created-at") Optional<? extends OffsetDateTime> createdAt,
            @JsonProperty("plan") String plan) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(nodeCount, "nodeCount");
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        Utils.checkNotNull(integrations, "integrations");
        Utils.checkNotNull(zone, "zone");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        Utils.checkNotNull(notifications, "notifications");
        Utils.checkNotNull(diskSize, "diskSize");
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(plan, "plan");
        this.updatedAt = updatedAt;
        this.nodeCount = nodeCount;
        this.nodeCpuCount = nodeCpuCount;
        this.integrations = integrations;
        this.zone = zone;
        this.name = name;
        this.type = type;
        this.state = state;
        this.terminationProtection = terminationProtection;
        this.notifications = notifications;
        this.diskSize = diskSize;
        this.nodeMemory = nodeMemory;
        this.createdAt = createdAt;
        this.plan = plan;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public Optional<? extends OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * Number of service nodes in the active plan
     */
    public Optional<? extends Long> nodeCount() {
        return nodeCount;
    }

    /**
     * Number of CPUs for each node
     */
    public Optional<? extends Long> nodeCpuCount() {
        return nodeCpuCount;
    }

    /**
     * Service integrations
     */
    public Optional<? extends java.util.List<DbaasIntegration>> integrations() {
        return integrations;
    }

    /**
     * The zone where the service is running
     */
    public Optional<? extends String> zone() {
        return zone;
    }

    public String name() {
        return name;
    }

    public String type() {
        return type;
    }

    public Optional<? extends EnumServiceState> state() {
        return state;
    }

    /**
     * Service is protected against termination and powering off
     */
    public Optional<? extends Boolean> terminationProtection() {
        return terminationProtection;
    }

    /**
     * Service notifications
     */
    public Optional<? extends java.util.List<DbaasServiceNotification>> notifications() {
        return notifications;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public Optional<? extends Long> diskSize() {
        return diskSize;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public Optional<? extends Long> nodeMemory() {
        return nodeMemory;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public Optional<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Subscription plan
     */
    public String plan() {
        return plan;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public DbaasServiceCommon withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Service last update timestamp (ISO 8601)
     */
    public DbaasServiceCommon withUpdatedAt(Optional<? extends OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Number of service nodes in the active plan
     */
    public DbaasServiceCommon withNodeCount(long nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = Optional.ofNullable(nodeCount);
        return this;
    }

    /**
     * Number of service nodes in the active plan
     */
    public DbaasServiceCommon withNodeCount(Optional<? extends Long> nodeCount) {
        Utils.checkNotNull(nodeCount, "nodeCount");
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * Number of CPUs for each node
     */
    public DbaasServiceCommon withNodeCpuCount(long nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
        return this;
    }

    /**
     * Number of CPUs for each node
     */
    public DbaasServiceCommon withNodeCpuCount(Optional<? extends Long> nodeCpuCount) {
        Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
        this.nodeCpuCount = nodeCpuCount;
        return this;
    }

    /**
     * Service integrations
     */
    public DbaasServiceCommon withIntegrations(java.util.List<DbaasIntegration> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = Optional.ofNullable(integrations);
        return this;
    }

    /**
     * Service integrations
     */
    public DbaasServiceCommon withIntegrations(Optional<? extends java.util.List<DbaasIntegration>> integrations) {
        Utils.checkNotNull(integrations, "integrations");
        this.integrations = integrations;
        return this;
    }

    /**
     * The zone where the service is running
     */
    public DbaasServiceCommon withZone(String zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = Optional.ofNullable(zone);
        return this;
    }

    /**
     * The zone where the service is running
     */
    public DbaasServiceCommon withZone(Optional<? extends String> zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = zone;
        return this;
    }

    public DbaasServiceCommon withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public DbaasServiceCommon withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public DbaasServiceCommon withState(EnumServiceState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public DbaasServiceCommon withState(Optional<? extends EnumServiceState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public DbaasServiceCommon withTerminationProtection(boolean terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = Optional.ofNullable(terminationProtection);
        return this;
    }

    /**
     * Service is protected against termination and powering off
     */
    public DbaasServiceCommon withTerminationProtection(Optional<? extends Boolean> terminationProtection) {
        Utils.checkNotNull(terminationProtection, "terminationProtection");
        this.terminationProtection = terminationProtection;
        return this;
    }

    /**
     * Service notifications
     */
    public DbaasServiceCommon withNotifications(java.util.List<DbaasServiceNotification> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = Optional.ofNullable(notifications);
        return this;
    }

    /**
     * Service notifications
     */
    public DbaasServiceCommon withNotifications(Optional<? extends java.util.List<DbaasServiceNotification>> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = notifications;
        return this;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public DbaasServiceCommon withDiskSize(long diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = Optional.ofNullable(diskSize);
        return this;
    }

    /**
     * TODO UNIT disk space for data storage
     */
    public DbaasServiceCommon withDiskSize(Optional<? extends Long> diskSize) {
        Utils.checkNotNull(diskSize, "diskSize");
        this.diskSize = diskSize;
        return this;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public DbaasServiceCommon withNodeMemory(long nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = Optional.ofNullable(nodeMemory);
        return this;
    }

    /**
     * TODO UNIT of memory for each node
     */
    public DbaasServiceCommon withNodeMemory(Optional<? extends Long> nodeMemory) {
        Utils.checkNotNull(nodeMemory, "nodeMemory");
        this.nodeMemory = nodeMemory;
        return this;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public DbaasServiceCommon withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Service creation timestamp (ISO 8601)
     */
    public DbaasServiceCommon withCreatedAt(Optional<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Subscription plan
     */
    public DbaasServiceCommon withPlan(String plan) {
        Utils.checkNotNull(plan, "plan");
        this.plan = plan;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DbaasServiceCommon other = (DbaasServiceCommon) o;
        return 
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.nodeCount, other.nodeCount) &&
            java.util.Objects.deepEquals(this.nodeCpuCount, other.nodeCpuCount) &&
            java.util.Objects.deepEquals(this.integrations, other.integrations) &&
            java.util.Objects.deepEquals(this.zone, other.zone) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.terminationProtection, other.terminationProtection) &&
            java.util.Objects.deepEquals(this.notifications, other.notifications) &&
            java.util.Objects.deepEquals(this.diskSize, other.diskSize) &&
            java.util.Objects.deepEquals(this.nodeMemory, other.nodeMemory) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.plan, other.plan);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            updatedAt,
            nodeCount,
            nodeCpuCount,
            integrations,
            zone,
            name,
            type,
            state,
            terminationProtection,
            notifications,
            diskSize,
            nodeMemory,
            createdAt,
            plan);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DbaasServiceCommon.class,
                "updatedAt", updatedAt,
                "nodeCount", nodeCount,
                "nodeCpuCount", nodeCpuCount,
                "integrations", integrations,
                "zone", zone,
                "name", name,
                "type", type,
                "state", state,
                "terminationProtection", terminationProtection,
                "notifications", notifications,
                "diskSize", diskSize,
                "nodeMemory", nodeMemory,
                "createdAt", createdAt,
                "plan", plan);
    }
    
    public final static class Builder {
 
        private Optional<? extends OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<? extends Long> nodeCount = Optional.empty();
 
        private Optional<? extends Long> nodeCpuCount = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasIntegration>> integrations = Optional.empty();
 
        private Optional<? extends String> zone = Optional.empty();
 
        private String name;
 
        private String type;
 
        private Optional<? extends EnumServiceState> state = Optional.empty();
 
        private Optional<? extends Boolean> terminationProtection = Optional.empty();
 
        private Optional<? extends java.util.List<DbaasServiceNotification>> notifications = Optional.empty();
 
        private Optional<? extends Long> diskSize = Optional.empty();
 
        private Optional<? extends Long> nodeMemory = Optional.empty();
 
        private Optional<? extends OffsetDateTime> createdAt = Optional.empty();
 
        private String plan;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Service last update timestamp (ISO 8601)
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Service last update timestamp (ISO 8601)
         */
        public Builder updatedAt(Optional<? extends OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Number of service nodes in the active plan
         */
        public Builder nodeCount(long nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = Optional.ofNullable(nodeCount);
            return this;
        }

        /**
         * Number of service nodes in the active plan
         */
        public Builder nodeCount(Optional<? extends Long> nodeCount) {
            Utils.checkNotNull(nodeCount, "nodeCount");
            this.nodeCount = nodeCount;
            return this;
        }

        /**
         * Number of CPUs for each node
         */
        public Builder nodeCpuCount(long nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = Optional.ofNullable(nodeCpuCount);
            return this;
        }

        /**
         * Number of CPUs for each node
         */
        public Builder nodeCpuCount(Optional<? extends Long> nodeCpuCount) {
            Utils.checkNotNull(nodeCpuCount, "nodeCpuCount");
            this.nodeCpuCount = nodeCpuCount;
            return this;
        }

        /**
         * Service integrations
         */
        public Builder integrations(java.util.List<DbaasIntegration> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = Optional.ofNullable(integrations);
            return this;
        }

        /**
         * Service integrations
         */
        public Builder integrations(Optional<? extends java.util.List<DbaasIntegration>> integrations) {
            Utils.checkNotNull(integrations, "integrations");
            this.integrations = integrations;
            return this;
        }

        /**
         * The zone where the service is running
         */
        public Builder zone(String zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = Optional.ofNullable(zone);
            return this;
        }

        /**
         * The zone where the service is running
         */
        public Builder zone(Optional<? extends String> zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = zone;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder state(EnumServiceState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends EnumServiceState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(boolean terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = Optional.ofNullable(terminationProtection);
            return this;
        }

        /**
         * Service is protected against termination and powering off
         */
        public Builder terminationProtection(Optional<? extends Boolean> terminationProtection) {
            Utils.checkNotNull(terminationProtection, "terminationProtection");
            this.terminationProtection = terminationProtection;
            return this;
        }

        /**
         * Service notifications
         */
        public Builder notifications(java.util.List<DbaasServiceNotification> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = Optional.ofNullable(notifications);
            return this;
        }

        /**
         * Service notifications
         */
        public Builder notifications(Optional<? extends java.util.List<DbaasServiceNotification>> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = notifications;
            return this;
        }

        /**
         * TODO UNIT disk space for data storage
         */
        public Builder diskSize(long diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = Optional.ofNullable(diskSize);
            return this;
        }

        /**
         * TODO UNIT disk space for data storage
         */
        public Builder diskSize(Optional<? extends Long> diskSize) {
            Utils.checkNotNull(diskSize, "diskSize");
            this.diskSize = diskSize;
            return this;
        }

        /**
         * TODO UNIT of memory for each node
         */
        public Builder nodeMemory(long nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = Optional.ofNullable(nodeMemory);
            return this;
        }

        /**
         * TODO UNIT of memory for each node
         */
        public Builder nodeMemory(Optional<? extends Long> nodeMemory) {
            Utils.checkNotNull(nodeMemory, "nodeMemory");
            this.nodeMemory = nodeMemory;
            return this;
        }

        /**
         * Service creation timestamp (ISO 8601)
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Service creation timestamp (ISO 8601)
         */
        public Builder createdAt(Optional<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Subscription plan
         */
        public Builder plan(String plan) {
            Utils.checkNotNull(plan, "plan");
            this.plan = plan;
            return this;
        }
        
        public DbaasServiceCommon build() {
            return new DbaasServiceCommon(
                updatedAt,
                nodeCount,
                nodeCpuCount,
                integrations,
                zone,
                name,
                type,
                state,
                terminationProtection,
                notifications,
                diskSize,
                nodeMemory,
                createdAt,
                plan);
        }
    }
}

