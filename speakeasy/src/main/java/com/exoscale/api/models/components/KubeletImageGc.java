/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api.models.components;

import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * KubeletImageGc - Kubelet image GC options
 */

public class KubeletImageGc {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("high-threshold")
    private Optional<? extends Long> highThreshold;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("low-threshold")
    private Optional<? extends Long> lowThreshold;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min-age")
    private Optional<? extends String> minAge;

    public KubeletImageGc(
            @JsonProperty("high-threshold") Optional<? extends Long> highThreshold,
            @JsonProperty("low-threshold") Optional<? extends Long> lowThreshold,
            @JsonProperty("min-age") Optional<? extends String> minAge) {
        Utils.checkNotNull(highThreshold, "highThreshold");
        Utils.checkNotNull(lowThreshold, "lowThreshold");
        Utils.checkNotNull(minAge, "minAge");
        this.highThreshold = highThreshold;
        this.lowThreshold = lowThreshold;
        this.minAge = minAge;
    }

    public Optional<? extends Long> highThreshold() {
        return highThreshold;
    }

    public Optional<? extends Long> lowThreshold() {
        return lowThreshold;
    }

    public Optional<? extends String> minAge() {
        return minAge;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public KubeletImageGc withHighThreshold(long highThreshold) {
        Utils.checkNotNull(highThreshold, "highThreshold");
        this.highThreshold = Optional.ofNullable(highThreshold);
        return this;
    }

    public KubeletImageGc withHighThreshold(Optional<? extends Long> highThreshold) {
        Utils.checkNotNull(highThreshold, "highThreshold");
        this.highThreshold = highThreshold;
        return this;
    }

    public KubeletImageGc withLowThreshold(long lowThreshold) {
        Utils.checkNotNull(lowThreshold, "lowThreshold");
        this.lowThreshold = Optional.ofNullable(lowThreshold);
        return this;
    }

    public KubeletImageGc withLowThreshold(Optional<? extends Long> lowThreshold) {
        Utils.checkNotNull(lowThreshold, "lowThreshold");
        this.lowThreshold = lowThreshold;
        return this;
    }

    public KubeletImageGc withMinAge(String minAge) {
        Utils.checkNotNull(minAge, "minAge");
        this.minAge = Optional.ofNullable(minAge);
        return this;
    }

    public KubeletImageGc withMinAge(Optional<? extends String> minAge) {
        Utils.checkNotNull(minAge, "minAge");
        this.minAge = minAge;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KubeletImageGc other = (KubeletImageGc) o;
        return 
            java.util.Objects.deepEquals(this.highThreshold, other.highThreshold) &&
            java.util.Objects.deepEquals(this.lowThreshold, other.lowThreshold) &&
            java.util.Objects.deepEquals(this.minAge, other.minAge);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            highThreshold,
            lowThreshold,
            minAge);
    }
    
    @Override
    public String toString() {
        return Utils.toString(KubeletImageGc.class,
                "highThreshold", highThreshold,
                "lowThreshold", lowThreshold,
                "minAge", minAge);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> highThreshold = Optional.empty();
 
        private Optional<? extends Long> lowThreshold = Optional.empty();
 
        private Optional<? extends String> minAge = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder highThreshold(long highThreshold) {
            Utils.checkNotNull(highThreshold, "highThreshold");
            this.highThreshold = Optional.ofNullable(highThreshold);
            return this;
        }

        public Builder highThreshold(Optional<? extends Long> highThreshold) {
            Utils.checkNotNull(highThreshold, "highThreshold");
            this.highThreshold = highThreshold;
            return this;
        }

        public Builder lowThreshold(long lowThreshold) {
            Utils.checkNotNull(lowThreshold, "lowThreshold");
            this.lowThreshold = Optional.ofNullable(lowThreshold);
            return this;
        }

        public Builder lowThreshold(Optional<? extends Long> lowThreshold) {
            Utils.checkNotNull(lowThreshold, "lowThreshold");
            this.lowThreshold = lowThreshold;
            return this;
        }

        public Builder minAge(String minAge) {
            Utils.checkNotNull(minAge, "minAge");
            this.minAge = Optional.ofNullable(minAge);
            return this;
        }

        public Builder minAge(Optional<? extends String> minAge) {
            Utils.checkNotNull(minAge, "minAge");
            this.minAge = minAge;
            return this;
        }
        
        public KubeletImageGc build() {
            return new KubeletImageGc(
                highThreshold,
                lowThreshold,
                minAge);
        }
    }
}

