/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.SksOidc;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSksClusterRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:14:44.205710495Z[Etc/UTC]", comments = "Generator version: 7.5.0-SNAPSHOT")
public class UpdateSksClusterRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_OIDC = "oidc";
  @SerializedName(SERIALIZED_NAME_OIDC)
  private SksOidc oidc;

  public static final String SERIALIZED_NAME_AUTO_UPGRADE = "auto-upgrade";
  @SerializedName(SERIALIZED_NAME_AUTO_UPGRADE)
  private Boolean autoUpgrade;

  /**
   * Gets or Sets addons
   */
  @JsonAdapter(AddonsEnum.Adapter.class)
  public enum AddonsEnum {
    EXOSCALE_CLOUD_CONTROLLER("exoscale-cloud-controller"),
    
    EXOSCALE_CONTAINER_STORAGE_INTERFACE("exoscale-container-storage-interface"),
    
    METRICS_SERVER("metrics-server");

    private String value;

    AddonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddonsEnum fromValue(String value) {
      for (AddonsEnum b : AddonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AddonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AddonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDONS = "addons";
  @SerializedName(SERIALIZED_NAME_ADDONS)
  private Set<AddonsEnum> addons = new LinkedHashSet<>();

  public UpdateSksClusterRequest() {
  }

  public UpdateSksClusterRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Cluster name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateSksClusterRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Cluster description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateSksClusterRequest labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public UpdateSksClusterRequest putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public UpdateSksClusterRequest oidc(SksOidc oidc) {
    this.oidc = oidc;
    return this;
  }

   /**
   * Get oidc
   * @return oidc
  **/
  @javax.annotation.Nullable
  public SksOidc getOidc() {
    return oidc;
  }

  public void setOidc(SksOidc oidc) {
    this.oidc = oidc;
  }


  public UpdateSksClusterRequest autoUpgrade(Boolean autoUpgrade) {
    this.autoUpgrade = autoUpgrade;
    return this;
  }

   /**
   * Enable auto upgrade of the control plane to the latest patch version available
   * @return autoUpgrade
  **/
  @javax.annotation.Nullable
  public Boolean getAutoUpgrade() {
    return autoUpgrade;
  }

  public void setAutoUpgrade(Boolean autoUpgrade) {
    this.autoUpgrade = autoUpgrade;
  }


  public UpdateSksClusterRequest addons(Set<AddonsEnum> addons) {
    this.addons = addons;
    return this;
  }

  public UpdateSksClusterRequest addAddonsItem(AddonsEnum addonsItem) {
    if (this.addons == null) {
      this.addons = new LinkedHashSet<>();
    }
    this.addons.add(addonsItem);
    return this;
  }

   /**
   * Cluster addons
   * @return addons
  **/
  @javax.annotation.Nullable
  public Set<AddonsEnum> getAddons() {
    return addons;
  }

  public void setAddons(Set<AddonsEnum> addons) {
    this.addons = addons;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSksClusterRequest updateSksClusterRequest = (UpdateSksClusterRequest) o;
    return Objects.equals(this.name, updateSksClusterRequest.name) &&
        Objects.equals(this.description, updateSksClusterRequest.description) &&
        Objects.equals(this.labels, updateSksClusterRequest.labels) &&
        Objects.equals(this.oidc, updateSksClusterRequest.oidc) &&
        Objects.equals(this.autoUpgrade, updateSksClusterRequest.autoUpgrade) &&
        Objects.equals(this.addons, updateSksClusterRequest.addons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, labels, oidc, autoUpgrade, addons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSksClusterRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    oidc: ").append(toIndentedString(oidc)).append("\n");
    sb.append("    autoUpgrade: ").append(toIndentedString(autoUpgrade)).append("\n");
    sb.append("    addons: ").append(toIndentedString(addons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("labels");
    openapiFields.add("oidc");
    openapiFields.add("auto-upgrade");
    openapiFields.add("addons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateSksClusterRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSksClusterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSksClusterRequest is not found in the empty JSON string", UpdateSksClusterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSksClusterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSksClusterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `oidc`
      if (jsonObj.get("oidc") != null && !jsonObj.get("oidc").isJsonNull()) {
        SksOidc.validateJsonElement(jsonObj.get("oidc"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("addons") != null && !jsonObj.get("addons").isJsonNull() && !jsonObj.get("addons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addons` to be an array in the JSON string but got `%s`", jsonObj.get("addons").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSksClusterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSksClusterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSksClusterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSksClusterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSksClusterRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSksClusterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSksClusterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateSksClusterRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateSksClusterRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateSksClusterRequest
  */
  public static UpdateSksClusterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSksClusterRequest.class);
  }

 /**
  * Convert an instance of UpdateSksClusterRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

