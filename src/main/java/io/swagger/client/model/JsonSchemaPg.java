/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.AutovacuumSettings;
import io.swagger.client.model.BackgroundBGWriterSettings;
import io.swagger.client.model.WriteaheadLogWALSettings;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * JsonSchemaPg
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class JsonSchemaPg {
  @JsonProperty("track_activity_query_size")
  private Integer trackActivityQuerySize = null;

  @JsonProperty("timezone")
  private String timezone = null;

  /**
   * Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
   */
  public enum TrackIoTimingEnum {
    OFF("off"),
    ON("on");

    private String value;

    TrackIoTimingEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TrackIoTimingEnum fromValue(String input) {
      for (TrackIoTimingEnum b : TrackIoTimingEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("track_io_timing")
  private TrackIoTimingEnum trackIoTiming = null;

  @JsonProperty("pg_stat_monitor.pgsm_enable_query_plan")
  private Boolean pgStatMonitorPgsmEnableQueryPlan = null;

  @JsonProperty("max_files_per_process")
  private Integer maxFilesPerProcess = null;

  @JsonProperty("pg_stat_monitor.pgsm_max_buckets")
  private Integer pgStatMonitorPgsmMaxBuckets = null;

  @JsonProperty("wal")
  private WriteaheadLogWALSettings wal = null;

  /**
   * Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
   */
  public enum DefaultToastCompressionEnum {
    LZ4("lz4"),
    PGLZ("pglz");

    private String value;

    DefaultToastCompressionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static DefaultToastCompressionEnum fromValue(String input) {
      for (DefaultToastCompressionEnum b : DefaultToastCompressionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("default_toast_compression")
  private DefaultToastCompressionEnum defaultToastCompression = null;

  @JsonProperty("deadlock_timeout")
  private Integer deadlockTimeout = null;

  @JsonProperty("idle_in_transaction_session_timeout")
  private Integer idleInTransactionSessionTimeout = null;

  @JsonProperty("max_pred_locks_per_transaction")
  private Integer maxPredLocksPerTransaction = null;

  @JsonProperty("max_replication_slots")
  private Integer maxReplicationSlots = null;

  @JsonProperty("autovacuum")
  private AutovacuumSettings autovacuum = null;

  @JsonProperty("max_parallel_workers_per_gather")
  private Integer maxParallelWorkersPerGather = null;

  @JsonProperty("pg_partman_bgw.interval")
  private Integer pgPartmanBgwInterval = null;

  /**
   * Choose from one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze etc.
   */
  public enum LogLinePrefixEnum {
    PID_P_USER_U_DB_D_APP_A_CLIENT_H_("'pid=%p,user=%u,db=%d,app=%a,client=%h '"),
    _T_P_L_1_USER_U_DB_D_APP_A_CLIENT_H_("'%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '"),
    _M_P_Q_USER_U_DB_D_APP_A_("'%m [%p] %q[user=%u,db=%d,app=%a] '");

    private String value;

    LogLinePrefixEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static LogLinePrefixEnum fromValue(String input) {
      for (LogLinePrefixEnum b : LogLinePrefixEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("log_line_prefix")
  private LogLinePrefixEnum logLinePrefix = null;

  @JsonProperty("log_temp_files")
  private Integer logTempFiles = null;

  @JsonProperty("max_locks_per_transaction")
  private Integer maxLocksPerTransaction = null;

  /**
   * Record commit time of transactions.
   */
  public enum TrackCommitTimestampEnum {
    OFF("off"),
    ON("on");

    private String value;

    TrackCommitTimestampEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TrackCommitTimestampEnum fromValue(String input) {
      for (TrackCommitTimestampEnum b : TrackCommitTimestampEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("track_commit_timestamp")
  private TrackCommitTimestampEnum trackCommitTimestamp = null;

  /**
   * Enables tracking of function call counts and time used.
   */
  public enum TrackFunctionsEnum {
    ALL("all"),
    PL("pl"),
    NONE("none");

    private String value;

    TrackFunctionsEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TrackFunctionsEnum fromValue(String input) {
      for (TrackFunctionsEnum b : TrackFunctionsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("track_functions")
  private TrackFunctionsEnum trackFunctions = null;

  @JsonProperty("max_stack_depth")
  private Integer maxStackDepth = null;

  @JsonProperty("max_parallel_workers")
  private Integer maxParallelWorkers = null;

  @JsonProperty("pg_partman_bgw.role")
  private String pgPartmanBgwRole = null;

  @JsonProperty("max_logical_replication_workers")
  private Integer maxLogicalReplicationWorkers = null;

  @JsonProperty("max_prepared_transactions")
  private Integer maxPreparedTransactions = null;

  @JsonProperty("max_worker_processes")
  private Integer maxWorkerProcesses = null;

  /**
   * Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
   */
  public enum PgStatStatementsTrackEnum {
    ALL("all"),
    TOP("top"),
    NONE("none");

    private String value;

    PgStatStatementsTrackEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PgStatStatementsTrackEnum fromValue(String input) {
      for (PgStatStatementsTrackEnum b : PgStatStatementsTrackEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("pg_stat_statements.track")
  private PgStatStatementsTrackEnum pgStatStatementsTrack = null;

  @JsonProperty("temp_file_limit")
  private Integer tempFileLimit = null;

  /**
   * Controls the amount of detail written in the server log for each message that is logged.
   */
  public enum LogErrorVerbosityEnum {
    TERSE("TERSE"),
    DEFAULT("DEFAULT"),
    VERBOSE("VERBOSE");

    private String value;

    LogErrorVerbosityEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static LogErrorVerbosityEnum fromValue(String input) {
      for (LogErrorVerbosityEnum b : LogErrorVerbosityEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("log_error_verbosity")
  private LogErrorVerbosityEnum logErrorVerbosity = null;

  @JsonProperty("log_min_duration_statement")
  private Integer logMinDurationStatement = null;

  @JsonProperty("max_standby_streaming_delay")
  private Integer maxStandbyStreamingDelay = null;

  @JsonProperty("jit")
  private Boolean jit = null;

  @JsonProperty("max_standby_archive_delay")
  private Integer maxStandbyArchiveDelay = null;

  @JsonProperty("bg-writer")
  private BackgroundBGWriterSettings bgWriter = null;

  public JsonSchemaPg trackActivityQuerySize(Integer trackActivityQuerySize) {
    this.trackActivityQuerySize = trackActivityQuerySize;
    return this;
  }

   /**
   * Specifies the number of bytes reserved to track the currently executing command for each active session.
   * minimum: 1024
   * maximum: 10240
   * @return trackActivityQuerySize
  **/
  @Schema(example = "1024", description = "Specifies the number of bytes reserved to track the currently executing command for each active session.")
  public Integer getTrackActivityQuerySize() {
    return trackActivityQuerySize;
  }

  public void setTrackActivityQuerySize(Integer trackActivityQuerySize) {
    this.trackActivityQuerySize = trackActivityQuerySize;
  }

  public JsonSchemaPg timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * PostgreSQL service timezone
   * @return timezone
  **/
  @Schema(example = "Europe/Helsinki", description = "PostgreSQL service timezone")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public JsonSchemaPg trackIoTiming(TrackIoTimingEnum trackIoTiming) {
    this.trackIoTiming = trackIoTiming;
    return this;
  }

   /**
   * Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
   * @return trackIoTiming
  **/
  @Schema(example = "off", description = "Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.")
  public TrackIoTimingEnum getTrackIoTiming() {
    return trackIoTiming;
  }

  public void setTrackIoTiming(TrackIoTimingEnum trackIoTiming) {
    this.trackIoTiming = trackIoTiming;
  }

  public JsonSchemaPg pgStatMonitorPgsmEnableQueryPlan(Boolean pgStatMonitorPgsmEnableQueryPlan) {
    this.pgStatMonitorPgsmEnableQueryPlan = pgStatMonitorPgsmEnableQueryPlan;
    return this;
  }

   /**
   * Enables or disables query plan monitoring
   * @return pgStatMonitorPgsmEnableQueryPlan
  **/
  @Schema(example = "false", description = "Enables or disables query plan monitoring")
  public Boolean isPgStatMonitorPgsmEnableQueryPlan() {
    return pgStatMonitorPgsmEnableQueryPlan;
  }

  public void setPgStatMonitorPgsmEnableQueryPlan(Boolean pgStatMonitorPgsmEnableQueryPlan) {
    this.pgStatMonitorPgsmEnableQueryPlan = pgStatMonitorPgsmEnableQueryPlan;
  }

  public JsonSchemaPg maxFilesPerProcess(Integer maxFilesPerProcess) {
    this.maxFilesPerProcess = maxFilesPerProcess;
    return this;
  }

   /**
   * PostgreSQL maximum number of files that can be open per process
   * minimum: 1000
   * maximum: 4096
   * @return maxFilesPerProcess
  **/
  @Schema(description = "PostgreSQL maximum number of files that can be open per process")
  public Integer getMaxFilesPerProcess() {
    return maxFilesPerProcess;
  }

  public void setMaxFilesPerProcess(Integer maxFilesPerProcess) {
    this.maxFilesPerProcess = maxFilesPerProcess;
  }

  public JsonSchemaPg pgStatMonitorPgsmMaxBuckets(Integer pgStatMonitorPgsmMaxBuckets) {
    this.pgStatMonitorPgsmMaxBuckets = pgStatMonitorPgsmMaxBuckets;
    return this;
  }

   /**
   * Sets the maximum number of buckets 
   * minimum: 1
   * maximum: 10
   * @return pgStatMonitorPgsmMaxBuckets
  **/
  @Schema(example = "10", description = "Sets the maximum number of buckets ")
  public Integer getPgStatMonitorPgsmMaxBuckets() {
    return pgStatMonitorPgsmMaxBuckets;
  }

  public void setPgStatMonitorPgsmMaxBuckets(Integer pgStatMonitorPgsmMaxBuckets) {
    this.pgStatMonitorPgsmMaxBuckets = pgStatMonitorPgsmMaxBuckets;
  }

  public JsonSchemaPg wal(WriteaheadLogWALSettings wal) {
    this.wal = wal;
    return this;
  }

   /**
   * Get wal
   * @return wal
  **/
  @Schema(description = "")
  public WriteaheadLogWALSettings getWal() {
    return wal;
  }

  public void setWal(WriteaheadLogWALSettings wal) {
    this.wal = wal;
  }

  public JsonSchemaPg defaultToastCompression(DefaultToastCompressionEnum defaultToastCompression) {
    this.defaultToastCompression = defaultToastCompression;
    return this;
  }

   /**
   * Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
   * @return defaultToastCompression
  **/
  @Schema(example = "lz4", description = "Specifies the default TOAST compression method for values of compressible columns (the default is lz4).")
  public DefaultToastCompressionEnum getDefaultToastCompression() {
    return defaultToastCompression;
  }

  public void setDefaultToastCompression(DefaultToastCompressionEnum defaultToastCompression) {
    this.defaultToastCompression = defaultToastCompression;
  }

  public JsonSchemaPg deadlockTimeout(Integer deadlockTimeout) {
    this.deadlockTimeout = deadlockTimeout;
    return this;
  }

   /**
   * This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
   * minimum: 500
   * maximum: 1800000
   * @return deadlockTimeout
  **/
  @Schema(example = "1000", description = "This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.")
  public Integer getDeadlockTimeout() {
    return deadlockTimeout;
  }

  public void setDeadlockTimeout(Integer deadlockTimeout) {
    this.deadlockTimeout = deadlockTimeout;
  }

  public JsonSchemaPg idleInTransactionSessionTimeout(Integer idleInTransactionSessionTimeout) {
    this.idleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
    return this;
  }

   /**
   * Time out sessions with open transactions after this number of milliseconds
   * minimum: 0
   * maximum: 604800000
   * @return idleInTransactionSessionTimeout
  **/
  @Schema(description = "Time out sessions with open transactions after this number of milliseconds")
  public Integer getIdleInTransactionSessionTimeout() {
    return idleInTransactionSessionTimeout;
  }

  public void setIdleInTransactionSessionTimeout(Integer idleInTransactionSessionTimeout) {
    this.idleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
  }

  public JsonSchemaPg maxPredLocksPerTransaction(Integer maxPredLocksPerTransaction) {
    this.maxPredLocksPerTransaction = maxPredLocksPerTransaction;
    return this;
  }

   /**
   * PostgreSQL maximum predicate locks per transaction
   * minimum: 64
   * maximum: 5120
   * @return maxPredLocksPerTransaction
  **/
  @Schema(description = "PostgreSQL maximum predicate locks per transaction")
  public Integer getMaxPredLocksPerTransaction() {
    return maxPredLocksPerTransaction;
  }

  public void setMaxPredLocksPerTransaction(Integer maxPredLocksPerTransaction) {
    this.maxPredLocksPerTransaction = maxPredLocksPerTransaction;
  }

  public JsonSchemaPg maxReplicationSlots(Integer maxReplicationSlots) {
    this.maxReplicationSlots = maxReplicationSlots;
    return this;
  }

   /**
   * PostgreSQL maximum replication slots
   * minimum: 8
   * maximum: 64
   * @return maxReplicationSlots
  **/
  @Schema(description = "PostgreSQL maximum replication slots")
  public Integer getMaxReplicationSlots() {
    return maxReplicationSlots;
  }

  public void setMaxReplicationSlots(Integer maxReplicationSlots) {
    this.maxReplicationSlots = maxReplicationSlots;
  }

  public JsonSchemaPg autovacuum(AutovacuumSettings autovacuum) {
    this.autovacuum = autovacuum;
    return this;
  }

   /**
   * Get autovacuum
   * @return autovacuum
  **/
  @Schema(description = "")
  public AutovacuumSettings getAutovacuum() {
    return autovacuum;
  }

  public void setAutovacuum(AutovacuumSettings autovacuum) {
    this.autovacuum = autovacuum;
  }

  public JsonSchemaPg maxParallelWorkersPerGather(Integer maxParallelWorkersPerGather) {
    this.maxParallelWorkersPerGather = maxParallelWorkersPerGather;
    return this;
  }

   /**
   * Sets the maximum number of workers that can be started by a single Gather or Gather Merge node
   * minimum: 0
   * maximum: 96
   * @return maxParallelWorkersPerGather
  **/
  @Schema(description = "Sets the maximum number of workers that can be started by a single Gather or Gather Merge node")
  public Integer getMaxParallelWorkersPerGather() {
    return maxParallelWorkersPerGather;
  }

  public void setMaxParallelWorkersPerGather(Integer maxParallelWorkersPerGather) {
    this.maxParallelWorkersPerGather = maxParallelWorkersPerGather;
  }

  public JsonSchemaPg pgPartmanBgwInterval(Integer pgPartmanBgwInterval) {
    this.pgPartmanBgwInterval = pgPartmanBgwInterval;
    return this;
  }

   /**
   * Sets the time interval to run pg_partman&#x27;s scheduled tasks
   * minimum: 3600
   * maximum: 604800
   * @return pgPartmanBgwInterval
  **/
  @Schema(example = "3600", description = "Sets the time interval to run pg_partman's scheduled tasks")
  public Integer getPgPartmanBgwInterval() {
    return pgPartmanBgwInterval;
  }

  public void setPgPartmanBgwInterval(Integer pgPartmanBgwInterval) {
    this.pgPartmanBgwInterval = pgPartmanBgwInterval;
  }

  public JsonSchemaPg logLinePrefix(LogLinePrefixEnum logLinePrefix) {
    this.logLinePrefix = logLinePrefix;
    return this;
  }

   /**
   * Choose from one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze etc.
   * @return logLinePrefix
  **/
  @Schema(description = "Choose from one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze etc.")
  public LogLinePrefixEnum getLogLinePrefix() {
    return logLinePrefix;
  }

  public void setLogLinePrefix(LogLinePrefixEnum logLinePrefix) {
    this.logLinePrefix = logLinePrefix;
  }

  public JsonSchemaPg logTempFiles(Integer logTempFiles) {
    this.logTempFiles = logTempFiles;
    return this;
  }

   /**
   * Log statements for each temporary file created larger than this number of kilobytes, -1 disables
   * minimum: -1
   * maximum: 2147483647
   * @return logTempFiles
  **/
  @Schema(description = "Log statements for each temporary file created larger than this number of kilobytes, -1 disables")
  public Integer getLogTempFiles() {
    return logTempFiles;
  }

  public void setLogTempFiles(Integer logTempFiles) {
    this.logTempFiles = logTempFiles;
  }

  public JsonSchemaPg maxLocksPerTransaction(Integer maxLocksPerTransaction) {
    this.maxLocksPerTransaction = maxLocksPerTransaction;
    return this;
  }

   /**
   * PostgreSQL maximum locks per transaction
   * minimum: 64
   * maximum: 6400
   * @return maxLocksPerTransaction
  **/
  @Schema(description = "PostgreSQL maximum locks per transaction")
  public Integer getMaxLocksPerTransaction() {
    return maxLocksPerTransaction;
  }

  public void setMaxLocksPerTransaction(Integer maxLocksPerTransaction) {
    this.maxLocksPerTransaction = maxLocksPerTransaction;
  }

  public JsonSchemaPg trackCommitTimestamp(TrackCommitTimestampEnum trackCommitTimestamp) {
    this.trackCommitTimestamp = trackCommitTimestamp;
    return this;
  }

   /**
   * Record commit time of transactions.
   * @return trackCommitTimestamp
  **/
  @Schema(example = "off", description = "Record commit time of transactions.")
  public TrackCommitTimestampEnum getTrackCommitTimestamp() {
    return trackCommitTimestamp;
  }

  public void setTrackCommitTimestamp(TrackCommitTimestampEnum trackCommitTimestamp) {
    this.trackCommitTimestamp = trackCommitTimestamp;
  }

  public JsonSchemaPg trackFunctions(TrackFunctionsEnum trackFunctions) {
    this.trackFunctions = trackFunctions;
    return this;
  }

   /**
   * Enables tracking of function call counts and time used.
   * @return trackFunctions
  **/
  @Schema(description = "Enables tracking of function call counts and time used.")
  public TrackFunctionsEnum getTrackFunctions() {
    return trackFunctions;
  }

  public void setTrackFunctions(TrackFunctionsEnum trackFunctions) {
    this.trackFunctions = trackFunctions;
  }

  public JsonSchemaPg maxStackDepth(Integer maxStackDepth) {
    this.maxStackDepth = maxStackDepth;
    return this;
  }

   /**
   * Maximum depth of the stack in bytes
   * minimum: 2097152
   * maximum: 6291456
   * @return maxStackDepth
  **/
  @Schema(description = "Maximum depth of the stack in bytes")
  public Integer getMaxStackDepth() {
    return maxStackDepth;
  }

  public void setMaxStackDepth(Integer maxStackDepth) {
    this.maxStackDepth = maxStackDepth;
  }

  public JsonSchemaPg maxParallelWorkers(Integer maxParallelWorkers) {
    this.maxParallelWorkers = maxParallelWorkers;
    return this;
  }

   /**
   * Sets the maximum number of workers that the system can support for parallel queries
   * minimum: 0
   * maximum: 96
   * @return maxParallelWorkers
  **/
  @Schema(description = "Sets the maximum number of workers that the system can support for parallel queries")
  public Integer getMaxParallelWorkers() {
    return maxParallelWorkers;
  }

  public void setMaxParallelWorkers(Integer maxParallelWorkers) {
    this.maxParallelWorkers = maxParallelWorkers;
  }

  public JsonSchemaPg pgPartmanBgwRole(String pgPartmanBgwRole) {
    this.pgPartmanBgwRole = pgPartmanBgwRole;
    return this;
  }

   /**
   * Controls which role to use for pg_partman&#x27;s scheduled background tasks.
   * @return pgPartmanBgwRole
  **/
  @Schema(example = "myrolename", description = "Controls which role to use for pg_partman's scheduled background tasks.")
  public String getPgPartmanBgwRole() {
    return pgPartmanBgwRole;
  }

  public void setPgPartmanBgwRole(String pgPartmanBgwRole) {
    this.pgPartmanBgwRole = pgPartmanBgwRole;
  }

  public JsonSchemaPg maxLogicalReplicationWorkers(Integer maxLogicalReplicationWorkers) {
    this.maxLogicalReplicationWorkers = maxLogicalReplicationWorkers;
    return this;
  }

   /**
   * PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers)
   * minimum: 4
   * maximum: 64
   * @return maxLogicalReplicationWorkers
  **/
  @Schema(description = "PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers)")
  public Integer getMaxLogicalReplicationWorkers() {
    return maxLogicalReplicationWorkers;
  }

  public void setMaxLogicalReplicationWorkers(Integer maxLogicalReplicationWorkers) {
    this.maxLogicalReplicationWorkers = maxLogicalReplicationWorkers;
  }

  public JsonSchemaPg maxPreparedTransactions(Integer maxPreparedTransactions) {
    this.maxPreparedTransactions = maxPreparedTransactions;
    return this;
  }

   /**
   * PostgreSQL maximum prepared transactions
   * minimum: 0
   * maximum: 10000
   * @return maxPreparedTransactions
  **/
  @Schema(description = "PostgreSQL maximum prepared transactions")
  public Integer getMaxPreparedTransactions() {
    return maxPreparedTransactions;
  }

  public void setMaxPreparedTransactions(Integer maxPreparedTransactions) {
    this.maxPreparedTransactions = maxPreparedTransactions;
  }

  public JsonSchemaPg maxWorkerProcesses(Integer maxWorkerProcesses) {
    this.maxWorkerProcesses = maxWorkerProcesses;
    return this;
  }

   /**
   * Sets the maximum number of background processes that the system can support
   * minimum: 8
   * maximum: 96
   * @return maxWorkerProcesses
  **/
  @Schema(description = "Sets the maximum number of background processes that the system can support")
  public Integer getMaxWorkerProcesses() {
    return maxWorkerProcesses;
  }

  public void setMaxWorkerProcesses(Integer maxWorkerProcesses) {
    this.maxWorkerProcesses = maxWorkerProcesses;
  }

  public JsonSchemaPg pgStatStatementsTrack(PgStatStatementsTrackEnum pgStatStatementsTrack) {
    this.pgStatStatementsTrack = pgStatStatementsTrack;
    return this;
  }

   /**
   * Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
   * @return pgStatStatementsTrack
  **/
  @Schema(description = "Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.")
  public PgStatStatementsTrackEnum getPgStatStatementsTrack() {
    return pgStatStatementsTrack;
  }

  public void setPgStatStatementsTrack(PgStatStatementsTrackEnum pgStatStatementsTrack) {
    this.pgStatStatementsTrack = pgStatStatementsTrack;
  }

  public JsonSchemaPg tempFileLimit(Integer tempFileLimit) {
    this.tempFileLimit = tempFileLimit;
    return this;
  }

   /**
   * PostgreSQL temporary file limit in KiB, -1 for unlimited
   * minimum: -1
   * maximum: 2147483647
   * @return tempFileLimit
  **/
  @Schema(example = "5000000", description = "PostgreSQL temporary file limit in KiB, -1 for unlimited")
  public Integer getTempFileLimit() {
    return tempFileLimit;
  }

  public void setTempFileLimit(Integer tempFileLimit) {
    this.tempFileLimit = tempFileLimit;
  }

  public JsonSchemaPg logErrorVerbosity(LogErrorVerbosityEnum logErrorVerbosity) {
    this.logErrorVerbosity = logErrorVerbosity;
    return this;
  }

   /**
   * Controls the amount of detail written in the server log for each message that is logged.
   * @return logErrorVerbosity
  **/
  @Schema(description = "Controls the amount of detail written in the server log for each message that is logged.")
  public LogErrorVerbosityEnum getLogErrorVerbosity() {
    return logErrorVerbosity;
  }

  public void setLogErrorVerbosity(LogErrorVerbosityEnum logErrorVerbosity) {
    this.logErrorVerbosity = logErrorVerbosity;
  }

  public JsonSchemaPg logMinDurationStatement(Integer logMinDurationStatement) {
    this.logMinDurationStatement = logMinDurationStatement;
    return this;
  }

   /**
   * Log statements that take more than this number of milliseconds to run, -1 disables
   * minimum: -1
   * maximum: 86400000
   * @return logMinDurationStatement
  **/
  @Schema(description = "Log statements that take more than this number of milliseconds to run, -1 disables")
  public Integer getLogMinDurationStatement() {
    return logMinDurationStatement;
  }

  public void setLogMinDurationStatement(Integer logMinDurationStatement) {
    this.logMinDurationStatement = logMinDurationStatement;
  }

  public JsonSchemaPg maxStandbyStreamingDelay(Integer maxStandbyStreamingDelay) {
    this.maxStandbyStreamingDelay = maxStandbyStreamingDelay;
    return this;
  }

   /**
   * Max standby streaming delay in milliseconds
   * minimum: 1
   * maximum: 43200000
   * @return maxStandbyStreamingDelay
  **/
  @Schema(description = "Max standby streaming delay in milliseconds")
  public Integer getMaxStandbyStreamingDelay() {
    return maxStandbyStreamingDelay;
  }

  public void setMaxStandbyStreamingDelay(Integer maxStandbyStreamingDelay) {
    this.maxStandbyStreamingDelay = maxStandbyStreamingDelay;
  }

  public JsonSchemaPg jit(Boolean jit) {
    this.jit = jit;
    return this;
  }

   /**
   * Controls system-wide use of Just-in-Time Compilation (JIT).
   * @return jit
  **/
  @Schema(example = "true", description = "Controls system-wide use of Just-in-Time Compilation (JIT).")
  public Boolean isJit() {
    return jit;
  }

  public void setJit(Boolean jit) {
    this.jit = jit;
  }

  public JsonSchemaPg maxStandbyArchiveDelay(Integer maxStandbyArchiveDelay) {
    this.maxStandbyArchiveDelay = maxStandbyArchiveDelay;
    return this;
  }

   /**
   * Max standby archive delay in milliseconds
   * minimum: 1
   * maximum: 43200000
   * @return maxStandbyArchiveDelay
  **/
  @Schema(description = "Max standby archive delay in milliseconds")
  public Integer getMaxStandbyArchiveDelay() {
    return maxStandbyArchiveDelay;
  }

  public void setMaxStandbyArchiveDelay(Integer maxStandbyArchiveDelay) {
    this.maxStandbyArchiveDelay = maxStandbyArchiveDelay;
  }

  public JsonSchemaPg bgWriter(BackgroundBGWriterSettings bgWriter) {
    this.bgWriter = bgWriter;
    return this;
  }

   /**
   * Get bgWriter
   * @return bgWriter
  **/
  @Schema(description = "")
  public BackgroundBGWriterSettings getBgWriter() {
    return bgWriter;
  }

  public void setBgWriter(BackgroundBGWriterSettings bgWriter) {
    this.bgWriter = bgWriter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchemaPg jsonSchemaPg = (JsonSchemaPg) o;
    return Objects.equals(this.trackActivityQuerySize, jsonSchemaPg.trackActivityQuerySize) &&
        Objects.equals(this.timezone, jsonSchemaPg.timezone) &&
        Objects.equals(this.trackIoTiming, jsonSchemaPg.trackIoTiming) &&
        Objects.equals(this.pgStatMonitorPgsmEnableQueryPlan, jsonSchemaPg.pgStatMonitorPgsmEnableQueryPlan) &&
        Objects.equals(this.maxFilesPerProcess, jsonSchemaPg.maxFilesPerProcess) &&
        Objects.equals(this.pgStatMonitorPgsmMaxBuckets, jsonSchemaPg.pgStatMonitorPgsmMaxBuckets) &&
        Objects.equals(this.wal, jsonSchemaPg.wal) &&
        Objects.equals(this.defaultToastCompression, jsonSchemaPg.defaultToastCompression) &&
        Objects.equals(this.deadlockTimeout, jsonSchemaPg.deadlockTimeout) &&
        Objects.equals(this.idleInTransactionSessionTimeout, jsonSchemaPg.idleInTransactionSessionTimeout) &&
        Objects.equals(this.maxPredLocksPerTransaction, jsonSchemaPg.maxPredLocksPerTransaction) &&
        Objects.equals(this.maxReplicationSlots, jsonSchemaPg.maxReplicationSlots) &&
        Objects.equals(this.autovacuum, jsonSchemaPg.autovacuum) &&
        Objects.equals(this.maxParallelWorkersPerGather, jsonSchemaPg.maxParallelWorkersPerGather) &&
        Objects.equals(this.pgPartmanBgwInterval, jsonSchemaPg.pgPartmanBgwInterval) &&
        Objects.equals(this.logLinePrefix, jsonSchemaPg.logLinePrefix) &&
        Objects.equals(this.logTempFiles, jsonSchemaPg.logTempFiles) &&
        Objects.equals(this.maxLocksPerTransaction, jsonSchemaPg.maxLocksPerTransaction) &&
        Objects.equals(this.trackCommitTimestamp, jsonSchemaPg.trackCommitTimestamp) &&
        Objects.equals(this.trackFunctions, jsonSchemaPg.trackFunctions) &&
        Objects.equals(this.maxStackDepth, jsonSchemaPg.maxStackDepth) &&
        Objects.equals(this.maxParallelWorkers, jsonSchemaPg.maxParallelWorkers) &&
        Objects.equals(this.pgPartmanBgwRole, jsonSchemaPg.pgPartmanBgwRole) &&
        Objects.equals(this.maxLogicalReplicationWorkers, jsonSchemaPg.maxLogicalReplicationWorkers) &&
        Objects.equals(this.maxPreparedTransactions, jsonSchemaPg.maxPreparedTransactions) &&
        Objects.equals(this.maxWorkerProcesses, jsonSchemaPg.maxWorkerProcesses) &&
        Objects.equals(this.pgStatStatementsTrack, jsonSchemaPg.pgStatStatementsTrack) &&
        Objects.equals(this.tempFileLimit, jsonSchemaPg.tempFileLimit) &&
        Objects.equals(this.logErrorVerbosity, jsonSchemaPg.logErrorVerbosity) &&
        Objects.equals(this.logMinDurationStatement, jsonSchemaPg.logMinDurationStatement) &&
        Objects.equals(this.maxStandbyStreamingDelay, jsonSchemaPg.maxStandbyStreamingDelay) &&
        Objects.equals(this.jit, jsonSchemaPg.jit) &&
        Objects.equals(this.maxStandbyArchiveDelay, jsonSchemaPg.maxStandbyArchiveDelay) &&
        Objects.equals(this.bgWriter, jsonSchemaPg.bgWriter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trackActivityQuerySize, timezone, trackIoTiming, pgStatMonitorPgsmEnableQueryPlan, maxFilesPerProcess, pgStatMonitorPgsmMaxBuckets, wal, defaultToastCompression, deadlockTimeout, idleInTransactionSessionTimeout, maxPredLocksPerTransaction, maxReplicationSlots, autovacuum, maxParallelWorkersPerGather, pgPartmanBgwInterval, logLinePrefix, logTempFiles, maxLocksPerTransaction, trackCommitTimestamp, trackFunctions, maxStackDepth, maxParallelWorkers, pgPartmanBgwRole, maxLogicalReplicationWorkers, maxPreparedTransactions, maxWorkerProcesses, pgStatStatementsTrack, tempFileLimit, logErrorVerbosity, logMinDurationStatement, maxStandbyStreamingDelay, jit, maxStandbyArchiveDelay, bgWriter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchemaPg {\n");
    
    sb.append("    trackActivityQuerySize: ").append(toIndentedString(trackActivityQuerySize)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    trackIoTiming: ").append(toIndentedString(trackIoTiming)).append("\n");
    sb.append("    pgStatMonitorPgsmEnableQueryPlan: ").append(toIndentedString(pgStatMonitorPgsmEnableQueryPlan)).append("\n");
    sb.append("    maxFilesPerProcess: ").append(toIndentedString(maxFilesPerProcess)).append("\n");
    sb.append("    pgStatMonitorPgsmMaxBuckets: ").append(toIndentedString(pgStatMonitorPgsmMaxBuckets)).append("\n");
    sb.append("    wal: ").append(toIndentedString(wal)).append("\n");
    sb.append("    defaultToastCompression: ").append(toIndentedString(defaultToastCompression)).append("\n");
    sb.append("    deadlockTimeout: ").append(toIndentedString(deadlockTimeout)).append("\n");
    sb.append("    idleInTransactionSessionTimeout: ").append(toIndentedString(idleInTransactionSessionTimeout)).append("\n");
    sb.append("    maxPredLocksPerTransaction: ").append(toIndentedString(maxPredLocksPerTransaction)).append("\n");
    sb.append("    maxReplicationSlots: ").append(toIndentedString(maxReplicationSlots)).append("\n");
    sb.append("    autovacuum: ").append(toIndentedString(autovacuum)).append("\n");
    sb.append("    maxParallelWorkersPerGather: ").append(toIndentedString(maxParallelWorkersPerGather)).append("\n");
    sb.append("    pgPartmanBgwInterval: ").append(toIndentedString(pgPartmanBgwInterval)).append("\n");
    sb.append("    logLinePrefix: ").append(toIndentedString(logLinePrefix)).append("\n");
    sb.append("    logTempFiles: ").append(toIndentedString(logTempFiles)).append("\n");
    sb.append("    maxLocksPerTransaction: ").append(toIndentedString(maxLocksPerTransaction)).append("\n");
    sb.append("    trackCommitTimestamp: ").append(toIndentedString(trackCommitTimestamp)).append("\n");
    sb.append("    trackFunctions: ").append(toIndentedString(trackFunctions)).append("\n");
    sb.append("    maxStackDepth: ").append(toIndentedString(maxStackDepth)).append("\n");
    sb.append("    maxParallelWorkers: ").append(toIndentedString(maxParallelWorkers)).append("\n");
    sb.append("    pgPartmanBgwRole: ").append(toIndentedString(pgPartmanBgwRole)).append("\n");
    sb.append("    maxLogicalReplicationWorkers: ").append(toIndentedString(maxLogicalReplicationWorkers)).append("\n");
    sb.append("    maxPreparedTransactions: ").append(toIndentedString(maxPreparedTransactions)).append("\n");
    sb.append("    maxWorkerProcesses: ").append(toIndentedString(maxWorkerProcesses)).append("\n");
    sb.append("    pgStatStatementsTrack: ").append(toIndentedString(pgStatStatementsTrack)).append("\n");
    sb.append("    tempFileLimit: ").append(toIndentedString(tempFileLimit)).append("\n");
    sb.append("    logErrorVerbosity: ").append(toIndentedString(logErrorVerbosity)).append("\n");
    sb.append("    logMinDurationStatement: ").append(toIndentedString(logMinDurationStatement)).append("\n");
    sb.append("    maxStandbyStreamingDelay: ").append(toIndentedString(maxStandbyStreamingDelay)).append("\n");
    sb.append("    jit: ").append(toIndentedString(jit)).append("\n");
    sb.append("    maxStandbyArchiveDelay: ").append(toIndentedString(maxStandbyArchiveDelay)).append("\n");
    sb.append("    bgWriter: ").append(toIndentedString(bgWriter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
