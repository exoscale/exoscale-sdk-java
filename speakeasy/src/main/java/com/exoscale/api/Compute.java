/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.exoscale.api;

import com.exoscale.api.models.errors.SDKError;
import com.exoscale.api.models.operations.SDKMethodInterfaces.*;
import com.exoscale.api.utils.HTTPClient;
import com.exoscale.api.utils.HTTPRequest;
import com.exoscale.api.utils.JSON;
import com.exoscale.api.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Compute implements
            MethodCallResetLoadBalancerServiceField {

    private final SDKConfiguration sdkConfiguration;

    Compute(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.exoscale.api.models.operations.ResetLoadBalancerServiceFieldRequestBuilder resetLoadBalancerServiceField() {
        return new com.exoscale.api.models.operations.ResetLoadBalancerServiceFieldRequestBuilder(this);
    }

    /**
     * Reset a Load Balancer Service field to its default value
     * @param id
     * @param serviceId
     * @param field
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.exoscale.api.models.operations.ResetLoadBalancerServiceFieldResponse resetLoadBalancerServiceField(
            String id,
            String serviceId,
            com.exoscale.api.models.operations.ResetLoadBalancerServiceFieldPathParamField field) throws Exception {
        com.exoscale.api.models.operations.ResetLoadBalancerServiceFieldRequest request =
            com.exoscale.api.models.operations.ResetLoadBalancerServiceFieldRequest
                .builder()
                .id(id)
                .serviceId(serviceId)
                .field(field)
                .build();
        

        String baseUrl = com.exoscale.api.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = com.exoscale.api.utils.Utils.generateURL(
                com.exoscale.api.models.operations.ResetLoadBalancerServiceFieldRequest.class,
                baseUrl,
                "/load-balancer/{id}/service/{service-id}/{field}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.exoscale.api.models.operations.ResetLoadBalancerServiceFieldResponse.Builder resBuilder = 
            com.exoscale.api.models.operations.ResetLoadBalancerServiceFieldResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.exoscale.api.models.operations.ResetLoadBalancerServiceFieldResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.exoscale.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.exoscale.api.models.components.Operation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.exoscale.api.models.components.Operation>() {});
                res.withOperation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
