/*
 * ExoscalePublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.exoscale.apichgva2.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for RedisSettings type.
 */
public class RedisSettings {
    private Boolean ssl;
    private Integer lfuLogFactor;
    private OptionalNullable<RedisMaxmemoryPolicyEnum> maxmemoryPolicy;
    private Integer ioThreads;
    private Integer lfuDecayTime;
    private Integer pubsubClientOutputBufferLimit;
    private String notifyKeyspaceEvents;
    private RedisPersistenceEnum persistence;
    private Integer timeout;
    private DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum aclChannelsDefault;
    private Integer numberOfDatabases;

    /**
     * Default constructor.
     */
    public RedisSettings() {
        ssl = true;
        lfuLogFactor = 10;
        maxmemoryPolicy = OptionalNullable.of(RedisMaxmemoryPolicyEnum.NOEVICTION);
        lfuDecayTime = 1;
        timeout = 300;
    }

    /**
     * Initialization constructor.
     * @param  ssl  Boolean value for ssl.
     * @param  lfuLogFactor  Integer value for lfuLogFactor.
     * @param  maxmemoryPolicy  RedisMaxmemoryPolicyEnum value for maxmemoryPolicy.
     * @param  ioThreads  Integer value for ioThreads.
     * @param  lfuDecayTime  Integer value for lfuDecayTime.
     * @param  pubsubClientOutputBufferLimit  Integer value for pubsubClientOutputBufferLimit.
     * @param  notifyKeyspaceEvents  String value for notifyKeyspaceEvents.
     * @param  persistence  RedisPersistenceEnum value for persistence.
     * @param  timeout  Integer value for timeout.
     * @param  aclChannelsDefault  DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum value
     *         for aclChannelsDefault.
     * @param  numberOfDatabases  Integer value for numberOfDatabases.
     */
    public RedisSettings(
            Boolean ssl,
            Integer lfuLogFactor,
            RedisMaxmemoryPolicyEnum maxmemoryPolicy,
            Integer ioThreads,
            Integer lfuDecayTime,
            Integer pubsubClientOutputBufferLimit,
            String notifyKeyspaceEvents,
            RedisPersistenceEnum persistence,
            Integer timeout,
            DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum aclChannelsDefault,
            Integer numberOfDatabases) {
        this.ssl = ssl;
        this.lfuLogFactor = lfuLogFactor;
        this.maxmemoryPolicy = OptionalNullable.of(maxmemoryPolicy);
        this.ioThreads = ioThreads;
        this.lfuDecayTime = lfuDecayTime;
        this.pubsubClientOutputBufferLimit = pubsubClientOutputBufferLimit;
        this.notifyKeyspaceEvents = notifyKeyspaceEvents;
        this.persistence = persistence;
        this.timeout = timeout;
        this.aclChannelsDefault = aclChannelsDefault;
        this.numberOfDatabases = numberOfDatabases;
    }

    /**
     * Initialization constructor.
     * @param  ssl  Boolean value for ssl.
     * @param  lfuLogFactor  Integer value for lfuLogFactor.
     * @param  maxmemoryPolicy  RedisMaxmemoryPolicyEnum value for maxmemoryPolicy.
     * @param  ioThreads  Integer value for ioThreads.
     * @param  lfuDecayTime  Integer value for lfuDecayTime.
     * @param  pubsubClientOutputBufferLimit  Integer value for pubsubClientOutputBufferLimit.
     * @param  notifyKeyspaceEvents  String value for notifyKeyspaceEvents.
     * @param  persistence  RedisPersistenceEnum value for persistence.
     * @param  timeout  Integer value for timeout.
     * @param  aclChannelsDefault  DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum value
     *         for aclChannelsDefault.
     * @param  numberOfDatabases  Integer value for numberOfDatabases.
     */

    protected RedisSettings(Boolean ssl, Integer lfuLogFactor,
            OptionalNullable<RedisMaxmemoryPolicyEnum> maxmemoryPolicy, Integer ioThreads,
            Integer lfuDecayTime, Integer pubsubClientOutputBufferLimit,
            String notifyKeyspaceEvents, RedisPersistenceEnum persistence, Integer timeout,
            DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum aclChannelsDefault,
            Integer numberOfDatabases) {
        this.ssl = ssl;
        this.lfuLogFactor = lfuLogFactor;
        this.maxmemoryPolicy = maxmemoryPolicy;
        this.ioThreads = ioThreads;
        this.lfuDecayTime = lfuDecayTime;
        this.pubsubClientOutputBufferLimit = pubsubClientOutputBufferLimit;
        this.notifyKeyspaceEvents = notifyKeyspaceEvents;
        this.persistence = persistence;
        this.timeout = timeout;
        this.aclChannelsDefault = aclChannelsDefault;
        this.numberOfDatabases = numberOfDatabases;
    }

    /**
     * Getter for Ssl.
     * @return Returns the Boolean
     */
    @JsonGetter("ssl")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSsl() {
        return ssl;
    }

    /**
     * Setter for Ssl.
     * @param ssl Value for Boolean
     */
    @JsonSetter("ssl")
    public void setSsl(Boolean ssl) {
        this.ssl = ssl;
    }

    /**
     * Getter for LfuLogFactor.
     * @return Returns the Integer
     */
    @JsonGetter("lfu_log_factor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getLfuLogFactor() {
        return lfuLogFactor;
    }

    /**
     * Setter for LfuLogFactor.
     * @param lfuLogFactor Value for Integer
     */
    @JsonSetter("lfu_log_factor")
    public void setLfuLogFactor(Integer lfuLogFactor) {
        this.lfuLogFactor = lfuLogFactor;
    }

    /**
     * Internal Getter for MaxmemoryPolicy.
     * @return Returns the Internal RedisMaxmemoryPolicyEnum
     */
    @JsonGetter("maxmemory_policy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<RedisMaxmemoryPolicyEnum> internalGetMaxmemoryPolicy() {
        return this.maxmemoryPolicy;
    }

    /**
     * Getter for MaxmemoryPolicy.
     * @return Returns the RedisMaxmemoryPolicyEnum
     */
    public RedisMaxmemoryPolicyEnum getMaxmemoryPolicy() {
        return OptionalNullable.getFrom(maxmemoryPolicy);
    }

    /**
     * Setter for MaxmemoryPolicy.
     * @param maxmemoryPolicy Value for RedisMaxmemoryPolicyEnum
     */
    @JsonSetter("maxmemory_policy")
    public void setMaxmemoryPolicy(RedisMaxmemoryPolicyEnum maxmemoryPolicy) {
        this.maxmemoryPolicy = OptionalNullable.of(maxmemoryPolicy);
    }

    /**
     * UnSetter for MaxmemoryPolicy.
     */
    public void unsetMaxmemoryPolicy() {
        maxmemoryPolicy = null;
    }

    /**
     * Getter for IoThreads.
     * Set Redis IO thread count. Changing this will cause a restart of the Redis service.
     * @return Returns the Integer
     */
    @JsonGetter("io_threads")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getIoThreads() {
        return ioThreads;
    }

    /**
     * Setter for IoThreads.
     * Set Redis IO thread count. Changing this will cause a restart of the Redis service.
     * @param ioThreads Value for Integer
     */
    @JsonSetter("io_threads")
    public void setIoThreads(Integer ioThreads) {
        this.ioThreads = ioThreads;
    }

    /**
     * Getter for LfuDecayTime.
     * @return Returns the Integer
     */
    @JsonGetter("lfu_decay_time")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getLfuDecayTime() {
        return lfuDecayTime;
    }

    /**
     * Setter for LfuDecayTime.
     * @param lfuDecayTime Value for Integer
     */
    @JsonSetter("lfu_decay_time")
    public void setLfuDecayTime(Integer lfuDecayTime) {
        this.lfuDecayTime = lfuDecayTime;
    }

    /**
     * Getter for PubsubClientOutputBufferLimit.
     * Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft
     * limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in
     * the selected service plan.
     * @return Returns the Integer
     */
    @JsonGetter("pubsub_client_output_buffer_limit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPubsubClientOutputBufferLimit() {
        return pubsubClientOutputBufferLimit;
    }

    /**
     * Setter for PubsubClientOutputBufferLimit.
     * Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft
     * limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in
     * the selected service plan.
     * @param pubsubClientOutputBufferLimit Value for Integer
     */
    @JsonSetter("pubsub_client_output_buffer_limit")
    public void setPubsubClientOutputBufferLimit(Integer pubsubClientOutputBufferLimit) {
        this.pubsubClientOutputBufferLimit = pubsubClientOutputBufferLimit;
    }

    /**
     * Getter for NotifyKeyspaceEvents.
     * @return Returns the String
     */
    @JsonGetter("notify_keyspace_events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNotifyKeyspaceEvents() {
        return notifyKeyspaceEvents;
    }

    /**
     * Setter for NotifyKeyspaceEvents.
     * @param notifyKeyspaceEvents Value for String
     */
    @JsonSetter("notify_keyspace_events")
    public void setNotifyKeyspaceEvents(String notifyKeyspaceEvents) {
        this.notifyKeyspaceEvents = notifyKeyspaceEvents;
    }

    /**
     * Getter for Persistence.
     * When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also
     * RDB dumps are done according to backup schedule for backup purposes. When persistence is
     * 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is
     * restarted for any reason, or if service is powered off. Also service can't be forked.
     * @return Returns the RedisPersistenceEnum
     */
    @JsonGetter("persistence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RedisPersistenceEnum getPersistence() {
        return persistence;
    }

    /**
     * Setter for Persistence.
     * When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also
     * RDB dumps are done according to backup schedule for backup purposes. When persistence is
     * 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is
     * restarted for any reason, or if service is powered off. Also service can't be forked.
     * @param persistence Value for RedisPersistenceEnum
     */
    @JsonSetter("persistence")
    public void setPersistence(RedisPersistenceEnum persistence) {
        this.persistence = persistence;
    }

    /**
     * Getter for Timeout.
     * @return Returns the Integer
     */
    @JsonGetter("timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTimeout() {
        return timeout;
    }

    /**
     * Setter for Timeout.
     * @param timeout Value for Integer
     */
    @JsonSetter("timeout")
    public void setTimeout(Integer timeout) {
        this.timeout = timeout;
    }

    /**
     * Getter for AclChannelsDefault.
     * Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this
     * option is not defined, all_channels is assumed to keep backward compatibility. This option
     * doesn't affect Redis configuration acl-pubsub-default.
     * @return Returns the DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum
     */
    @JsonGetter("acl_channels_default")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum getAclChannelsDefault() {
        return aclChannelsDefault;
    }

    /**
     * Setter for AclChannelsDefault.
     * Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this
     * option is not defined, all_channels is assumed to keep backward compatibility. This option
     * doesn't affect Redis configuration acl-pubsub-default.
     * @param aclChannelsDefault Value for DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum
     */
    @JsonSetter("acl_channels_default")
    public void setAclChannelsDefault(DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum aclChannelsDefault) {
        this.aclChannelsDefault = aclChannelsDefault;
    }

    /**
     * Getter for NumberOfDatabases.
     * Set number of Redis databases. Changing this will cause a restart of the Redis service.
     * @return Returns the Integer
     */
    @JsonGetter("number_of_databases")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getNumberOfDatabases() {
        return numberOfDatabases;
    }

    /**
     * Setter for NumberOfDatabases.
     * Set number of Redis databases. Changing this will cause a restart of the Redis service.
     * @param numberOfDatabases Value for Integer
     */
    @JsonSetter("number_of_databases")
    public void setNumberOfDatabases(Integer numberOfDatabases) {
        this.numberOfDatabases = numberOfDatabases;
    }

    /**
     * Converts this RedisSettings into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "RedisSettings [" + "ssl=" + ssl + ", lfuLogFactor=" + lfuLogFactor
                + ", maxmemoryPolicy=" + maxmemoryPolicy + ", ioThreads=" + ioThreads
                + ", lfuDecayTime=" + lfuDecayTime + ", pubsubClientOutputBufferLimit="
                + pubsubClientOutputBufferLimit + ", notifyKeyspaceEvents=" + notifyKeyspaceEvents
                + ", persistence=" + persistence + ", timeout=" + timeout + ", aclChannelsDefault="
                + aclChannelsDefault + ", numberOfDatabases=" + numberOfDatabases + "]";
    }

    /**
     * Builds a new {@link RedisSettings.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link RedisSettings.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .ssl(getSsl())
                .lfuLogFactor(getLfuLogFactor())
                .ioThreads(getIoThreads())
                .lfuDecayTime(getLfuDecayTime())
                .pubsubClientOutputBufferLimit(getPubsubClientOutputBufferLimit())
                .notifyKeyspaceEvents(getNotifyKeyspaceEvents())
                .persistence(getPersistence())
                .timeout(getTimeout())
                .aclChannelsDefault(getAclChannelsDefault())
                .numberOfDatabases(getNumberOfDatabases());
        builder.maxmemoryPolicy = internalGetMaxmemoryPolicy();
        return builder;
    }

    /**
     * Class to build instances of {@link RedisSettings}.
     */
    public static class Builder {
        private Boolean ssl = true;
        private Integer lfuLogFactor = 10;
        private OptionalNullable<RedisMaxmemoryPolicyEnum> maxmemoryPolicy =
                OptionalNullable.of(RedisMaxmemoryPolicyEnum.NOEVICTION);
        private Integer ioThreads;
        private Integer lfuDecayTime = 1;
        private Integer pubsubClientOutputBufferLimit;
        private String notifyKeyspaceEvents;
        private RedisPersistenceEnum persistence;
        private Integer timeout = 300;
        private DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum aclChannelsDefault;
        private Integer numberOfDatabases;



        /**
         * Setter for ssl.
         * @param  ssl  Boolean value for ssl.
         * @return Builder
         */
        public Builder ssl(Boolean ssl) {
            this.ssl = ssl;
            return this;
        }

        /**
         * Setter for lfuLogFactor.
         * @param  lfuLogFactor  Integer value for lfuLogFactor.
         * @return Builder
         */
        public Builder lfuLogFactor(Integer lfuLogFactor) {
            this.lfuLogFactor = lfuLogFactor;
            return this;
        }

        /**
         * Setter for maxmemoryPolicy.
         * @param  maxmemoryPolicy  RedisMaxmemoryPolicyEnum value for maxmemoryPolicy.
         * @return Builder
         */
        public Builder maxmemoryPolicy(RedisMaxmemoryPolicyEnum maxmemoryPolicy) {
            this.maxmemoryPolicy = OptionalNullable.of(maxmemoryPolicy);
            return this;
        }

        /**
         * UnSetter for maxmemoryPolicy.
         * @return Builder
         */
        public Builder unsetMaxmemoryPolicy() {
            maxmemoryPolicy = null;
            return this;
        }

        /**
         * Setter for ioThreads.
         * @param  ioThreads  Integer value for ioThreads.
         * @return Builder
         */
        public Builder ioThreads(Integer ioThreads) {
            this.ioThreads = ioThreads;
            return this;
        }

        /**
         * Setter for lfuDecayTime.
         * @param  lfuDecayTime  Integer value for lfuDecayTime.
         * @return Builder
         */
        public Builder lfuDecayTime(Integer lfuDecayTime) {
            this.lfuDecayTime = lfuDecayTime;
            return this;
        }

        /**
         * Setter for pubsubClientOutputBufferLimit.
         * @param  pubsubClientOutputBufferLimit  Integer value for pubsubClientOutputBufferLimit.
         * @return Builder
         */
        public Builder pubsubClientOutputBufferLimit(Integer pubsubClientOutputBufferLimit) {
            this.pubsubClientOutputBufferLimit = pubsubClientOutputBufferLimit;
            return this;
        }

        /**
         * Setter for notifyKeyspaceEvents.
         * @param  notifyKeyspaceEvents  String value for notifyKeyspaceEvents.
         * @return Builder
         */
        public Builder notifyKeyspaceEvents(String notifyKeyspaceEvents) {
            this.notifyKeyspaceEvents = notifyKeyspaceEvents;
            return this;
        }

        /**
         * Setter for persistence.
         * @param  persistence  RedisPersistenceEnum value for persistence.
         * @return Builder
         */
        public Builder persistence(RedisPersistenceEnum persistence) {
            this.persistence = persistence;
            return this;
        }

        /**
         * Setter for timeout.
         * @param  timeout  Integer value for timeout.
         * @return Builder
         */
        public Builder timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Setter for aclChannelsDefault.
         * @param  aclChannelsDefault  DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum
         *         value for aclChannelsDefault.
         * @return Builder
         */
        public Builder aclChannelsDefault(
                DefaultACLForPubSubChannelsUsedWhenRedisUserIsCreatedEnum aclChannelsDefault) {
            this.aclChannelsDefault = aclChannelsDefault;
            return this;
        }

        /**
         * Setter for numberOfDatabases.
         * @param  numberOfDatabases  Integer value for numberOfDatabases.
         * @return Builder
         */
        public Builder numberOfDatabases(Integer numberOfDatabases) {
            this.numberOfDatabases = numberOfDatabases;
            return this;
        }

        /**
         * Builds a new {@link RedisSettings} object using the set fields.
         * @return {@link RedisSettings}
         */
        public RedisSettings build() {
            return new RedisSettings(ssl, lfuLogFactor, maxmemoryPolicy, ioThreads, lfuDecayTime,
                    pubsubClientOutputBufferLimit, notifyKeyspaceEvents, persistence, timeout,
                    aclChannelsDefault, numberOfDatabases);
        }
    }
}
