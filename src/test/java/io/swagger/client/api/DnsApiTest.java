/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.DnsDomain;
import io.swagger.client.model.DnsDomainRecord;
import io.swagger.client.model.DnsdomainBody;
import io.swagger.client.model.DomainidRecordBody;
import io.swagger.client.model.InlineResponse20020;
import io.swagger.client.model.InlineResponse20025;
import io.swagger.client.model.InlineResponse2009;
import io.swagger.client.model.Operation;
import io.swagger.client.model.RecordRecordidBody;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DnsApi
 */
@Ignore
public class DnsApiTest {

    private final DnsApi api = new DnsApi();

    /**
     * Create DNS domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDnsDomainTest() {
        DnsdomainBody body = null;
        DnsDomain response = api.createDnsDomain(body);

        // TODO: test validations
    }
    /**
     * Create DNS domain record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDnsDomainRecordTest() {
        DomainidRecordBody body = null;
        UUID domainId = null;
        Operation response = api.createDnsDomainRecord(body, domainId);

        // TODO: test validations
    }
    /**
     * Delete DNS Domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnsDomainTest() {
        UUID id = null;
        Operation response = api.deleteDnsDomain(id);

        // TODO: test validations
    }
    /**
     * Delete DNS domain record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnsDomainRecordTest() {
        UUID domainId = null;
        UUID recordId = null;
        Operation response = api.deleteDnsDomainRecord(domainId, recordId);

        // TODO: test validations
    }
    /**
     * Retrieve DNS domain details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsDomainTest() {
        UUID id = null;
        DnsDomain response = api.getDnsDomain(id);

        // TODO: test validations
    }
    /**
     * Retrieve DNS domain record details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsDomainRecordTest() {
        UUID domainId = null;
        UUID recordId = null;
        DnsDomainRecord response = api.getDnsDomainRecord(domainId, recordId);

        // TODO: test validations
    }
    /**
     * Retrieve DNS domain zone file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsDomainZoneFileTest() {
        UUID id = null;
        InlineResponse20025 response = api.getDnsDomainZoneFile(id);

        // TODO: test validations
    }
    /**
     * List DNS domain records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDnsDomainRecordsTest() {
        UUID domainId = null;
        InlineResponse2009 response = api.listDnsDomainRecords(domainId);

        // TODO: test validations
    }
    /**
     * List DNS domains
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDnsDomainsTest() {
        InlineResponse20020 response = api.listDnsDomains();

        // TODO: test validations
    }
    /**
     * Update DNS domain record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDnsDomainRecordTest() {
        RecordRecordidBody body = null;
        UUID domainId = null;
        UUID recordId = null;
        Operation response = api.updateDnsDomainRecord(body, domainId, recordId);

        // TODO: test validations
    }
}
