/*
 * Exoscale Public API
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://openapi-v2.exoscale.com/source.json) * [YAML format](https://openapi-v2.exoscale.com/source.yaml)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: api@exoscale.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Extra information regarding the progress for current state
 */
@Schema(description = "Extra information regarding the progress for current state")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-08T17:23:40.261901+01:00[Europe/Vienna]")

public class DbaasNodeStateProgressUpdate {
  @JsonProperty("completed")
  private Boolean completed = null;

  @JsonProperty("current")
  private Long current = null;

  @JsonProperty("max")
  private Long max = null;

  @JsonProperty("min")
  private Long min = null;

  /**
   * Key identifying this phase
   */
  public enum PhaseEnum {
    STREAM("stream"),
    BASEBACKUP("basebackup"),
    PREPARE("prepare"),
    FINALIZE("finalize");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PhaseEnum fromValue(String input) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("phase")
  private PhaseEnum phase = null;

  @JsonProperty("unit")
  private String unit = null;

  public DbaasNodeStateProgressUpdate completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

   /**
   * Indicates whether this phase has been completed or not
   * @return completed
  **/
  @Schema(required = true, description = "Indicates whether this phase has been completed or not")
  public Boolean isCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }

  public DbaasNodeStateProgressUpdate current(Long current) {
    this.current = current;
    return this;
  }

   /**
   * Current progress for this phase. May be missing or null.
   * minimum: 0
   * @return current
  **/
  @Schema(description = "Current progress for this phase. May be missing or null.")
  public Long getCurrent() {
    return current;
  }

  public void setCurrent(Long current) {
    this.current = current;
  }

  public DbaasNodeStateProgressUpdate max(Long max) {
    this.max = max;
    return this;
  }

   /**
   * Maximum progress value for this phase. May be missing or null. May change.
   * minimum: 0
   * @return max
  **/
  @Schema(description = "Maximum progress value for this phase. May be missing or null. May change.")
  public Long getMax() {
    return max;
  }

  public void setMax(Long max) {
    this.max = max;
  }

  public DbaasNodeStateProgressUpdate min(Long min) {
    this.min = min;
    return this;
  }

   /**
   * Minimum progress value for this phase. May be missing or null.
   * minimum: 0
   * @return min
  **/
  @Schema(description = "Minimum progress value for this phase. May be missing or null.")
  public Long getMin() {
    return min;
  }

  public void setMin(Long min) {
    this.min = min;
  }

  public DbaasNodeStateProgressUpdate phase(PhaseEnum phase) {
    this.phase = phase;
    return this;
  }

   /**
   * Key identifying this phase
   * @return phase
  **/
  @Schema(required = true, description = "Key identifying this phase")
  public PhaseEnum getPhase() {
    return phase;
  }

  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }

  public DbaasNodeStateProgressUpdate unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * Unit for current/min/max values. New units may be added.                         If null should be treated as generic unit
   * @return unit
  **/
  @Schema(description = "Unit for current/min/max values. New units may be added.                         If null should be treated as generic unit")
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbaasNodeStateProgressUpdate dbaasNodeStateProgressUpdate = (DbaasNodeStateProgressUpdate) o;
    return Objects.equals(this.completed, dbaasNodeStateProgressUpdate.completed) &&
        Objects.equals(this.current, dbaasNodeStateProgressUpdate.current) &&
        Objects.equals(this.max, dbaasNodeStateProgressUpdate.max) &&
        Objects.equals(this.min, dbaasNodeStateProgressUpdate.min) &&
        Objects.equals(this.phase, dbaasNodeStateProgressUpdate.phase) &&
        Objects.equals(this.unit, dbaasNodeStateProgressUpdate.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completed, current, max, min, phase, unit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbaasNodeStateProgressUpdate {\n");
    
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
